name: Tests / Code Coverage
#  Tests / Code Coverage workflow runs unit tests and uploads a code coverage report


#  This workflow is run on pushes to master & every Pull Request,
#  if no *.go, go.mod or go.sum file is changed it will pass without running as these are required checks
on:
  pull_request:
  push:
    branches:
      - main


jobs:
  #  This action cleans up previously running instances of a workflow on the same branch. This accomplishes
  #  the task of automatically cancelling CI runs on pushes to the same branch, which is a common feature in
  #  most CI systems but currently not possible with GitHub actions.
  cleanup-runs:
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main'"
    runs-on: ubuntu-latest
    steps:
    - uses: rokroskar/workflow-run-cleanup-action@v0.3.3
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"


  setup-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: technote-space/get-diff-action@v6.0.1
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - name: Define file prefix
        id: file-prefix
        run: echo "::set-output name=file-prefix::${GITHUB_SHA:0:7}-${GITHUB_RUN_ATTEMPT}"
      - name: Create a file with all the pkgs
        run: go list ./... > pkgs.txt
      - name: Split pkgs into 4 files
        run: split -d -n l/4 pkgs.txt pkgs.txt.part.
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ steps.file-prefix.outputs.file-prefix }}-00"
          path: ./pkgs.txt.part.00
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ steps.file-prefix.outputs.file-prefix }}-01"
          path: ./pkgs.txt.part.01
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ steps.file-prefix.outputs.file-prefix }}-02"
          path: ./pkgs.txt.part.02
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ steps.file-prefix.outputs.file-prefix }}-03"
          path: ./pkgs.txt.part.03
    outputs:
      should-run: ${{ env.GIT_DIFF }}
      file-prefix: ${{ steps.file-prefix.outputs.file-prefix }}


  tests:
    needs: setup-tests
    # Note: There's a required check on this, and it must pass. A skip doesn't count as a pass.
    #       So instead of a job-level if: needs.setup-tests.outputs.should-run on this job,
    #       it's in the steps below (except the checkout step).
    strategy:
      fail-fast: false
      matrix:
        part: ["00", "01", "02", "03"]
    runs-on: ubuntu-latest
    env:
      LD_LIBRARY_PATH: /usr/local/lib:/usr/local/lib/x86_64-linux-gnu
    steps:
      - uses: actions/checkout@v3
        with:
          # CodeCov requires fetch-depth > 1
          fetch-depth: 2
      - name: Build and install cleveldb
        run: make cleveldb
      - uses: actions/setup-go@v3
        if: needs.setup-tests.outputs.should-run
        with:
          go-version: 1.17
      - uses: actions/download-artifact@v3
        if: needs.setup-tests.outputs.should-run
        with:
          name: "${{ needs.setup-tests.outputs.file-prefix }}-${{ matrix.part }}"
      - name: test & coverage report creation
        if: needs.setup-tests.outputs.should-run
        run: |
          cat pkgs.txt.part.${{ matrix.part }} | xargs go test -mod=readonly -timeout 30m -coverprofile=${{ matrix.part }}profile.out -covermode=atomic -tags='norace ledger test_ledger_mock cleveldb'
      - uses: actions/upload-artifact@v3
        if: needs.setup-tests.outputs.should-run
        with:
          name: "${{ needs.setup-tests.outputs.file-prefix }}-${{ matrix.part }}-coverage"
          path: ./${{ matrix.part }}profile.out


  #  This action performs a code coverage assessment but filters out generated code from proto based types
  #  and grpc services
  upload-coverage-report:
    needs: [setup-tests, tests]
    # Note: There's a required check on this, and it must pass. A skip doesn't count as a pass.
    #       So instead of a job-level if: needs.setup-tests.outputs.should-run on this job,
    #       it's in the steps below (except the checkout step).
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # CodeCov requires fetch-depth > 1
          fetch-depth: 2
      - uses: actions/download-artifact@v3
        if: needs.setup-tests.outputs.should-run
        with:
          name: "${{ needs.setup-tests.outputs.file-prefix }}-00-coverage"
      - uses: actions/download-artifact@v3
        if: needs.setup-tests.outputs.should-run
        with:
          name: "${{ needs.setup-tests.outputs.file-prefix }}-01-coverage"
      - uses: actions/download-artifact@v3
        if: needs.setup-tests.outputs.should-run
        with:
          name: "${{ needs.setup-tests.outputs.file-prefix }}-02-coverage"
      - uses: actions/download-artifact@v3
        if: needs.setup-tests.outputs.should-run
        with:
          name: "${{ needs.setup-tests.outputs.file-prefix }}-03-coverage"
      - name: Combine profiles
        if: needs.setup-tests.outputs.should-run
        run: |
          cat ./*profile.out | grep -v "mode: atomic" >> coverage.txt
      - name: filter out DONTCOVER
        if: needs.setup-tests.outputs.should-run
        run: |
          excludelist="$(find ./ -type f -name '*.go' | xargs grep -l 'DONTCOVER')"
          excludelist+=" $(find ./ -type f -name '*.pb.go')"
          excludelist+=" $(find ./ -type f -name '*.pb.gw.go')"
          excludelist+=" $(find ./ -type f -path './tests/mocks/*.go')"
          for filename in ${excludelist}; do
            filename=$(echo $filename | sed 's/^./github.com\/cosmos\/cosmos-sdk/g')
            echo "Excluding ${filename} from coverage report..."
            sed -i.bak "/$(echo $filename | sed 's/\//\\\//g')/d" coverage.txt
          done
      - uses: codecov/codecov-action@v3
        if: needs.setup-tests.outputs.should-run
        with:
          file: ./coverage.txt


  test-race:
    needs: setup-tests
    # Note: There's a required check on this, and it must pass. A skip doesn't count as a pass.
    #       So instead of a job-level if: needs.setup-tests.outputs.should-run on this job,
    #       it's in the steps below (except the checkout step).
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        part: ["00", "01", "02", "03"]
    env:
      LD_LIBRARY_PATH: /usr/local/lib:/usr/local/lib/x86_64-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - name: Build and install cleveldb
        run: make cleveldb
      - uses: actions/setup-go@v3
        if: needs.setup-tests.outputs.should-run
        with:
          go-version: 1.17
      - uses: actions/download-artifact@v3
        if: needs.setup-tests.outputs.should-run
        with:
          name: "${{ needs.setup-tests.outputs.file-prefix }}-${{ matrix.part }}"
      - name: test & coverage report creation
        if: needs.setup-tests.outputs.should-run
        run: |
          xargs --arg-file=pkgs.txt.part.${{ matrix.part }} go test -mod=readonly -timeout 30m -race -tags='cgo ledger test_ledger_mock cleveldb' | tee ${{ matrix.part }}-race-output.txt
          exit "${PIPESTATUS[0]}"
      - uses: actions/upload-artifact@v3
        if: needs.setup-tests.outputs.should-run
        with:
          name: "${{ needs.setup-tests.outputs.file-prefix }}-${{ matrix.part }}-race-output"
          path: ./${{ matrix.part }}-race-output.txt
