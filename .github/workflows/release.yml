name: Provenance Build and Release

on:
  pull_request:
    paths:
      - "**.go"
      - "go.mod"
      - "go.sum"
      - "**.mk"
      - "Makefile"
      - "gon.json"
      - "scripts/**"
      - ".github/workflows/release.yml"
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"     # Push events to matching v*, i.e. v1.0, v20.15.10
      - "v[0-9]+.[0-9]+.[0-9]+-rc*" # Push events to matching v*, i.e. v1.0-rc1, v20.15.10-rc5

jobs:
  #  This action cleans up previously running instances of a workflow on the same branch. This accomplishes
  #  the task of automatically cancelling CI runs on pushes to the same branch, which is a common feature in
  #  most CI systems but currently not possible with GitHub actions.
  cleanup-runs:
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main'"
    runs-on: ubuntu-latest
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.3
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  build_init:
    runs-on: ubuntu-latest
    name: Build Init
    steps:
      - name: Define Variables
        id: vars
        # ${GITHUB_REF##*/} removes everything before the last slash. E.g. 'refs/tags/v1.8.0' becomes 'v1.8.0'
        # ${GITHUB_SHA:0:7} gets the first 7 characters. E.g. `3e9928920f5a64c8fc4884ee085efe1983071c90` becomes `3e99289'
        run: |
          version="${GITHUB_SHA:0:7}"
          is_release='false'
          if [[ "$GITHUB_REF" =~ ^refs/tags/ ]]; then
            version=${GITHUB_REF##*/}
            is_release='true'
          fi
          prerelease=false
          if [[ "$version" =~ -rc ]]; then
            prerelease=true
          fi
          echo "version: '$version'"
          echo "is_release: $is_release"
          echo "prerelease: $prerelease"
          echo "::set-output name=version::$version"
          echo "::set-output name=is_release::$is_release"
          echo "::set-output name=prerelease::$prerelease"
    outputs:
      version: ${{ steps.vars.outputs.version }}
      is_release: ${{ steps.vars.outputs.is_release }}
      prerelease: ${{ steps.vars.outputs.prerelease }}
      go_version: "1.17"

  build_osx:
    runs-on: macos-latest
    needs:
      - build_init
    name: Build OSX
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install osx tools
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.build_init.outputs.go_version }}
      - name: Build osx binary
        run: |
          make WITH_CLEVELDB=false WITH_ROCKSDB=false VERSION=${{ needs.build_init.outputs.version }} build-release-bin build-release-libwasm
      - name: Provenanced version
        run: build/provenanced version --long
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CODESIGNING_P12_BASE64 }}
          p12-password: ${{ secrets.CODESIGNING_P12_PASSWORD }}
      - name: Sign the mac binaries with Gon
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
          gon -log-level=info -log-json ./gon.json
      - name: Fix zip structure for cosmovisor
        run: |
          make VERSION=${{ needs.build_init.outputs.version }} build-release-rezip
      - uses: actions/upload-artifact@v3
        with:
          name: osx-zip
          path: build/*.zip

  build_linux:
    runs-on: ubuntu-latest
    needs:
      - build_init
    name: Build Linux
    env:
      LD_LIBRARY_PATH: /usr/local/lib:/usr/local/lib/x86_64-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.build_init.outputs.go_version }}
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev
      - name: Build and install cleveldb
        run: make cleveldb
      - name: Setup go
        uses: actions/setup-go@v2.1.5
        with:
          go-version: ${{ needs.build_init.outputs.go_version }}
      - name: Build linux binary
        run: |
          export VERSION=${{ needs.build_init.outputs.version }}
          export WITH_CLEVELDB=true
          make build-release-zip
      - name: Provenanced version
        run: build/provenanced version --long
      - uses: actions/upload-artifact@v3
        with:
          name: linux-zip
          path: build/*.zip

  create_release:
    needs:
      - build_init
      - build_osx
      - build_linux
    if: needs.build_init.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    name: Create Release
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create release ${{ needs.build_init.outputs.version }}
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: ${{ needs.build_init.outputs.prerelease }}
          body_path: RELEASE_CHANGELOG.md
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}

  update_release:
    needs:
      - build_init
      - create_release
    if: needs.build_init.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    name: Attach Release Artifacts
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.build_init.outputs.go_version }}
      -
        name: Download linux zip artifact
        uses: actions/download-artifact@v3
        with:
          name: linux-zip
          path: build/
      -
        name: Download osx zip artifact
        uses: actions/download-artifact@v3
        with:
          name: osx-zip
          path: build/
      -
        name: Create release items
        run: |
          make VERSION=${{ needs.build_init.outputs.version }} build-release-checksum build-release-plan build-release-proto
      -
        name: Upload osx zip artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_url }}
          asset_path: ./build/provenance-darwin-amd64-${{ needs.build_init.outputs.version }}.zip
          asset_name: provenance-darwin-amd64-${{ needs.build_init.outputs.version }}.zip
          asset_content_type: application/octet-stream
      -
        name: Upload linux zip artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_url }}
          asset_path: ./build/provenance-linux-amd64-${{ needs.build_init.outputs.version }}.zip
          asset_name: provenance-linux-amd64-${{ needs.build_init.outputs.version }}.zip
          asset_content_type: application/octet-stream
      -
        name: Upload release checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_url }}
          asset_path: ./build/sha256sum.txt
          asset_name: sha256sum.txt
          asset_content_type: application/octet-stream
      -
        name: Upload release plan
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_url }}
          asset_path: ./build/plan-${{ needs.build_init.outputs.version }}.json
          asset_name: plan-${{ needs.build_init.outputs.version }}.json
          asset_content_type: application/octet-stream
      -
        name: Upload release protos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_url }}
          asset_path: ./build/protos-${{ needs.build_init.outputs.version }}.zip
          asset_name: protos-${{ needs.build_init.outputs.version }}.zip
          asset_content_type: application/octet-stream

  java_kotlin_release:
    needs:
      - build_init
    if: needs.build_init.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    name: Java/Kotlin Proto Publishing
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Java Setup
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          server-id: github

      - name: GPG Setup
        env:
          GPG_KEY: ${{ secrets.OSSRH_GPG_SECRET_KEY }}
        run: |
          export GPG_TTY=$(tty)
          echo -n "$GPG_KEY" | base64 --decode | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
          echo -n "$GPG_KEY" | base64 --decode > $GITHUB_WORKSPACE/release.gpg

      - name: Build and Publish
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          GPG_PASSWORD: ${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}
        run: |
          cd protoBindings
          ./gradlew publish $(if [ "${{ needs.build_init.outputs.prerelease }}" = "true" ]; then echo 'closeSonatypeStagingRepository'; else echo 'closeAndReleaseSonatypeStagingRepository'; fi) \
            -PartifactVersion=$(echo "${{ needs.build_init.outputs.version }}" | sed -e 's/^v//') \
            -Psigning.keyId=B7D30ABE \
            -Psigning.password="${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}" \
            -Psigning.secretKeyRingFile=$GITHUB_WORKSPACE/release.gpg \
            --info
