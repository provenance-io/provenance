name: Provenance Binary Release

on:
  push:
#    tags:
#      - "v[0-9]+.[0-9]+.[0-9]+"     # Push events to matching v*, i.e. v1.0, v20.15.10
#      - "v[0-9]+.[0-9]+.[0-9]+-rc*" # Push events to matching v*, i.e. v1.0-rc1, v20.15.10-rc5
    branches:
      - "mtps/darwin-builds"

jobs:
  #  This action cleans up previously running instances of a workflow on the same branch. This accomplishes
  #  the task of automatically cancelling CI runs on pushes to the same branch, which is a common feature in
  #  most CI systems but currently not possible with GitHub actions.
  cleanup_runs:
    runs-on: ubuntu-latest
    name: Cleanup Workflows
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.2
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main'"

  build_init:
    runs-on: ubuntu-latest
    name: Build Init
    steps:
      - id: version
        run: echo "::set-output name=version::${GITHUB_REF##*/}"
    outputs:
      version: ${{ steps.version.outputs.version }}
      go_version: "1.15"

  build_osx:
    runs-on: macos-latest
    needs:
      - build_init
    name: Build OSX
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install osx tools
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon
      - name: Setup go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ needs.build_init.outputs.go_version }}
      - name: Build osx binary
        run: |
          make WITH_CLEVELDB=no VERSION=${{ needs.build_init.outputs.version }} build-release-zip
      - uses: actions/upload-artifact@v2
        with:
          name: osx-zip
          path: build/

  build_linux:
    runs-on: ubuntu-latest
    needs:
      - build_init
    name: Build Linux
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ needs.build_init.outputs.go_version }}
      - name: Build linux binary
        run: |
          make WITH_CLEVELDB=no VERSION=${{ needs.build_init.outputs.version }} build-release-zip
      - uses: actions/upload-artifact@v2
        with:
          name: linux-zip
          path: build/

#  build_linux_cleveldb:
#    runs-on: ubuntu-latest
#    needs:
#      - build_init
#    name: Build Linux
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#      - uses: actions/checkout@v2
#      - name: Install leveldb
#        env:
#          DEBIAN_FRONTEND: noninteractive
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y libleveldb-dev
#      - name: Setup go
#        uses: actions/setup-go@v1
#        with:
#          go-version: ${{ needs.build_init.outputs.go_version }}
#      - name: Build linux binary
#        run: |
#          make VERSION=${{ needs.build_init.outputs.version }} build
#      - uses: actions/upload-artifact@v2
#        with:
#          name: linux-cleveldb-zip
#          path: build/

  create_release:
    runs-on: ubuntu-latest
    needs:
      - build_init
      - build_osx
      - build_linux
#      - build_linux_cleveldb
    name: Create Release
    steps:
      - name: Create release ${{ needs.build_init.outputs.version }}
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: true
          # body_path: RELEASE_CHANGELOG.md
          body: Testing
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}

  update_release:
    runs-on: ubuntu-latest
    needs:
      - build_init
      - create_release
    name: Attach Release Artifacts
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Download osx zip
        uses: actions/download-artifact@v2
        with:
          name: osx-zip
          path: build/
      -
        name: Download linux zip
        uses: actions/download-artifact@v2
        with:
          name: linux-zip
          path: build/
#      -
#        name: Download linux cleveldb zip
#        uses: actions/download-artifact@v2
#        with:
#          name: linux-cleveldb-zip
#          path: build/
      -
        name: Create shasums
        run: |
          make VERSION=${{ needs.build_init.outputs.version }} build-release-checksum
      -
        name: Upload release checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_url }}
          asset_path: ./build/sha256sum.txt
          asset_name: sha256sum.txt
          asset_content_type: application/octet-stream
      - name: Create plan
        run: |
          make VERSION=${{ needs.build_init.outputs.version }} build-release-plan
      -
        name: Upload release plan
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_url }}
          asset_path: ./build/plan-${{ needs.build_init.outputs.version }}.json
          asset_name: plan-${{ needs.build_init.outputs.version }}.json
          asset_content_type: application/octet-stream
      -
        name: Upload release protos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_url }}
          asset_path: ./build/protos-${{ needs.build_init.outputs.version }}.zip
          asset_name: protos-${{ needs.build_init.outputs.version }}.zip
          asset_content_type: application/octet-stream
      -
        name: Upload release osx-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_url }}
          asset_path: ./build/provenance-darwin-amd64-${{ needs.build_init.outputs.version }}.zip
          asset_name: provenance-darwin-amd64-${{ needs.build_init.outputs.version }}.zip
          asset_content_type: application/octet-stream
      -
        name: Upload release linux-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_url }}
          asset_path: ./build/provenance-darwin-amd64-${{ needs.build_init.outputs.version }}.zip
          asset_name: provenance-darwin-amd64-${{ needs.build_init.outputs.version }}.zip
          asset_content_type: application/octet-stream
#      -
#        name: Upload release linux-cleveldb-zip
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./build/provenance-linux-amd64-${{ needs.build_init.outputs.version }}.zip
#          asset_name: provenance-linux-amd64-leveldb-${{ needs.build_init.outputs.version }}.zip
#          asset_content_type: application/octet-stream

