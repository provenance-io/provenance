swagger: '2.0'
info:
  title: Provenance Blockchain
  description: Provenance Blockchain Node Application
  version: 1.13.0
paths:
  /cosmos/auth/v1beta1/accounts:
    get:
      summary: Accounts returns all the existing accounts
      description: 'Since: cosmos-sdk 0.43'
      operationId: Accounts
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              accounts:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                title: accounts are the existing accounts
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAccountsResponse is the response type for the Query/Accounts
              RPC method.


              Since: cosmos-sdk 0.43
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/auth/v1beta1/accounts/{address}':
    get:
      summary: Account returns account details based on address.
      operationId: Account
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: >-
              QueryAccountResponse is the response type for the Query/Account
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address defines the address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/auth/v1beta1/address_by_id/{id}':
    get:
      summary: AccountAddressByID returns account address based on account number.
      description: 'Since: cosmos-sdk 0.46.2'
      operationId: AccountAddressByID
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account_address:
                type: string
            description: 'Since: cosmos-sdk 0.46.2'
            title: >-
              QueryAccountAddressByIDResponse is the response type for
              AccountAddressByID rpc method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: id
          description: |-
            id is the account number of the address to be queried. This field
            should have been an uint64 (like all account numbers), and will be
            updated to uint64 in a future version of the auth query.
          in: path
          required: true
          type: string
          format: int64
      tags:
        - Query
  /cosmos/auth/v1beta1/bech32:
    get:
      summary: Bech32Prefix queries bech32Prefix
      description: 'Since: cosmos-sdk 0.46'
      operationId: Bech32Prefix
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              bech32_prefix:
                type: string
            description: >-
              Bech32PrefixResponse is the response type for Bech32Prefix rpc
              method.


              Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  '/cosmos/auth/v1beta1/bech32/{address_bytes}':
    get:
      summary: AddressBytesToString converts Account Address bytes to string
      description: 'Since: cosmos-sdk 0.46'
      operationId: AddressBytesToString
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              address_string:
                type: string
            description: >-
              AddressBytesToStringResponse is the response type for
              AddressString rpc method.


              Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address_bytes
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/cosmos/auth/v1beta1/bech32/{address_string}':
    get:
      summary: AddressStringToBytes converts Address string to bytes
      description: 'Since: cosmos-sdk 0.46'
      operationId: AddressStringToBytes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              address_bytes:
                type: string
                format: byte
            description: >-
              AddressStringToBytesResponse is the response type for AddressBytes
              rpc method.


              Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address_string
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/auth/v1beta1/module_accounts:
    get:
      summary: ModuleAccounts returns all the existing module accounts.
      description: 'Since: cosmos-sdk 0.46'
      operationId: ModuleAccounts
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              accounts:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
            description: >-
              QueryModuleAccountsResponse is the response type for the
              Query/ModuleAccounts RPC method.


              Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  '/cosmos/auth/v1beta1/module_accounts/{name}':
    get:
      summary: ModuleAccountByName returns the module account info by module name
      operationId: ModuleAccountByName
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: >-
              QueryModuleAccountByNameResponse is the response type for the
              Query/ModuleAccountByName RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: name
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/auth/v1beta1/params:
    get:
      summary: Params queries all parameters.
      operationId: AuthParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  max_memo_characters:
                    type: string
                    format: uint64
                  tx_sig_limit:
                    type: string
                    format: uint64
                  tx_size_cost_per_byte:
                    type: string
                    format: uint64
                  sig_verify_cost_ed25519:
                    type: string
                    format: uint64
                  sig_verify_cost_secp256k1:
                    type: string
                    format: uint64
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  '/cosmos/bank/v1beta1/balances/{address}':
    get:
      summary: AllBalances queries the balance of all coins for a single account.
      operationId: AllBalances
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balances:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                description: balances is the balances of all the coins.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllBalancesResponse is the response type for the
              Query/AllBalances RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          description: address is the address to query balances for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/bank/v1beta1/balances/{address}/by_denom':
    get:
      summary: Balance queries the balance of a single coin for a single account.
      operationId: Balance
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balance:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            description: >-
              QueryBalanceResponse is the response type for the Query/Balance
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          description: address is the address to query balances for.
          in: path
          required: true
          type: string
        - name: denom
          description: denom is the coin denom to query balances for.
          in: query
          required: false
          type: string
      tags:
        - Query
  '/cosmos/bank/v1beta1/denom_owners/{denom}':
    get:
      summary: >-
        DenomOwners queries for all account addresses that own a particular
        token

        denomination.
      description: 'Since: cosmos-sdk 0.46'
      operationId: DenomOwners
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              denom_owners:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      description: >-
                        address defines the address that owns a particular
                        denomination.
                    balance:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  description: >-
                    DenomOwner defines structure representing an account that
                    owns or holds a

                    particular denominated token. It contains the account
                    address and account

                    balance of the denominated token.


                    Since: cosmos-sdk 0.46
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryDenomOwnersResponse defines the RPC response of a DenomOwners
              RPC query.


              Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          description: >-
            denom defines the coin denomination to query all account holders
            for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/bank/v1beta1/denoms_metadata:
    get:
      summary: |-
        DenomsMetadata queries the client metadata for all registered coin
        denominations.
      operationId: DenomsMetadata
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              metadatas:
                type: array
                items:
                  type: object
                  properties:
                    description:
                      type: string
                    denom_units:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                            description: >-
                              denom represents the string name of the given
                              denom unit (e.g uatom).
                          exponent:
                            type: integer
                            format: int64
                            description: >-
                              exponent represents power of 10 exponent that one
                              must

                              raise the base_denom to in order to equal the
                              given DenomUnit's denom

                              1 denom = 10^exponent base_denom

                              (e.g. with a base_denom of uatom, one can create a
                              DenomUnit of 'atom' with

                              exponent = 6, thus: 1 atom = 10^6 uatom).
                          aliases:
                            type: array
                            items:
                              type: string
                            title: >-
                              aliases is a list of string aliases for the given
                              denom
                        description: |-
                          DenomUnit represents a struct that describes a given
                          denomination unit of the basic token.
                      title: >-
                        denom_units represents the list of DenomUnit's for a
                        given coin
                    base:
                      type: string
                      description: >-
                        base represents the base denom (should be the DenomUnit
                        with exponent = 0).
                    display:
                      type: string
                      description: |-
                        display indicates the suggested denom that should be
                        displayed in clients.
                    name:
                      type: string
                      description: 'Since: cosmos-sdk 0.43'
                      title: 'name defines the name of the token (eg: Cosmos Atom)'
                    symbol:
                      type: string
                      description: >-
                        symbol is the token symbol usually shown on exchanges
                        (eg: ATOM). This can

                        be the same as the display.


                        Since: cosmos-sdk 0.43
                    uri:
                      type: string
                      description: >-
                        URI to a document (on or off-chain) that contains
                        additional information. Optional.


                        Since: cosmos-sdk 0.46
                    uri_hash:
                      type: string
                      description: >-
                        URIHash is a sha256 hash of a document pointed by URI.
                        It's used to verify that

                        the document didn't change. Optional.


                        Since: cosmos-sdk 0.46
                  description: |-
                    Metadata represents a struct that describes
                    a basic token.
                description: >-
                  metadata provides the client information for all the
                  registered tokens.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryDenomsMetadataResponse is the response type for the
              Query/DenomsMetadata RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/bank/v1beta1/denoms_metadata/{denom}':
    get:
      summary: DenomsMetadata queries the client metadata of a given coin denomination.
      operationId: DenomMetadata
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              metadata:
                type: object
                properties:
                  description:
                    type: string
                  denom_units:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          description: >-
                            denom represents the string name of the given denom
                            unit (e.g uatom).
                        exponent:
                          type: integer
                          format: int64
                          description: >-
                            exponent represents power of 10 exponent that one
                            must

                            raise the base_denom to in order to equal the given
                            DenomUnit's denom

                            1 denom = 10^exponent base_denom

                            (e.g. with a base_denom of uatom, one can create a
                            DenomUnit of 'atom' with

                            exponent = 6, thus: 1 atom = 10^6 uatom).
                        aliases:
                          type: array
                          items:
                            type: string
                          title: >-
                            aliases is a list of string aliases for the given
                            denom
                      description: |-
                        DenomUnit represents a struct that describes a given
                        denomination unit of the basic token.
                    title: >-
                      denom_units represents the list of DenomUnit's for a given
                      coin
                  base:
                    type: string
                    description: >-
                      base represents the base denom (should be the DenomUnit
                      with exponent = 0).
                  display:
                    type: string
                    description: |-
                      display indicates the suggested denom that should be
                      displayed in clients.
                  name:
                    type: string
                    description: 'Since: cosmos-sdk 0.43'
                    title: 'name defines the name of the token (eg: Cosmos Atom)'
                  symbol:
                    type: string
                    description: >-
                      symbol is the token symbol usually shown on exchanges (eg:
                      ATOM). This can

                      be the same as the display.


                      Since: cosmos-sdk 0.43
                  uri:
                    type: string
                    description: >-
                      URI to a document (on or off-chain) that contains
                      additional information. Optional.


                      Since: cosmos-sdk 0.46
                  uri_hash:
                    type: string
                    description: >-
                      URIHash is a sha256 hash of a document pointed by URI.
                      It's used to verify that

                      the document didn't change. Optional.


                      Since: cosmos-sdk 0.46
                description: |-
                  Metadata represents a struct that describes
                  a basic token.
            description: >-
              QueryDenomMetadataResponse is the response type for the
              Query/DenomMetadata RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          description: denom is the coin denom to query the metadata for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/bank/v1beta1/params:
    get:
      summary: Params queries the parameters of x/bank module.
      operationId: BankParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  send_enabled:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        enabled:
                          type: boolean
                      description: >-
                        SendEnabled maps coin denom to a send_enabled status
                        (whether a denom is

                        sendable).
                    description: >-
                      Deprecated: Use of SendEnabled in params is deprecated.

                      For genesis, use the newly added send_enabled field in the
                      genesis object.

                      Storage, lookup, and manipulation of this information is
                      now in the keeper.


                      As of cosmos-sdk 0.47, this only exists for backwards
                      compatibility of genesis files.
                  default_send_enabled:
                    type: boolean
                description: Params defines the parameters for the bank module.
            description: >-
              QueryParamsResponse defines the response type for querying x/bank
              parameters.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/bank/v1beta1/send_enabled:
    get:
      summary: SendEnabled queries for SendEnabled entries.
      description: >-
        This query only returns denominations that have specific SendEnabled
        settings.

        Any denomination that does not have a specific setting will use the
        default

        params.default_send_enabled, and will not be returned by this query.


        Since: cosmos-sdk 0.47
      operationId: SendEnabled
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              send_enabled:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    enabled:
                      type: boolean
                  description: >-
                    SendEnabled maps coin denom to a send_enabled status
                    (whether a denom is

                    sendable).
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QuerySendEnabledResponse defines the RPC response of a SendEnable
              query.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denoms
          description: >-
            denoms is the specific denoms you want look up. Leave empty to get
            all entries.
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/bank/v1beta1/spendable_balances/{address}':
    get:
      summary: |-
        SpendableBalances queries the spenable balance of all coins for a single
        account.
      description: 'Since: cosmos-sdk 0.46'
      operationId: SpendableBalances
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balances:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                description: balances is the spendable balances of all the coins.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QuerySpendableBalancesResponse defines the gRPC response structure
              for querying

              an account's spendable balances.


              Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          description: address is the address to query spendable balances for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/bank/v1beta1/supply:
    get:
      summary: TotalSupply queries the total supply of all coins.
      operationId: TotalSupply
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              supply:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: supply is the supply of the coins
              pagination:
                description: |-
                  pagination defines the pagination in the response.

                  Since: cosmos-sdk 0.43
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: >-
              QueryTotalSupplyResponse is the response type for the
              Query/TotalSupply RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/bank/v1beta1/supply/by_denom:
    get:
      summary: SupplyOf queries the supply of a single coin.
      operationId: SupplyOf
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            description: >-
              QuerySupplyOfResponse is the response type for the Query/SupplyOf
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          description: denom is the coin denom to query balances for.
          in: query
          required: false
          type: string
      tags:
        - Query
  /cosmos/base/tendermint/v1beta1/abci_query:
    get:
      summary: >-
        ABCIQuery defines a query handler that supports ABCI queries directly to

        the application, bypassing Tendermint completely. The ABCI query must

        contain a valid and supported path, including app, custom, p2p, and
        store.
      description: 'Since: cosmos-sdk 0.46'
      operationId: ABCIQuery
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int64
              log:
                type: string
              info:
                type: string
              index:
                type: string
                format: int64
              key:
                type: string
                format: byte
              value:
                type: string
                format: byte
              proof_ops:
                type: object
                properties:
                  ops:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        key:
                          type: string
                          format: byte
                        data:
                          type: string
                          format: byte
                      description: >-
                        ProofOp defines an operation used for calculating Merkle
                        root. The data could

                        be arbitrary format, providing nessecary data for
                        example neighbouring node

                        hash.


                        Note: This type is a duplicate of the ProofOp proto type
                        defined in

                        Tendermint.
                description: >-
                  ProofOps is Merkle proof defined by the list of ProofOps.


                  Note: This type is a duplicate of the ProofOps proto type
                  defined in

                  Tendermint.
              height:
                type: string
                format: int64
              codespace:
                type: string
            description: >-
              ABCIQueryResponse defines the response structure for the ABCIQuery
              gRPC

              query.


              Note: This type is a duplicate of the ResponseQuery proto type
              defined in

              Tendermint.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: data
          in: query
          required: false
          type: string
          format: byte
        - name: path
          in: query
          required: false
          type: string
        - name: height
          in: query
          required: false
          type: string
          format: int64
        - name: prove
          in: query
          required: false
          type: boolean
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/blocks/latest:
    get:
      summary: GetLatestBlock returns the latest block.
      operationId: GetLatestBlock
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              block:
                title: 'Deprecated: please use `sdk_block` instead'
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                    description: Header defines the structure of a block header.
                  data:
                    type: object
                    properties:
                      txs:
                        type: array
                        items:
                          type: string
                          format: byte
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                    title: >-
                      Data contains the set of transactions included in the
                      block
                  evidence:
                    type: object
                    properties:
                      evidence:
                        type: array
                        items:
                          type: object
                          properties:
                            duplicate_vote_evidence:
                              type: object
                              properties:
                                vote_a:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                vote_b:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                total_voting_power:
                                  type: string
                                  format: int64
                                validator_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                            light_client_attack_evidence:
                              type: object
                              properties:
                                conflicting_block:
                                  type: object
                                  properties:
                                    signed_header:
                                      type: object
                                      properties:
                                        header:
                                          type: object
                                          properties:
                                            version:
                                              title: basic block info
                                              type: object
                                              properties:
                                                block:
                                                  type: string
                                                  format: uint64
                                                app:
                                                  type: string
                                                  format: uint64
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                            chain_id:
                                              type: string
                                            height:
                                              type: string
                                              format: int64
                                            time:
                                              type: string
                                              format: date-time
                                            last_block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            last_commit_hash:
                                              type: string
                                              format: byte
                                              title: hashes of block data
                                            data_hash:
                                              type: string
                                              format: byte
                                            validators_hash:
                                              type: string
                                              format: byte
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                            next_validators_hash:
                                              type: string
                                              format: byte
                                            consensus_hash:
                                              type: string
                                              format: byte
                                            app_hash:
                                              type: string
                                              format: byte
                                            last_results_hash:
                                              type: string
                                              format: byte
                                            evidence_hash:
                                              type: string
                                              format: byte
                                              title: consensus info
                                            proposer_address:
                                              type: string
                                              format: byte
                                          description: >-
                                            Header defines the structure of a block
                                            header.
                                        commit:
                                          type: object
                                          properties:
                                            height:
                                              type: string
                                              format: int64
                                            round:
                                              type: integer
                                              format: int32
                                            block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            signatures:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  block_id_flag:
                                                    type: string
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    title: >-
                                                      BlockIdFlag indicates which BlcokID the
                                                      signature is for
                                                  validator_address:
                                                    type: string
                                                    format: byte
                                                  timestamp:
                                                    type: string
                                                    format: date-time
                                                  signature:
                                                    type: string
                                                    format: byte
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                    validator_set:
                                      type: object
                                      properties:
                                        validators:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              address:
                                                type: string
                                                format: byte
                                              pub_key:
                                                type: object
                                                properties:
                                                  ed25519:
                                                    type: string
                                                    format: byte
                                                  secp256k1:
                                                    type: string
                                                    format: byte
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Validators
                                              voting_power:
                                                type: string
                                                format: int64
                                              proposer_priority:
                                                type: string
                                                format: int64
                                        proposer:
                                          type: object
                                          properties:
                                            address:
                                              type: string
                                              format: byte
                                            pub_key:
                                              type: object
                                              properties:
                                                ed25519:
                                                  type: string
                                                  format: byte
                                                secp256k1:
                                                  type: string
                                                  format: byte
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Validators
                                            voting_power:
                                              type: string
                                              format: int64
                                            proposer_priority:
                                              type: string
                                              format: int64
                                        total_voting_power:
                                          type: string
                                          format: int64
                                common_height:
                                  type: string
                                  format: int64
                                byzantine_validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                  last_commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
              sdk_block:
                title: 'Since: cosmos-sdk 0.47'
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        description: >-
                          proposer_address is the original block proposer
                          address, formatted as a Bech32 string.

                          In Tendermint, this type is `bytes`, but in the SDK,
                          we convert it to a Bech32 string

                          for better UX.
                    description: Header defines the structure of a Tendermint block header.
                  data:
                    type: object
                    properties:
                      txs:
                        type: array
                        items:
                          type: string
                          format: byte
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                    title: >-
                      Data contains the set of transactions included in the
                      block
                  evidence:
                    type: object
                    properties:
                      evidence:
                        type: array
                        items:
                          type: object
                          properties:
                            duplicate_vote_evidence:
                              type: object
                              properties:
                                vote_a:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                vote_b:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                total_voting_power:
                                  type: string
                                  format: int64
                                validator_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                            light_client_attack_evidence:
                              type: object
                              properties:
                                conflicting_block:
                                  type: object
                                  properties:
                                    signed_header:
                                      type: object
                                      properties:
                                        header:
                                          type: object
                                          properties:
                                            version:
                                              title: basic block info
                                              type: object
                                              properties:
                                                block:
                                                  type: string
                                                  format: uint64
                                                app:
                                                  type: string
                                                  format: uint64
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                            chain_id:
                                              type: string
                                            height:
                                              type: string
                                              format: int64
                                            time:
                                              type: string
                                              format: date-time
                                            last_block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            last_commit_hash:
                                              type: string
                                              format: byte
                                              title: hashes of block data
                                            data_hash:
                                              type: string
                                              format: byte
                                            validators_hash:
                                              type: string
                                              format: byte
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                            next_validators_hash:
                                              type: string
                                              format: byte
                                            consensus_hash:
                                              type: string
                                              format: byte
                                            app_hash:
                                              type: string
                                              format: byte
                                            last_results_hash:
                                              type: string
                                              format: byte
                                            evidence_hash:
                                              type: string
                                              format: byte
                                              title: consensus info
                                            proposer_address:
                                              type: string
                                              format: byte
                                          description: >-
                                            Header defines the structure of a block
                                            header.
                                        commit:
                                          type: object
                                          properties:
                                            height:
                                              type: string
                                              format: int64
                                            round:
                                              type: integer
                                              format: int32
                                            block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            signatures:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  block_id_flag:
                                                    type: string
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    title: >-
                                                      BlockIdFlag indicates which BlcokID the
                                                      signature is for
                                                  validator_address:
                                                    type: string
                                                    format: byte
                                                  timestamp:
                                                    type: string
                                                    format: date-time
                                                  signature:
                                                    type: string
                                                    format: byte
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                    validator_set:
                                      type: object
                                      properties:
                                        validators:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              address:
                                                type: string
                                                format: byte
                                              pub_key:
                                                type: object
                                                properties:
                                                  ed25519:
                                                    type: string
                                                    format: byte
                                                  secp256k1:
                                                    type: string
                                                    format: byte
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Validators
                                              voting_power:
                                                type: string
                                                format: int64
                                              proposer_priority:
                                                type: string
                                                format: int64
                                        proposer:
                                          type: object
                                          properties:
                                            address:
                                              type: string
                                              format: byte
                                            pub_key:
                                              type: object
                                              properties:
                                                ed25519:
                                                  type: string
                                                  format: byte
                                                secp256k1:
                                                  type: string
                                                  format: byte
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Validators
                                            voting_power:
                                              type: string
                                              format: int64
                                            proposer_priority:
                                              type: string
                                              format: int64
                                        total_voting_power:
                                          type: string
                                          format: int64
                                common_height:
                                  type: string
                                  format: int64
                                byzantine_validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                  last_commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
                description: >-
                  Block is tendermint type Block, with the Header proposer
                  address

                  field converted to bech32 string.
            description: >-
              GetLatestBlockResponse is the response type for the
              Query/GetLatestBlock RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Service
  '/cosmos/base/tendermint/v1beta1/blocks/{height}':
    get:
      summary: GetBlockByHeight queries block for given height.
      operationId: GetBlockByHeight
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              block:
                title: 'Deprecated: please use `sdk_block` instead'
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                    description: Header defines the structure of a block header.
                  data:
                    type: object
                    properties:
                      txs:
                        type: array
                        items:
                          type: string
                          format: byte
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                    title: >-
                      Data contains the set of transactions included in the
                      block
                  evidence:
                    type: object
                    properties:
                      evidence:
                        type: array
                        items:
                          type: object
                          properties:
                            duplicate_vote_evidence:
                              type: object
                              properties:
                                vote_a:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                vote_b:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                total_voting_power:
                                  type: string
                                  format: int64
                                validator_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                            light_client_attack_evidence:
                              type: object
                              properties:
                                conflicting_block:
                                  type: object
                                  properties:
                                    signed_header:
                                      type: object
                                      properties:
                                        header:
                                          type: object
                                          properties:
                                            version:
                                              title: basic block info
                                              type: object
                                              properties:
                                                block:
                                                  type: string
                                                  format: uint64
                                                app:
                                                  type: string
                                                  format: uint64
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                            chain_id:
                                              type: string
                                            height:
                                              type: string
                                              format: int64
                                            time:
                                              type: string
                                              format: date-time
                                            last_block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            last_commit_hash:
                                              type: string
                                              format: byte
                                              title: hashes of block data
                                            data_hash:
                                              type: string
                                              format: byte
                                            validators_hash:
                                              type: string
                                              format: byte
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                            next_validators_hash:
                                              type: string
                                              format: byte
                                            consensus_hash:
                                              type: string
                                              format: byte
                                            app_hash:
                                              type: string
                                              format: byte
                                            last_results_hash:
                                              type: string
                                              format: byte
                                            evidence_hash:
                                              type: string
                                              format: byte
                                              title: consensus info
                                            proposer_address:
                                              type: string
                                              format: byte
                                          description: >-
                                            Header defines the structure of a block
                                            header.
                                        commit:
                                          type: object
                                          properties:
                                            height:
                                              type: string
                                              format: int64
                                            round:
                                              type: integer
                                              format: int32
                                            block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            signatures:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  block_id_flag:
                                                    type: string
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    title: >-
                                                      BlockIdFlag indicates which BlcokID the
                                                      signature is for
                                                  validator_address:
                                                    type: string
                                                    format: byte
                                                  timestamp:
                                                    type: string
                                                    format: date-time
                                                  signature:
                                                    type: string
                                                    format: byte
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                    validator_set:
                                      type: object
                                      properties:
                                        validators:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              address:
                                                type: string
                                                format: byte
                                              pub_key:
                                                type: object
                                                properties:
                                                  ed25519:
                                                    type: string
                                                    format: byte
                                                  secp256k1:
                                                    type: string
                                                    format: byte
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Validators
                                              voting_power:
                                                type: string
                                                format: int64
                                              proposer_priority:
                                                type: string
                                                format: int64
                                        proposer:
                                          type: object
                                          properties:
                                            address:
                                              type: string
                                              format: byte
                                            pub_key:
                                              type: object
                                              properties:
                                                ed25519:
                                                  type: string
                                                  format: byte
                                                secp256k1:
                                                  type: string
                                                  format: byte
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Validators
                                            voting_power:
                                              type: string
                                              format: int64
                                            proposer_priority:
                                              type: string
                                              format: int64
                                        total_voting_power:
                                          type: string
                                          format: int64
                                common_height:
                                  type: string
                                  format: int64
                                byzantine_validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                  last_commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
              sdk_block:
                title: 'Since: cosmos-sdk 0.47'
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        description: >-
                          proposer_address is the original block proposer
                          address, formatted as a Bech32 string.

                          In Tendermint, this type is `bytes`, but in the SDK,
                          we convert it to a Bech32 string

                          for better UX.
                    description: Header defines the structure of a Tendermint block header.
                  data:
                    type: object
                    properties:
                      txs:
                        type: array
                        items:
                          type: string
                          format: byte
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                    title: >-
                      Data contains the set of transactions included in the
                      block
                  evidence:
                    type: object
                    properties:
                      evidence:
                        type: array
                        items:
                          type: object
                          properties:
                            duplicate_vote_evidence:
                              type: object
                              properties:
                                vote_a:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                vote_b:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                total_voting_power:
                                  type: string
                                  format: int64
                                validator_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                            light_client_attack_evidence:
                              type: object
                              properties:
                                conflicting_block:
                                  type: object
                                  properties:
                                    signed_header:
                                      type: object
                                      properties:
                                        header:
                                          type: object
                                          properties:
                                            version:
                                              title: basic block info
                                              type: object
                                              properties:
                                                block:
                                                  type: string
                                                  format: uint64
                                                app:
                                                  type: string
                                                  format: uint64
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                            chain_id:
                                              type: string
                                            height:
                                              type: string
                                              format: int64
                                            time:
                                              type: string
                                              format: date-time
                                            last_block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            last_commit_hash:
                                              type: string
                                              format: byte
                                              title: hashes of block data
                                            data_hash:
                                              type: string
                                              format: byte
                                            validators_hash:
                                              type: string
                                              format: byte
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                            next_validators_hash:
                                              type: string
                                              format: byte
                                            consensus_hash:
                                              type: string
                                              format: byte
                                            app_hash:
                                              type: string
                                              format: byte
                                            last_results_hash:
                                              type: string
                                              format: byte
                                            evidence_hash:
                                              type: string
                                              format: byte
                                              title: consensus info
                                            proposer_address:
                                              type: string
                                              format: byte
                                          description: >-
                                            Header defines the structure of a block
                                            header.
                                        commit:
                                          type: object
                                          properties:
                                            height:
                                              type: string
                                              format: int64
                                            round:
                                              type: integer
                                              format: int32
                                            block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            signatures:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  block_id_flag:
                                                    type: string
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    title: >-
                                                      BlockIdFlag indicates which BlcokID the
                                                      signature is for
                                                  validator_address:
                                                    type: string
                                                    format: byte
                                                  timestamp:
                                                    type: string
                                                    format: date-time
                                                  signature:
                                                    type: string
                                                    format: byte
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                    validator_set:
                                      type: object
                                      properties:
                                        validators:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              address:
                                                type: string
                                                format: byte
                                              pub_key:
                                                type: object
                                                properties:
                                                  ed25519:
                                                    type: string
                                                    format: byte
                                                  secp256k1:
                                                    type: string
                                                    format: byte
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Validators
                                              voting_power:
                                                type: string
                                                format: int64
                                              proposer_priority:
                                                type: string
                                                format: int64
                                        proposer:
                                          type: object
                                          properties:
                                            address:
                                              type: string
                                              format: byte
                                            pub_key:
                                              type: object
                                              properties:
                                                ed25519:
                                                  type: string
                                                  format: byte
                                                secp256k1:
                                                  type: string
                                                  format: byte
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Validators
                                            voting_power:
                                              type: string
                                              format: int64
                                            proposer_priority:
                                              type: string
                                              format: int64
                                        total_voting_power:
                                          type: string
                                          format: int64
                                common_height:
                                  type: string
                                  format: int64
                                byzantine_validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                  last_commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
                description: >-
                  Block is tendermint type Block, with the Header proposer
                  address

                  field converted to bech32 string.
            description: >-
              GetBlockByHeightResponse is the response type for the
              Query/GetBlockByHeight

              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: height
          in: path
          required: true
          type: string
          format: int64
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/node_info:
    get:
      summary: GetNodeInfo queries the current node info.
      operationId: GetNodeInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              default_node_info:
                type: object
                properties:
                  protocol_version:
                    type: object
                    properties:
                      p2p:
                        type: string
                        format: uint64
                      block:
                        type: string
                        format: uint64
                      app:
                        type: string
                        format: uint64
                  default_node_id:
                    type: string
                  listen_addr:
                    type: string
                  network:
                    type: string
                  version:
                    type: string
                  channels:
                    type: string
                    format: byte
                  moniker:
                    type: string
                  other:
                    type: object
                    properties:
                      tx_index:
                        type: string
                      rpc_address:
                        type: string
              application_version:
                type: object
                properties:
                  name:
                    type: string
                  app_name:
                    type: string
                  version:
                    type: string
                  git_commit:
                    type: string
                  build_tags:
                    type: string
                  go_version:
                    type: string
                  build_deps:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          title: module path
                        version:
                          type: string
                          title: module version
                        sum:
                          type: string
                          title: checksum
                      title: Module is the type for VersionInfo
                  cosmos_sdk_version:
                    type: string
                    title: 'Since: cosmos-sdk 0.43'
                description: VersionInfo is the type for the GetNodeInfoResponse message.
            description: >-
              GetNodeInfoResponse is the response type for the Query/GetNodeInfo
              RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/syncing:
    get:
      summary: GetSyncing queries node syncing.
      operationId: GetSyncing
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              syncing:
                type: boolean
            description: >-
              GetSyncingResponse is the response type for the Query/GetSyncing
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/validatorsets/latest:
    get:
      summary: GetLatestValidatorSet queries latest validator-set.
      operationId: GetLatestValidatorSet
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_height:
                type: string
                format: int64
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    pub_key:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    voting_power:
                      type: string
                      format: int64
                    proposer_priority:
                      type: string
                      format: int64
                  description: Validator is the type for the validator-set.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: |-
              GetLatestValidatorSetResponse is the response type for the
              Query/GetValidatorSetByHeight RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Service
  '/cosmos/base/tendermint/v1beta1/validatorsets/{height}':
    get:
      summary: GetValidatorSetByHeight queries validator-set at a given height.
      operationId: GetValidatorSetByHeight
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_height:
                type: string
                format: int64
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    pub_key:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    voting_power:
                      type: string
                      format: int64
                    proposer_priority:
                      type: string
                      format: int64
                  description: Validator is the type for the validator-set.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: |-
              GetValidatorSetByHeightResponse is the response type for the
              Query/GetValidatorSetByHeight RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: height
          in: path
          required: true
          type: string
          format: int64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Service
  /cosmos/distribution/v1beta1/community_pool:
    get:
      summary: CommunityPool queries the community pool coins.
      operationId: CommunityPool
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                description: pool defines community pool's coins.
            description: >-
              QueryCommunityPoolResponse is the response type for the
              Query/CommunityPool

              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards':
    get:
      summary: |-
        DelegationTotalRewards queries the total rewards accrued by a each
        validator.
      operationId: DelegationTotalRewards
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              rewards:
                type: array
                items:
                  type: object
                  properties:
                    validator_address:
                      type: string
                    reward:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          DecCoin defines a token with a denomination and a
                          decimal amount.


                          NOTE: The amount field is an Dec which implements the
                          custom method

                          signatures required by gogoproto.
                  description: |-
                    DelegationDelegatorReward represents the properties
                    of a delegator's delegation reward.
                description: rewards defines all the rewards accrued by a delegator.
              total:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                description: total defines the sum of all the rewards.
            description: |-
              QueryDelegationTotalRewardsResponse is the response type for the
              Query/DelegationTotalRewards RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: delegator_address
          description: delegator_address defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}':
    get:
      summary: DelegationRewards queries the total rewards accrued by a delegation.
      operationId: DelegationRewards
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              rewards:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                description: rewards defines the rewards accrued by a delegation.
            description: |-
              QueryDelegationRewardsResponse is the response type for the
              Query/DelegationRewards RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: delegator_address
          description: delegator_address defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: validator_address
          description: validator_address defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/distribution/v1beta1/delegators/{delegator_address}/validators':
    get:
      summary: DelegatorValidators queries the validators of a delegator.
      operationId: DelegatorValidators
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: string
                description: >-
                  validators defines the validators a delegator is delegating
                  for.
            description: |-
              QueryDelegatorValidatorsResponse is the response type for the
              Query/DelegatorValidators RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: delegator_address
          description: delegator_address defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address':
    get:
      summary: DelegatorWithdrawAddress queries withdraw address of a delegator.
      operationId: DelegatorWithdrawAddress
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              withdraw_address:
                type: string
                description: withdraw_address defines the delegator address to query for.
            description: |-
              QueryDelegatorWithdrawAddressResponse is the response type for the
              Query/DelegatorWithdrawAddress RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: delegator_address
          description: delegator_address defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/distribution/v1beta1/params:
    get:
      summary: Params queries params of the distribution module.
      operationId: DistributionParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  community_tax:
                    type: string
                  base_proposer_reward:
                    type: string
                  bonus_proposer_reward:
                    type: string
                  withdraw_addr_enabled:
                    type: boolean
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/cosmos/distribution/v1beta1/validators/{validator_address}/commission':
    get:
      summary: ValidatorCommission queries accumulated commission for a validator.
      operationId: ValidatorCommission
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              commission:
                description: commission defines the commision the validator received.
                type: object
                properties:
                  commission:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        DecCoin defines a token with a denomination and a
                        decimal amount.


                        NOTE: The amount field is an Dec which implements the
                        custom method

                        signatures required by gogoproto.
            title: |-
              QueryValidatorCommissionResponse is the response type for the
              Query/ValidatorCommission RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: validator_address
          description: validator_address defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards':
    get:
      summary: ValidatorOutstandingRewards queries rewards of a validator address.
      operationId: ValidatorOutstandingRewards
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              rewards:
                type: object
                properties:
                  rewards:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        DecCoin defines a token with a denomination and a
                        decimal amount.


                        NOTE: The amount field is an Dec which implements the
                        custom method

                        signatures required by gogoproto.
                description: >-
                  ValidatorOutstandingRewards represents outstanding
                  (un-withdrawn) rewards

                  for a validator inexpensive to track, allows simple sanity
                  checks.
            description: >-
              QueryValidatorOutstandingRewardsResponse is the response type for
              the

              Query/ValidatorOutstandingRewards RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: validator_address
          description: validator_address defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/distribution/v1beta1/validators/{validator_address}/slashes':
    get:
      summary: ValidatorSlashes queries slash events of a validator.
      operationId: ValidatorSlashes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              slashes:
                type: array
                items:
                  type: object
                  properties:
                    validator_period:
                      type: string
                      format: uint64
                    fraction:
                      type: string
                  description: >-
                    ValidatorSlashEvent represents a validator slash event.

                    Height is implicit within the store key.

                    This is needed to calculate appropriate amount of staking
                    tokens

                    for delegations which are withdrawn after a slash has
                    occurred.
                description: slashes defines the slashes the validator received.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: |-
              QueryValidatorSlashesResponse is the response type for the
              Query/ValidatorSlashes RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: validator_address
          description: validator_address defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: starting_height
          description: >-
            starting_height defines the optional starting height to query the
            slashes.
          in: query
          required: false
          type: string
          format: uint64
        - name: ending_height
          description: >-
            starting_height defines the optional ending height to query the
            slashes.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/evidence/v1beta1/evidence:
    get:
      summary: AllEvidence queries all evidence.
      operationId: AllEvidence
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                description: evidence returns all evidences.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllEvidenceResponse is the response type for the
              Query/AllEvidence RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/evidence/v1beta1/evidence/{evidence_hash}':
    get:
      summary: Evidence queries evidence based on evidence hash.
      operationId: Evidence
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              evidence:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: >-
              QueryEvidenceResponse is the response type for the Query/Evidence
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: evidence_hash
          description: evidence_hash defines the hash of the requested evidence.
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/cosmos/gov/v1beta1/params/{params_type}':
    get:
      summary: Params queries all parameters of the gov module.
      operationId: GovParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              voting_params:
                description: voting_params defines the parameters related to voting.
                type: object
                properties:
                  voting_period:
                    type: string
                    description: Length of the voting period.
              deposit_params:
                description: deposit_params defines the parameters related to deposit.
                type: object
                properties:
                  min_deposit:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: Minimum deposit for a proposal to enter voting period.
                  max_deposit_period:
                    type: string
                    description: >-
                      Maximum period for Atom holders to deposit on a proposal.
                      Initial value: 2
                       months.
              tally_params:
                description: tally_params defines the parameters related to tally.
                type: object
                properties:
                  quorum:
                    type: string
                    format: byte
                    description: >-
                      Minimum percentage of total stake needed to vote for a
                      result to be
                       considered valid.
                  threshold:
                    type: string
                    format: byte
                    description: >-
                      Minimum proportion of Yes votes for proposal to pass.
                      Default value: 0.5.
                  veto_threshold:
                    type: string
                    format: byte
                    description: >-
                      Minimum value of Veto votes to Total votes ratio for
                      proposal to be
                       vetoed. Default value: 1/3.
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: params_type
          description: >-
            params_type defines which parameters to query for, can be one of
            "voting",

            "tallying" or "deposit".
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals:
    get:
      summary: Proposals queries all proposals based on given status.
      operationId: Proposals
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposals:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                    content:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    status:
                      type: string
                      enum:
                        - PROPOSAL_STATUS_UNSPECIFIED
                        - PROPOSAL_STATUS_DEPOSIT_PERIOD
                        - PROPOSAL_STATUS_VOTING_PERIOD
                        - PROPOSAL_STATUS_PASSED
                        - PROPOSAL_STATUS_REJECTED
                        - PROPOSAL_STATUS_FAILED
                      default: PROPOSAL_STATUS_UNSPECIFIED
                      description: >-
                        ProposalStatus enumerates the valid statuses of a
                        proposal.

                         - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
                         - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                        period.
                         - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                        period.
                         - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                        passed.
                         - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                        been rejected.
                         - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                        failed.
                    final_tally_result:
                      description: >-
                        final_tally_result is the final tally result of the
                        proposal. When

                        querying a proposal via gRPC, this field is not
                        populated until the

                        proposal's voting period has ended.
                      type: object
                      properties:
                        'yes':
                          type: string
                        abstain:
                          type: string
                        'no':
                          type: string
                        no_with_veto:
                          type: string
                    submit_time:
                      type: string
                      format: date-time
                    deposit_end_time:
                      type: string
                      format: date-time
                    total_deposit:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                    voting_start_time:
                      type: string
                      format: date-time
                    voting_end_time:
                      type: string
                      format: date-time
                  description: >-
                    Proposal defines the core field members of a governance
                    proposal.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryProposalsResponse is the response type for the
              Query/Proposals RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_status
          description: |-
            proposal_status defines the status of the proposals.

             - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
             - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
            period.
             - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
            period.
             - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
            passed.
             - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
            been rejected.
             - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
            failed.
          in: query
          required: false
          type: string
          enum:
            - PROPOSAL_STATUS_UNSPECIFIED
            - PROPOSAL_STATUS_DEPOSIT_PERIOD
            - PROPOSAL_STATUS_VOTING_PERIOD
            - PROPOSAL_STATUS_PASSED
            - PROPOSAL_STATUS_REJECTED
            - PROPOSAL_STATUS_FAILED
          default: PROPOSAL_STATUS_UNSPECIFIED
        - name: voter
          description: voter defines the voter address for the proposals.
          in: query
          required: false
          type: string
        - name: depositor
          description: depositor defines the deposit addresses from the proposals.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/gov/v1beta1/proposals/{proposal_id}':
    get:
      summary: Proposal queries proposal details based on ProposalID.
      operationId: Proposal
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposal:
                type: object
                properties:
                  proposal_id:
                    type: string
                    format: uint64
                  content:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  status:
                    type: string
                    enum:
                      - PROPOSAL_STATUS_UNSPECIFIED
                      - PROPOSAL_STATUS_DEPOSIT_PERIOD
                      - PROPOSAL_STATUS_VOTING_PERIOD
                      - PROPOSAL_STATUS_PASSED
                      - PROPOSAL_STATUS_REJECTED
                      - PROPOSAL_STATUS_FAILED
                    default: PROPOSAL_STATUS_UNSPECIFIED
                    description: >-
                      ProposalStatus enumerates the valid statuses of a
                      proposal.

                       - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
                       - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                      period.
                       - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                      period.
                       - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                      passed.
                       - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                      been rejected.
                       - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                      failed.
                  final_tally_result:
                    description: >-
                      final_tally_result is the final tally result of the
                      proposal. When

                      querying a proposal via gRPC, this field is not populated
                      until the

                      proposal's voting period has ended.
                    type: object
                    properties:
                      'yes':
                        type: string
                      abstain:
                        type: string
                      'no':
                        type: string
                      no_with_veto:
                        type: string
                  submit_time:
                    type: string
                    format: date-time
                  deposit_end_time:
                    type: string
                    format: date-time
                  total_deposit:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  voting_start_time:
                    type: string
                    format: date-time
                  voting_end_time:
                    type: string
                    format: date-time
                description: >-
                  Proposal defines the core field members of a governance
                  proposal.
            description: >-
              QueryProposalResponse is the response type for the Query/Proposal
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits':
    get:
      summary: Deposits queries all deposits of a single proposal.
      operationId: Deposits
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              deposits:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                    depositor:
                      type: string
                    amount:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                  description: >-
                    Deposit defines an amount deposited by an account address to
                    an active

                    proposal.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryDepositsResponse is the response type for the Query/Deposits
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}':
    get:
      summary: >-
        Deposit queries single deposit information based proposalID,
        depositAddr.
      operationId: Deposit
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              deposit:
                type: object
                properties:
                  proposal_id:
                    type: string
                    format: uint64
                  depositor:
                    type: string
                  amount:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                description: >-
                  Deposit defines an amount deposited by an account address to
                  an active

                  proposal.
            description: >-
              QueryDepositResponse is the response type for the Query/Deposit
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: depositor
          description: depositor defines the deposit addresses from the proposals.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/gov/v1beta1/proposals/{proposal_id}/tally':
    get:
      summary: TallyResult queries the tally of a proposal vote.
      operationId: TallyResult
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              tally:
                description: tally defines the requested tally.
                type: object
                properties:
                  'yes':
                    type: string
                  abstain:
                    type: string
                  'no':
                    type: string
                  no_with_veto:
                    type: string
            description: >-
              QueryTallyResultResponse is the response type for the Query/Tally
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/cosmos/gov/v1beta1/proposals/{proposal_id}/votes':
    get:
      summary: Votes queries votes of a given proposal.
      operationId: Votes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              votes:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                    voter:
                      type: string
                    option:
                      description: >-
                        Deprecated: Prefer to use `options` instead. This field
                        is set in queries

                        if and only if `len(options) == 1` and that option has
                        weight 1. In all

                        other cases, this field will default to
                        VOTE_OPTION_UNSPECIFIED.
                      type: string
                      enum:
                        - VOTE_OPTION_UNSPECIFIED
                        - VOTE_OPTION_YES
                        - VOTE_OPTION_ABSTAIN
                        - VOTE_OPTION_NO
                        - VOTE_OPTION_NO_WITH_VETO
                      default: VOTE_OPTION_UNSPECIFIED
                    options:
                      type: array
                      items:
                        type: object
                        properties:
                          option:
                            type: string
                            enum:
                              - VOTE_OPTION_UNSPECIFIED
                              - VOTE_OPTION_YES
                              - VOTE_OPTION_ABSTAIN
                              - VOTE_OPTION_NO
                              - VOTE_OPTION_NO_WITH_VETO
                            default: VOTE_OPTION_UNSPECIFIED
                            description: >-
                              VoteOption enumerates the valid vote options for a
                              given governance proposal.

                               - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                               - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                               - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                               - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                               - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                          weight:
                            type: string
                        description: >-
                          WeightedVoteOption defines a unit of vote for vote
                          split.


                          Since: cosmos-sdk 0.43
                      title: 'Since: cosmos-sdk 0.43'
                  description: >-
                    Vote defines a vote on a governance proposal.

                    A Vote consists of a proposal ID, the voter, and the vote
                    option.
                description: votes defined the queried votes.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryVotesResponse is the response type for the Query/Votes RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}':
    get:
      summary: 'Vote queries voted information based on proposalID, voterAddr.'
      operationId: Vote
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              vote:
                type: object
                properties:
                  proposal_id:
                    type: string
                    format: uint64
                  voter:
                    type: string
                  option:
                    description: >-
                      Deprecated: Prefer to use `options` instead. This field is
                      set in queries

                      if and only if `len(options) == 1` and that option has
                      weight 1. In all

                      other cases, this field will default to
                      VOTE_OPTION_UNSPECIFIED.
                    type: string
                    enum:
                      - VOTE_OPTION_UNSPECIFIED
                      - VOTE_OPTION_YES
                      - VOTE_OPTION_ABSTAIN
                      - VOTE_OPTION_NO
                      - VOTE_OPTION_NO_WITH_VETO
                    default: VOTE_OPTION_UNSPECIFIED
                  options:
                    type: array
                    items:
                      type: object
                      properties:
                        option:
                          type: string
                          enum:
                            - VOTE_OPTION_UNSPECIFIED
                            - VOTE_OPTION_YES
                            - VOTE_OPTION_ABSTAIN
                            - VOTE_OPTION_NO
                            - VOTE_OPTION_NO_WITH_VETO
                          default: VOTE_OPTION_UNSPECIFIED
                          description: >-
                            VoteOption enumerates the valid vote options for a
                            given governance proposal.

                             - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                             - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                             - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                             - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                             - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                        weight:
                          type: string
                      description: >-
                        WeightedVoteOption defines a unit of vote for vote
                        split.


                        Since: cosmos-sdk 0.43
                    title: 'Since: cosmos-sdk 0.43'
                description: >-
                  Vote defines a vote on a governance proposal.

                  A Vote consists of a proposal ID, the voter, and the vote
                  option.
            description: >-
              QueryVoteResponse is the response type for the Query/Vote RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: voter
          description: voter defines the voter address for the proposals.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/gov/v1/params/{params_type}':
    get:
      summary: Params queries all parameters of the gov module.
      operationId: GovV1Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              voting_params:
                description: voting_params defines the parameters related to voting.
                type: object
                properties:
                  voting_period:
                    type: string
                    description: Length of the voting period.
              deposit_params:
                description: deposit_params defines the parameters related to deposit.
                type: object
                properties:
                  min_deposit:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: Minimum deposit for a proposal to enter voting period.
                  max_deposit_period:
                    type: string
                    description: >-
                      Maximum period for Atom holders to deposit on a proposal.
                      Initial value: 2
                       months.
              tally_params:
                description: tally_params defines the parameters related to tally.
                type: object
                properties:
                  quorum:
                    type: string
                    description: >-
                      Minimum percentage of total stake needed to vote for a
                      result to be
                       considered valid.
                  threshold:
                    type: string
                    description: >-
                      Minimum proportion of Yes votes for proposal to pass.
                      Default value: 0.5.
                  veto_threshold:
                    type: string
                    description: >-
                      Minimum value of Veto votes to Total votes ratio for
                      proposal to be
                       vetoed. Default value: 1/3.
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: params_type
          description: >-
            params_type defines which parameters to query for, can be one of
            "voting",

            "tallying" or "deposit".
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/gov/v1/proposals:
    get:
      summary: Proposals queries all proposals based on given status.
      operationId: GovV1Proposal
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposals:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                    messages:
                      type: array
                      items:
                        type: object
                        properties:
                          type_url:
                            type: string
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                          value:
                            type: string
                            format: byte
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := ptypes.MarshalAny(foo)
                               ...
                               foo := &pb.Foo{}
                               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                    status:
                      type: string
                      enum:
                        - PROPOSAL_STATUS_UNSPECIFIED
                        - PROPOSAL_STATUS_DEPOSIT_PERIOD
                        - PROPOSAL_STATUS_VOTING_PERIOD
                        - PROPOSAL_STATUS_PASSED
                        - PROPOSAL_STATUS_REJECTED
                        - PROPOSAL_STATUS_FAILED
                      default: PROPOSAL_STATUS_UNSPECIFIED
                      description: >-
                        ProposalStatus enumerates the valid statuses of a
                        proposal.

                         - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
                         - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                        period.
                         - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                        period.
                         - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                        passed.
                         - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                        been rejected.
                         - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                        failed.
                    final_tally_result:
                      description: >-
                        final_tally_result is the final tally result of the
                        proposal. When

                        querying a proposal via gRPC, this field is not
                        populated until the

                        proposal's voting period has ended.
                      type: object
                      properties:
                        yes_count:
                          type: string
                        abstain_count:
                          type: string
                        no_count:
                          type: string
                        no_with_veto_count:
                          type: string
                    submit_time:
                      type: string
                      format: date-time
                    deposit_end_time:
                      type: string
                      format: date-time
                    total_deposit:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                    voting_start_time:
                      type: string
                      format: date-time
                    voting_end_time:
                      type: string
                      format: date-time
                    metadata:
                      type: string
                      description: >-
                        metadata is any arbitrary metadata attached to the
                        proposal.
                  description: >-
                    Proposal defines the core field members of a governance
                    proposal.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryProposalsResponse is the response type for the
              Query/Proposals RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_status
          description: |-
            proposal_status defines the status of the proposals.

             - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
             - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
            period.
             - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
            period.
             - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
            passed.
             - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
            been rejected.
             - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
            failed.
          in: query
          required: false
          type: string
          enum:
            - PROPOSAL_STATUS_UNSPECIFIED
            - PROPOSAL_STATUS_DEPOSIT_PERIOD
            - PROPOSAL_STATUS_VOTING_PERIOD
            - PROPOSAL_STATUS_PASSED
            - PROPOSAL_STATUS_REJECTED
            - PROPOSAL_STATUS_FAILED
          default: PROPOSAL_STATUS_UNSPECIFIED
        - name: voter
          description: voter defines the voter address for the proposals.
          in: query
          required: false
          type: string
        - name: depositor
          description: depositor defines the deposit addresses from the proposals.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/gov/v1/proposals/{proposal_id}':
    get:
      summary: Proposal queries proposal details based on ProposalID.
      operationId: GovV1Proposal
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposal:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                  messages:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                  status:
                    type: string
                    enum:
                      - PROPOSAL_STATUS_UNSPECIFIED
                      - PROPOSAL_STATUS_DEPOSIT_PERIOD
                      - PROPOSAL_STATUS_VOTING_PERIOD
                      - PROPOSAL_STATUS_PASSED
                      - PROPOSAL_STATUS_REJECTED
                      - PROPOSAL_STATUS_FAILED
                    default: PROPOSAL_STATUS_UNSPECIFIED
                    description: >-
                      ProposalStatus enumerates the valid statuses of a
                      proposal.

                       - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
                       - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                      period.
                       - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                      period.
                       - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                      passed.
                       - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                      been rejected.
                       - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                      failed.
                  final_tally_result:
                    description: >-
                      final_tally_result is the final tally result of the
                      proposal. When

                      querying a proposal via gRPC, this field is not populated
                      until the

                      proposal's voting period has ended.
                    type: object
                    properties:
                      yes_count:
                        type: string
                      abstain_count:
                        type: string
                      no_count:
                        type: string
                      no_with_veto_count:
                        type: string
                  submit_time:
                    type: string
                    format: date-time
                  deposit_end_time:
                    type: string
                    format: date-time
                  total_deposit:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  voting_start_time:
                    type: string
                    format: date-time
                  voting_end_time:
                    type: string
                    format: date-time
                  metadata:
                    type: string
                    description: >-
                      metadata is any arbitrary metadata attached to the
                      proposal.
                description: >-
                  Proposal defines the core field members of a governance
                  proposal.
            description: >-
              QueryProposalResponse is the response type for the Query/Proposal
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/cosmos/gov/v1/proposals/{proposal_id}/deposits':
    get:
      summary: Deposits queries all deposits of a single proposal.
      operationId: GovV1Deposit
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              deposits:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                    depositor:
                      type: string
                    amount:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                  description: >-
                    Deposit defines an amount deposited by an account address to
                    an active

                    proposal.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryDepositsResponse is the response type for the Query/Deposits
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/gov/v1/proposals/{proposal_id}/deposits/{depositor}':
    get:
      summary: >-
        Deposit queries single deposit information based proposalID,
        depositAddr.
      operationId: GovV1Deposit
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              deposit:
                type: object
                properties:
                  proposal_id:
                    type: string
                    format: uint64
                  depositor:
                    type: string
                  amount:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                description: >-
                  Deposit defines an amount deposited by an account address to
                  an active

                  proposal.
            description: >-
              QueryDepositResponse is the response type for the Query/Deposit
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: depositor
          description: depositor defines the deposit addresses from the proposals.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/gov/v1/proposals/{proposal_id}/tally':
    get:
      summary: TallyResult queries the tally of a proposal vote.
      operationId: GovV1TallyResult
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              tally:
                description: tally defines the requested tally.
                type: object
                properties:
                  yes_count:
                    type: string
                  abstain_count:
                    type: string
                  no_count:
                    type: string
                  no_with_veto_count:
                    type: string
            description: >-
              QueryTallyResultResponse is the response type for the Query/Tally
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/cosmos/gov/v1/proposals/{proposal_id}/votes':
    get:
      summary: Votes queries votes of a given proposal.
      operationId: GovV1Votes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              votes:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                    voter:
                      type: string
                    options:
                      type: array
                      items:
                        type: object
                        properties:
                          option:
                            type: string
                            enum:
                              - VOTE_OPTION_UNSPECIFIED
                              - VOTE_OPTION_YES
                              - VOTE_OPTION_ABSTAIN
                              - VOTE_OPTION_NO
                              - VOTE_OPTION_NO_WITH_VETO
                            default: VOTE_OPTION_UNSPECIFIED
                            description: >-
                              VoteOption enumerates the valid vote options for a
                              given governance proposal.

                               - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                               - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                               - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                               - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                               - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                          weight:
                            type: string
                        description: >-
                          WeightedVoteOption defines a unit of vote for vote
                          split.
                    metadata:
                      type: string
                      description: >-
                        metadata is any  arbitrary metadata to attached to the
                        vote.
                  description: >-
                    Vote defines a vote on a governance proposal.

                    A Vote consists of a proposal ID, the voter, and the vote
                    option.
                description: votes defined the queried votes.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryVotesResponse is the response type for the Query/Votes RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/gov/v1/proposals/{proposal_id}/votes/{voter}':
    get:
      summary: 'Vote queries voted information based on proposalID, voterAddr.'
      operationId: GovV1Vote
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              vote:
                type: object
                properties:
                  proposal_id:
                    type: string
                    format: uint64
                  voter:
                    type: string
                  options:
                    type: array
                    items:
                      type: object
                      properties:
                        option:
                          type: string
                          enum:
                            - VOTE_OPTION_UNSPECIFIED
                            - VOTE_OPTION_YES
                            - VOTE_OPTION_ABSTAIN
                            - VOTE_OPTION_NO
                            - VOTE_OPTION_NO_WITH_VETO
                          default: VOTE_OPTION_UNSPECIFIED
                          description: >-
                            VoteOption enumerates the valid vote options for a
                            given governance proposal.

                             - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                             - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                             - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                             - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                             - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                        weight:
                          type: string
                      description: >-
                        WeightedVoteOption defines a unit of vote for vote
                        split.
                  metadata:
                    type: string
                    description: >-
                      metadata is any  arbitrary metadata to attached to the
                      vote.
                description: >-
                  Vote defines a vote on a governance proposal.

                  A Vote consists of a proposal ID, the voter, and the vote
                  option.
            description: >-
              QueryVoteResponse is the response type for the Query/Vote RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: voter
          description: voter defines the voter address for the proposals.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/mint/v1beta1/annual_provisions:
    get:
      summary: AnnualProvisions current minting annual provisions value.
      operationId: AnnualProvisions
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              annual_provisions:
                type: string
                format: byte
                description: >-
                  annual_provisions is the current minting annual provisions
                  value.
            description: |-
              QueryAnnualProvisionsResponse is the response type for the
              Query/AnnualProvisions RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/mint/v1beta1/inflation:
    get:
      summary: Inflation returns the current minting inflation value.
      operationId: Inflation
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              inflation:
                type: string
                format: byte
                description: inflation is the current minting inflation value.
            description: >-
              QueryInflationResponse is the response type for the
              Query/Inflation RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/mint/v1beta1/params:
    get:
      summary: Params returns the total set of minting parameters.
      operationId: MintParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  mint_denom:
                    type: string
                    title: type of coin to mint
                  inflation_rate_change:
                    type: string
                    title: maximum annual change in inflation rate
                  inflation_max:
                    type: string
                    title: maximum inflation rate
                  inflation_min:
                    type: string
                    title: minimum inflation rate
                  goal_bonded:
                    type: string
                    title: goal of percent bonded atoms
                  blocks_per_year:
                    type: string
                    format: uint64
                    title: expected blocks per year
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/params/v1beta1/params:
    get:
      summary: |-
        Params queries a specific parameter of a module, given its subspace and
        key.
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              param:
                description: param defines the queried parameter.
                type: object
                properties:
                  subspace:
                    type: string
                  key:
                    type: string
                  value:
                    type: string
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: subspace
          description: subspace defines the module to query the parameter for.
          in: query
          required: false
          type: string
        - name: key
          description: key defines the key of the parameter in the subspace.
          in: query
          required: false
          type: string
      tags:
        - Query
  /cosmos/params/v1beta1/subspaces:
    get:
      summary: >-
        Subspaces queries for all registered subspaces and all keys for a
        subspace.
      description: 'Since: cosmos-sdk 0.46'
      operationId: Subspaces
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              subspaces:
                type: array
                items:
                  type: object
                  properties:
                    subspace:
                      type: string
                    keys:
                      type: array
                      items:
                        type: string
                  description: >-
                    Subspace defines a parameter subspace name and all the keys
                    that exist for

                    the subspace.


                    Since: cosmos-sdk 0.46
            description: >-
              QuerySubspacesResponse defines the response types for querying for
              all

              registered subspaces and all keys for a subspace.


              Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/cosmos/quarantine/v1beta1/active/{to_address}':
    get:
      summary: IsQuarantined checks if an account has opted into quarantine.
      operationId: IsQuarantined
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              is_quarantined:
                type: boolean
                description: >-
                  is_quarantined is true if the to_address has opted into
                  quarantine.
            description: >-
              QueryIsQuarantinedResponse defines the RPC response of an
              IsQuarantined query.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: to_address
          description: to_address is the address to check.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/quarantine/v1beta1/auto/{to_address}':
    get:
      summary: AutoResponses gets the auto-response settings for a quarantined account.
      description: >-
        The to_address is required. If a from_address is provided only the auto
        response for that from_address will be

        returned. If no from_address is provided, all auto-response settings for
        the given to_address will be returned.
      operationId: AutoResponses
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              auto_responses:
                type: array
                items:
                  type: object
                  properties:
                    to_address:
                      type: string
                      description: to_address is the receiving address.
                    from_address:
                      type: string
                      description: from_address is the sending address.
                    response:
                      description: >-
                        response is the auto-response setting for these two
                        addresses.
                      type: string
                      enum:
                        - AUTO_RESPONSE_UNSPECIFIED
                        - AUTO_RESPONSE_ACCEPT
                        - AUTO_RESPONSE_DECLINE
                      default: AUTO_RESPONSE_UNSPECIFIED
                  description: >-
                    AutoResponseEntry defines the auto response to one address
                    from another.
                description: >-
                  auto_responses are the auto-response entries from the provided
                  query.
              pagination:
                description: pagination defines the pagination parameters of the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAutoResponsesResponse defines the RPC response of a
              AutoResponses query.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: to_address
          description: to_address is the quarantined account to get info on.
          in: path
          required: true
          type: string
        - name: from_address
          description: from_address is an optional sender address to limit results.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/quarantine/v1beta1/auto/{to_address}/{from_address}':
    get:
      summary: AutoResponses gets the auto-response settings for a quarantined account.
      description: >-
        The to_address is required. If a from_address is provided only the auto
        response for that from_address will be

        returned. If no from_address is provided, all auto-response settings for
        the given to_address will be returned.
      operationId: AutoResponses2
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              auto_responses:
                type: array
                items:
                  type: object
                  properties:
                    to_address:
                      type: string
                      description: to_address is the receiving address.
                    from_address:
                      type: string
                      description: from_address is the sending address.
                    response:
                      description: >-
                        response is the auto-response setting for these two
                        addresses.
                      type: string
                      enum:
                        - AUTO_RESPONSE_UNSPECIFIED
                        - AUTO_RESPONSE_ACCEPT
                        - AUTO_RESPONSE_DECLINE
                      default: AUTO_RESPONSE_UNSPECIFIED
                  description: >-
                    AutoResponseEntry defines the auto response to one address
                    from another.
                description: >-
                  auto_responses are the auto-response entries from the provided
                  query.
              pagination:
                description: pagination defines the pagination parameters of the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAutoResponsesResponse defines the RPC response of a
              AutoResponses query.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: to_address
          description: to_address is the quarantined account to get info on.
          in: path
          required: true
          type: string
        - name: from_address
          description: from_address is an optional sender address to limit results.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/quarantine/v1beta1/funds:
    get:
      summary: >-
        QuarantinedFunds gets information about funds that have been
        quarantined.
      description: >-
        If both a to_address and from_address are provided, any such quarantined
        funds will be returned regardless of

        whether they've been declined. If only a to_address is provided, the
        unaccepted and undeclined funds waiting on a

        response from to_address will be returned. If neither a to_address nor
        from_address is provided, all non-declined

        quarantined funds for any address will be returned. The request is
        invalid if only a from_address is provided.
      operationId: QuarantinedFunds
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              quarantinedFunds:
                type: array
                items:
                  type: object
                  properties:
                    to_address:
                      type: string
                      description: >-
                        to_address is the intended recipient of the coins that
                        have been quarantined.
                    unaccepted_from_addresses:
                      type: array
                      items:
                        type: string
                      description: >-
                        unaccepted_from_addresses are the senders that have not
                        been part of an accept yet for these coins.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: >-
                        coins is the amount currently in quarantined for the two
                        addresses.
                    declined:
                      type: boolean
                      description: >-
                        declined is true if these funds were previously
                        declined.
                  description: >-
                    QuarantinedFunds defines structure that represents coins
                    that have been quarantined.
                description: quarantinedFunds is info about coins sitting in quarantine.
              pagination:
                description: pagination defines the pagination parameters of the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryQuarantinedFundsResponse defines the RPC response of a
              QuarantinedFunds query.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: to_address
          description: >-
            to_address is the intended recipient of the coins that have been
            quarantined.
          in: query
          required: false
          type: string
        - name: from_address
          description: >-
            from_address is the sender of the coins. If provided, a to_address
            must also be provided.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/quarantine/v1beta1/funds/{to_address}':
    get:
      summary: >-
        QuarantinedFunds gets information about funds that have been
        quarantined.
      description: >-
        If both a to_address and from_address are provided, any such quarantined
        funds will be returned regardless of

        whether they've been declined. If only a to_address is provided, the
        unaccepted and undeclined funds waiting on a

        response from to_address will be returned. If neither a to_address nor
        from_address is provided, all non-declined

        quarantined funds for any address will be returned. The request is
        invalid if only a from_address is provided.
      operationId: QuarantinedFunds2
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              quarantinedFunds:
                type: array
                items:
                  type: object
                  properties:
                    to_address:
                      type: string
                      description: >-
                        to_address is the intended recipient of the coins that
                        have been quarantined.
                    unaccepted_from_addresses:
                      type: array
                      items:
                        type: string
                      description: >-
                        unaccepted_from_addresses are the senders that have not
                        been part of an accept yet for these coins.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: >-
                        coins is the amount currently in quarantined for the two
                        addresses.
                    declined:
                      type: boolean
                      description: >-
                        declined is true if these funds were previously
                        declined.
                  description: >-
                    QuarantinedFunds defines structure that represents coins
                    that have been quarantined.
                description: quarantinedFunds is info about coins sitting in quarantine.
              pagination:
                description: pagination defines the pagination parameters of the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryQuarantinedFundsResponse defines the RPC response of a
              QuarantinedFunds query.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: to_address
          description: >-
            to_address is the intended recipient of the coins that have been
            quarantined.
          in: path
          required: true
          type: string
        - name: from_address
          description: >-
            from_address is the sender of the coins. If provided, a to_address
            must also be provided.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/quarantine/v1beta1/funds/{to_address}/{from_address}':
    get:
      summary: >-
        QuarantinedFunds gets information about funds that have been
        quarantined.
      description: >-
        If both a to_address and from_address are provided, any such quarantined
        funds will be returned regardless of

        whether they've been declined. If only a to_address is provided, the
        unaccepted and undeclined funds waiting on a

        response from to_address will be returned. If neither a to_address nor
        from_address is provided, all non-declined

        quarantined funds for any address will be returned. The request is
        invalid if only a from_address is provided.
      operationId: QuarantinedFunds3
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              quarantinedFunds:
                type: array
                items:
                  type: object
                  properties:
                    to_address:
                      type: string
                      description: >-
                        to_address is the intended recipient of the coins that
                        have been quarantined.
                    unaccepted_from_addresses:
                      type: array
                      items:
                        type: string
                      description: >-
                        unaccepted_from_addresses are the senders that have not
                        been part of an accept yet for these coins.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: >-
                        coins is the amount currently in quarantined for the two
                        addresses.
                    declined:
                      type: boolean
                      description: >-
                        declined is true if these funds were previously
                        declined.
                  description: >-
                    QuarantinedFunds defines structure that represents coins
                    that have been quarantined.
                description: quarantinedFunds is info about coins sitting in quarantine.
              pagination:
                description: pagination defines the pagination parameters of the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryQuarantinedFundsResponse defines the RPC response of a
              QuarantinedFunds query.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: to_address
          description: >-
            to_address is the intended recipient of the coins that have been
            quarantined.
          in: path
          required: true
          type: string
        - name: from_address
          description: >-
            from_address is the sender of the coins. If provided, a to_address
            must also be provided.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/slashing/v1beta1/params:
    get:
      summary: Params queries the parameters of slashing module
      operationId: SlashingParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  signed_blocks_window:
                    type: string
                    format: int64
                  min_signed_per_window:
                    type: string
                    format: byte
                  downtime_jail_duration:
                    type: string
                  slash_fraction_double_sign:
                    type: string
                    format: byte
                  slash_fraction_downtime:
                    type: string
                    format: byte
                description: >-
                  Params represents the parameters used for by the slashing
                  module.
            title: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/slashing/v1beta1/signing_infos:
    get:
      summary: SigningInfos queries signing info of all validators
      operationId: SigningInfos
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              info:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    start_height:
                      type: string
                      format: int64
                      title: >-
                        Height at which validator was first a candidate OR was
                        unjailed
                    index_offset:
                      type: string
                      format: int64
                      description: >-
                        Index which is incremented each time the validator was a
                        bonded

                        in a block and may have signed a precommit or not. This
                        in conjunction with the

                        `SignedBlocksWindow` param determines the index in the
                        `MissedBlocksBitArray`.
                    jailed_until:
                      type: string
                      format: date-time
                      description: >-
                        Timestamp until which the validator is jailed due to
                        liveness downtime.
                    tombstoned:
                      type: boolean
                      description: >-
                        Whether or not a validator has been tombstoned (killed
                        out of validator set). It is set

                        once the validator commits an equivocation or for any
                        other configured misbehiavor.
                    missed_blocks_counter:
                      type: string
                      format: int64
                      description: >-
                        A counter kept to avoid unnecessary array reads.

                        Note that `Sum(MissedBlocksBitArray)` always equals
                        `MissedBlocksCounter`.
                  description: >-
                    ValidatorSigningInfo defines a validator's signing info for
                    monitoring their

                    liveness activity.
                title: info is the signing info of all validators
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QuerySigningInfosResponse is the response type for the
              Query/SigningInfos RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/slashing/v1beta1/signing_infos/{cons_address}':
    get:
      summary: SigningInfo queries the signing info of given cons address
      operationId: SigningInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              val_signing_info:
                type: object
                properties:
                  address:
                    type: string
                  start_height:
                    type: string
                    format: int64
                    title: >-
                      Height at which validator was first a candidate OR was
                      unjailed
                  index_offset:
                    type: string
                    format: int64
                    description: >-
                      Index which is incremented each time the validator was a
                      bonded

                      in a block and may have signed a precommit or not. This in
                      conjunction with the

                      `SignedBlocksWindow` param determines the index in the
                      `MissedBlocksBitArray`.
                  jailed_until:
                    type: string
                    format: date-time
                    description: >-
                      Timestamp until which the validator is jailed due to
                      liveness downtime.
                  tombstoned:
                    type: boolean
                    description: >-
                      Whether or not a validator has been tombstoned (killed out
                      of validator set). It is set

                      once the validator commits an equivocation or for any
                      other configured misbehiavor.
                  missed_blocks_counter:
                    type: string
                    format: int64
                    description: >-
                      A counter kept to avoid unnecessary array reads.

                      Note that `Sum(MissedBlocksBitArray)` always equals
                      `MissedBlocksCounter`.
                description: >-
                  ValidatorSigningInfo defines a validator's signing info for
                  monitoring their

                  liveness activity.
                title: >-
                  val_signing_info is the signing info of requested val cons
                  address
            title: >-
              QuerySigningInfoResponse is the response type for the
              Query/SigningInfo RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: cons_address
          description: cons_address is the address to query signing info of
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/staking/v1beta1/delegations/{delegator_addr}':
    get:
      summary: >-
        DelegatorDelegations queries all delegations of a given delegator
        address.
      operationId: DelegatorDelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              delegation_responses:
                type: array
                items:
                  type: object
                  properties:
                    delegation:
                      type: object
                      properties:
                        delegator_address:
                          type: string
                          description: >-
                            delegator_address is the bech32-encoded address of
                            the delegator.
                        validator_address:
                          type: string
                          description: >-
                            validator_address is the bech32-encoded address of
                            the validator.
                        shares:
                          type: string
                          description: shares define the delegation shares received.
                      description: >-
                        Delegation represents the bond with tokens held by an
                        account. It is

                        owned by one delegator, and is associated with the
                        voting power of one

                        validator.
                    balance:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  description: >-
                    DelegationResponse is equivalent to Delegation except that
                    it contains a

                    balance in addition to shares which is more suitable for
                    client responses.
                description: >-
                  delegation_responses defines all the delegations' info of a
                  delegator.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: |-
              QueryDelegatorDelegationsResponse is response type for the
              Query/DelegatorDelegations RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations':
    get:
      summary: Redelegations queries redelegations of given address.
      operationId: Redelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              redelegation_responses:
                type: array
                items:
                  type: object
                  properties:
                    redelegation:
                      type: object
                      properties:
                        delegator_address:
                          type: string
                          description: >-
                            delegator_address is the bech32-encoded address of
                            the delegator.
                        validator_src_address:
                          type: string
                          description: >-
                            validator_src_address is the validator redelegation
                            source operator address.
                        validator_dst_address:
                          type: string
                          description: >-
                            validator_dst_address is the validator redelegation
                            destination operator address.
                        entries:
                          type: array
                          items:
                            type: object
                            properties:
                              creation_height:
                                type: string
                                format: int64
                                description: >-
                                  creation_height  defines the height which the
                                  redelegation took place.
                              completion_time:
                                type: string
                                format: date-time
                                description: >-
                                  completion_time defines the unix time for
                                  redelegation completion.
                              initial_balance:
                                type: string
                                description: >-
                                  initial_balance defines the initial balance
                                  when redelegation started.
                              shares_dst:
                                type: string
                                description: >-
                                  shares_dst is the amount of
                                  destination-validator shares created by
                                  redelegation.
                            description: >-
                              RedelegationEntry defines a redelegation object
                              with relevant metadata.
                          description: entries are the redelegation entries.
                      description: >-
                        Redelegation contains the list of a particular
                        delegator's redelegating bonds

                        from a particular source validator to a particular
                        destination validator.
                    entries:
                      type: array
                      items:
                        type: object
                        properties:
                          redelegation_entry:
                            type: object
                            properties:
                              creation_height:
                                type: string
                                format: int64
                                description: >-
                                  creation_height  defines the height which the
                                  redelegation took place.
                              completion_time:
                                type: string
                                format: date-time
                                description: >-
                                  completion_time defines the unix time for
                                  redelegation completion.
                              initial_balance:
                                type: string
                                description: >-
                                  initial_balance defines the initial balance
                                  when redelegation started.
                              shares_dst:
                                type: string
                                description: >-
                                  shares_dst is the amount of
                                  destination-validator shares created by
                                  redelegation.
                            description: >-
                              RedelegationEntry defines a redelegation object
                              with relevant metadata.
                          balance:
                            type: string
                        description: >-
                          RedelegationEntryResponse is equivalent to a
                          RedelegationEntry except that it

                          contains a balance in addition to shares which is more
                          suitable for client

                          responses.
                  description: >-
                    RedelegationResponse is equivalent to a Redelegation except
                    that its entries

                    contain a balance in addition to shares which is more
                    suitable for client

                    responses.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryRedelegationsResponse is response type for the
              Query/Redelegations RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: src_validator_addr
          description: src_validator_addr defines the validator address to redelegate from.
          in: query
          required: false
          type: string
        - name: dst_validator_addr
          description: dst_validator_addr defines the validator address to redelegate to.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations':
    get:
      summary: >-
        DelegatorUnbondingDelegations queries all unbonding delegations of a
        given

        delegator address.
      operationId: DelegatorUnbondingDelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              unbonding_responses:
                type: array
                items:
                  type: object
                  properties:
                    delegator_address:
                      type: string
                      description: >-
                        delegator_address is the bech32-encoded address of the
                        delegator.
                    validator_address:
                      type: string
                      description: >-
                        validator_address is the bech32-encoded address of the
                        validator.
                    entries:
                      type: array
                      items:
                        type: object
                        properties:
                          creation_height:
                            type: string
                            format: int64
                            description: >-
                              creation_height is the height which the unbonding
                              took place.
                          completion_time:
                            type: string
                            format: date-time
                            description: >-
                              completion_time is the unix time for unbonding
                              completion.
                          initial_balance:
                            type: string
                            description: >-
                              initial_balance defines the tokens initially
                              scheduled to receive at completion.
                          balance:
                            type: string
                            description: >-
                              balance defines the tokens to receive at
                              completion.
                        description: >-
                          UnbondingDelegationEntry defines an unbonding object
                          with relevant metadata.
                      description: entries are the unbonding delegation entries.
                  description: >-
                    UnbondingDelegation stores all of a single delegator's
                    unbonding bonds

                    for a single validator in an time-ordered list.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryUnbondingDelegatorDelegationsResponse is response type for
              the

              Query/UnbondingDelegatorDelegations RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators':
    get:
      summary: |-
        DelegatorValidators queries all validators info for given delegator
        address.
      operationId: StakingDelegatorValidators
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: object
                  properties:
                    operator_address:
                      type: string
                      description: >-
                        operator_address defines the address of the validator's
                        operator; bech encoded in JSON.
                    consensus_pubkey:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    jailed:
                      type: boolean
                      description: >-
                        jailed defined whether the validator has been jailed
                        from bonded status or not.
                    status:
                      description: >-
                        status is the validator status
                        (bonded/unbonding/unbonded).
                      type: string
                      enum:
                        - BOND_STATUS_UNSPECIFIED
                        - BOND_STATUS_UNBONDED
                        - BOND_STATUS_UNBONDING
                        - BOND_STATUS_BONDED
                      default: BOND_STATUS_UNSPECIFIED
                    tokens:
                      type: string
                      description: >-
                        tokens define the delegated tokens (incl.
                        self-delegation).
                    delegator_shares:
                      type: string
                      description: >-
                        delegator_shares defines total shares issued to a
                        validator's delegators.
                    description:
                      description: >-
                        description defines the description terms for the
                        validator.
                      type: object
                      properties:
                        moniker:
                          type: string
                          description: >-
                            moniker defines a human-readable name for the
                            validator.
                        identity:
                          type: string
                          description: >-
                            identity defines an optional identity signature (ex.
                            UPort or Keybase).
                        website:
                          type: string
                          description: website defines an optional website link.
                        security_contact:
                          type: string
                          description: >-
                            security_contact defines an optional email for
                            security contact.
                        details:
                          type: string
                          description: details define other optional details.
                    unbonding_height:
                      type: string
                      format: int64
                      description: >-
                        unbonding_height defines, if unbonding, the height at
                        which this validator has begun unbonding.
                    unbonding_time:
                      type: string
                      format: date-time
                      description: >-
                        unbonding_time defines, if unbonding, the min time for
                        the validator to complete unbonding.
                    commission:
                      description: commission defines the commission parameters.
                      type: object
                      properties:
                        commission_rates:
                          description: >-
                            commission_rates defines the initial commission
                            rates to be used for creating a validator.
                          type: object
                          properties:
                            rate:
                              type: string
                              description: >-
                                rate is the commission rate charged to
                                delegators, as a fraction.
                            max_rate:
                              type: string
                              description: >-
                                max_rate defines the maximum commission rate
                                which validator can ever charge, as a fraction.
                            max_change_rate:
                              type: string
                              description: >-
                                max_change_rate defines the maximum daily
                                increase of the validator commission, as a
                                fraction.
                        update_time:
                          type: string
                          format: date-time
                          description: >-
                            update_time is the last time the commission rate was
                            changed.
                    min_self_delegation:
                      type: string
                      description: >-
                        min_self_delegation is the validator's self declared
                        minimum self delegation.


                        Since: cosmos-sdk 0.46
                  description: >-
                    Validator defines a validator, together with the total
                    amount of the

                    Validator's bond shares and their exchange rate to coins.
                    Slashing results in

                    a decrease in the exchange rate, allowing correct
                    calculation of future

                    undelegations without iterating over delegators. When coins
                    are delegated to

                    this validator, the validator is credited with a delegation
                    whose number of

                    bond shares is based on the amount of coins delegated
                    divided by the current

                    exchange rate. Voting power can be calculated as total
                    bonded shares

                    multiplied by exchange rate.
                description: validators defines the validators' info of a delegator.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: |-
              QueryDelegatorValidatorsResponse is response type for the
              Query/DelegatorValidators RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}':
    get:
      summary: |-
        DelegatorValidator queries validator info for given delegator validator
        pair.
      operationId: DelegatorValidator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validator:
                type: object
                properties:
                  operator_address:
                    type: string
                    description: >-
                      operator_address defines the address of the validator's
                      operator; bech encoded in JSON.
                  consensus_pubkey:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  jailed:
                    type: boolean
                    description: >-
                      jailed defined whether the validator has been jailed from
                      bonded status or not.
                  status:
                    description: >-
                      status is the validator status
                      (bonded/unbonding/unbonded).
                    type: string
                    enum:
                      - BOND_STATUS_UNSPECIFIED
                      - BOND_STATUS_UNBONDED
                      - BOND_STATUS_UNBONDING
                      - BOND_STATUS_BONDED
                    default: BOND_STATUS_UNSPECIFIED
                  tokens:
                    type: string
                    description: >-
                      tokens define the delegated tokens (incl.
                      self-delegation).
                  delegator_shares:
                    type: string
                    description: >-
                      delegator_shares defines total shares issued to a
                      validator's delegators.
                  description:
                    description: >-
                      description defines the description terms for the
                      validator.
                    type: object
                    properties:
                      moniker:
                        type: string
                        description: >-
                          moniker defines a human-readable name for the
                          validator.
                      identity:
                        type: string
                        description: >-
                          identity defines an optional identity signature (ex.
                          UPort or Keybase).
                      website:
                        type: string
                        description: website defines an optional website link.
                      security_contact:
                        type: string
                        description: >-
                          security_contact defines an optional email for
                          security contact.
                      details:
                        type: string
                        description: details define other optional details.
                  unbonding_height:
                    type: string
                    format: int64
                    description: >-
                      unbonding_height defines, if unbonding, the height at
                      which this validator has begun unbonding.
                  unbonding_time:
                    type: string
                    format: date-time
                    description: >-
                      unbonding_time defines, if unbonding, the min time for the
                      validator to complete unbonding.
                  commission:
                    description: commission defines the commission parameters.
                    type: object
                    properties:
                      commission_rates:
                        description: >-
                          commission_rates defines the initial commission rates
                          to be used for creating a validator.
                        type: object
                        properties:
                          rate:
                            type: string
                            description: >-
                              rate is the commission rate charged to delegators,
                              as a fraction.
                          max_rate:
                            type: string
                            description: >-
                              max_rate defines the maximum commission rate which
                              validator can ever charge, as a fraction.
                          max_change_rate:
                            type: string
                            description: >-
                              max_change_rate defines the maximum daily increase
                              of the validator commission, as a fraction.
                      update_time:
                        type: string
                        format: date-time
                        description: >-
                          update_time is the last time the commission rate was
                          changed.
                  min_self_delegation:
                    type: string
                    description: >-
                      min_self_delegation is the validator's self declared
                      minimum self delegation.


                      Since: cosmos-sdk 0.46
                description: >-
                  Validator defines a validator, together with the total amount
                  of the

                  Validator's bond shares and their exchange rate to coins.
                  Slashing results in

                  a decrease in the exchange rate, allowing correct calculation
                  of future

                  undelegations without iterating over delegators. When coins
                  are delegated to

                  this validator, the validator is credited with a delegation
                  whose number of

                  bond shares is based on the amount of coins delegated divided
                  by the current

                  exchange rate. Voting power can be calculated as total bonded
                  shares

                  multiplied by exchange rate.
            description: |-
              QueryDelegatorValidatorResponse response type for the
              Query/DelegatorValidator RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/staking/v1beta1/historical_info/{height}':
    get:
      summary: HistoricalInfo queries the historical info for given height.
      operationId: HistoricalInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              hist:
                description: hist defines the historical info at the given height.
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        title: prev block info
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                    description: Header defines the structure of a block header.
                  valset:
                    type: array
                    items:
                      type: object
                      properties:
                        operator_address:
                          type: string
                          description: >-
                            operator_address defines the address of the
                            validator's operator; bech encoded in JSON.
                        consensus_pubkey:
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                            value:
                              type: string
                              format: byte
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := ptypes.MarshalAny(foo)
                                 ...
                                 foo := &pb.Foo{}
                                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                        jailed:
                          type: boolean
                          description: >-
                            jailed defined whether the validator has been jailed
                            from bonded status or not.
                        status:
                          description: >-
                            status is the validator status
                            (bonded/unbonding/unbonded).
                          type: string
                          enum:
                            - BOND_STATUS_UNSPECIFIED
                            - BOND_STATUS_UNBONDED
                            - BOND_STATUS_UNBONDING
                            - BOND_STATUS_BONDED
                          default: BOND_STATUS_UNSPECIFIED
                        tokens:
                          type: string
                          description: >-
                            tokens define the delegated tokens (incl.
                            self-delegation).
                        delegator_shares:
                          type: string
                          description: >-
                            delegator_shares defines total shares issued to a
                            validator's delegators.
                        description:
                          description: >-
                            description defines the description terms for the
                            validator.
                          type: object
                          properties:
                            moniker:
                              type: string
                              description: >-
                                moniker defines a human-readable name for the
                                validator.
                            identity:
                              type: string
                              description: >-
                                identity defines an optional identity signature
                                (ex. UPort or Keybase).
                            website:
                              type: string
                              description: website defines an optional website link.
                            security_contact:
                              type: string
                              description: >-
                                security_contact defines an optional email for
                                security contact.
                            details:
                              type: string
                              description: details define other optional details.
                        unbonding_height:
                          type: string
                          format: int64
                          description: >-
                            unbonding_height defines, if unbonding, the height
                            at which this validator has begun unbonding.
                        unbonding_time:
                          type: string
                          format: date-time
                          description: >-
                            unbonding_time defines, if unbonding, the min time
                            for the validator to complete unbonding.
                        commission:
                          description: commission defines the commission parameters.
                          type: object
                          properties:
                            commission_rates:
                              description: >-
                                commission_rates defines the initial commission
                                rates to be used for creating a validator.
                              type: object
                              properties:
                                rate:
                                  type: string
                                  description: >-
                                    rate is the commission rate charged to
                                    delegators, as a fraction.
                                max_rate:
                                  type: string
                                  description: >-
                                    max_rate defines the maximum commission rate
                                    which validator can ever charge, as a
                                    fraction.
                                max_change_rate:
                                  type: string
                                  description: >-
                                    max_change_rate defines the maximum daily
                                    increase of the validator commission, as a
                                    fraction.
                            update_time:
                              type: string
                              format: date-time
                              description: >-
                                update_time is the last time the commission rate
                                was changed.
                        min_self_delegation:
                          type: string
                          description: >-
                            min_self_delegation is the validator's self declared
                            minimum self delegation.


                            Since: cosmos-sdk 0.46
                      description: >-
                        Validator defines a validator, together with the total
                        amount of the

                        Validator's bond shares and their exchange rate to
                        coins. Slashing results in

                        a decrease in the exchange rate, allowing correct
                        calculation of future

                        undelegations without iterating over delegators. When
                        coins are delegated to

                        this validator, the validator is credited with a
                        delegation whose number of

                        bond shares is based on the amount of coins delegated
                        divided by the current

                        exchange rate. Voting power can be calculated as total
                        bonded shares

                        multiplied by exchange rate.
            description: >-
              QueryHistoricalInfoResponse is response type for the
              Query/HistoricalInfo RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: height
          description: height defines at which height to query the historical info.
          in: path
          required: true
          type: string
          format: int64
      tags:
        - Query
  /cosmos/staking/v1beta1/params:
    get:
      summary: Parameters queries the staking parameters.
      operationId: StakingParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params holds all the parameters of this module.
                type: object
                properties:
                  unbonding_time:
                    type: string
                    description: unbonding_time is the time duration of unbonding.
                  max_validators:
                    type: integer
                    format: int64
                    description: max_validators is the maximum number of validators.
                  max_entries:
                    type: integer
                    format: int64
                    description: >-
                      max_entries is the max entries for either unbonding
                      delegation or redelegation (per pair/trio).
                  historical_entries:
                    type: integer
                    format: int64
                    description: >-
                      historical_entries is the number of historical entries to
                      persist.
                  bond_denom:
                    type: string
                    description: bond_denom defines the bondable coin denomination.
                  min_commission_rate:
                    type: string
                    title: >-
                      min_commission_rate is the chain-wide minimum commission
                      rate that a validator can charge their delegators
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmos/staking/v1beta1/pool:
    get:
      summary: Pool queries the pool info.
      operationId: Pool
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool:
                description: pool defines the pool info.
                type: object
                properties:
                  not_bonded_tokens:
                    type: string
                  bonded_tokens:
                    type: string
            description: QueryPoolResponse is response type for the Query/Pool RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmos/staking/v1beta1/validators:
    get:
      summary: Validators queries all validators that match the given status.
      operationId: Validators
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: object
                  properties:
                    operator_address:
                      type: string
                      description: >-
                        operator_address defines the address of the validator's
                        operator; bech encoded in JSON.
                    consensus_pubkey:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    jailed:
                      type: boolean
                      description: >-
                        jailed defined whether the validator has been jailed
                        from bonded status or not.
                    status:
                      description: >-
                        status is the validator status
                        (bonded/unbonding/unbonded).
                      type: string
                      enum:
                        - BOND_STATUS_UNSPECIFIED
                        - BOND_STATUS_UNBONDED
                        - BOND_STATUS_UNBONDING
                        - BOND_STATUS_BONDED
                      default: BOND_STATUS_UNSPECIFIED
                    tokens:
                      type: string
                      description: >-
                        tokens define the delegated tokens (incl.
                        self-delegation).
                    delegator_shares:
                      type: string
                      description: >-
                        delegator_shares defines total shares issued to a
                        validator's delegators.
                    description:
                      description: >-
                        description defines the description terms for the
                        validator.
                      type: object
                      properties:
                        moniker:
                          type: string
                          description: >-
                            moniker defines a human-readable name for the
                            validator.
                        identity:
                          type: string
                          description: >-
                            identity defines an optional identity signature (ex.
                            UPort or Keybase).
                        website:
                          type: string
                          description: website defines an optional website link.
                        security_contact:
                          type: string
                          description: >-
                            security_contact defines an optional email for
                            security contact.
                        details:
                          type: string
                          description: details define other optional details.
                    unbonding_height:
                      type: string
                      format: int64
                      description: >-
                        unbonding_height defines, if unbonding, the height at
                        which this validator has begun unbonding.
                    unbonding_time:
                      type: string
                      format: date-time
                      description: >-
                        unbonding_time defines, if unbonding, the min time for
                        the validator to complete unbonding.
                    commission:
                      description: commission defines the commission parameters.
                      type: object
                      properties:
                        commission_rates:
                          description: >-
                            commission_rates defines the initial commission
                            rates to be used for creating a validator.
                          type: object
                          properties:
                            rate:
                              type: string
                              description: >-
                                rate is the commission rate charged to
                                delegators, as a fraction.
                            max_rate:
                              type: string
                              description: >-
                                max_rate defines the maximum commission rate
                                which validator can ever charge, as a fraction.
                            max_change_rate:
                              type: string
                              description: >-
                                max_change_rate defines the maximum daily
                                increase of the validator commission, as a
                                fraction.
                        update_time:
                          type: string
                          format: date-time
                          description: >-
                            update_time is the last time the commission rate was
                            changed.
                    min_self_delegation:
                      type: string
                      description: >-
                        min_self_delegation is the validator's self declared
                        minimum self delegation.


                        Since: cosmos-sdk 0.46
                  description: >-
                    Validator defines a validator, together with the total
                    amount of the

                    Validator's bond shares and their exchange rate to coins.
                    Slashing results in

                    a decrease in the exchange rate, allowing correct
                    calculation of future

                    undelegations without iterating over delegators. When coins
                    are delegated to

                    this validator, the validator is credited with a delegation
                    whose number of

                    bond shares is based on the amount of coins delegated
                    divided by the current

                    exchange rate. Voting power can be calculated as total
                    bonded shares

                    multiplied by exchange rate.
                description: validators contains all the queried validators.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: >-
              QueryValidatorsResponse is response type for the Query/Validators
              RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: status
          description: status enables to query for validators matching a given status.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/staking/v1beta1/validators/{validator_addr}':
    get:
      summary: Validator queries validator info for given validator address.
      operationId: Validator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validator:
                type: object
                properties:
                  operator_address:
                    type: string
                    description: >-
                      operator_address defines the address of the validator's
                      operator; bech encoded in JSON.
                  consensus_pubkey:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  jailed:
                    type: boolean
                    description: >-
                      jailed defined whether the validator has been jailed from
                      bonded status or not.
                  status:
                    description: >-
                      status is the validator status
                      (bonded/unbonding/unbonded).
                    type: string
                    enum:
                      - BOND_STATUS_UNSPECIFIED
                      - BOND_STATUS_UNBONDED
                      - BOND_STATUS_UNBONDING
                      - BOND_STATUS_BONDED
                    default: BOND_STATUS_UNSPECIFIED
                  tokens:
                    type: string
                    description: >-
                      tokens define the delegated tokens (incl.
                      self-delegation).
                  delegator_shares:
                    type: string
                    description: >-
                      delegator_shares defines total shares issued to a
                      validator's delegators.
                  description:
                    description: >-
                      description defines the description terms for the
                      validator.
                    type: object
                    properties:
                      moniker:
                        type: string
                        description: >-
                          moniker defines a human-readable name for the
                          validator.
                      identity:
                        type: string
                        description: >-
                          identity defines an optional identity signature (ex.
                          UPort or Keybase).
                      website:
                        type: string
                        description: website defines an optional website link.
                      security_contact:
                        type: string
                        description: >-
                          security_contact defines an optional email for
                          security contact.
                      details:
                        type: string
                        description: details define other optional details.
                  unbonding_height:
                    type: string
                    format: int64
                    description: >-
                      unbonding_height defines, if unbonding, the height at
                      which this validator has begun unbonding.
                  unbonding_time:
                    type: string
                    format: date-time
                    description: >-
                      unbonding_time defines, if unbonding, the min time for the
                      validator to complete unbonding.
                  commission:
                    description: commission defines the commission parameters.
                    type: object
                    properties:
                      commission_rates:
                        description: >-
                          commission_rates defines the initial commission rates
                          to be used for creating a validator.
                        type: object
                        properties:
                          rate:
                            type: string
                            description: >-
                              rate is the commission rate charged to delegators,
                              as a fraction.
                          max_rate:
                            type: string
                            description: >-
                              max_rate defines the maximum commission rate which
                              validator can ever charge, as a fraction.
                          max_change_rate:
                            type: string
                            description: >-
                              max_change_rate defines the maximum daily increase
                              of the validator commission, as a fraction.
                      update_time:
                        type: string
                        format: date-time
                        description: >-
                          update_time is the last time the commission rate was
                          changed.
                  min_self_delegation:
                    type: string
                    description: >-
                      min_self_delegation is the validator's self declared
                      minimum self delegation.


                      Since: cosmos-sdk 0.46
                description: >-
                  Validator defines a validator, together with the total amount
                  of the

                  Validator's bond shares and their exchange rate to coins.
                  Slashing results in

                  a decrease in the exchange rate, allowing correct calculation
                  of future

                  undelegations without iterating over delegators. When coins
                  are delegated to

                  this validator, the validator is credited with a delegation
                  whose number of

                  bond shares is based on the amount of coins delegated divided
                  by the current

                  exchange rate. Voting power can be calculated as total bonded
                  shares

                  multiplied by exchange rate.
            title: >-
              QueryValidatorResponse is response type for the Query/Validator
              RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/staking/v1beta1/validators/{validator_addr}/delegations':
    get:
      summary: ValidatorDelegations queries delegate info for given validator.
      operationId: ValidatorDelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              delegation_responses:
                type: array
                items:
                  type: object
                  properties:
                    delegation:
                      type: object
                      properties:
                        delegator_address:
                          type: string
                          description: >-
                            delegator_address is the bech32-encoded address of
                            the delegator.
                        validator_address:
                          type: string
                          description: >-
                            validator_address is the bech32-encoded address of
                            the validator.
                        shares:
                          type: string
                          description: shares define the delegation shares received.
                      description: >-
                        Delegation represents the bond with tokens held by an
                        account. It is

                        owned by one delegator, and is associated with the
                        voting power of one

                        validator.
                    balance:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  description: >-
                    DelegationResponse is equivalent to Delegation except that
                    it contains a

                    balance in addition to shares which is more suitable for
                    client responses.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: |-
              QueryValidatorDelegationsResponse is response type for the
              Query/ValidatorDelegations RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}':
    get:
      summary: Delegation queries delegate info for given validator delegator pair.
      operationId: Delegation
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              delegation_response:
                type: object
                properties:
                  delegation:
                    type: object
                    properties:
                      delegator_address:
                        type: string
                        description: >-
                          delegator_address is the bech32-encoded address of the
                          delegator.
                      validator_address:
                        type: string
                        description: >-
                          validator_address is the bech32-encoded address of the
                          validator.
                      shares:
                        type: string
                        description: shares define the delegation shares received.
                    description: >-
                      Delegation represents the bond with tokens held by an
                      account. It is

                      owned by one delegator, and is associated with the voting
                      power of one

                      validator.
                  balance:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                description: >-
                  DelegationResponse is equivalent to Delegation except that it
                  contains a

                  balance in addition to shares which is more suitable for
                  client responses.
            description: >-
              QueryDelegationResponse is response type for the Query/Delegation
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation':
    get:
      summary: |-
        UnbondingDelegation queries unbonding info for given validator delegator
        pair.
      operationId: UnbondingDelegation
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              unbond:
                type: object
                properties:
                  delegator_address:
                    type: string
                    description: >-
                      delegator_address is the bech32-encoded address of the
                      delegator.
                  validator_address:
                    type: string
                    description: >-
                      validator_address is the bech32-encoded address of the
                      validator.
                  entries:
                    type: array
                    items:
                      type: object
                      properties:
                        creation_height:
                          type: string
                          format: int64
                          description: >-
                            creation_height is the height which the unbonding
                            took place.
                        completion_time:
                          type: string
                          format: date-time
                          description: >-
                            completion_time is the unix time for unbonding
                            completion.
                        initial_balance:
                          type: string
                          description: >-
                            initial_balance defines the tokens initially
                            scheduled to receive at completion.
                        balance:
                          type: string
                          description: balance defines the tokens to receive at completion.
                      description: >-
                        UnbondingDelegationEntry defines an unbonding object
                        with relevant metadata.
                    description: entries are the unbonding delegation entries.
                description: >-
                  UnbondingDelegation stores all of a single delegator's
                  unbonding bonds

                  for a single validator in an time-ordered list.
            description: >-
              QueryDelegationResponse is response type for the
              Query/UnbondingDelegation

              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations':
    get:
      summary: >-
        ValidatorUnbondingDelegations queries unbonding delegations of a
        validator.
      operationId: ValidatorUnbondingDelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              unbonding_responses:
                type: array
                items:
                  type: object
                  properties:
                    delegator_address:
                      type: string
                      description: >-
                        delegator_address is the bech32-encoded address of the
                        delegator.
                    validator_address:
                      type: string
                      description: >-
                        validator_address is the bech32-encoded address of the
                        validator.
                    entries:
                      type: array
                      items:
                        type: object
                        properties:
                          creation_height:
                            type: string
                            format: int64
                            description: >-
                              creation_height is the height which the unbonding
                              took place.
                          completion_time:
                            type: string
                            format: date-time
                            description: >-
                              completion_time is the unix time for unbonding
                              completion.
                          initial_balance:
                            type: string
                            description: >-
                              initial_balance defines the tokens initially
                              scheduled to receive at completion.
                          balance:
                            type: string
                            description: >-
                              balance defines the tokens to receive at
                              completion.
                        description: >-
                          UnbondingDelegationEntry defines an unbonding object
                          with relevant metadata.
                      description: entries are the unbonding delegation entries.
                  description: >-
                    UnbondingDelegation stores all of a single delegator's
                    unbonding bonds

                    for a single validator in an time-ordered list.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryValidatorUnbondingDelegationsResponse is response type for
              the

              Query/ValidatorUnbondingDelegations RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/tx/v1beta1/simulate:
    post:
      summary: Simulate simulates executing a transaction for estimating gas usage.
      operationId: Simulate
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              gas_info:
                description: gas_info is the information about gas used in the simulation.
                type: object
                properties:
                  gas_wanted:
                    type: string
                    format: uint64
                    description: >-
                      GasWanted is the maximum units of work we allow this tx to
                      perform.
                  gas_used:
                    type: string
                    format: uint64
                    description: GasUsed is the amount of gas actually consumed.
              result:
                description: result is the result of the simulation.
                type: object
                properties:
                  data:
                    type: string
                    format: byte
                    description: >-
                      Data is any data returned from message or handler
                      execution. It MUST be

                      length prefixed in order to separate data from multiple
                      message executions.

                      Deprecated. This field is still populated, but prefer
                      msg_response instead

                      because it also contains the Msg response typeURL.
                  log:
                    type: string
                    description: >-
                      Log contains the log information from message or handler
                      execution.
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                                format: byte
                              value:
                                type: string
                                format: byte
                              index:
                                type: boolean
                            description: >-
                              EventAttribute is a single key-value pair,
                              associated with an event.
                      description: >-
                        Event allows application developers to attach additional
                        information to

                        ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx
                        and ResponseDeliverTx.

                        Later, transactions may be queried using these events.
                    description: >-
                      Events contains a slice of Event objects that were emitted
                      during message

                      or handler execution.
                  msg_responses:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    description: >-
                      msg_responses contains the Msg handler responses type
                      packed in Anys.


                      Since: cosmos-sdk 0.46
            description: |-
              SimulateResponse is the response type for the
              Service.SimulateRPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.SimulateRequest'
      tags:
        - Service
  /cosmos/tx/v1beta1/txs:
    get:
      summary: GetTxsEvent fetches txs by event.
      operationId: GetTxsEvent
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.GetTxsEventResponse'
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: events
          description: events is the list of transaction event type.
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
        - name: order_by
          description: |2-
             - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.
             - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order
             - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
          in: query
          required: false
          type: string
          enum:
            - ORDER_BY_UNSPECIFIED
            - ORDER_BY_ASC
            - ORDER_BY_DESC
          default: ORDER_BY_UNSPECIFIED
        - name: page
          description: >-
            page is the page number to query, starts at 1. If not provided, will
            default to first page.
          in: query
          required: false
          type: string
          format: uint64
        - name: limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
      tags:
        - Service
    post:
      summary: BroadcastTx broadcast transaction.
      operationId: BroadcastTx
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              tx_response:
                type: object
                properties:
                  height:
                    type: string
                    format: int64
                    title: The block height
                  txhash:
                    type: string
                    description: The transaction hash.
                  codespace:
                    type: string
                    title: Namespace for the Code
                  code:
                    type: integer
                    format: int64
                    description: Response code.
                  data:
                    type: string
                    description: 'Result bytes, if any.'
                  raw_log:
                    type: string
                    description: >-
                      The output of the application's logger (raw string). May
                      be

                      non-deterministic.
                  logs:
                    type: array
                    items:
                      type: object
                      properties:
                        msg_index:
                          type: integer
                          format: int64
                        log:
                          type: string
                        events:
                          type: array
                          items:
                            type: object
                            properties:
                              type:
                                type: string
                              attributes:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    key:
                                      type: string
                                    value:
                                      type: string
                                  description: >-
                                    Attribute defines an attribute wrapper where
                                    the key and value are

                                    strings instead of raw bytes.
                            description: >-
                              StringEvent defines en Event object wrapper where
                              all the attributes

                              contain key/value pairs that are strings instead
                              of raw bytes.
                          description: >-
                            Events contains a slice of Event objects that were
                            emitted during some

                            execution.
                      description: >-
                        ABCIMessageLog defines a structure containing an indexed
                        tx ABCI message log.
                    description: >-
                      The output of the application's logger (typed). May be
                      non-deterministic.
                  info:
                    type: string
                    description: Additional information. May be non-deterministic.
                  gas_wanted:
                    type: string
                    format: int64
                    description: Amount of gas requested for transaction.
                  gas_used:
                    type: string
                    format: int64
                    description: Amount of gas consumed by transaction.
                  tx:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  timestamp:
                    type: string
                    description: >-
                      Time of the previous block. For heights > 1, it's the
                      weighted median of

                      the timestamps of the valid votes in the block.LastCommit.
                      For height == 1,

                      it's genesis time.
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                                format: byte
                              value:
                                type: string
                                format: byte
                              index:
                                type: boolean
                            description: >-
                              EventAttribute is a single key-value pair,
                              associated with an event.
                      description: >-
                        Event allows application developers to attach additional
                        information to

                        ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx
                        and ResponseDeliverTx.

                        Later, transactions may be queried using these events.
                    description: >-
                      Events defines all the events emitted by processing a
                      transaction. Note,

                      these events include those emitted by processing all the
                      messages and those

                      emitted from the ante. Whereas Logs contains the events,
                      with

                      additional metadata, emitted only by processing the
                      messages.


                      Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
                description: >-
                  TxResponse defines a structure containing relevant tx data and
                  metadata. The

                  tags are stringified and the log is JSON decoded.
            description: |-
              BroadcastTxResponse is the response type for the
              Service.BroadcastTx method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              tx_bytes:
                type: string
                format: byte
                description: tx_bytes is the raw transaction.
              mode:
                type: string
                enum:
                  - BROADCAST_MODE_UNSPECIFIED
                  - BROADCAST_MODE_BLOCK
                  - BROADCAST_MODE_SYNC
                  - BROADCAST_MODE_ASYNC
                default: BROADCAST_MODE_UNSPECIFIED
                description: >-
                  BroadcastMode specifies the broadcast mode for the
                  TxService.Broadcast RPC method.

                   - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
                   - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
                  the tx to be committed in a block.
                   - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
                  a CheckTx execution response only.
                   - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
                  immediately.
            description: >-
              BroadcastTxRequest is the request type for the
              Service.BroadcastTxRequest

              RPC method.
      tags:
        - Service
  '/cosmos/tx/v1beta1/txs/block/{height}':
    get:
      summary: GetBlockWithTxs fetches a block with decoded txs.
      description: 'Since: cosmos-sdk 0.45.2'
      operationId: GetBlockWithTxs
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.GetBlockWithTxsResponse'
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: height
          description: height is the height of the block to query.
          in: path
          required: true
          type: string
          format: int64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Service
  '/cosmos/tx/v1beta1/txs/{hash}':
    get:
      summary: GetTx fetches a tx by hash.
      operationId: GetTx
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.GetTxResponse'
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: hash
          description: 'hash is the tx hash to query, encoded as a hex string.'
          in: path
          required: true
          type: string
      tags:
        - Service
  '/cosmos/upgrade/v1beta1/applied_plan/{name}':
    get:
      summary: AppliedPlan queries a previously applied upgrade plan by its name.
      operationId: AppliedPlan
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              height:
                type: string
                format: int64
                description: height is the block height at which the plan was applied.
            description: >-
              QueryAppliedPlanResponse is the response type for the
              Query/AppliedPlan RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: name
          description: name is the name of the applied plan to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/upgrade/v1beta1/authority:
    get:
      summary: Returns the account with authority to conduct upgrades
      description: 'Since: cosmos-sdk 0.46'
      operationId: Authority
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              address:
                type: string
            description: 'Since: cosmos-sdk 0.46'
            title: QueryAuthorityResponse is the response type for Query/Authority
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmos/upgrade/v1beta1/current_plan:
    get:
      summary: CurrentPlan queries the current upgrade plan.
      operationId: CurrentPlan
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              plan:
                description: plan is the current upgrade plan.
                type: object
                properties:
                  name:
                    type: string
                    description: >-
                      Sets the name for the upgrade. This name will be used by
                      the upgraded

                      version of the software to apply any special "on-upgrade"
                      commands during

                      the first BeginBlock method after the upgrade is applied.
                      It is also used

                      to detect whether a software version can handle a given
                      upgrade. If no

                      upgrade handler with this name has been set in the
                      software, it will be

                      assumed that the software is out-of-date when the upgrade
                      Time or Height is

                      reached and the software will exit.
                  time:
                    type: string
                    format: date-time
                    description: >-
                      Deprecated: Time based upgrades have been deprecated. Time
                      based upgrade logic

                      has been removed from the SDK.

                      If this field is not empty, an error will be thrown.
                  height:
                    type: string
                    format: int64
                    description: |-
                      The height at which the upgrade must be performed.
                      Only used if Time is not set.
                  info:
                    type: string
                    title: >-
                      Any application specific upgrade info to be included
                      on-chain

                      such as a git commit that validators could automatically
                      upgrade to
                  upgraded_client_state:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
            description: >-
              QueryCurrentPlanResponse is the response type for the
              Query/CurrentPlan RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmos/upgrade/v1beta1/module_versions:
    get:
      summary: ModuleVersions queries the list of module versions from state.
      description: 'Since: cosmos-sdk 0.43'
      operationId: ModuleVersions
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              module_versions:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      title: name of the app module
                    version:
                      type: string
                      format: uint64
                      title: consensus version of the app module
                  description: |-
                    ModuleVersion specifies a module and its consensus version.

                    Since: cosmos-sdk 0.43
                description: >-
                  module_versions is a list of module names with their consensus
                  versions.
            description: >-
              QueryModuleVersionsResponse is the response type for the
              Query/ModuleVersions

              RPC method.


              Since: cosmos-sdk 0.43
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: module_name
          description: |-
            module_name is a field to query a specific module
            consensus version from state. Leaving this empty will
            fetch the full list of module versions from state.
          in: query
          required: false
          type: string
      tags:
        - Query
  '/cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}':
    get:
      summary: >-
        UpgradedConsensusState queries the consensus state that will serve

        as a trusted kernel for the next version of this chain. It will only be

        stored at the last height of this chain.

        UpgradedConsensusState RPC not supported with legacy querier

        This rpc is deprecated now that IBC has its own replacement

        (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
      operationId: UpgradedConsensusState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              upgraded_consensus_state:
                type: string
                format: byte
                title: 'Since: cosmos-sdk 0.43'
            description: >-
              QueryUpgradedConsensusStateResponse is the response type for the
              Query/UpgradedConsensusState

              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: last_height
          description: |-
            last height of the current chain must be sent in request
            as this is the height under which next consensus state is stored
          in: path
          required: true
          type: string
          format: int64
      tags:
        - Query
  /cosmos/authz/v1beta1/grants:
    get:
      summary: 'Returns list of `Authorization`, granted to the grantee by the granter.'
      operationId: Grants
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              grants:
                type: array
                items:
                  type: object
                  properties:
                    authorization:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    expiration:
                      type: string
                      format: date-time
                      title: >-
                        time when the grant will expire and will be pruned. If
                        null, then the grant

                        doesn't have a time expiration (other conditions  in
                        `authorization`

                        may apply to invalidate the grant)
                  description: |-
                    Grant gives permissions to execute
                    the provide method with expiration time.
                description: >-
                  authorizations is a list of grants granted for grantee by
                  granter.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryGrantsResponse is the response type for the
              Query/Authorizations RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: granter
          in: query
          required: false
          type: string
        - name: grantee
          in: query
          required: false
          type: string
        - name: msg_type_url
          description: >-
            Optional, msg_type_url, when set, will query only grants matching
            given msg type.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/authz/v1beta1/grants/grantee/{grantee}':
    get:
      summary: GranteeGrants returns a list of `GrantAuthorization` by grantee.
      description: 'Since: cosmos-sdk 0.46'
      operationId: GranteeGrants
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              grants:
                type: array
                items:
                  type: object
                  properties:
                    granter:
                      type: string
                    grantee:
                      type: string
                    authorization:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    expiration:
                      type: string
                      format: date-time
                  title: >-
                    GrantAuthorization extends a grant with both the addresses
                    of the grantee and granter.

                    It is used in genesis.proto and query.proto
                description: grants is a list of grants granted to the grantee.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryGranteeGrantsResponse is the response type for the
              Query/GranteeGrants RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: grantee
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/authz/v1beta1/grants/granter/{granter}':
    get:
      summary: 'GranterGrants returns list of `GrantAuthorization`, granted by granter.'
      description: 'Since: cosmos-sdk 0.46'
      operationId: GranterGrants
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              grants:
                type: array
                items:
                  type: object
                  properties:
                    granter:
                      type: string
                    grantee:
                      type: string
                    authorization:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    expiration:
                      type: string
                      format: date-time
                  title: >-
                    GrantAuthorization extends a grant with both the addresses
                    of the grantee and granter.

                    It is used in genesis.proto and query.proto
                description: grants is a list of grants granted by the granter.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryGranterGrantsResponse is the response type for the
              Query/GranterGrants RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: granter
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}':
    get:
      summary: Allowance returns fee granted to the grantee by the granter.
      operationId: Allowance
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              allowance:
                description: allowance is a allowance granted for grantee by granter.
                type: object
                properties:
                  granter:
                    type: string
                    description: >-
                      granter is the address of the user granting an allowance
                      of their funds.
                  grantee:
                    type: string
                    description: >-
                      grantee is the address of the user being granted an
                      allowance of another user's funds.
                  allowance:
                    description: >-
                      allowance can be any of basic, periodic, allowed fee
                      allowance.
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                title: >-
                  Grant is stored in the KVStore to record a grant with full
                  context
            description: >-
              QueryAllowanceResponse is the response type for the
              Query/Allowance RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: granter
          description: >-
            granter is the address of the user granting an allowance of their
            funds.
          in: path
          required: true
          type: string
        - name: grantee
          description: >-
            grantee is the address of the user being granted an allowance of
            another user's funds.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/feegrant/v1beta1/allowances/{grantee}':
    get:
      summary: Allowances returns all the grants for address.
      operationId: Allowances
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              allowances:
                type: array
                items:
                  type: object
                  properties:
                    granter:
                      type: string
                      description: >-
                        granter is the address of the user granting an allowance
                        of their funds.
                    grantee:
                      type: string
                      description: >-
                        grantee is the address of the user being granted an
                        allowance of another user's funds.
                    allowance:
                      description: >-
                        allowance can be any of basic, periodic, allowed fee
                        allowance.
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                  title: >-
                    Grant is stored in the KVStore to record a grant with full
                    context
                description: allowances are allowance's granted for grantee by granter.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllowancesResponse is the response type for the
              Query/Allowances RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: grantee
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/feegrant/v1beta1/issued/{granter}':
    get:
      summary: AllowancesByGranter returns all the grants given by an address
      description: 'Since: cosmos-sdk 0.46'
      operationId: AllowancesByGranter
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              allowances:
                type: array
                items:
                  type: object
                  properties:
                    granter:
                      type: string
                      description: >-
                        granter is the address of the user granting an allowance
                        of their funds.
                    grantee:
                      type: string
                      description: >-
                        grantee is the address of the user being granted an
                        allowance of another user's funds.
                    allowance:
                      description: >-
                        allowance can be any of basic, periodic, allowed fee
                        allowance.
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                  title: >-
                    Grant is stored in the KVStore to record a grant with full
                    context
                description: allowances that have been issued by the granter.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllowancesByGranterResponse is the response type for the
              Query/AllowancesByGranter RPC method.


              Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: granter
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/group/v1/group_info/{group_id}':
    get:
      summary: GroupInfo queries group info based on group id.
      operationId: GroupInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              info:
                description: info is the GroupInfo for the group.
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                    description: id is the unique ID of the group.
                  admin:
                    type: string
                    description: admin is the account address of the group's admin.
                  metadata:
                    type: string
                    description: >-
                      metadata is any arbitrary metadata to attached to the
                      group.
                  version:
                    type: string
                    format: uint64
                    title: >-
                      version is used to track changes to a group's membership
                      structure that

                      would break existing proposals. Whenever any members
                      weight is changed,

                      or any member is added or removed this version is
                      incremented and will

                      cause proposals based on older versions of this group to
                      fail
                  total_weight:
                    type: string
                    description: total_weight is the sum of the group members' weights.
                  created_at:
                    type: string
                    format: date-time
                    description: >-
                      created_at is a timestamp specifying when a group was
                      created.
            description: QueryGroupInfoResponse is the Query/GroupInfo response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: group_id
          description: group_id is the unique ID of the group.
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/cosmos/group/v1/group_members/{group_id}':
    get:
      summary: GroupMembers queries members of a group
      operationId: GroupMembers
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              members:
                type: array
                items:
                  type: object
                  properties:
                    group_id:
                      type: string
                      format: uint64
                      description: group_id is the unique ID of the group.
                    member:
                      description: member is the member data.
                      type: object
                      properties:
                        address:
                          type: string
                          description: address is the member's account address.
                        weight:
                          type: string
                          description: >-
                            weight is the member's voting weight that should be
                            greater than 0.
                        metadata:
                          type: string
                          description: >-
                            metadata is any arbitrary metadata attached to the
                            member.
                        added_at:
                          type: string
                          format: date-time
                          description: >-
                            added_at is a timestamp specifying when a member was
                            added.
                  description: >-
                    GroupMember represents the relationship between a group and
                    a member.
                description: members are the members of the group with given group_id.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryGroupMembersResponse is the Query/GroupMembersResponse
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: group_id
          description: group_id is the unique ID of the group.
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/group/v1/group_policies_by_admin/{admin}':
    get:
      summary: GroupsByAdmin queries group policies by admin address.
      operationId: GroupPoliciesByAdmin
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              group_policies:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      description: address is the account address of group policy.
                    group_id:
                      type: string
                      format: uint64
                      description: group_id is the unique ID of the group.
                    admin:
                      type: string
                      description: admin is the account address of the group admin.
                    metadata:
                      type: string
                      description: >-
                        metadata is any arbitrary metadata to attached to the
                        group policy.
                    version:
                      type: string
                      format: uint64
                      description: >-
                        version is used to track changes to a group's
                        GroupPolicyInfo structure that

                        would create a different result on a running proposal.
                    decision_policy:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    created_at:
                      type: string
                      format: date-time
                      description: >-
                        created_at is a timestamp specifying when a group policy
                        was created.
                  description: >-
                    GroupPolicyInfo represents the high-level on-chain
                    information for a group policy.
                description: >-
                  group_policies are the group policies info with provided
                  admin.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryGroupPoliciesByAdminResponse is the
              Query/GroupPoliciesByAdmin response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: admin
          description: admin is the admin address of the group policy.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/group/v1/group_policies_by_group/{group_id}':
    get:
      summary: GroupPoliciesByGroup queries group policies by group id.
      operationId: GroupPoliciesByGroup
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              group_policies:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      description: address is the account address of group policy.
                    group_id:
                      type: string
                      format: uint64
                      description: group_id is the unique ID of the group.
                    admin:
                      type: string
                      description: admin is the account address of the group admin.
                    metadata:
                      type: string
                      description: >-
                        metadata is any arbitrary metadata to attached to the
                        group policy.
                    version:
                      type: string
                      format: uint64
                      description: >-
                        version is used to track changes to a group's
                        GroupPolicyInfo structure that

                        would create a different result on a running proposal.
                    decision_policy:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    created_at:
                      type: string
                      format: date-time
                      description: >-
                        created_at is a timestamp specifying when a group policy
                        was created.
                  description: >-
                    GroupPolicyInfo represents the high-level on-chain
                    information for a group policy.
                description: >-
                  group_policies are the group policies info associated with the
                  provided group.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryGroupPoliciesByGroupResponse is the
              Query/GroupPoliciesByGroup response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: group_id
          description: group_id is the unique ID of the group policy's group.
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/group/v1/group_policy_info/{address}':
    get:
      summary: >-
        GroupPolicyInfo queries group policy info based on account address of
        group policy.
      operationId: GroupPolicyInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              info:
                type: object
                properties:
                  address:
                    type: string
                    description: address is the account address of group policy.
                  group_id:
                    type: string
                    format: uint64
                    description: group_id is the unique ID of the group.
                  admin:
                    type: string
                    description: admin is the account address of the group admin.
                  metadata:
                    type: string
                    description: >-
                      metadata is any arbitrary metadata to attached to the
                      group policy.
                  version:
                    type: string
                    format: uint64
                    description: >-
                      version is used to track changes to a group's
                      GroupPolicyInfo structure that

                      would create a different result on a running proposal.
                  decision_policy:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  created_at:
                    type: string
                    format: date-time
                    description: >-
                      created_at is a timestamp specifying when a group policy
                      was created.
                description: >-
                  GroupPolicyInfo represents the high-level on-chain information
                  for a group policy.
            description: >-
              QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the account address of the group policy.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/group/v1/groups:
    get:
      summary: Groups queries all groups in state.
      description: 'Since: cosmos-sdk 0.47.1'
      operationId: Groups
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              groups:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      description: id is the unique ID of the group.
                    admin:
                      type: string
                      description: admin is the account address of the group's admin.
                    metadata:
                      type: string
                      description: >-
                        metadata is any arbitrary metadata to attached to the
                        group.
                    version:
                      type: string
                      format: uint64
                      title: >-
                        version is used to track changes to a group's membership
                        structure that

                        would break existing proposals. Whenever any members
                        weight is changed,

                        or any member is added or removed this version is
                        incremented and will

                        cause proposals based on older versions of this group to
                        fail
                    total_weight:
                      type: string
                      description: total_weight is the sum of the group members' weights.
                    created_at:
                      type: string
                      format: date-time
                      description: >-
                        created_at is a timestamp specifying when a group was
                        created.
                  description: >-
                    GroupInfo represents the high-level on-chain information for
                    a group.
                description: '`groups` is all the groups present in state.'
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: |-
              QueryGroupsResponse is the Query/Groups response type.

              Since: cosmos-sdk 0.47.1
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/group/v1/groups_by_admin/{admin}':
    get:
      summary: GroupsByAdmin queries groups by admin address.
      operationId: GroupsByAdmin
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              groups:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      description: id is the unique ID of the group.
                    admin:
                      type: string
                      description: admin is the account address of the group's admin.
                    metadata:
                      type: string
                      description: >-
                        metadata is any arbitrary metadata to attached to the
                        group.
                    version:
                      type: string
                      format: uint64
                      title: >-
                        version is used to track changes to a group's membership
                        structure that

                        would break existing proposals. Whenever any members
                        weight is changed,

                        or any member is added or removed this version is
                        incremented and will

                        cause proposals based on older versions of this group to
                        fail
                    total_weight:
                      type: string
                      description: total_weight is the sum of the group members' weights.
                    created_at:
                      type: string
                      format: date-time
                      description: >-
                        created_at is a timestamp specifying when a group was
                        created.
                  description: >-
                    GroupInfo represents the high-level on-chain information for
                    a group.
                description: groups are the groups info with the provided admin.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: admin
          description: admin is the account address of a group's admin.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/group/v1/groups_by_member/{address}':
    get:
      summary: GroupsByMember queries groups by member address.
      operationId: GroupsByMember
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              groups:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      description: id is the unique ID of the group.
                    admin:
                      type: string
                      description: admin is the account address of the group's admin.
                    metadata:
                      type: string
                      description: >-
                        metadata is any arbitrary metadata to attached to the
                        group.
                    version:
                      type: string
                      format: uint64
                      title: >-
                        version is used to track changes to a group's membership
                        structure that

                        would break existing proposals. Whenever any members
                        weight is changed,

                        or any member is added or removed this version is
                        incremented and will

                        cause proposals based on older versions of this group to
                        fail
                    total_weight:
                      type: string
                      description: total_weight is the sum of the group members' weights.
                    created_at:
                      type: string
                      format: date-time
                      description: >-
                        created_at is a timestamp specifying when a group was
                        created.
                  description: >-
                    GroupInfo represents the high-level on-chain information for
                    a group.
                description: groups are the groups info with the provided group member.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryGroupsByMemberResponse is the Query/GroupsByMember response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the group member address.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/group/v1/proposal/{proposal_id}':
    get:
      summary: Proposal queries a proposal based on proposal id.
      operationId: GroupProposal
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposal:
                description: proposal is the proposal info.
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                    description: id is the unique id of the proposal.
                  group_policy_address:
                    type: string
                    description: >-
                      group_policy_address is the account address of group
                      policy.
                  metadata:
                    type: string
                    description: >-
                      metadata is any arbitrary metadata to attached to the
                      proposal.
                  proposers:
                    type: array
                    items:
                      type: string
                    description: proposers are the account addresses of the proposers.
                  submit_time:
                    type: string
                    format: date-time
                    description: >-
                      submit_time is a timestamp specifying when a proposal was
                      submitted.
                  group_version:
                    type: string
                    format: uint64
                    description: >-
                      group_version tracks the version of the group at proposal
                      submission.

                      This field is here for informational purposes only.
                  group_policy_version:
                    type: string
                    format: uint64
                    description: >-
                      group_policy_version tracks the version of the group
                      policy at proposal submission.

                      When a decision policy is changed, existing proposals from
                      previous policy

                      versions will become invalid with the `ABORTED` status.

                      This field is here for informational purposes only.
                  status:
                    description: >-
                      status represents the high level position in the life
                      cycle of the proposal. Initial value is Submitted.
                    type: string
                    enum:
                      - PROPOSAL_STATUS_UNSPECIFIED
                      - PROPOSAL_STATUS_SUBMITTED
                      - PROPOSAL_STATUS_ACCEPTED
                      - PROPOSAL_STATUS_REJECTED
                      - PROPOSAL_STATUS_ABORTED
                      - PROPOSAL_STATUS_WITHDRAWN
                    default: PROPOSAL_STATUS_UNSPECIFIED
                  final_tally_result:
                    description: >-
                      final_tally_result contains the sums of all weighted votes
                      for this

                      proposal for each vote option. It is empty at submission,
                      and only

                      populated after tallying, at voting period end or at
                      proposal execution,

                      whichever happens first.
                    type: object
                    properties:
                      yes_count:
                        type: string
                        description: yes_count is the weighted sum of yes votes.
                      abstain_count:
                        type: string
                        description: abstain_count is the weighted sum of abstainers.
                      no_count:
                        type: string
                        description: no_count is the weighted sum of no votes.
                      no_with_veto_count:
                        type: string
                        description: no_with_veto_count is the weighted sum of veto.
                  voting_period_end:
                    type: string
                    format: date-time
                    description: >-
                      voting_period_end is the timestamp before which voting
                      must be done.

                      Unless a successfull MsgExec is called before (to execute
                      a proposal whose

                      tally is successful before the voting period ends),
                      tallying will be done

                      at this point, and the `final_tally_result`and `status`
                      fields will be

                      accordingly updated.
                  executor_result:
                    description: >-
                      executor_result is the final result of the proposal
                      execution. Initial value is NotRun.
                    type: string
                    enum:
                      - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
                      - PROPOSAL_EXECUTOR_RESULT_NOT_RUN
                      - PROPOSAL_EXECUTOR_RESULT_SUCCESS
                      - PROPOSAL_EXECUTOR_RESULT_FAILURE
                    default: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
                  messages:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    description: >-
                      messages is a list of `sdk.Msg`s that will be executed if
                      the proposal passes.
            description: QueryProposalResponse is the Query/Proposal response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id is the unique ID of a proposal.
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/cosmos/group/v1/proposals/{proposal_id}/tally':
    get:
      summary: >-
        TallyResult returns the tally result of a proposal. If the proposal is

        still in voting period, then this query computes the current tally
        state,

        which might not be final. On the other hand, if the proposal is final,

        then it simply returns the `final_tally_result` state stored in the

        proposal itself.
      operationId: GroupTallyResult
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              tally:
                description: tally defines the requested tally.
                type: object
                properties:
                  yes_count:
                    type: string
                    description: yes_count is the weighted sum of yes votes.
                  abstain_count:
                    type: string
                    description: abstain_count is the weighted sum of abstainers.
                  no_count:
                    type: string
                    description: no_count is the weighted sum of no votes.
                  no_with_veto_count:
                    type: string
                    description: no_with_veto_count is the weighted sum of veto.
            description: QueryTallyResultResponse is the Query/TallyResult response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id is the unique id of a proposal.
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/cosmos/group/v1/proposals_by_group_policy/{address}':
    get:
      summary: >-
        ProposalsByGroupPolicy queries proposals based on account address of
        group policy.
      operationId: ProposalsByGroupPolicy
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposals:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      description: id is the unique id of the proposal.
                    group_policy_address:
                      type: string
                      description: >-
                        group_policy_address is the account address of group
                        policy.
                    metadata:
                      type: string
                      description: >-
                        metadata is any arbitrary metadata to attached to the
                        proposal.
                    proposers:
                      type: array
                      items:
                        type: string
                      description: proposers are the account addresses of the proposers.
                    submit_time:
                      type: string
                      format: date-time
                      description: >-
                        submit_time is a timestamp specifying when a proposal
                        was submitted.
                    group_version:
                      type: string
                      format: uint64
                      description: >-
                        group_version tracks the version of the group at
                        proposal submission.

                        This field is here for informational purposes only.
                    group_policy_version:
                      type: string
                      format: uint64
                      description: >-
                        group_policy_version tracks the version of the group
                        policy at proposal submission.

                        When a decision policy is changed, existing proposals
                        from previous policy

                        versions will become invalid with the `ABORTED` status.

                        This field is here for informational purposes only.
                    status:
                      description: >-
                        status represents the high level position in the life
                        cycle of the proposal. Initial value is Submitted.
                      type: string
                      enum:
                        - PROPOSAL_STATUS_UNSPECIFIED
                        - PROPOSAL_STATUS_SUBMITTED
                        - PROPOSAL_STATUS_ACCEPTED
                        - PROPOSAL_STATUS_REJECTED
                        - PROPOSAL_STATUS_ABORTED
                        - PROPOSAL_STATUS_WITHDRAWN
                      default: PROPOSAL_STATUS_UNSPECIFIED
                    final_tally_result:
                      description: >-
                        final_tally_result contains the sums of all weighted
                        votes for this

                        proposal for each vote option. It is empty at
                        submission, and only

                        populated after tallying, at voting period end or at
                        proposal execution,

                        whichever happens first.
                      type: object
                      properties:
                        yes_count:
                          type: string
                          description: yes_count is the weighted sum of yes votes.
                        abstain_count:
                          type: string
                          description: abstain_count is the weighted sum of abstainers.
                        no_count:
                          type: string
                          description: no_count is the weighted sum of no votes.
                        no_with_veto_count:
                          type: string
                          description: no_with_veto_count is the weighted sum of veto.
                    voting_period_end:
                      type: string
                      format: date-time
                      description: >-
                        voting_period_end is the timestamp before which voting
                        must be done.

                        Unless a successfull MsgExec is called before (to
                        execute a proposal whose

                        tally is successful before the voting period ends),
                        tallying will be done

                        at this point, and the `final_tally_result`and `status`
                        fields will be

                        accordingly updated.
                    executor_result:
                      description: >-
                        executor_result is the final result of the proposal
                        execution. Initial value is NotRun.
                      type: string
                      enum:
                        - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
                        - PROPOSAL_EXECUTOR_RESULT_NOT_RUN
                        - PROPOSAL_EXECUTOR_RESULT_SUCCESS
                        - PROPOSAL_EXECUTOR_RESULT_FAILURE
                      default: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
                    messages:
                      type: array
                      items:
                        type: object
                        properties:
                          type_url:
                            type: string
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                          value:
                            type: string
                            format: byte
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := ptypes.MarshalAny(foo)
                               ...
                               foo := &pb.Foo{}
                               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                      description: >-
                        messages is a list of `sdk.Msg`s that will be executed
                        if the proposal passes.
                  description: >-
                    Proposal defines a group proposal. Any member of a group can
                    submit a proposal

                    for a group policy to decide upon.

                    A proposal consists of a set of `sdk.Msg`s that will be
                    executed if the proposal

                    passes as well as some optional metadata associated with the
                    proposal.
                description: proposals are the proposals with given group policy.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryProposalsByGroupPolicyResponse is the
              Query/ProposalByGroupPolicy response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: >-
            address is the account address of the group policy related to
            proposals.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/group/v1/vote_by_proposal_voter/{proposal_id}/{voter}':
    get:
      summary: VoteByProposalVoter queries a vote by proposal id and voter.
      operationId: VoteByProposalVoter
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              vote:
                description: vote is the vote with given proposal_id and voter.
                type: object
                properties:
                  proposal_id:
                    type: string
                    format: uint64
                    description: proposal is the unique ID of the proposal.
                  voter:
                    type: string
                    description: voter is the account address of the voter.
                  option:
                    description: option is the voter's choice on the proposal.
                    type: string
                    enum:
                      - VOTE_OPTION_UNSPECIFIED
                      - VOTE_OPTION_YES
                      - VOTE_OPTION_ABSTAIN
                      - VOTE_OPTION_NO
                      - VOTE_OPTION_NO_WITH_VETO
                    default: VOTE_OPTION_UNSPECIFIED
                  metadata:
                    type: string
                    description: >-
                      metadata is any arbitrary metadata to attached to the
                      vote.
                  submit_time:
                    type: string
                    format: date-time
                    description: submit_time is the timestamp when the vote was submitted.
            description: >-
              QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id is the unique ID of a proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: voter
          description: voter is a proposal voter account address.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/group/v1/votes_by_proposal/{proposal_id}':
    get:
      summary: VotesByProposal queries a vote by proposal.
      operationId: VotesByProposal
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              votes:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                      description: proposal is the unique ID of the proposal.
                    voter:
                      type: string
                      description: voter is the account address of the voter.
                    option:
                      description: option is the voter's choice on the proposal.
                      type: string
                      enum:
                        - VOTE_OPTION_UNSPECIFIED
                        - VOTE_OPTION_YES
                        - VOTE_OPTION_ABSTAIN
                        - VOTE_OPTION_NO
                        - VOTE_OPTION_NO_WITH_VETO
                      default: VOTE_OPTION_UNSPECIFIED
                    metadata:
                      type: string
                      description: >-
                        metadata is any arbitrary metadata to attached to the
                        vote.
                    submit_time:
                      type: string
                      format: date-time
                      description: >-
                        submit_time is the timestamp when the vote was
                        submitted.
                  description: Vote represents a vote for a proposal.
                description: votes are the list of votes for given proposal_id.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryVotesByProposalResponse is the Query/VotesByProposal response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id is the unique ID of a proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/group/v1/votes_by_voter/{voter}':
    get:
      summary: VotesByVoter queries a vote by voter.
      operationId: VotesByVoter
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              votes:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                      description: proposal is the unique ID of the proposal.
                    voter:
                      type: string
                      description: voter is the account address of the voter.
                    option:
                      description: option is the voter's choice on the proposal.
                      type: string
                      enum:
                        - VOTE_OPTION_UNSPECIFIED
                        - VOTE_OPTION_YES
                        - VOTE_OPTION_ABSTAIN
                        - VOTE_OPTION_NO
                        - VOTE_OPTION_NO_WITH_VETO
                      default: VOTE_OPTION_UNSPECIFIED
                    metadata:
                      type: string
                      description: >-
                        metadata is any arbitrary metadata to attached to the
                        vote.
                    submit_time:
                      type: string
                      format: date-time
                      description: >-
                        submit_time is the timestamp when the vote was
                        submitted.
                  description: Vote represents a vote for a proposal.
                description: votes are the list of votes by given voter.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: QueryVotesByVoterResponse is the Query/VotesByVoter response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: voter
          description: voter is a proposal voter account address.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/provenance/attribute/v1/accountdata/{account}':
    get:
      summary: AccountData returns the accountdata for a specified account.
      operationId: AccountData
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              value:
                type: string
                description: >-
                  value is the accountdata attribute value for the requested
                  account.
            description: >-
              QueryAccountDataResponse is the response type for the
              Query/AccountData method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: account
          description: account is the bech32 address of the account to get the data for
          in: path
          required: true
          type: string
      tags:
        - Query
  '/provenance/attribute/v1/accounts/{attribute_name}':
    get:
      summary: AttributeAccounts queries accounts on a given attribute name
      operationId: AttributeAccounts
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              accounts:
                type: array
                items:
                  type: string
                title: list of account addresses that have attributes of request name
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAttributeAccountsResponse is the response type for the
              Query/AttributeAccounts method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: attribute_name
          description: name is the attribute name to query for
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/attribute/v1/attribute/{account}/scan/{suffix}':
    get:
      summary: >-
        Scan queries attributes on a given account (address) for any that match
        the provided suffix
      operationId: Scan
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                type: string
                title: >-
                  a string containing the address of the account the attributes
                  are assigned to=
              attributes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The attribute name.
                    value:
                      type: string
                      format: byte
                      description: The attribute value.
                    attribute_type:
                      description: The attribute value type.
                      type: string
                      enum:
                        - ATTRIBUTE_TYPE_UNSPECIFIED
                        - ATTRIBUTE_TYPE_UUID
                        - ATTRIBUTE_TYPE_JSON
                        - ATTRIBUTE_TYPE_STRING
                        - ATTRIBUTE_TYPE_URI
                        - ATTRIBUTE_TYPE_INT
                        - ATTRIBUTE_TYPE_FLOAT
                        - ATTRIBUTE_TYPE_PROTO
                        - ATTRIBUTE_TYPE_BYTES
                      default: ATTRIBUTE_TYPE_UNSPECIFIED
                      title: >-
                        AttributeType defines the type of the data stored in the
                        attribute value
                    address:
                      type: string
                      title: The address the attribute is bound to
                    expiration_date:
                      type: string
                      format: date-time
                      description: Time that an attribute will expire.
                  title: >-
                    Attribute holds a typed key/value structure for data
                    associated with an account
                title: a list of attribute values
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: QueryScanResponse is the response type for the Query/Scan method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: account
          description: account defines the address to query for.
          in: path
          required: true
          type: string
        - name: suffix
          description: >-
            name defines the partial attribute name to search for base on names
            being in RDNS format.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/attribute/v1/attribute/{account}/{name}':
    get:
      summary: >-
        Attribute queries attributes on a given account (address) for one (or
        more) with the given name
      operationId: Attribute
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                type: string
                description: >-
                  a string containing the address of the account the attributes
                  are assigned to.
              attributes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The attribute name.
                    value:
                      type: string
                      format: byte
                      description: The attribute value.
                    attribute_type:
                      description: The attribute value type.
                      type: string
                      enum:
                        - ATTRIBUTE_TYPE_UNSPECIFIED
                        - ATTRIBUTE_TYPE_UUID
                        - ATTRIBUTE_TYPE_JSON
                        - ATTRIBUTE_TYPE_STRING
                        - ATTRIBUTE_TYPE_URI
                        - ATTRIBUTE_TYPE_INT
                        - ATTRIBUTE_TYPE_FLOAT
                        - ATTRIBUTE_TYPE_PROTO
                        - ATTRIBUTE_TYPE_BYTES
                      default: ATTRIBUTE_TYPE_UNSPECIFIED
                      title: >-
                        AttributeType defines the type of the data stored in the
                        attribute value
                    address:
                      type: string
                      title: The address the attribute is bound to
                    expiration_date:
                      type: string
                      format: date-time
                      description: Time that an attribute will expire.
                  title: >-
                    Attribute holds a typed key/value structure for data
                    associated with an account
                title: a list of attribute values
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAttributeResponse is the response type for the
              Query/Attribute method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: account
          description: account defines the address to query for.
          in: path
          required: true
          type: string
        - name: name
          description: name is the attribute name to query for
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/attribute/v1/attributes/{account}':
    get:
      summary: >-
        Attributes queries attributes on a given account (address) for any
        defined attributes
      operationId: Attributes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                type: string
                title: >-
                  a string containing the address of the account the attributes
                  are assigned to=
              attributes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The attribute name.
                    value:
                      type: string
                      format: byte
                      description: The attribute value.
                    attribute_type:
                      description: The attribute value type.
                      type: string
                      enum:
                        - ATTRIBUTE_TYPE_UNSPECIFIED
                        - ATTRIBUTE_TYPE_UUID
                        - ATTRIBUTE_TYPE_JSON
                        - ATTRIBUTE_TYPE_STRING
                        - ATTRIBUTE_TYPE_URI
                        - ATTRIBUTE_TYPE_INT
                        - ATTRIBUTE_TYPE_FLOAT
                        - ATTRIBUTE_TYPE_PROTO
                        - ATTRIBUTE_TYPE_BYTES
                      default: ATTRIBUTE_TYPE_UNSPECIFIED
                      title: >-
                        AttributeType defines the type of the data stored in the
                        attribute value
                    address:
                      type: string
                      title: The address the attribute is bound to
                    expiration_date:
                      type: string
                      format: date-time
                      description: Time that an attribute will expire.
                  title: >-
                    Attribute holds a typed key/value structure for data
                    associated with an account
                title: a list of attribute values
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAttributesResponse is the response type for the
              Query/Attributes method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: account
          description: account defines the address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/attribute/v1/params:
    get:
      summary: Params queries params of the attribute module.
      operationId: AttributeParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  max_value_length:
                    type: integer
                    format: int64
                    title: maximum length of data to allow in an attribute value
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/provenance/marker/v1/accesscontrol/{id}':
    get:
      summary: query for access records on an account
      operationId: Access
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              accounts:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    permissions:
                      type: array
                      items:
                        type: string
                        enum:
                          - ACCESS_UNSPECIFIED
                          - ACCESS_MINT
                          - ACCESS_BURN
                          - ACCESS_DEPOSIT
                          - ACCESS_WITHDRAW
                          - ACCESS_DELETE
                          - ACCESS_ADMIN
                          - ACCESS_TRANSFER
                        default: ACCESS_UNSPECIFIED
                        description: >-
                          Access defines the different types of permissions that
                          a marker supports granting to an address.

                           - ACCESS_UNSPECIFIED: ACCESS_UNSPECIFIED defines a no-op vote option.
                           - ACCESS_MINT: ACCESS_MINT is the ability to increase the supply of a marker
                           - ACCESS_BURN: ACCESS_BURN is the ability to decrease the supply of the marker using coin held by the marker.
                           - ACCESS_DEPOSIT: ACCESS_DEPOSIT is the ability to set a marker reference to this marker in the metadata/scopes module
                           - ACCESS_WITHDRAW: ACCESS_WITHDRAW is the ability to remove marker references to this marker in from metadata/scopes or
                          transfer coin from this marker account to another
                          account.
                           - ACCESS_DELETE: ACCESS_DELETE is the ability to move a proposed, finalized or active marker into the cancelled state. This
                          access also allows cancelled markers to be marked for
                          deletion
                           - ACCESS_ADMIN: ACCESS_ADMIN is the ability to add access grants for accounts to the list of marker permissions.
                           - ACCESS_TRANSFER: ACCESS_TRANSFER is the ability to invoke a send operation using the marker module to facilitate exchange.
                          This access right is only supported on RESTRICTED
                          markers.
                  description: >-
                    AccessGrant associates a collection of permissions with an
                    address for delegated marker account control.
            description: >-
              QueryAccessResponse is the response type for the
              Query/MarkerAccess method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: id
          description: address or denom for the marker
          in: path
          required: true
          type: string
      tags:
        - Query
  '/provenance/marker/v1/accountdata/{denom}':
    get:
      summary: query for account data associated with a denom
      operationId: MarkerAccountData
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              value:
                type: string
                description: The accountdata for the requested denom.
            title: >-
              QueryAccountDataResponse is the response type for the
              Query/AccountData
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: denom
          description: The denomination to look up.
          in: path
          required: true
          type: string
      tags:
        - Query
  /provenance/marker/v1/all:
    get:
      summary: Returns a list of all markers on the blockchain
      operationId: AllMarkers
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              markers:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllMarkersResponse is the response type for the
              Query/AllMarkers method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: status
          description: |-
            Optional status to filter request.

             - MARKER_STATUS_UNSPECIFIED: MARKER_STATUS_UNSPECIFIED - Unknown/Invalid Marker Status
             - MARKER_STATUS_PROPOSED: MARKER_STATUS_PROPOSED - Initial configuration period, updates allowed, token supply not created.
             - MARKER_STATUS_FINALIZED: MARKER_STATUS_FINALIZED - Configuration finalized, ready for supply creation
             - MARKER_STATUS_ACTIVE: MARKER_STATUS_ACTIVE - Supply is created, rules are in force.
             - MARKER_STATUS_CANCELLED: MARKER_STATUS_CANCELLED - Marker has been cancelled, pending destroy
             - MARKER_STATUS_DESTROYED: MARKER_STATUS_DESTROYED - Marker supply has all been recalled, marker is considered destroyed and no further
            actions allowed.
          in: query
          required: false
          type: string
          enum:
            - MARKER_STATUS_UNSPECIFIED
            - MARKER_STATUS_PROPOSED
            - MARKER_STATUS_FINALIZED
            - MARKER_STATUS_ACTIVE
            - MARKER_STATUS_CANCELLED
            - MARKER_STATUS_DESTROYED
          default: MARKER_STATUS_UNSPECIFIED
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/marker/v1/detail/{id}':
    get:
      summary: query for a single marker by denom or address
      operationId: Marker
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              marker:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: >-
              QueryMarkerResponse is the response type for the Query/Marker
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: id
          description: the address or denom of the marker
          in: path
          required: true
          type: string
      tags:
        - Query
  '/provenance/marker/v1/escrow/{id}':
    get:
      summary: query for coins on a marker account
      operationId: Escrow
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              escrow:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
            description: >-
              QueryEscrowResponse is the response type for the
              Query/MarkerEscrow method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: id
          description: address or denom for the marker
          in: path
          required: true
          type: string
      tags:
        - Query
  '/provenance/marker/v1/getdenommetadata/{denom}':
    get:
      summary: query for access records on an account
      operationId: MarkerDenomMetadata
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              metadata:
                type: object
                properties:
                  description:
                    type: string
                  denom_units:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          description: >-
                            denom represents the string name of the given denom
                            unit (e.g uatom).
                        exponent:
                          type: integer
                          format: int64
                          description: >-
                            exponent represents power of 10 exponent that one
                            must

                            raise the base_denom to in order to equal the given
                            DenomUnit's denom

                            1 denom = 10^exponent base_denom

                            (e.g. with a base_denom of uatom, one can create a
                            DenomUnit of 'atom' with

                            exponent = 6, thus: 1 atom = 10^6 uatom).
                        aliases:
                          type: array
                          items:
                            type: string
                          title: >-
                            aliases is a list of string aliases for the given
                            denom
                      description: |-
                        DenomUnit represents a struct that describes a given
                        denomination unit of the basic token.
                    title: >-
                      denom_units represents the list of DenomUnit's for a given
                      coin
                  base:
                    type: string
                    description: >-
                      base represents the base denom (should be the DenomUnit
                      with exponent = 0).
                  display:
                    type: string
                    description: |-
                      display indicates the suggested denom that should be
                      displayed in clients.
                  name:
                    type: string
                    description: 'Since: cosmos-sdk 0.43'
                    title: 'name defines the name of the token (eg: Cosmos Atom)'
                  symbol:
                    type: string
                    description: >-
                      symbol is the token symbol usually shown on exchanges (eg:
                      ATOM). This can

                      be the same as the display.


                      Since: cosmos-sdk 0.43
                  uri:
                    type: string
                    description: >-
                      URI to a document (on or off-chain) that contains
                      additional information. Optional.


                      Since: cosmos-sdk 0.46
                  uri_hash:
                    type: string
                    description: >-
                      URIHash is a sha256 hash of a document pointed by URI.
                      It's used to verify that

                      the document didn't change. Optional.


                      Since: cosmos-sdk 0.46
                description: |-
                  Metadata represents a struct that describes
                  a basic token.
            title: >-
              QueryDenomMetadataResponse is the response type for the
              Query/DenomMetadata
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: denom
          in: path
          required: true
          type: string
      tags:
        - Query
  '/provenance/marker/v1/holding/{id}':
    get:
      summary: query for all accounts holding the given marker coins
      operationId: Holding
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balances:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      description: address is the address of the balance holder.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: coins defines the different coins this balance holds.
                  title: >-
                    Balance defines an account address and balance pair used in
                    queries for accounts holding a marker
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryHoldingResponse is the response type for the
              Query/MarkerHolders method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: id
          description: the address or denom of the marker
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/marker/v1/netassetvalues/{id}':
    get:
      summary: NetAssetValues returns net asset values for marker
      operationId: NetAssetValues
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              net_asset_values:
                type: array
                items:
                  type: object
                  properties:
                    price:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      title: price is the complete value of the asset's volume
                    volume:
                      type: string
                      format: uint64
                      title: >-
                        volume is the number of tokens of the marker that were
                        purchased for the price
                    updated_block_height:
                      type: string
                      format: uint64
                      title: updated_block_height is the block height of last update
                  title: NetAssetValue defines a marker's net asset value
                title: net asset values for marker denom
            description: >-
              QueryNetAssetValuesRequest is the response type for the
              Query/NetAssetValues method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: id
          description: address or denom for the marker
          in: path
          required: true
          type: string
      tags:
        - Query
  /provenance/marker/v1/params:
    get:
      summary: Params queries the parameters of x/bank module.
      operationId: MarkerParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  max_total_supply:
                    type: string
                    format: uint64
                    title: >-
                      maximum amount of supply to allow a marker to be created
                      with
                  enable_governance:
                    type: boolean
                    format: boolean
                    description: >-
                      indicates if governance based controls of markers is
                      allowed.
                  unrestricted_denom_regex:
                    type: string
                    title: >-
                      a regular expression used to validate marker denom values
                      from normal create requests (governance

                      requests are only subject to platform coin validation
                      denom expression)
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  '/provenance/marker/v1/supply/{id}':
    get:
      summary: query for supply of coin on a marker account
      operationId: Supply
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            description: >-
              QuerySupplyResponse is the response type for the
              Query/MarkerSupply method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: id
          description: address or denom for the marker
          in: path
          required: true
          type: string
      tags:
        - Query
  '/provenance/metadata/v1/accountdata/{metadata_addr}':
    get:
      summary: |-
        AccountData gets the account data associated with a metadata address.
        Currently, only scope ids are supported.
      operationId: MetadataAccountData
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              value:
                type: string
                description: The accountdata for the requested metadata address.
            description: >-
              AccountDataResponse is the response type for the Query/AccountData
              RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: metadata_addr
          description: |-
            The metadata address to look up.
            Currently, only scope ids are supported.
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/provenance/metadata/v1/addr/{addrs}':
    get:
      summary: GetByAddr retrieves metadata given any address(es).
      operationId: GetByAddr
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scopes:
                type: array
                items:
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      title: >-
                        Unique ID for this scope.  Implements sdk.Address
                        interface for use where addresses are required in Cosmos
                    specification_id:
                      type: string
                      format: byte
                      title: >-
                        the scope specification that contains the specifications
                        for data elements allowed within this scope
                    owners:
                      type: array
                      items:
                        type: object
                        properties:
                          address:
                            type: string
                            title: address of the account (on chain)
                          role:
                            title: >-
                              a role for this account within the context of the
                              processes used
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                          optional:
                            type: boolean
                            format: boolean
                            title: whether this party's signature is optional
                        title: >-
                          A Party is an address with/in a given role associated
                          with a contract
                      description: >-
                        These parties represent top level owners of the records
                        within.  These parties must sign any requests that
                        modify

                        the data within the scope.  These addresses are in union
                        with parties listed on the sessions.
                    data_access:
                      type: array
                      items:
                        type: string
                      description: >-
                        Addresses in this list are authorized to receive
                        off-chain data associated with this scope.
                    value_owner_address:
                      type: string
                      description: >-
                        An address that controls the value associated with this
                        scope.  Standard blockchain accounts and marker accounts

                        are supported for this value.  This attribute may only
                        be changed by the entity indicated once it is set.
                    require_party_rollup:
                      type: boolean
                      format: boolean
                      description: >-
                        Whether all parties in this scope and its sessions must
                        be present in this scope's owners field.

                        This also enables use of optional=true scope owners and
                        session parties.
                  description: >-
                    Scope defines a root reference for a collection of records
                    owned by one or more parties.
                description: scopes contains any scopes that were requested and found.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session_id:
                      type: string
                      format: byte
                    specification_id:
                      type: string
                      format: byte
                      description: >-
                        unique id of the contract specification that was used to
                        create this session.
                    parties:
                      type: array
                      items:
                        type: object
                        properties:
                          address:
                            type: string
                            title: address of the account (on chain)
                          role:
                            title: >-
                              a role for this account within the context of the
                              processes used
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                          optional:
                            type: boolean
                            format: boolean
                            title: whether this party's signature is optional
                        title: >-
                          A Party is an address with/in a given role associated
                          with a contract
                      title: >-
                        parties is the set of identities that signed this
                        contract
                    name:
                      type: string
                      title: >-
                        name to associate with this session execution context,
                        typically classname
                    context:
                      type: string
                      format: byte
                      description: >-
                        context is a field for storing client specific data
                        associated with a session.
                    audit:
                      description: >-
                        Created by, updated by, timestamps, version number, and
                        related info.
                      type: object
                      properties:
                        created_date:
                          type: string
                          format: date-time
                          title: the date/time when this entry was created
                        created_by:
                          type: string
                          title: the address of the account that created this record
                        updated_date:
                          type: string
                          format: date-time
                          title: the date/time when this entry was last updated
                        updated_by:
                          type: string
                          title: the address of the account that modified this record
                        version:
                          type: integer
                          format: int64
                          title: >-
                            an optional version number that is incremented with
                            each update
                        message:
                          type: string
                          title: >-
                            an optional message associated with the
                            creation/update event
                      title: >-
                        AuditFields capture information about the last account
                        to make modifications and when they were made
                  description: >-
                    Session defines an execution context against a specific
                    specification instance.

                    The context will have a specification and set of parties
                    involved.


                    NOTE: When there are no more Records within a Scope that
                    reference a Session, the Session is removed.
                description: sessions contains any sessions that were requested and found.
              records:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      title: >-
                        name/identifier for this record.  Value must be unique
                        within the scope.  Also known as a Fact name
                    session_id:
                      type: string
                      format: byte
                      title: >-
                        id of the session context that was used to create this
                        record (use with filtered kvprefix iterator)
                    process:
                      title: >-
                        process contain information used to uniquely identify an
                        execution on or off chain that generated this record
                      type: object
                      properties:
                        address:
                          type: string
                          title: >-
                            the address of a smart contract used for this
                            process
                        hash:
                          type: string
                          title: the hash of an off-chain process used
                        name:
                          type: string
                          title: >-
                            a name associated with the process (type_name,
                            classname or smart contract common name)
                        method:
                          type: string
                          title: >-
                            method is a name or reference to a specific
                            operation (method) within a class/contract that was
                            invoked
                    inputs:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: >-
                              Name value included to link back to the definition
                              spec.
                          record_id:
                            type: string
                            format: byte
                            title: >-
                              the address of a record on chain (For Established
                              Records)
                          hash:
                            type: string
                            title: >-
                              the hash of an off-chain piece of information (For
                              Proposed Records)
                          type_name:
                            type: string
                            title: from proposed fact structure to unmarshal
                          status:
                            title: >-
                              Indicates if this input was a recorded fact on
                              chain or just a given hashed input
                            type: string
                            enum:
                              - RECORD_INPUT_STATUS_UNSPECIFIED
                              - RECORD_INPUT_STATUS_PROPOSED
                              - RECORD_INPUT_STATUS_RECORD
                            default: RECORD_INPUT_STATUS_UNSPECIFIED
                            description: >-
                              - RECORD_INPUT_STATUS_UNSPECIFIED:
                              RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                              invalid/unknown input type
                               - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                               - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                        title: Tracks the inputs used to establish this record
                      title: >-
                        inputs used with the process to achieve the output on
                        this record
                    outputs:
                      type: array
                      items:
                        type: object
                        properties:
                          hash:
                            type: string
                            title: >-
                              Hash of the data output that was output/generated
                              for this record
                          status:
                            title: >-
                              Status of the process execution associated with
                              this output indicating success,failure, or pending
                            type: string
                            enum:
                              - RESULT_STATUS_UNSPECIFIED
                              - RESULT_STATUS_PASS
                              - RESULT_STATUS_SKIP
                              - RESULT_STATUS_FAIL
                            default: RESULT_STATUS_UNSPECIFIED
                            description: >-
                              - RESULT_STATUS_UNSPECIFIED:
                              RESULT_STATUS_UNSPECIFIED indicates an unset
                              condition
                               - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                               - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                               - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                        title: >-
                          RecordOutput encapsulates the output of a process
                          recorded on chain
                      title: >-
                        output(s) is the results of executing the process on the
                        given process indicated in this record
                    specification_id:
                      type: string
                      format: byte
                      description: >-
                        specification_id is the id of the record specification
                        that was used to create this record.
                  title: >-
                    A record (of fact) is attached to a session or each
                    consideration output from a contract
                description: records contains any records that were requested and found.
              scope_specs:
                type: array
                items:
                  type: object
                  properties:
                    specification_id:
                      type: string
                      format: byte
                      title: unique identifier for this specification on chain
                    description:
                      description: General information about this scope specification.
                      type: object
                      properties:
                        name:
                          type: string
                          description: A Name for this thing.
                        description:
                          type: string
                          description: A description of this thing.
                        website_url:
                          type: string
                          description: URL to find even more info.
                        icon_url:
                          type: string
                          description: URL of an icon.
                    owner_addresses:
                      type: array
                      items:
                        type: string
                      description: Addresses of the owners of this scope specification.
                    parties_involved:
                      type: array
                      items:
                        type: string
                        enum:
                          - PARTY_TYPE_UNSPECIFIED
                          - PARTY_TYPE_ORIGINATOR
                          - PARTY_TYPE_SERVICER
                          - PARTY_TYPE_INVESTOR
                          - PARTY_TYPE_CUSTODIAN
                          - PARTY_TYPE_OWNER
                          - PARTY_TYPE_AFFILIATE
                          - PARTY_TYPE_OMNIBUS
                          - PARTY_TYPE_PROVENANCE
                          - PARTY_TYPE_CONTROLLER
                          - PARTY_TYPE_VALIDATOR
                        default: PARTY_TYPE_UNSPECIFIED
                        description: >-
                          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                          error condition
                           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                        title: >-
                          PartyType are the different roles parties on a
                          contract may use
                      title: >-
                        A list of parties that must be present on a scope (and
                        their associated roles)
                    contract_spec_ids:
                      type: array
                      items:
                        type: string
                        format: byte
                      description: >-
                        A list of contract specification ids allowed for a scope
                        based on this specification.
                  title: >-
                    ScopeSpecification defines the required parties, resources,
                    conditions, and consideration outputs for a contract
                description: >-
                  scope_specs contains any scope specifications that were
                  requested and found.
              contract_specs:
                type: array
                items:
                  type: object
                  properties:
                    specification_id:
                      type: string
                      format: byte
                      title: unique identifier for this specification on chain
                    description:
                      title: Description information for this contract specification
                      type: object
                      properties:
                        name:
                          type: string
                          description: A Name for this thing.
                        description:
                          type: string
                          description: A description of this thing.
                        website_url:
                          type: string
                          description: URL to find even more info.
                        icon_url:
                          type: string
                          description: URL of an icon.
                      description: >-
                        Description holds general information that is handy to
                        associate with a structure.
                    owner_addresses:
                      type: array
                      items:
                        type: string
                      title: Address of the account that owns this specificaiton
                    parties_involved:
                      type: array
                      items:
                        type: string
                        enum:
                          - PARTY_TYPE_UNSPECIFIED
                          - PARTY_TYPE_ORIGINATOR
                          - PARTY_TYPE_SERVICER
                          - PARTY_TYPE_INVESTOR
                          - PARTY_TYPE_CUSTODIAN
                          - PARTY_TYPE_OWNER
                          - PARTY_TYPE_AFFILIATE
                          - PARTY_TYPE_OMNIBUS
                          - PARTY_TYPE_PROVENANCE
                          - PARTY_TYPE_CONTROLLER
                          - PARTY_TYPE_VALIDATOR
                        default: PARTY_TYPE_UNSPECIFIED
                        description: >-
                          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                          error condition
                           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                        title: >-
                          PartyType are the different roles parties on a
                          contract may use
                      title: >-
                        a list of party roles that must be fullfilled when
                        signing a transaction for this contract specification
                    resource_id:
                      type: string
                      format: byte
                      title: >-
                        the address of a record on chain that represents this
                        contract
                    hash:
                      type: string
                      title: the hash of contract binary (off-chain instance)
                    class_name:
                      type: string
                      title: name of the class/type of this contract executable
                  title: >-
                    ContractSpecification defines the required parties,
                    resources, conditions, and consideration outputs for a
                    contract
                description: >-
                  contract_specs contains any contract specifications that were
                  requested and found.
              record_specs:
                type: array
                items:
                  type: object
                  properties:
                    specification_id:
                      type: string
                      format: byte
                      title: unique identifier for this specification on chain
                    name:
                      type: string
                      title: >-
                        Name of Record that will be created when this
                        specification is used
                    inputs:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            title: name for this input
                          type_name:
                            type: string
                            title: a type_name (typically a proto name or class_name)
                          record_id:
                            type: string
                            format: byte
                            title: >-
                              the address of a record on chain (For Established
                              Records)
                          hash:
                            type: string
                            title: >-
                              the hash of an off-chain piece of information (For
                              Proposed Records)
                        title: >-
                          InputSpecification defines a name, type_name, and
                          source reference (either on or off chain) to define an
                          input

                          parameter
                      title: >-
                        A set of inputs that must be satisified to apply this
                        RecordSpecification and create a Record
                    type_name:
                      type: string
                      title: >-
                        A type name for data associated with this record
                        (typically a class or proto name)
                    result_type:
                      title: >-
                        Type of result for this record specification (must be
                        RECORD or RECORD_LIST)
                      type: string
                      enum:
                        - DEFINITION_TYPE_UNSPECIFIED
                        - DEFINITION_TYPE_PROPOSED
                        - DEFINITION_TYPE_RECORD
                        - DEFINITION_TYPE_RECORD_LIST
                      default: DEFINITION_TYPE_UNSPECIFIED
                      description: >-
                        - DEFINITION_TYPE_UNSPECIFIED:
                        DEFINITION_TYPE_UNSPECIFIED indicates an unknown/invalid
                        value
                         - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                         - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                         - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                        the same name
                    responsible_parties:
                      type: array
                      items:
                        type: string
                        enum:
                          - PARTY_TYPE_UNSPECIFIED
                          - PARTY_TYPE_ORIGINATOR
                          - PARTY_TYPE_SERVICER
                          - PARTY_TYPE_INVESTOR
                          - PARTY_TYPE_CUSTODIAN
                          - PARTY_TYPE_OWNER
                          - PARTY_TYPE_AFFILIATE
                          - PARTY_TYPE_OMNIBUS
                          - PARTY_TYPE_PROVENANCE
                          - PARTY_TYPE_CONTROLLER
                          - PARTY_TYPE_VALIDATOR
                        default: PARTY_TYPE_UNSPECIFIED
                        description: >-
                          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                          error condition
                           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                        title: >-
                          PartyType are the different roles parties on a
                          contract may use
                      title: Type of party responsible for this record
                  title: >-
                    RecordSpecification defines the specification for a Record
                    including allowed/required inputs/outputs
                description: >-
                  record_specs contains any record specifications that were
                  requested and found.
              not_found:
                type: array
                items:
                  type: string
                description: not_found contains any addrs requested but not found.
            description: >-
              GetByAddrResponse is the response type for the Query/GetByAddr RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: addrs
          description: ids are the metadata addresses of the things to look up.
          in: path
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
          minItems: 1
      tags:
        - Query
  '/provenance/metadata/v1/contractspec/{specification_id}':
    get:
      summary: >-
        ContractSpecification returns a contract specification for the given
        specification id.
      description: >-
        The specification_id can either be a uuid, e.g.
        def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract

        specification address, e.g.
        contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record
        specification

        address, e.g.
        recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If
        it is a record specification

        address, then the contract specification that contains that record
        specification is looked up.


        By default, the record specifications for this contract specification
        are not included.

        Set include_record_specs to true to include them in the result.
      operationId: ContractSpecification
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              contract_specification:
                description: contract_specification is the wrapped contract specification.
                type: object
                properties:
                  specification:
                    type: object
                    properties:
                      specification_id:
                        type: string
                        format: byte
                        title: unique identifier for this specification on chain
                      description:
                        title: >-
                          Description information for this contract
                          specification
                        type: object
                        properties:
                          name:
                            type: string
                            description: A Name for this thing.
                          description:
                            type: string
                            description: A description of this thing.
                          website_url:
                            type: string
                            description: URL to find even more info.
                          icon_url:
                            type: string
                            description: URL of an icon.
                        description: >-
                          Description holds general information that is handy to
                          associate with a structure.
                      owner_addresses:
                        type: array
                        items:
                          type: string
                        title: Address of the account that owns this specificaiton
                      parties_involved:
                        type: array
                        items:
                          type: string
                          enum:
                            - PARTY_TYPE_UNSPECIFIED
                            - PARTY_TYPE_ORIGINATOR
                            - PARTY_TYPE_SERVICER
                            - PARTY_TYPE_INVESTOR
                            - PARTY_TYPE_CUSTODIAN
                            - PARTY_TYPE_OWNER
                            - PARTY_TYPE_AFFILIATE
                            - PARTY_TYPE_OMNIBUS
                            - PARTY_TYPE_PROVENANCE
                            - PARTY_TYPE_CONTROLLER
                            - PARTY_TYPE_VALIDATOR
                          default: PARTY_TYPE_UNSPECIFIED
                          description: >-
                            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is
                            an error condition
                             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                          title: >-
                            PartyType are the different roles parties on a
                            contract may use
                        title: >-
                          a list of party roles that must be fullfilled when
                          signing a transaction for this contract specification
                      resource_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain that represents this
                          contract
                      hash:
                        type: string
                        title: the hash of contract binary (off-chain instance)
                      class_name:
                        type: string
                        title: name of the class/type of this contract executable
                    title: >-
                      ContractSpecification defines the required parties,
                      resources, conditions, and consideration outputs for a
                      contract
                    description: >-
                      specification is the on-chain contract specification
                      message.
                  contract_spec_id_info:
                    description: >-
                      contract_spec_id_info contains information about the
                      id/address of the contract specification.
                    type: object
                    properties:
                      contract_spec_id:
                        type: string
                        format: byte
                        description: >-
                          contract_spec_id is the raw bytes of the contract
                          specification address.
                      contract_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          contract_spec_id_prefix is the prefix portion of the
                          contract_spec_id.
                      contract_spec_id_contract_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          contract_spec_id_contract_spec_uuid is the
                          contract_spec_uuid portion of the contract_spec_id.
                      contract_spec_addr:
                        type: string
                        description: >-
                          contract_spec_addr is the bech32 string version of the
                          contract_spec_id.
                      contract_spec_uuid:
                        type: string
                        description: >-
                          contract_spec_uuid is the uuid hex string of the
                          contract_spec_id_contract_spec_uuid.
              record_specifications:
                type: array
                items:
                  type: object
                  properties:
                    specification:
                      type: object
                      properties:
                        specification_id:
                          type: string
                          format: byte
                          title: unique identifier for this specification on chain
                        name:
                          type: string
                          title: >-
                            Name of Record that will be created when this
                            specification is used
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                title: name for this input
                              type_name:
                                type: string
                                title: >-
                                  a type_name (typically a proto name or
                                  class_name)
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                            title: >-
                              InputSpecification defines a name, type_name, and
                              source reference (either on or off chain) to
                              define an input

                              parameter
                          title: >-
                            A set of inputs that must be satisified to apply
                            this RecordSpecification and create a Record
                        type_name:
                          type: string
                          title: >-
                            A type name for data associated with this record
                            (typically a class or proto name)
                        result_type:
                          title: >-
                            Type of result for this record specification (must
                            be RECORD or RECORD_LIST)
                          type: string
                          enum:
                            - DEFINITION_TYPE_UNSPECIFIED
                            - DEFINITION_TYPE_PROPOSED
                            - DEFINITION_TYPE_RECORD
                            - DEFINITION_TYPE_RECORD_LIST
                          default: DEFINITION_TYPE_UNSPECIFIED
                          description: >-
                            - DEFINITION_TYPE_UNSPECIFIED:
                            DEFINITION_TYPE_UNSPECIFIED indicates an
                            unknown/invalid value
                             - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                             - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                             - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                            the same name
                        responsible_parties:
                          type: array
                          items:
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            title: >-
                              PartyType are the different roles parties on a
                              contract may use
                          title: Type of party responsible for this record
                      title: >-
                        RecordSpecification defines the specification for a
                        Record including allowed/required inputs/outputs
                      description: >-
                        specification is the on-chain record specification
                        message.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordSpecificationWrapper contains a single record
                    specification and some extra identifiers for it.
                description: >-
                  record_specifications is any number or wrapped record
                  specifications associated with this contract_specification

                  (if requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  specification_id:
                    type: string
                    description: >-
                      specification_id can either be a uuid, e.g.
                      def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
                      specification

                      address, e.g.
                      contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

                      It can also be a record specification address, e.g.

                      recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
                  include_record_specs:
                    type: boolean
                    format: boolean
                    description: >-
                      include_record_specs is a flag for whether to include the
                      the record specifications of this contract specification

                      in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              ContractSpecificationResponse is the response type for the
              Query/ContractSpecification RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: specification_id
          description: >-
            specification_id can either be a uuid, e.g.
            def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
            specification

            address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

            It can also be a record specification address, e.g.

            recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
          in: path
          required: true
          type: string
        - name: include_record_specs
          description: >-
            include_record_specs is a flag for whether to include the the record
            specifications of this contract specification

            in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/contractspec/{specification_id}/recordspec/{name}':
    get:
      summary: RecordSpecification returns a record specification for the given input.
      operationId: RecordSpecification2
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              record_specification:
                type: object
                properties:
                  specification:
                    type: object
                    properties:
                      specification_id:
                        type: string
                        format: byte
                        title: unique identifier for this specification on chain
                      name:
                        type: string
                        title: >-
                          Name of Record that will be created when this
                          specification is used
                      inputs:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              title: name for this input
                            type_name:
                              type: string
                              title: >-
                                a type_name (typically a proto name or
                                class_name)
                            record_id:
                              type: string
                              format: byte
                              title: >-
                                the address of a record on chain (For
                                Established Records)
                            hash:
                              type: string
                              title: >-
                                the hash of an off-chain piece of information
                                (For Proposed Records)
                          title: >-
                            InputSpecification defines a name, type_name, and
                            source reference (either on or off chain) to define
                            an input

                            parameter
                        title: >-
                          A set of inputs that must be satisified to apply this
                          RecordSpecification and create a Record
                      type_name:
                        type: string
                        title: >-
                          A type name for data associated with this record
                          (typically a class or proto name)
                      result_type:
                        title: >-
                          Type of result for this record specification (must be
                          RECORD or RECORD_LIST)
                        type: string
                        enum:
                          - DEFINITION_TYPE_UNSPECIFIED
                          - DEFINITION_TYPE_PROPOSED
                          - DEFINITION_TYPE_RECORD
                          - DEFINITION_TYPE_RECORD_LIST
                        default: DEFINITION_TYPE_UNSPECIFIED
                        description: >-
                          - DEFINITION_TYPE_UNSPECIFIED:
                          DEFINITION_TYPE_UNSPECIFIED indicates an
                          unknown/invalid value
                           - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                           - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                           - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                          the same name
                      responsible_parties:
                        type: array
                        items:
                          type: string
                          enum:
                            - PARTY_TYPE_UNSPECIFIED
                            - PARTY_TYPE_ORIGINATOR
                            - PARTY_TYPE_SERVICER
                            - PARTY_TYPE_INVESTOR
                            - PARTY_TYPE_CUSTODIAN
                            - PARTY_TYPE_OWNER
                            - PARTY_TYPE_AFFILIATE
                            - PARTY_TYPE_OMNIBUS
                            - PARTY_TYPE_PROVENANCE
                            - PARTY_TYPE_CONTROLLER
                            - PARTY_TYPE_VALIDATOR
                          default: PARTY_TYPE_UNSPECIFIED
                          description: >-
                            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is
                            an error condition
                             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                          title: >-
                            PartyType are the different roles parties on a
                            contract may use
                        title: Type of party responsible for this record
                    title: >-
                      RecordSpecification defines the specification for a Record
                      including allowed/required inputs/outputs
                    description: >-
                      specification is the on-chain record specification
                      message.
                  record_spec_id_info:
                    description: >-
                      record_spec_id_info contains information about the
                      id/address of the record specification.
                    type: object
                    properties:
                      record_spec_id:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id is the raw bytes of the record
                          specification address.
                      record_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id_prefix is the prefix portion of the
                          record_spec_id.
                      record_spec_id_contract_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id_contract_spec_uuid is the
                          contract_spec_uuid portion of the record_spec_id.
                      record_spec_id_hashed_name:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id_hashed_name is the hashed name portion
                          of the record_spec_id.
                      record_spec_addr:
                        type: string
                        description: >-
                          record_spec_addr is the bech32 string version of the
                          record_spec_id.
                      contract_spec_id_info:
                        description: >-
                          contract_spec_id_info is information about the
                          contract spec id referenced in the record_spec_id.
                        type: object
                        properties:
                          contract_spec_id:
                            type: string
                            format: byte
                            description: >-
                              contract_spec_id is the raw bytes of the contract
                              specification address.
                          contract_spec_id_prefix:
                            type: string
                            format: byte
                            description: >-
                              contract_spec_id_prefix is the prefix portion of
                              the contract_spec_id.
                          contract_spec_id_contract_spec_uuid:
                            type: string
                            format: byte
                            description: >-
                              contract_spec_id_contract_spec_uuid is the
                              contract_spec_uuid portion of the
                              contract_spec_id.
                          contract_spec_addr:
                            type: string
                            description: >-
                              contract_spec_addr is the bech32 string version of
                              the contract_spec_id.
                          contract_spec_uuid:
                            type: string
                            description: >-
                              contract_spec_uuid is the uuid hex string of the
                              contract_spec_id_contract_spec_uuid.
                description: >-
                  RecordSpecificationWrapper contains a single record
                  specification and some extra identifiers for it.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  specification_id:
                    type: string
                    description: >-
                      specification_id can either be a uuid, e.g.
                      def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
                      specification

                      address, e.g.
                      contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

                      It can also be a record specification address, e.g.

                      recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
                  name:
                    type: string
                    description: >-
                      name is the name of the record to look up.

                      It is required if the specification_id is a uuid or
                      contract specification address.

                      It is ignored if the specification_id is a record
                      specification address.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              RecordSpecificationResponse is the response type for the
              Query/RecordSpecification RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: specification_id
          description: >-
            specification_id can either be a uuid, e.g.
            def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
            specification

            address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

            It can also be a record specification address, e.g.

            recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
          in: path
          required: true
          type: string
        - name: name
          description: >-
            name is the name of the record to look up.

            It is required if the specification_id is a uuid or contract
            specification address.

            It is ignored if the specification_id is a record specification
            address.
          in: path
          required: true
          type: string
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/contractspec/{specification_id}/recordspecs':
    get:
      summary: >-
        RecordSpecificationsForContractSpecification returns the record
        specifications for the given input.
      description: >-
        The specification_id can either be a uuid, e.g.
        def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract

        specification address, e.g.
        contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record
        specification

        address, e.g.
        recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If
        it is a record specification

        address, then the contract specification that contains that record
        specification is used.
      operationId: RecordSpecificationsForContractSpecification
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              record_specifications:
                type: array
                items:
                  type: object
                  properties:
                    specification:
                      type: object
                      properties:
                        specification_id:
                          type: string
                          format: byte
                          title: unique identifier for this specification on chain
                        name:
                          type: string
                          title: >-
                            Name of Record that will be created when this
                            specification is used
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                title: name for this input
                              type_name:
                                type: string
                                title: >-
                                  a type_name (typically a proto name or
                                  class_name)
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                            title: >-
                              InputSpecification defines a name, type_name, and
                              source reference (either on or off chain) to
                              define an input

                              parameter
                          title: >-
                            A set of inputs that must be satisified to apply
                            this RecordSpecification and create a Record
                        type_name:
                          type: string
                          title: >-
                            A type name for data associated with this record
                            (typically a class or proto name)
                        result_type:
                          title: >-
                            Type of result for this record specification (must
                            be RECORD or RECORD_LIST)
                          type: string
                          enum:
                            - DEFINITION_TYPE_UNSPECIFIED
                            - DEFINITION_TYPE_PROPOSED
                            - DEFINITION_TYPE_RECORD
                            - DEFINITION_TYPE_RECORD_LIST
                          default: DEFINITION_TYPE_UNSPECIFIED
                          description: >-
                            - DEFINITION_TYPE_UNSPECIFIED:
                            DEFINITION_TYPE_UNSPECIFIED indicates an
                            unknown/invalid value
                             - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                             - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                             - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                            the same name
                        responsible_parties:
                          type: array
                          items:
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            title: >-
                              PartyType are the different roles parties on a
                              contract may use
                          title: Type of party responsible for this record
                      title: >-
                        RecordSpecification defines the specification for a
                        Record including allowed/required inputs/outputs
                      description: >-
                        specification is the on-chain record specification
                        message.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordSpecificationWrapper contains a single record
                    specification and some extra identifiers for it.
                description: >-
                  record_specifications is any number of wrapped record
                  specifications associated with this contract_specification.
              contract_specification_uuid:
                type: string
                description: >-
                  contract_specification_uuid is the uuid of this contract
                  specification.
              contract_specification_addr:
                type: string
                description: >-
                  contract_specification_addr is the contract specification
                  address as a bech32 encoded string.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  specification_id:
                    type: string
                    description: >-
                      specification_id can either be a uuid, e.g.
                      def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
                      specification

                      address, e.g.
                      contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

                      It can also be a record specification address, e.g.

                      recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              RecordSpecificationsForContractSpecificationResponse is the
              response type for the

              Query/RecordSpecificationsForContractSpecification RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: specification_id
          description: >-
            specification_id can either be a uuid, e.g.
            def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
            specification

            address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

            It can also be a record specification address, e.g.

            recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
          in: path
          required: true
          type: string
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/contractspecs/all:
    get:
      summary: ContractSpecificationsAll retrieves all contract specifications.
      operationId: ContractSpecificationsAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              contract_specifications:
                type: array
                items:
                  type: object
                  properties:
                    specification:
                      type: object
                      properties:
                        specification_id:
                          type: string
                          format: byte
                          title: unique identifier for this specification on chain
                        description:
                          title: >-
                            Description information for this contract
                            specification
                          type: object
                          properties:
                            name:
                              type: string
                              description: A Name for this thing.
                            description:
                              type: string
                              description: A description of this thing.
                            website_url:
                              type: string
                              description: URL to find even more info.
                            icon_url:
                              type: string
                              description: URL of an icon.
                          description: >-
                            Description holds general information that is handy
                            to associate with a structure.
                        owner_addresses:
                          type: array
                          items:
                            type: string
                          title: Address of the account that owns this specificaiton
                        parties_involved:
                          type: array
                          items:
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            title: >-
                              PartyType are the different roles parties on a
                              contract may use
                          title: >-
                            a list of party roles that must be fullfilled when
                            signing a transaction for this contract
                            specification
                        resource_id:
                          type: string
                          format: byte
                          title: >-
                            the address of a record on chain that represents
                            this contract
                        hash:
                          type: string
                          title: the hash of contract binary (off-chain instance)
                        class_name:
                          type: string
                          title: name of the class/type of this contract executable
                      title: >-
                        ContractSpecification defines the required parties,
                        resources, conditions, and consideration outputs for a
                        contract
                      description: >-
                        specification is the on-chain contract specification
                        message.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    ContractSpecificationWrapper contains a single contract
                    specification and some extra identifiers for it.
                description: >-
                  contract_specifications are the wrapped contract
                  specifications.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              ContractSpecificationsAllResponse is the response type for the
              Query/ContractSpecificationsAll RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/locator/params:
    get:
      summary: >-
        OSLocatorParams returns all parameters for the object store locator sub
        module.
      operationId: OSLocatorParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  max_uri_length:
                    type: integer
                    format: int64
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              OSLocatorParamsResponse is the response type for the
              Query/OSLocatorParams RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/locator/scope/{scope_id}':
    get:
      summary: >-
        OSLocatorsByScope returns all ObjectStoreLocator entries for a for all
        signer's present in the specified scope.
      operationId: OSLocatorsByScope
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locators:
                type: array
                items:
                  type: object
                  properties:
                    owner:
                      type: string
                      title: account address the endpoint is owned by
                    locator_uri:
                      type: string
                      title: locator endpoint uri
                    encryption_key:
                      type: string
                      title: owners encryption key address
                  description: >-
                    Defines an Locator object stored on chain, which represents
                    a owner( blockchain address) associated with a endpoint

                    uri for it's associated object store.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              OSLocatorsByScopeResponse is the response type for the
              Query/OSLocatorsByScope RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          in: path
          required: true
          type: string
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/locator/uri/{uri}':
    get:
      summary: >-
        OSLocatorsByURI returns all ObjectStoreLocator entries for a locator
        uri.
      operationId: OSLocatorsByURI
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locators:
                type: array
                items:
                  type: object
                  properties:
                    owner:
                      type: string
                      title: account address the endpoint is owned by
                    locator_uri:
                      type: string
                      title: locator endpoint uri
                    encryption_key:
                      type: string
                      title: owners encryption key address
                  description: >-
                    Defines an Locator object stored on chain, which represents
                    a owner( blockchain address) associated with a endpoint

                    uri for it's associated object store.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  uri:
                    type: string
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              OSLocatorsByURIResponse is the response type for the
              Query/OSLocatorsByURI RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: uri
          in: path
          required: true
          type: string
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/locator/{owner}':
    get:
      summary: OSLocator returns an ObjectStoreLocator by its owner's address.
      operationId: OSLocator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locator:
                type: object
                properties:
                  owner:
                    type: string
                    title: account address the endpoint is owned by
                  locator_uri:
                    type: string
                    title: locator endpoint uri
                  encryption_key:
                    type: string
                    title: owners encryption key address
                description: >-
                  Defines an Locator object stored on chain, which represents a
                  owner( blockchain address) associated with a endpoint

                  uri for it's associated object store.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  owner:
                    type: string
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              OSLocatorResponse is the response type for the Query/OSLocator RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/locators/all:
    get:
      summary: OSAllLocators returns all ObjectStoreLocator entries.
      operationId: OSAllLocators
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locators:
                type: array
                items:
                  type: object
                  properties:
                    owner:
                      type: string
                      title: account address the endpoint is owned by
                    locator_uri:
                      type: string
                      title: locator endpoint uri
                    encryption_key:
                      type: string
                      title: owners encryption key address
                  description: >-
                    Defines an Locator object stored on chain, which represents
                    a owner( blockchain address) associated with a endpoint

                    uri for it's associated object store.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              OSAllLocatorsResponse is the response type for the
              Query/OSAllLocators RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/ownership/{address}':
    get:
      summary: >-
        Ownership returns the scope identifiers that list the given address as
        either a data or value owner.
      operationId: Ownership
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope_uuids:
                type: array
                items:
                  type: string
                description: A list of scope ids (uuid) associated with the given address.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  address:
                    type: string
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              OwnershipResponse is the response type for the Query/Ownership RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          in: path
          required: true
          type: string
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/params:
    get:
      summary: Params queries the parameters of x/metadata module.
      operationId: MetadataParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/record/{record_addr}':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether to include the the
                      scope containing these records in the response.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether to include the
                      sessions containing these records in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: path
          required: true
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: query
          required: false
          type: string
        - name: name
          description: name is the name of the record to look for.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether to include the the scope
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether to include the sessions
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/record/{record_addr}/scope':
    get:
      summary: Scope searches for a scope.
      description: >-
        The scope id, if provided, must either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,

        e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if
        provided, must be a bech32 session address,

        e.g.
        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, that scope is returned.

        * If only a session_addr is provided, the scope containing that session
        is returned.

        * If only a record_addr is provided, the scope containing that record is
        returned.

        * If more than one of scope_id, session_addr, and record_addr are
        provided, and they don't refer to the same scope,

        a bad request is returned.


        Providing a session addr or record addr does not limit the sessions and
        records returned (if requested).

        Those parameters are only used to find the scope.


        By default, sessions and records are not included.

        Set include_sessions and/or include_records to true to include sessions
        and/or records.
      operationId: Scope3
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: scope is the wrapped scope result.
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions in this scope (if
                  requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records in this scope (if
                  requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_addr:
                    type: string
                    description: >-
                      session_addr is a bech32 session address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether to include the
                      sessions of the scope in the response.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether to include the
                      records of the scope in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: ScopeResponse is the response type for the Query/Scope RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: path
          required: true
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: session_addr
          description: |-
            session_addr is a bech32 session address, e.g.
            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
          in: query
          required: false
          type: string
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether to include the sessions of
            the scope in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether to include the records of the
            scope in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/record/{record_addr}/session':
    get:
      summary: Sessions searches for sessions.
      description: >-
        The scope_id can either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.

        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can
        either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, all sessions in that scope are
        returned.

        * If only a session_id is provided, it must be an address, and that
        single session is returned.

        * If the session_id is a uuid, then either a scope_id or record_addr
        must also be provided, and that single session

        is returned.

        * If only a record_addr is provided, the session containing that record
        will be returned.

        * If a record_name is provided then either a scope_id, session_id as an
        address, or record_addr must also be

        provided, and the session containing that record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and is provided without a scope_id or
        record_addr.

        * A record_name is provided without any way to identify the scope (e.g.
        a scope_id, a session_id as an address, or

        a record_addr).

        * Two or more of scope_id, session_id as an address, and record_addr are
        provided and don't all refer to the same

        scope.

        * A record_addr (or scope_id and record_name) is provided with a
        session_id and that session does not contain such

        a record.

        * A record_addr and record_name are both provided, but reference
        different records.


        By default, the scope and records are not included.

        Set include_scope and/or include_records to true to include the scope
        and/or records.
      operationId: Sessions4
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these sessions (if
                  requested).
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: sessions is any number of wrapped session results.
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records contained in these
                  sessions (if requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  record_name:
                    type: string
                    description: >-
                      record_name is the name of the record to find the session
                      for in the provided scope.
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether to include the scope
                      containing these sessions in the response.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether to include the
                      records of these sessions in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              SessionsResponse is the response type for the Query/Sessions RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: path
          required: true
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: query
          required: false
          type: string
        - name: record_name
          description: >-
            record_name is the name of the record to find the session for in the
            provided scope.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether to include the scope containing
            these sessions in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether to include the records of
            these sessions in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/records/all:
    get:
      summary: RecordsAll retrieves all records.
      operationId: RecordsAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records are the wrapped records.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              RecordsAllResponse is the response type for the Query/RecordsAll
              RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/recordspec/{specification_id}':
    get:
      summary: RecordSpecification returns a record specification for the given input.
      operationId: RecordSpecification
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              record_specification:
                type: object
                properties:
                  specification:
                    type: object
                    properties:
                      specification_id:
                        type: string
                        format: byte
                        title: unique identifier for this specification on chain
                      name:
                        type: string
                        title: >-
                          Name of Record that will be created when this
                          specification is used
                      inputs:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              title: name for this input
                            type_name:
                              type: string
                              title: >-
                                a type_name (typically a proto name or
                                class_name)
                            record_id:
                              type: string
                              format: byte
                              title: >-
                                the address of a record on chain (For
                                Established Records)
                            hash:
                              type: string
                              title: >-
                                the hash of an off-chain piece of information
                                (For Proposed Records)
                          title: >-
                            InputSpecification defines a name, type_name, and
                            source reference (either on or off chain) to define
                            an input

                            parameter
                        title: >-
                          A set of inputs that must be satisified to apply this
                          RecordSpecification and create a Record
                      type_name:
                        type: string
                        title: >-
                          A type name for data associated with this record
                          (typically a class or proto name)
                      result_type:
                        title: >-
                          Type of result for this record specification (must be
                          RECORD or RECORD_LIST)
                        type: string
                        enum:
                          - DEFINITION_TYPE_UNSPECIFIED
                          - DEFINITION_TYPE_PROPOSED
                          - DEFINITION_TYPE_RECORD
                          - DEFINITION_TYPE_RECORD_LIST
                        default: DEFINITION_TYPE_UNSPECIFIED
                        description: >-
                          - DEFINITION_TYPE_UNSPECIFIED:
                          DEFINITION_TYPE_UNSPECIFIED indicates an
                          unknown/invalid value
                           - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                           - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                           - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                          the same name
                      responsible_parties:
                        type: array
                        items:
                          type: string
                          enum:
                            - PARTY_TYPE_UNSPECIFIED
                            - PARTY_TYPE_ORIGINATOR
                            - PARTY_TYPE_SERVICER
                            - PARTY_TYPE_INVESTOR
                            - PARTY_TYPE_CUSTODIAN
                            - PARTY_TYPE_OWNER
                            - PARTY_TYPE_AFFILIATE
                            - PARTY_TYPE_OMNIBUS
                            - PARTY_TYPE_PROVENANCE
                            - PARTY_TYPE_CONTROLLER
                            - PARTY_TYPE_VALIDATOR
                          default: PARTY_TYPE_UNSPECIFIED
                          description: >-
                            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is
                            an error condition
                             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                          title: >-
                            PartyType are the different roles parties on a
                            contract may use
                        title: Type of party responsible for this record
                    title: >-
                      RecordSpecification defines the specification for a Record
                      including allowed/required inputs/outputs
                    description: >-
                      specification is the on-chain record specification
                      message.
                  record_spec_id_info:
                    description: >-
                      record_spec_id_info contains information about the
                      id/address of the record specification.
                    type: object
                    properties:
                      record_spec_id:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id is the raw bytes of the record
                          specification address.
                      record_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id_prefix is the prefix portion of the
                          record_spec_id.
                      record_spec_id_contract_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id_contract_spec_uuid is the
                          contract_spec_uuid portion of the record_spec_id.
                      record_spec_id_hashed_name:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id_hashed_name is the hashed name portion
                          of the record_spec_id.
                      record_spec_addr:
                        type: string
                        description: >-
                          record_spec_addr is the bech32 string version of the
                          record_spec_id.
                      contract_spec_id_info:
                        description: >-
                          contract_spec_id_info is information about the
                          contract spec id referenced in the record_spec_id.
                        type: object
                        properties:
                          contract_spec_id:
                            type: string
                            format: byte
                            description: >-
                              contract_spec_id is the raw bytes of the contract
                              specification address.
                          contract_spec_id_prefix:
                            type: string
                            format: byte
                            description: >-
                              contract_spec_id_prefix is the prefix portion of
                              the contract_spec_id.
                          contract_spec_id_contract_spec_uuid:
                            type: string
                            format: byte
                            description: >-
                              contract_spec_id_contract_spec_uuid is the
                              contract_spec_uuid portion of the
                              contract_spec_id.
                          contract_spec_addr:
                            type: string
                            description: >-
                              contract_spec_addr is the bech32 string version of
                              the contract_spec_id.
                          contract_spec_uuid:
                            type: string
                            description: >-
                              contract_spec_uuid is the uuid hex string of the
                              contract_spec_id_contract_spec_uuid.
                description: >-
                  RecordSpecificationWrapper contains a single record
                  specification and some extra identifiers for it.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  specification_id:
                    type: string
                    description: >-
                      specification_id can either be a uuid, e.g.
                      def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
                      specification

                      address, e.g.
                      contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

                      It can also be a record specification address, e.g.

                      recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
                  name:
                    type: string
                    description: >-
                      name is the name of the record to look up.

                      It is required if the specification_id is a uuid or
                      contract specification address.

                      It is ignored if the specification_id is a record
                      specification address.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              RecordSpecificationResponse is the response type for the
              Query/RecordSpecification RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: specification_id
          description: >-
            specification_id can either be a uuid, e.g.
            def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
            specification

            address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

            It can also be a record specification address, e.g.

            recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
          in: path
          required: true
          type: string
        - name: name
          description: >-
            name is the name of the record to look up.

            It is required if the specification_id is a uuid or contract
            specification address.

            It is ignored if the specification_id is a record specification
            address.
          in: query
          required: false
          type: string
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/recordspecs/all:
    get:
      summary: RecordSpecificationsAll retrieves all record specifications.
      operationId: RecordSpecificationsAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              record_specifications:
                type: array
                items:
                  type: object
                  properties:
                    specification:
                      type: object
                      properties:
                        specification_id:
                          type: string
                          format: byte
                          title: unique identifier for this specification on chain
                        name:
                          type: string
                          title: >-
                            Name of Record that will be created when this
                            specification is used
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                title: name for this input
                              type_name:
                                type: string
                                title: >-
                                  a type_name (typically a proto name or
                                  class_name)
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                            title: >-
                              InputSpecification defines a name, type_name, and
                              source reference (either on or off chain) to
                              define an input

                              parameter
                          title: >-
                            A set of inputs that must be satisified to apply
                            this RecordSpecification and create a Record
                        type_name:
                          type: string
                          title: >-
                            A type name for data associated with this record
                            (typically a class or proto name)
                        result_type:
                          title: >-
                            Type of result for this record specification (must
                            be RECORD or RECORD_LIST)
                          type: string
                          enum:
                            - DEFINITION_TYPE_UNSPECIFIED
                            - DEFINITION_TYPE_PROPOSED
                            - DEFINITION_TYPE_RECORD
                            - DEFINITION_TYPE_RECORD_LIST
                          default: DEFINITION_TYPE_UNSPECIFIED
                          description: >-
                            - DEFINITION_TYPE_UNSPECIFIED:
                            DEFINITION_TYPE_UNSPECIFIED indicates an
                            unknown/invalid value
                             - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                             - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                             - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                            the same name
                        responsible_parties:
                          type: array
                          items:
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            title: >-
                              PartyType are the different roles parties on a
                              contract may use
                          title: Type of party responsible for this record
                      title: >-
                        RecordSpecification defines the specification for a
                        Record including allowed/required inputs/outputs
                      description: >-
                        specification is the on-chain record specification
                        message.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordSpecificationWrapper contains a single record
                    specification and some extra identifiers for it.
                description: record_specifications are the wrapped record specifications.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              RecordSpecificationsAllResponse is the response type for the
              Query/RecordSpecificationsAll RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}':
    get:
      summary: Scope searches for a scope.
      description: >-
        The scope id, if provided, must either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,

        e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if
        provided, must be a bech32 session address,

        e.g.
        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, that scope is returned.

        * If only a session_addr is provided, the scope containing that session
        is returned.

        * If only a record_addr is provided, the scope containing that record is
        returned.

        * If more than one of scope_id, session_addr, and record_addr are
        provided, and they don't refer to the same scope,

        a bad request is returned.


        Providing a session addr or record addr does not limit the sessions and
        records returned (if requested).

        Those parameters are only used to find the scope.


        By default, sessions and records are not included.

        Set include_sessions and/or include_records to true to include sessions
        and/or records.
      operationId: Scope
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: scope is the wrapped scope result.
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions in this scope (if
                  requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records in this scope (if
                  requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_addr:
                    type: string
                    description: >-
                      session_addr is a bech32 session address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether to include the
                      sessions of the scope in the response.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether to include the
                      records of the scope in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: ScopeResponse is the response type for the Query/Scope RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: session_addr
          description: |-
            session_addr is a bech32 session address, e.g.
            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
          in: query
          required: false
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether to include the sessions of
            the scope in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether to include the records of the
            scope in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/record/{name}':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records3
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether to include the the
                      scope containing these records in the response.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether to include the
                      sessions containing these records in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: name
          description: name is the name of the record to look for
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether to include the the scope
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether to include the sessions
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/record/{record_name}/session':
    get:
      summary: Sessions searches for sessions.
      description: >-
        The scope_id can either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.

        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can
        either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, all sessions in that scope are
        returned.

        * If only a session_id is provided, it must be an address, and that
        single session is returned.

        * If the session_id is a uuid, then either a scope_id or record_addr
        must also be provided, and that single session

        is returned.

        * If only a record_addr is provided, the session containing that record
        will be returned.

        * If a record_name is provided then either a scope_id, session_id as an
        address, or record_addr must also be

        provided, and the session containing that record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and is provided without a scope_id or
        record_addr.

        * A record_name is provided without any way to identify the scope (e.g.
        a scope_id, a session_id as an address, or

        a record_addr).

        * Two or more of scope_id, session_id as an address, and record_addr are
        provided and don't all refer to the same

        scope.

        * A record_addr (or scope_id and record_name) is provided with a
        session_id and that session does not contain such

        a record.

        * A record_addr and record_name are both provided, but reference
        different records.


        By default, the scope and records are not included.

        Set include_scope and/or include_records to true to include the scope
        and/or records.
      operationId: Sessions5
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these sessions (if
                  requested).
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: sessions is any number of wrapped session results.
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records contained in these
                  sessions (if requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  record_name:
                    type: string
                    description: >-
                      record_name is the name of the record to find the session
                      for in the provided scope.
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether to include the scope
                      containing these sessions in the response.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether to include the
                      records of these sessions in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              SessionsResponse is the response type for the Query/Sessions RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: record_name
          description: >-
            record_name is the name of the record to find the session for in the
            provided scope.
          in: path
          required: true
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: query
          required: false
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether to include the scope containing
            these sessions in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether to include the records of
            these sessions in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/records':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records2
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether to include the the
                      scope containing these records in the response.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether to include the
                      sessions containing these records in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: query
          required: false
          type: string
        - name: name
          description: name is the name of the record to look for.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether to include the the scope
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether to include the sessions
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/session/{session_id}':
    get:
      summary: Sessions searches for sessions.
      description: >-
        The scope_id can either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.

        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can
        either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, all sessions in that scope are
        returned.

        * If only a session_id is provided, it must be an address, and that
        single session is returned.

        * If the session_id is a uuid, then either a scope_id or record_addr
        must also be provided, and that single session

        is returned.

        * If only a record_addr is provided, the session containing that record
        will be returned.

        * If a record_name is provided then either a scope_id, session_id as an
        address, or record_addr must also be

        provided, and the session containing that record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and is provided without a scope_id or
        record_addr.

        * A record_name is provided without any way to identify the scope (e.g.
        a scope_id, a session_id as an address, or

        a record_addr).

        * Two or more of scope_id, session_id as an address, and record_addr are
        provided and don't all refer to the same

        scope.

        * A record_addr (or scope_id and record_name) is provided with a
        session_id and that session does not contain such

        a record.

        * A record_addr and record_name are both provided, but reference
        different records.


        By default, the scope and records are not included.

        Set include_scope and/or include_records to true to include the scope
        and/or records.
      operationId: Sessions3
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these sessions (if
                  requested).
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: sessions is any number of wrapped session results.
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records contained in these
                  sessions (if requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  record_name:
                    type: string
                    description: >-
                      record_name is the name of the record to find the session
                      for in the provided scope.
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether to include the scope
                      containing these sessions in the response.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether to include the
                      records of these sessions in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              SessionsResponse is the response type for the Query/Sessions RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: record_name
          description: >-
            record_name is the name of the record to find the session for in the
            provided scope.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether to include the scope containing
            these sessions in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether to include the records of
            these sessions in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/session/{session_id}/record/{name}':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records5
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether to include the the
                      scope containing these records in the response.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether to include the
                      sessions containing these records in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: path
          required: true
          type: string
        - name: name
          description: name is the name of the record to look for
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether to include the the scope
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether to include the sessions
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/session/{session_id}/records':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records4
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether to include the the
                      scope containing these records in the response.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether to include the
                      sessions containing these records in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: name
          description: name is the name of the record to look for.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether to include the the scope
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether to include the sessions
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/sessions':
    get:
      summary: Sessions searches for sessions.
      description: >-
        The scope_id can either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.

        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can
        either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, all sessions in that scope are
        returned.

        * If only a session_id is provided, it must be an address, and that
        single session is returned.

        * If the session_id is a uuid, then either a scope_id or record_addr
        must also be provided, and that single session

        is returned.

        * If only a record_addr is provided, the session containing that record
        will be returned.

        * If a record_name is provided then either a scope_id, session_id as an
        address, or record_addr must also be

        provided, and the session containing that record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and is provided without a scope_id or
        record_addr.

        * A record_name is provided without any way to identify the scope (e.g.
        a scope_id, a session_id as an address, or

        a record_addr).

        * Two or more of scope_id, session_id as an address, and record_addr are
        provided and don't all refer to the same

        scope.

        * A record_addr (or scope_id and record_name) is provided with a
        session_id and that session does not contain such

        a record.

        * A record_addr and record_name are both provided, but reference
        different records.


        By default, the scope and records are not included.

        Set include_scope and/or include_records to true to include the scope
        and/or records.
      operationId: Sessions2
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these sessions (if
                  requested).
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: sessions is any number of wrapped session results.
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records contained in these
                  sessions (if requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  record_name:
                    type: string
                    description: >-
                      record_name is the name of the record to find the session
                      for in the provided scope.
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether to include the scope
                      containing these sessions in the response.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether to include the
                      records of these sessions in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              SessionsResponse is the response type for the Query/Sessions RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: query
          required: false
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: record_name
          description: >-
            record_name is the name of the record to find the session for in the
            provided scope.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether to include the scope containing
            these sessions in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether to include the records of
            these sessions in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/scopes/all:
    get:
      summary: ScopesAll retrieves all scopes.
      operationId: ScopesAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scopes:
                type: array
                items:
                  type: object
                  properties:
                    scope:
                      type: object
                      properties:
                        scope_id:
                          type: string
                          format: byte
                          title: >-
                            Unique ID for this scope.  Implements sdk.Address
                            interface for use where addresses are required in
                            Cosmos
                        specification_id:
                          type: string
                          format: byte
                          title: >-
                            the scope specification that contains the
                            specifications for data elements allowed within this
                            scope
                        owners:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          description: >-
                            These parties represent top level owners of the
                            records within.  These parties must sign any
                            requests that modify

                            the data within the scope.  These addresses are in
                            union with parties listed on the sessions.
                        data_access:
                          type: array
                          items:
                            type: string
                          description: >-
                            Addresses in this list are authorized to receive
                            off-chain data associated with this scope.
                        value_owner_address:
                          type: string
                          description: >-
                            An address that controls the value associated with
                            this scope.  Standard blockchain accounts and marker
                            accounts

                            are supported for this value.  This attribute may
                            only be changed by the entity indicated once it is
                            set.
                        require_party_rollup:
                          type: boolean
                          format: boolean
                          description: >-
                            Whether all parties in this scope and its sessions
                            must be present in this scope's owners field.

                            This also enables use of optional=true scope owners
                            and session parties.
                      description: >-
                        Scope defines a root reference for a collection of
                        records owned by one or more parties.
                    scope_id_info:
                      description: >-
                        scope_id_info contains information about the id/address
                        of the scope.
                      type: object
                      properties:
                        scope_id:
                          type: string
                          format: byte
                          description: scope_id is the raw bytes of the scope address.
                        scope_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            scope_id_prefix is the prefix portion of the
                            scope_id.
                        scope_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            scope_id_scope_uuid is the scope_uuid portion of the
                            scope_id.
                        scope_addr:
                          type: string
                          description: >-
                            scope_addr is the bech32 string version of the
                            scope_id.
                        scope_uuid:
                          type: string
                          description: >-
                            scope_uuid is the uuid hex string of the
                            scope_id_scope_uuid.
                    scope_spec_id_info:
                      description: >-
                        scope_spec_id_info contains information about the
                        id/address of the scope specification.
                      type: object
                      properties:
                        scope_spec_id:
                          type: string
                          format: byte
                          description: >-
                            scope_spec_id is the raw bytes of the scope
                            specification address.
                        scope_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            scope_spec_id_prefix is the prefix portion of the
                            scope_spec_id.
                        scope_spec_id_scope_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                            portion of the scope_spec_id.
                        scope_spec_addr:
                          type: string
                          description: >-
                            scope_spec_addr is the bech32 string version of the
                            scope_spec_id.
                        scope_spec_uuid:
                          type: string
                          description: >-
                            scope_spec_uuid is the uuid hex string of the
                            scope_spec_id_scope_spec_uuid.
                  description: SessionWrapper contains a single scope and its uuid.
                description: scopes are the wrapped scopes.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              ScopesAllResponse is the response type for the Query/ScopesAll RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scopespec/{specification_id}':
    get:
      summary: >-
        ScopeSpecification returns a scope specification for the given
        specification id.
      description: >-
        The specification_id can either be a uuid, e.g.
        dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope

        specification address, e.g.
        scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.


        By default, the contract and record specifications are not included.

        Set include_contract_specs and/or include_record_specs to true to
        include contract and/or record specifications.
      operationId: ScopeSpecification
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope_specification:
                description: scope_specification is the wrapped scope specification.
                type: object
                properties:
                  specification:
                    type: object
                    properties:
                      specification_id:
                        type: string
                        format: byte
                        title: unique identifier for this specification on chain
                      description:
                        description: General information about this scope specification.
                        type: object
                        properties:
                          name:
                            type: string
                            description: A Name for this thing.
                          description:
                            type: string
                            description: A description of this thing.
                          website_url:
                            type: string
                            description: URL to find even more info.
                          icon_url:
                            type: string
                            description: URL of an icon.
                      owner_addresses:
                        type: array
                        items:
                          type: string
                        description: Addresses of the owners of this scope specification.
                      parties_involved:
                        type: array
                        items:
                          type: string
                          enum:
                            - PARTY_TYPE_UNSPECIFIED
                            - PARTY_TYPE_ORIGINATOR
                            - PARTY_TYPE_SERVICER
                            - PARTY_TYPE_INVESTOR
                            - PARTY_TYPE_CUSTODIAN
                            - PARTY_TYPE_OWNER
                            - PARTY_TYPE_AFFILIATE
                            - PARTY_TYPE_OMNIBUS
                            - PARTY_TYPE_PROVENANCE
                            - PARTY_TYPE_CONTROLLER
                            - PARTY_TYPE_VALIDATOR
                          default: PARTY_TYPE_UNSPECIFIED
                          description: >-
                            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is
                            an error condition
                             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                          title: >-
                            PartyType are the different roles parties on a
                            contract may use
                        title: >-
                          A list of parties that must be present on a scope (and
                          their associated roles)
                      contract_spec_ids:
                        type: array
                        items:
                          type: string
                          format: byte
                        description: >-
                          A list of contract specification ids allowed for a
                          scope based on this specification.
                    title: >-
                      ScopeSpecification defines the required parties,
                      resources, conditions, and consideration outputs for a
                      contract
                    description: specification is the on-chain scope specification message.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              contract_specs:
                type: array
                items:
                  type: object
                  properties:
                    specification:
                      type: object
                      properties:
                        specification_id:
                          type: string
                          format: byte
                          title: unique identifier for this specification on chain
                        description:
                          title: >-
                            Description information for this contract
                            specification
                          type: object
                          properties:
                            name:
                              type: string
                              description: A Name for this thing.
                            description:
                              type: string
                              description: A description of this thing.
                            website_url:
                              type: string
                              description: URL to find even more info.
                            icon_url:
                              type: string
                              description: URL of an icon.
                          description: >-
                            Description holds general information that is handy
                            to associate with a structure.
                        owner_addresses:
                          type: array
                          items:
                            type: string
                          title: Address of the account that owns this specificaiton
                        parties_involved:
                          type: array
                          items:
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            title: >-
                              PartyType are the different roles parties on a
                              contract may use
                          title: >-
                            a list of party roles that must be fullfilled when
                            signing a transaction for this contract
                            specification
                        resource_id:
                          type: string
                          format: byte
                          title: >-
                            the address of a record on chain that represents
                            this contract
                        hash:
                          type: string
                          title: the hash of contract binary (off-chain instance)
                        class_name:
                          type: string
                          title: name of the class/type of this contract executable
                      title: >-
                        ContractSpecification defines the required parties,
                        resources, conditions, and consideration outputs for a
                        contract
                      description: >-
                        specification is the on-chain contract specification
                        message.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    ContractSpecificationWrapper contains a single contract
                    specification and some extra identifiers for it.
                description: >-
                  contract_specs is any number of wrapped contract
                  specifications in this scope specification (if requested).
              record_specs:
                type: array
                items:
                  type: object
                  properties:
                    specification:
                      type: object
                      properties:
                        specification_id:
                          type: string
                          format: byte
                          title: unique identifier for this specification on chain
                        name:
                          type: string
                          title: >-
                            Name of Record that will be created when this
                            specification is used
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                title: name for this input
                              type_name:
                                type: string
                                title: >-
                                  a type_name (typically a proto name or
                                  class_name)
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                            title: >-
                              InputSpecification defines a name, type_name, and
                              source reference (either on or off chain) to
                              define an input

                              parameter
                          title: >-
                            A set of inputs that must be satisified to apply
                            this RecordSpecification and create a Record
                        type_name:
                          type: string
                          title: >-
                            A type name for data associated with this record
                            (typically a class or proto name)
                        result_type:
                          title: >-
                            Type of result for this record specification (must
                            be RECORD or RECORD_LIST)
                          type: string
                          enum:
                            - DEFINITION_TYPE_UNSPECIFIED
                            - DEFINITION_TYPE_PROPOSED
                            - DEFINITION_TYPE_RECORD
                            - DEFINITION_TYPE_RECORD_LIST
                          default: DEFINITION_TYPE_UNSPECIFIED
                          description: >-
                            - DEFINITION_TYPE_UNSPECIFIED:
                            DEFINITION_TYPE_UNSPECIFIED indicates an
                            unknown/invalid value
                             - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                             - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                             - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                            the same name
                        responsible_parties:
                          type: array
                          items:
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            title: >-
                              PartyType are the different roles parties on a
                              contract may use
                          title: Type of party responsible for this record
                      title: >-
                        RecordSpecification defines the specification for a
                        Record including allowed/required inputs/outputs
                      description: >-
                        specification is the on-chain record specification
                        message.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordSpecificationWrapper contains a single record
                    specification and some extra identifiers for it.
                description: >-
                  record_specs is any number of wrapped record specifications in
                  this scope specification (if requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  specification_id:
                    type: string
                    description: >-
                      specification_id can either be a uuid, e.g.
                      dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope
                      specification

                      address, e.g.
                      scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
                  include_contract_specs:
                    type: boolean
                    format: boolean
                    description: >-
                      include_contract_specs is a flag for whether to include
                      the contract specifications of the scope specification in

                      the response.
                  include_record_specs:
                    type: boolean
                    format: boolean
                    description: >-
                      include_record_specs is a flag for whether to include the
                      record specifications of the scope specification in the

                      response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              ScopeSpecificationResponse is the response type for the
              Query/ScopeSpecification RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: specification_id
          description: >-
            specification_id can either be a uuid, e.g.
            dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope specification

            address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
          in: path
          required: true
          type: string
        - name: include_contract_specs
          description: >-
            include_contract_specs is a flag for whether to include the contract
            specifications of the scope specification in

            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_record_specs
          description: >-
            include_record_specs is a flag for whether to include the record
            specifications of the scope specification in the

            response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/scopespecs/all:
    get:
      summary: ScopeSpecificationsAll retrieves all scope specifications.
      operationId: ScopeSpecificationsAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope_specifications:
                type: array
                items:
                  type: object
                  properties:
                    specification:
                      type: object
                      properties:
                        specification_id:
                          type: string
                          format: byte
                          title: unique identifier for this specification on chain
                        description:
                          description: General information about this scope specification.
                          type: object
                          properties:
                            name:
                              type: string
                              description: A Name for this thing.
                            description:
                              type: string
                              description: A description of this thing.
                            website_url:
                              type: string
                              description: URL to find even more info.
                            icon_url:
                              type: string
                              description: URL of an icon.
                        owner_addresses:
                          type: array
                          items:
                            type: string
                          description: Addresses of the owners of this scope specification.
                        parties_involved:
                          type: array
                          items:
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            title: >-
                              PartyType are the different roles parties on a
                              contract may use
                          title: >-
                            A list of parties that must be present on a scope
                            (and their associated roles)
                        contract_spec_ids:
                          type: array
                          items:
                            type: string
                            format: byte
                          description: >-
                            A list of contract specification ids allowed for a
                            scope based on this specification.
                      title: >-
                        ScopeSpecification defines the required parties,
                        resources, conditions, and consideration outputs for a
                        contract
                      description: >-
                        specification is the on-chain scope specification
                        message.
                    scope_spec_id_info:
                      description: >-
                        scope_spec_id_info contains information about the
                        id/address of the scope specification.
                      type: object
                      properties:
                        scope_spec_id:
                          type: string
                          format: byte
                          description: >-
                            scope_spec_id is the raw bytes of the scope
                            specification address.
                        scope_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            scope_spec_id_prefix is the prefix portion of the
                            scope_spec_id.
                        scope_spec_id_scope_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                            portion of the scope_spec_id.
                        scope_spec_addr:
                          type: string
                          description: >-
                            scope_spec_addr is the bech32 string version of the
                            scope_spec_id.
                        scope_spec_uuid:
                          type: string
                          description: >-
                            scope_spec_uuid is the uuid hex string of the
                            scope_spec_id_scope_spec_uuid.
                  description: >-
                    ScopeSpecificationWrapper contains a single scope
                    specification and some extra identifiers for it.
                description: scope_specifications are the wrapped scope specifications.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              ScopeSpecificationsAllResponse is the response type for the
              Query/ScopeSpecificationsAll RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/session/{session_addr}/scope':
    get:
      summary: Scope searches for a scope.
      description: >-
        The scope id, if provided, must either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,

        e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if
        provided, must be a bech32 session address,

        e.g.
        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, that scope is returned.

        * If only a session_addr is provided, the scope containing that session
        is returned.

        * If only a record_addr is provided, the scope containing that record is
        returned.

        * If more than one of scope_id, session_addr, and record_addr are
        provided, and they don't refer to the same scope,

        a bad request is returned.


        Providing a session addr or record addr does not limit the sessions and
        records returned (if requested).

        Those parameters are only used to find the scope.


        By default, sessions and records are not included.

        Set include_sessions and/or include_records to true to include sessions
        and/or records.
      operationId: Scope2
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: scope is the wrapped scope result.
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions in this scope (if
                  requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records in this scope (if
                  requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_addr:
                    type: string
                    description: >-
                      session_addr is a bech32 session address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether to include the
                      sessions of the scope in the response.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether to include the
                      records of the scope in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: ScopeResponse is the response type for the Query/Scope RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: session_addr
          description: |-
            session_addr is a bech32 session address, e.g.
            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
          in: path
          required: true
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether to include the sessions of
            the scope in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether to include the records of the
            scope in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/session/{session_id}':
    get:
      summary: Sessions searches for sessions.
      description: >-
        The scope_id can either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.

        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can
        either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, all sessions in that scope are
        returned.

        * If only a session_id is provided, it must be an address, and that
        single session is returned.

        * If the session_id is a uuid, then either a scope_id or record_addr
        must also be provided, and that single session

        is returned.

        * If only a record_addr is provided, the session containing that record
        will be returned.

        * If a record_name is provided then either a scope_id, session_id as an
        address, or record_addr must also be

        provided, and the session containing that record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and is provided without a scope_id or
        record_addr.

        * A record_name is provided without any way to identify the scope (e.g.
        a scope_id, a session_id as an address, or

        a record_addr).

        * Two or more of scope_id, session_id as an address, and record_addr are
        provided and don't all refer to the same

        scope.

        * A record_addr (or scope_id and record_name) is provided with a
        session_id and that session does not contain such

        a record.

        * A record_addr and record_name are both provided, but reference
        different records.


        By default, the scope and records are not included.

        Set include_scope and/or include_records to true to include the scope
        and/or records.
      operationId: Sessions
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these sessions (if
                  requested).
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: sessions is any number of wrapped session results.
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records contained in these
                  sessions (if requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  record_name:
                    type: string
                    description: >-
                      record_name is the name of the record to find the session
                      for in the provided scope.
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether to include the scope
                      containing these sessions in the response.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether to include the
                      records of these sessions in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              SessionsResponse is the response type for the Query/Sessions RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: path
          required: true
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: record_name
          description: >-
            record_name is the name of the record to find the session for in the
            provided scope.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether to include the scope containing
            these sessions in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether to include the records of
            these sessions in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/session/{session_id}/record/{name}':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records7
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether to include the the
                      scope containing these records in the response.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether to include the
                      sessions containing these records in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: path
          required: true
          type: string
        - name: name
          description: name is the name of the record to look for
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether to include the the scope
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether to include the sessions
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/session/{session_id}/records':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records6
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              title: >-
                                a role for this account within the context of
                                the processes used
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            optional:
                              type: boolean
                              format: boolean
                              title: whether this party's signature is optional
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addresses in this list are authorized to receive
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                      require_party_rollup:
                        type: boolean
                        format: boolean
                        description: >-
                          Whether all parties in this scope and its sessions
                          must be present in this scope's owners field.

                          This also enables use of optional=true scope owners
                          and session parties.
                    description: >-
                      Scope defines a root reference for a collection of records
                      owned by one or more parties.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                      description: record is the on-chain record message.
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether to include the the
                      scope containing these records in the response.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether to include the
                      sessions containing these records in the response.
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: name
          description: name is the name of the record to look for.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether to include the the scope
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether to include the sessions
            containing these records in the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/sessions/all:
    get:
      summary: SessionsAll retrieves all sessions.
      operationId: SessionsAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                title: >-
                                  a role for this account within the context of
                                  the processes used
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              optional:
                                type: boolean
                                format: boolean
                                title: whether this party's signature is optional
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      description: >-
                        Session defines an execution context against a specific
                        specification instance.

                        The context will have a specification and set of parties
                        involved.


                        NOTE: When there are no more Records within a Scope that
                        reference a Session, the Session is removed.
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: sessions are the wrapped sessions.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  exclude_id_info:
                    type: boolean
                    format: boolean
                    description: >-
                      exclude_id_info is a flag for whether to exclude the id
                      info from the response.
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              SessionsAllResponse is the response type for the Query/SessionsAll
              RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: exclude_id_info
          description: >-
            exclude_id_info is a flag for whether to exclude the id info from
            the response.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/valueownership/{address}':
    get:
      summary: >-
        ValueOwnership returns the scope identifiers that list the given address
        as the value owner.
      operationId: ValueOwnership
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope_uuids:
                type: array
                items:
                  type: string
                description: A list of scope ids (uuid) associated with the given address.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  address:
                    type: string
                  include_request:
                    type: boolean
                    format: boolean
                    description: >-
                      include_request is a flag for whether to include this
                      request in your result.
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              ValueOwnershipResponse is the response type for the
              Query/ValueOwnership RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          in: path
          required: true
          type: string
        - name: include_request
          description: >-
            include_request is a flag for whether to include this request in
            your result.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/name/v1/lookup/{address}':
    get:
      summary: ReverseLookup queries for all names bound against a given address
      operationId: ReverseLookup
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              name:
                type: array
                items:
                  type: string
                title: an array of names bound against a given address
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryReverseLookupResponse is the response type for the
              Query/Resolve method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          description: address to find name records for
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/name/v1/params:
    get:
      summary: Params queries params of the name module.
      operationId: NameParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  max_segment_length:
                    type: integer
                    format: int64
                    title: maximum length of name segment to allow
                  min_segment_length:
                    type: integer
                    format: int64
                    title: minimum length of name segment to allow
                  max_name_levels:
                    type: integer
                    format: int64
                    title: >-
                      maximum number of name segments to allow.  Example:
                      `foo.bar.baz` would be 3
                  allow_unrestricted_names:
                    type: boolean
                    format: boolean
                    title: determines if unrestricted name keys are allowed or not
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/provenance/name/v1/resolve/{name}':
    get:
      summary: Resolve queries for the address associated with a given name
      operationId: Resolve
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              address:
                type: string
                title: a string containing the address the name resolves to
              restricted:
                type: boolean
                format: boolean
                description: Whether owner signature is required to add sub-names.
            description: >-
              QueryResolveResponse is the response type for the Query/Resolve
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: name
          description: name to resolve the address for
          in: path
          required: true
          type: string
      tags:
        - Query
  /provenance/msgfees/v1/all:
    get:
      summary: Query all Msgs which have fees associated with them.
      operationId: QueryAllMsgFees
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              msg_fees:
                type: array
                items:
                  type: object
                  properties:
                    msg_type_url:
                      type: string
                    additional_fee:
                      title: >-
                        additional_fee can pay in any Coin( basically a Denom
                        and Amount, Amount can be zero)
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    recipient:
                      type: string
                    recipient_basis_points:
                      type: integer
                      format: int64
                  title: >-
                    MsgFee is the core of what gets stored on the blockchain

                    it consists of four parts

                    1. the msg type url, i.e. /cosmos.bank.v1beta1.MsgSend

                    2. minimum additional fees(can be of any denom)

                    3. optional recipient of fee based on
                    `recipient_basis_points`

                    4. if recipient is declared they will recieve the basis
                    points of the fee (0-10,000)
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: response for querying all msg's with fees associated with them
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/msgfees/v1/params:
    get:
      summary: Params queries the parameters for x/msgfees
      operationId: MsgFeeParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  floor_gas_price:
                    title: >-
                      constant used to calculate fees when gas fees shares denom
                      with msg fee
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                  nhash_per_usd_mil:
                    type: string
                    format: uint64
                    title: total nhash per usd mil for converting usd to nhash
                  conversion_fee_denom:
                    type: string
                    title: conversion fee denom is the denom usd is converted to
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /provenance/tx/v1/calculate_msg_based_fee:
    post:
      summary: >-
        CalculateTxFees simulates executing a transaction for estimating gas
        usage and additional fees.
      operationId: CalculateTxFees
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              additional_fees:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: >-
                  additional_fees are the amount of coins to be for addition msg
                  fees
              total_fees:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                description: >-
                  total_fees are the total amount of fees needed for the
                  transactions (msg fees + gas fee)

                  note: the gas fee is calculated with the floor gas price
                  module param.
              estimated_gas:
                type: string
                format: uint64
                title: estimated_gas is the amount of gas needed for the transaction
            description: >-
              CalculateTxFeesResponse is the response type for the Query RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              tx_bytes:
                type: string
                format: byte
                description: tx_bytes is the transaction to simulate.
              default_base_denom:
                type: string
                description: |-
                  default_base_denom is used to set the denom used for gas fees
                  if not set it will default to nhash.
              gas_adjustment:
                type: number
                format: float
                title: >-
                  gas_adjustment is the adjustment factor to be multiplied
                  against the estimate returned by the tx simulation
            description: >-
              CalculateTxFeesRequest is the request type for the Query RPC
              method.
      tags:
        - Query
  /provenance/rewards/v1/claim_period_reward_distributions:
    get:
      summary: >-
        ClaimPeriodRewardDistributions returns a list of claim period reward
        distributions matching the claim_status.
      operationId: ClaimPeriodRewardDistributions
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              claim_period_reward_distributions:
                type: array
                items:
                  type: object
                  properties:
                    claim_period_id:
                      type: string
                      format: uint64
                      description: The claim period id.
                    reward_program_id:
                      type: string
                      format: uint64
                      description: >-
                        The id of the reward program that this reward belongs
                        to.
                    total_rewards_pool_for_claim_period:
                      description: >-
                        The sum of all the granted rewards for this claim
                        period.
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                    rewards_pool:
                      description: The final allocated rewards for this claim period.
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                    total_shares:
                      type: string
                      format: int64
                      description: >-
                        The total number of granted shares for this claim
                        period.
                    claim_period_ended:
                      type: boolean
                      format: boolean
                      description: >-
                        A flag representing if the claim period for this reward
                        has ended.
                  description: >-
                    ClaimPeriodRewardDistribution, this is updated at the end of
                    every claim period.
                description: List of all ClaimPeriodRewardDistribution objects queried for.
              pagination:
                description: pagination defines an optional pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: >-
              QueryClaimPeriodRewardDistributionsResponse returns the list of
              paginated ClaimPeriodRewardDistributions
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/rewards/v1/claim_period_reward_distributions/{reward_id}/claim_periods/{claim_period_id}':
    get:
      summary: >-
        ClaimPeriodRewardDistributionsByID returns a claim period reward
        distribution matching the ID.
      operationId: ClaimPeriodRewardDistributionsByID
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              claim_period_reward_distribution:
                type: object
                properties:
                  claim_period_id:
                    type: string
                    format: uint64
                    description: The claim period id.
                  reward_program_id:
                    type: string
                    format: uint64
                    description: The id of the reward program that this reward belongs to.
                  total_rewards_pool_for_claim_period:
                    description: The sum of all the granted rewards for this claim period.
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                  rewards_pool:
                    description: The final allocated rewards for this claim period.
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                  total_shares:
                    type: string
                    format: int64
                    description: The total number of granted shares for this claim period.
                  claim_period_ended:
                    type: boolean
                    format: boolean
                    description: >-
                      A flag representing if the claim period for this reward
                      has ended.
                description: >-
                  ClaimPeriodRewardDistribution, this is updated at the end of
                  every claim period.
            title: >-
              QueryClaimPeriodRewardDistributionsByIDResponse returns the
              requested ClaimPeriodRewardDistribution
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: reward_id
          description: >-
            The reward program that the claim period reward distribution belongs
            to.
          in: path
          required: true
          type: string
          format: uint64
        - name: claim_period_id
          description: >-
            The claim period that the claim period reward distribution was
            created for.
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/provenance/rewards/v1/reward_claims/{address}':
    get:
      summary: >-
        RewardDistributionsByAddress returns a list of reward claims belonging
        to the account and matching the claim

        status.
      operationId: RewardDistributionsByAddress
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              address:
                type: string
                description: The address that the reward account belongs to.
              reward_account_state:
                type: array
                items:
                  type: object
                  properties:
                    reward_program_id:
                      type: string
                      format: uint64
                      description: The id of the reward program that this claim belongs to.
                    total_reward_claim:
                      description: >-
                        total rewards claimed for all eligible claim periods in
                        program.
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                    claim_status:
                      description: The status of the claim.
                      type: string
                      enum:
                        - CLAIM_STATUS_UNSPECIFIED
                        - CLAIM_STATUS_UNCLAIMABLE
                        - CLAIM_STATUS_CLAIMABLE
                        - CLAIM_STATUS_CLAIMED
                        - CLAIM_STATUS_EXPIRED
                      default: CLAIM_STATUS_UNSPECIFIED
                      title: ClaimStatus is the state a claim is in
                    claim_id:
                      type: string
                      format: uint64
                      description: The claim period that the claim belongs to.
                  description: >-
                    RewardAccountResponse is an address' reward claim for a
                    reward program's claim period.
                description: List of RewardAccounts queried for.
              pagination:
                description: pagination defines an optional pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryRewardDistributionsByAddressResponse returns the reward
              claims for an address that match the claim_status.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          description: The address that the claim belongs to.
          in: path
          required: true
          type: string
        - name: claim_status
          description: |-
            The status that the reward account must have.

             - CLAIM_STATUS_UNSPECIFIED: undefined state
             - CLAIM_STATUS_UNCLAIMABLE: unclaimable status
             - CLAIM_STATUS_CLAIMABLE: unclaimable claimable
             - CLAIM_STATUS_CLAIMED: unclaimable claimed
             - CLAIM_STATUS_EXPIRED: unclaimable expired
          in: query
          required: false
          type: string
          enum:
            - CLAIM_STATUS_UNSPECIFIED
            - CLAIM_STATUS_UNCLAIMABLE
            - CLAIM_STATUS_CLAIMABLE
            - CLAIM_STATUS_CLAIMED
            - CLAIM_STATUS_EXPIRED
          default: CLAIM_STATUS_UNSPECIFIED
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/rewards/v1/reward_programs:
    get:
      summary: >-
        RewardPrograms returns a list of reward programs matching the query
        type.
      operationId: RewardPrograms
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              reward_programs:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      description: An integer to uniquely identify the reward program.
                    title:
                      type: string
                      title: >-
                        Name to help identify the Reward
                        Program.(MaxTitleLength=140)
                    description:
                      type: string
                      title: >-
                        Short summary describing the Reward
                        Program.(MaxDescriptionLength=10000)
                    distribute_from_address:
                      type: string
                      description: address that provides funds for the total reward pool.
                    total_reward_pool:
                      description: The total amount of funding given to the RewardProgram.
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                    remaining_pool_balance:
                      description: >-
                        The remaining funds available to distribute after n
                        claim periods have passed.
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                    claimed_amount:
                      description: >-
                        The total amount of all funds claimed by participants
                        for all past claim periods.
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                    max_reward_by_address:
                      description: Maximum reward per claim period per address.
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                    minimum_rollover_amount:
                      description: Minimum amount of coins for a program to rollover.
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                    claim_period_seconds:
                      type: string
                      format: uint64
                      description: Number of seconds that a claim period lasts.
                    program_start_time:
                      type: string
                      format: date-time
                      description: >-
                        Time that a RewardProgram should start and switch to
                        STARTED state.
                    expected_program_end_time:
                      type: string
                      format: date-time
                      description: >-
                        Time that a RewardProgram is expected to end, based on
                        data when it was setup.
                    program_end_time_max:
                      type: string
                      format: date-time
                      description: Time that a RewardProgram MUST end.
                    claim_period_end_time:
                      type: string
                      format: date-time
                      description: >-
                        Used internally to calculate and track the current claim
                        period's ending time.
                    actual_program_end_time:
                      type: string
                      format: date-time
                      description: >-
                        Time the RewardProgram switched to FINISHED state.
                        Initially set as empty.
                    claim_periods:
                      type: string
                      format: uint64
                      description: Number of claim periods this program will run for.
                    current_claim_period:
                      type: string
                      format: uint64
                      description: >-
                        Current claim period of the RewardProgram. Uses 1-based
                        indexing.
                    max_rollover_claim_periods:
                      type: string
                      format: uint64
                      description: >-
                        maximum number of claim periods a reward program can
                        rollover.
                    state:
                      description: Current state of the RewardProgram.
                      type: string
                      enum:
                        - STATE_UNSPECIFIED
                        - STATE_PENDING
                        - STATE_STARTED
                        - STATE_FINISHED
                        - STATE_EXPIRED
                      default: STATE_UNSPECIFIED
                      title: State is the state of the reward program
                    expiration_offset:
                      type: string
                      format: uint64
                      description: >-
                        Grace period after a RewardProgram FINISHED. It is the
                        number of seconds until a RewardProgram enters the
                        EXPIRED

                        state.
                    qualifying_actions:
                      type: array
                      items:
                        type: object
                        properties:
                          delegate:
                            type: object
                            properties:
                              minimum_actions:
                                type: string
                                format: uint64
                                description: Minimum number of successful delegates.
                              maximum_actions:
                                type: string
                                format: uint64
                                description: Maximum number of successful delegates.
                              minimum_delegation_amount:
                                description: >-
                                  Minimum amount that the user must have
                                  currently delegated on the validator.
                                type: object
                                properties:
                                  denom:
                                    type: string
                                  amount:
                                    type: string
                              maximum_delegation_amount:
                                description: >-
                                  Maximum amount that the user must have
                                  currently delegated on the validator.
                                type: object
                                properties:
                                  denom:
                                    type: string
                                  amount:
                                    type: string
                              minimum_active_stake_percentile:
                                type: string
                                description: >-
                                  Minimum percentile that can be below the
                                  validator's power ranking.
                              maximum_active_stake_percentile:
                                type: string
                                description: >-
                                  Maximum percentile that can be below the
                                  validator's power ranking.
                            description: >-
                              ActionDelegate represents the delegate action and
                              its required eligibility criteria.
                          transfer:
                            type: object
                            properties:
                              minimum_actions:
                                type: string
                                format: uint64
                                description: Minimum number of successful transfers.
                              maximum_actions:
                                type: string
                                format: uint64
                                description: Maximum number of successful transfers.
                              minimum_delegation_amount:
                                description: >-
                                  Minimum delegation amount the account must
                                  have across all validators, for the transfer
                                  action to be counted.
                                type: object
                                properties:
                                  denom:
                                    type: string
                                  amount:
                                    type: string
                            description: >-
                              ActionTransfer represents the transfer action and
                              its required eligibility criteria.
                          vote:
                            type: object
                            properties:
                              minimum_actions:
                                type: string
                                format: uint64
                                description: Minimum number of successful votes.
                              maximum_actions:
                                type: string
                                format: uint64
                                description: Maximum number of successful votes.
                              minimum_delegation_amount:
                                description: >-
                                  Minimum delegation amount the account must
                                  have across all validators, for the vote
                                  action to be counted.
                                type: object
                                properties:
                                  denom:
                                    type: string
                                  amount:
                                    type: string
                              validator_multiplier:
                                type: string
                                format: uint64
                                title: >-
                                  Positive multiplier that is applied to the
                                  shares awarded by the vote action when
                                  conditions

                                  are met(for now the only condition is the
                                  current vote is a validator vote). A value of
                                  zero will behave the same

                                  as one
                            description: >-
                              ActionVote represents the voting action and its
                              required eligibility criteria.
                        description: QualifyingAction can be one of many action types.
                      description: Actions that count towards the reward.
                  title: RewardProgram
                description: List of RewardProgram objects matching the query_type.
              pagination:
                description: pagination defines an optional pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: >-
              QueryRewardProgramsResponse contains the list of RewardPrograms
              matching the query
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: query_type
          description: |-
            A filter on the types of reward programs.

             - QUERY_TYPE_UNSPECIFIED: unspecified type
             - QUERY_TYPE_ALL: all reward programs states
             - QUERY_TYPE_PENDING: pending reward program state=
             - QUERY_TYPE_ACTIVE: active reward program state
             - QUERY_TYPE_OUTSTANDING: pending and active reward program states
             - QUERY_TYPE_FINISHED: finished reward program state
          in: query
          required: false
          type: string
          enum:
            - QUERY_TYPE_UNSPECIFIED
            - QUERY_TYPE_ALL
            - QUERY_TYPE_PENDING
            - QUERY_TYPE_ACTIVE
            - QUERY_TYPE_OUTSTANDING
            - QUERY_TYPE_FINISHED
          default: QUERY_TYPE_UNSPECIFIED
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/rewards/v1/reward_programs/{id}':
    get:
      summary: RewardProgramByID returns a reward program matching the ID.
      operationId: RewardProgramByID
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              reward_program:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                    description: An integer to uniquely identify the reward program.
                  title:
                    type: string
                    title: >-
                      Name to help identify the Reward
                      Program.(MaxTitleLength=140)
                  description:
                    type: string
                    title: >-
                      Short summary describing the Reward
                      Program.(MaxDescriptionLength=10000)
                  distribute_from_address:
                    type: string
                    description: address that provides funds for the total reward pool.
                  total_reward_pool:
                    description: The total amount of funding given to the RewardProgram.
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                  remaining_pool_balance:
                    description: >-
                      The remaining funds available to distribute after n claim
                      periods have passed.
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                  claimed_amount:
                    description: >-
                      The total amount of all funds claimed by participants for
                      all past claim periods.
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                  max_reward_by_address:
                    description: Maximum reward per claim period per address.
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                  minimum_rollover_amount:
                    description: Minimum amount of coins for a program to rollover.
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                  claim_period_seconds:
                    type: string
                    format: uint64
                    description: Number of seconds that a claim period lasts.
                  program_start_time:
                    type: string
                    format: date-time
                    description: >-
                      Time that a RewardProgram should start and switch to
                      STARTED state.
                  expected_program_end_time:
                    type: string
                    format: date-time
                    description: >-
                      Time that a RewardProgram is expected to end, based on
                      data when it was setup.
                  program_end_time_max:
                    type: string
                    format: date-time
                    description: Time that a RewardProgram MUST end.
                  claim_period_end_time:
                    type: string
                    format: date-time
                    description: >-
                      Used internally to calculate and track the current claim
                      period's ending time.
                  actual_program_end_time:
                    type: string
                    format: date-time
                    description: >-
                      Time the RewardProgram switched to FINISHED state.
                      Initially set as empty.
                  claim_periods:
                    type: string
                    format: uint64
                    description: Number of claim periods this program will run for.
                  current_claim_period:
                    type: string
                    format: uint64
                    description: >-
                      Current claim period of the RewardProgram. Uses 1-based
                      indexing.
                  max_rollover_claim_periods:
                    type: string
                    format: uint64
                    description: >-
                      maximum number of claim periods a reward program can
                      rollover.
                  state:
                    description: Current state of the RewardProgram.
                    type: string
                    enum:
                      - STATE_UNSPECIFIED
                      - STATE_PENDING
                      - STATE_STARTED
                      - STATE_FINISHED
                      - STATE_EXPIRED
                    default: STATE_UNSPECIFIED
                    title: State is the state of the reward program
                  expiration_offset:
                    type: string
                    format: uint64
                    description: >-
                      Grace period after a RewardProgram FINISHED. It is the
                      number of seconds until a RewardProgram enters the EXPIRED

                      state.
                  qualifying_actions:
                    type: array
                    items:
                      type: object
                      properties:
                        delegate:
                          type: object
                          properties:
                            minimum_actions:
                              type: string
                              format: uint64
                              description: Minimum number of successful delegates.
                            maximum_actions:
                              type: string
                              format: uint64
                              description: Maximum number of successful delegates.
                            minimum_delegation_amount:
                              description: >-
                                Minimum amount that the user must have currently
                                delegated on the validator.
                              type: object
                              properties:
                                denom:
                                  type: string
                                amount:
                                  type: string
                            maximum_delegation_amount:
                              description: >-
                                Maximum amount that the user must have currently
                                delegated on the validator.
                              type: object
                              properties:
                                denom:
                                  type: string
                                amount:
                                  type: string
                            minimum_active_stake_percentile:
                              type: string
                              description: >-
                                Minimum percentile that can be below the
                                validator's power ranking.
                            maximum_active_stake_percentile:
                              type: string
                              description: >-
                                Maximum percentile that can be below the
                                validator's power ranking.
                          description: >-
                            ActionDelegate represents the delegate action and
                            its required eligibility criteria.
                        transfer:
                          type: object
                          properties:
                            minimum_actions:
                              type: string
                              format: uint64
                              description: Minimum number of successful transfers.
                            maximum_actions:
                              type: string
                              format: uint64
                              description: Maximum number of successful transfers.
                            minimum_delegation_amount:
                              description: >-
                                Minimum delegation amount the account must have
                                across all validators, for the transfer action
                                to be counted.
                              type: object
                              properties:
                                denom:
                                  type: string
                                amount:
                                  type: string
                          description: >-
                            ActionTransfer represents the transfer action and
                            its required eligibility criteria.
                        vote:
                          type: object
                          properties:
                            minimum_actions:
                              type: string
                              format: uint64
                              description: Minimum number of successful votes.
                            maximum_actions:
                              type: string
                              format: uint64
                              description: Maximum number of successful votes.
                            minimum_delegation_amount:
                              description: >-
                                Minimum delegation amount the account must have
                                across all validators, for the vote action to be
                                counted.
                              type: object
                              properties:
                                denom:
                                  type: string
                                amount:
                                  type: string
                            validator_multiplier:
                              type: string
                              format: uint64
                              title: >-
                                Positive multiplier that is applied to the
                                shares awarded by the vote action when
                                conditions

                                are met(for now the only condition is the
                                current vote is a validator vote). A value of
                                zero will behave the same

                                as one
                          description: >-
                            ActionVote represents the voting action and its
                            required eligibility criteria.
                      description: QualifyingAction can be one of many action types.
                    description: Actions that count towards the reward.
                title: RewardProgram
                description: The reward program object that was queried for.
            title: >-
              QueryRewardProgramByIDResponse contains the requested
              RewardProgram
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: id
          description: The id of the reward program to query.
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
definitions:
  cosmos.auth.v1beta1.AddressBytesToStringResponse:
    type: object
    properties:
      address_string:
        type: string
    description: >-
      AddressBytesToStringResponse is the response type for AddressString rpc
      method.


      Since: cosmos-sdk 0.46
  cosmos.auth.v1beta1.AddressStringToBytesResponse:
    type: object
    properties:
      address_bytes:
        type: string
        format: byte
    description: >-
      AddressStringToBytesResponse is the response type for AddressBytes rpc
      method.


      Since: cosmos-sdk 0.46
  cosmos.auth.v1beta1.Bech32PrefixResponse:
    type: object
    properties:
      bech32_prefix:
        type: string
    description: |-
      Bech32PrefixResponse is the response type for Bech32Prefix rpc method.

      Since: cosmos-sdk 0.46
  cosmos.auth.v1beta1.Params:
    type: object
    properties:
      max_memo_characters:
        type: string
        format: uint64
      tx_sig_limit:
        type: string
        format: uint64
      tx_size_cost_per_byte:
        type: string
        format: uint64
      sig_verify_cost_ed25519:
        type: string
        format: uint64
      sig_verify_cost_secp256k1:
        type: string
        format: uint64
    description: Params defines the parameters for the auth module.
  cosmos.auth.v1beta1.QueryAccountAddressByIDResponse:
    type: object
    properties:
      account_address:
        type: string
    description: 'Since: cosmos-sdk 0.46.2'
    title: >-
      QueryAccountAddressByIDResponse is the response type for
      AccountAddressByID rpc method
  cosmos.auth.v1beta1.QueryAccountResponse:
    type: object
    properties:
      account:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: >-
      QueryAccountResponse is the response type for the Query/Account RPC
      method.
  cosmos.auth.v1beta1.QueryAccountsResponse:
    type: object
    properties:
      accounts:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        title: accounts are the existing accounts
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAccountsResponse is the response type for the Query/Accounts RPC
      method.


      Since: cosmos-sdk 0.43
  cosmos.auth.v1beta1.QueryModuleAccountByNameResponse:
    type: object
    properties:
      account:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: >-
      QueryModuleAccountByNameResponse is the response type for the
      Query/ModuleAccountByName RPC method.
  cosmos.auth.v1beta1.QueryModuleAccountsResponse:
    type: object
    properties:
      accounts:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
    description: >-
      QueryModuleAccountsResponse is the response type for the
      Query/ModuleAccounts RPC method.


      Since: cosmos-sdk 0.46
  cosmos.auth.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          max_memo_characters:
            type: string
            format: uint64
          tx_sig_limit:
            type: string
            format: uint64
          tx_size_cost_per_byte:
            type: string
            format: uint64
          sig_verify_cost_ed25519:
            type: string
            format: uint64
          sig_verify_cost_secp256k1:
            type: string
            format: uint64
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmos.base.query.v1beta1.PageRequest:
    type: object
    properties:
      key:
        type: string
        format: byte
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
      offset:
        type: string
        format: uint64
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
      limit:
        type: string
        format: uint64
        description: >-
          limit is the total number of results to be returned in the result
          page.

          If left empty it will default to a value to be set by each app.
      count_total:
        type: boolean
        description: >-
          count_total is set to true  to indicate that the result set should
          include

          a count of the total number of items available for pagination in UIs.

          count_total is only respected when offset is used. It is ignored when
          key

          is set.
        format: boolean
      reverse:
        type: boolean
        description: >-
          reverse is set to true if results are to be returned in the descending
          order.


          Since: cosmos-sdk 0.43
        format: boolean
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest pagination = 2;
       }
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
  cosmos.base.query.v1beta1.PageResponse:
    type: object
    properties:
      next_key:
        type: string
        format: byte
        description: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently. It will be empty if
          there are no more results.
      total:
        type: string
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
    description: |-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding request message has used PageRequest.

       message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
  google.protobuf.Any:
    type: object
    properties:
      type_url:
        type: string
        description: >-
          A URL/resource name that uniquely identifies the type of the
          serialized

          protocol buffer message. This string must contain at least

          one "/" character. The last segment of the URL's path must represent

          the fully qualified name of the type (as in

          `path/google.protobuf.Duration`). The name should be in a canonical
          form

          (e.g., leading "." is not accepted).


          In practice, teams usually precompile into the binary all types that
          they

          expect it to use in the context of Any. However, for URLs which use
          the

          scheme `http`, `https`, or no scheme, one can optionally set up a type

          server that maps type URLs to message definitions as follows:


          * If no scheme is provided, `https` is assumed.

          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official

          protobuf release, and it is not used for type URLs beginning with

          type.googleapis.com.


          Schemes other than `http`, `https` (or the empty scheme) might be

          used with implementation specific semantics.
      value:
        type: string
        format: byte
        description: >-
          Must be a valid serialized protocol buffer of the above specified
          type.
    description: >-
      `Any` contains an arbitrary serialized protocol buffer message along with
      a

      URL that describes the type of the serialized message.


      Protobuf library provides support to pack/unpack Any values in the form

      of utility functions or additional generated methods of the Any type.


      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := ptypes.MarshalAny(foo)
           ...
           foo := &pb.Foo{}
           if err := ptypes.UnmarshalAny(any, foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use

      'type.googleapis.com/full.type.name' as the type URL and the unpack

      methods only use the fully qualified type name after the last '/'

      in the type URL, for example "foo.bar.com/x/y.z" will yield type

      name "y.z".



      JSON

      ====

      The JSON representation of an `Any` value uses the regular

      representation of the deserialized, embedded message, with an

      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON

      representation, that representation will be embedded adding a field

      `value` which holds the custom JSON in addition to the `@type`

      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  grpc.gateway.runtime.Error:
    type: object
    properties:
      error:
        type: string
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
  cosmos.bank.v1beta1.DenomOwner:
    type: object
    properties:
      address:
        type: string
        description: address defines the address that owns a particular denomination.
      balance:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: |-
      DenomOwner defines structure representing an account that owns or holds a
      particular denominated token. It contains the account address and account
      balance of the denominated token.

      Since: cosmos-sdk 0.46
  cosmos.bank.v1beta1.DenomUnit:
    type: object
    properties:
      denom:
        type: string
        description: denom represents the string name of the given denom unit (e.g uatom).
      exponent:
        type: integer
        format: int64
        description: >-
          exponent represents power of 10 exponent that one must

          raise the base_denom to in order to equal the given DenomUnit's denom

          1 denom = 10^exponent base_denom

          (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom'
          with

          exponent = 6, thus: 1 atom = 10^6 uatom).
      aliases:
        type: array
        items:
          type: string
        title: aliases is a list of string aliases for the given denom
    description: |-
      DenomUnit represents a struct that describes a given
      denomination unit of the basic token.
  cosmos.bank.v1beta1.Metadata:
    type: object
    properties:
      description:
        type: string
      denom_units:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              description: >-
                denom represents the string name of the given denom unit (e.g
                uatom).
            exponent:
              type: integer
              format: int64
              description: >-
                exponent represents power of 10 exponent that one must

                raise the base_denom to in order to equal the given DenomUnit's
                denom

                1 denom = 10^exponent base_denom

                (e.g. with a base_denom of uatom, one can create a DenomUnit of
                'atom' with

                exponent = 6, thus: 1 atom = 10^6 uatom).
            aliases:
              type: array
              items:
                type: string
              title: aliases is a list of string aliases for the given denom
          description: |-
            DenomUnit represents a struct that describes a given
            denomination unit of the basic token.
        title: denom_units represents the list of DenomUnit's for a given coin
      base:
        type: string
        description: >-
          base represents the base denom (should be the DenomUnit with exponent
          = 0).
      display:
        type: string
        description: |-
          display indicates the suggested denom that should be
          displayed in clients.
      name:
        type: string
        description: 'Since: cosmos-sdk 0.43'
        title: 'name defines the name of the token (eg: Cosmos Atom)'
      symbol:
        type: string
        description: >-
          symbol is the token symbol usually shown on exchanges (eg: ATOM). This
          can

          be the same as the display.


          Since: cosmos-sdk 0.43
      uri:
        type: string
        description: >-
          URI to a document (on or off-chain) that contains additional
          information. Optional.


          Since: cosmos-sdk 0.46
      uri_hash:
        type: string
        description: >-
          URIHash is a sha256 hash of a document pointed by URI. It's used to
          verify that

          the document didn't change. Optional.


          Since: cosmos-sdk 0.46
    description: |-
      Metadata represents a struct that describes
      a basic token.
  cosmos.bank.v1beta1.Params:
    type: object
    properties:
      send_enabled:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            enabled:
              type: boolean
          description: >-
            SendEnabled maps coin denom to a send_enabled status (whether a
            denom is

            sendable).
        description: >-
          Deprecated: Use of SendEnabled in params is deprecated.

          For genesis, use the newly added send_enabled field in the genesis
          object.

          Storage, lookup, and manipulation of this information is now in the
          keeper.


          As of cosmos-sdk 0.47, this only exists for backwards compatibility of
          genesis files.
      default_send_enabled:
        type: boolean
    description: Params defines the parameters for the bank module.
  cosmos.bank.v1beta1.QueryAllBalancesResponse:
    type: object
    properties:
      balances:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: balances is the balances of all the coins.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllBalancesResponse is the response type for the Query/AllBalances
      RPC

      method.
  cosmos.bank.v1beta1.QueryBalanceResponse:
    type: object
    properties:
      balance:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: >-
      QueryBalanceResponse is the response type for the Query/Balance RPC
      method.
  cosmos.bank.v1beta1.QueryDenomMetadataResponse:
    type: object
    properties:
      metadata:
        type: object
        properties:
          description:
            type: string
          denom_units:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                  description: >-
                    denom represents the string name of the given denom unit
                    (e.g uatom).
                exponent:
                  type: integer
                  format: int64
                  description: >-
                    exponent represents power of 10 exponent that one must

                    raise the base_denom to in order to equal the given
                    DenomUnit's denom

                    1 denom = 10^exponent base_denom

                    (e.g. with a base_denom of uatom, one can create a DenomUnit
                    of 'atom' with

                    exponent = 6, thus: 1 atom = 10^6 uatom).
                aliases:
                  type: array
                  items:
                    type: string
                  title: aliases is a list of string aliases for the given denom
              description: |-
                DenomUnit represents a struct that describes a given
                denomination unit of the basic token.
            title: denom_units represents the list of DenomUnit's for a given coin
          base:
            type: string
            description: >-
              base represents the base denom (should be the DenomUnit with
              exponent = 0).
          display:
            type: string
            description: |-
              display indicates the suggested denom that should be
              displayed in clients.
          name:
            type: string
            description: 'Since: cosmos-sdk 0.43'
            title: 'name defines the name of the token (eg: Cosmos Atom)'
          symbol:
            type: string
            description: >-
              symbol is the token symbol usually shown on exchanges (eg: ATOM).
              This can

              be the same as the display.


              Since: cosmos-sdk 0.43
          uri:
            type: string
            description: >-
              URI to a document (on or off-chain) that contains additional
              information. Optional.


              Since: cosmos-sdk 0.46
          uri_hash:
            type: string
            description: >-
              URIHash is a sha256 hash of a document pointed by URI. It's used
              to verify that

              the document didn't change. Optional.


              Since: cosmos-sdk 0.46
        description: |-
          Metadata represents a struct that describes
          a basic token.
    description: >-
      QueryDenomMetadataResponse is the response type for the
      Query/DenomMetadata RPC

      method.
  cosmos.bank.v1beta1.QueryDenomOwnersResponse:
    type: object
    properties:
      denom_owners:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              description: address defines the address that owns a particular denomination.
            balance:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          description: >-
            DenomOwner defines structure representing an account that owns or
            holds a

            particular denominated token. It contains the account address and
            account

            balance of the denominated token.


            Since: cosmos-sdk 0.46
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC
      query.


      Since: cosmos-sdk 0.46
  cosmos.bank.v1beta1.QueryDenomsMetadataResponse:
    type: object
    properties:
      metadatas:
        type: array
        items:
          type: object
          properties:
            description:
              type: string
            denom_units:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                    description: >-
                      denom represents the string name of the given denom unit
                      (e.g uatom).
                  exponent:
                    type: integer
                    format: int64
                    description: >-
                      exponent represents power of 10 exponent that one must

                      raise the base_denom to in order to equal the given
                      DenomUnit's denom

                      1 denom = 10^exponent base_denom

                      (e.g. with a base_denom of uatom, one can create a
                      DenomUnit of 'atom' with

                      exponent = 6, thus: 1 atom = 10^6 uatom).
                  aliases:
                    type: array
                    items:
                      type: string
                    title: aliases is a list of string aliases for the given denom
                description: |-
                  DenomUnit represents a struct that describes a given
                  denomination unit of the basic token.
              title: denom_units represents the list of DenomUnit's for a given coin
            base:
              type: string
              description: >-
                base represents the base denom (should be the DenomUnit with
                exponent = 0).
            display:
              type: string
              description: |-
                display indicates the suggested denom that should be
                displayed in clients.
            name:
              type: string
              description: 'Since: cosmos-sdk 0.43'
              title: 'name defines the name of the token (eg: Cosmos Atom)'
            symbol:
              type: string
              description: >-
                symbol is the token symbol usually shown on exchanges (eg:
                ATOM). This can

                be the same as the display.


                Since: cosmos-sdk 0.43
            uri:
              type: string
              description: >-
                URI to a document (on or off-chain) that contains additional
                information. Optional.


                Since: cosmos-sdk 0.46
            uri_hash:
              type: string
              description: >-
                URIHash is a sha256 hash of a document pointed by URI. It's used
                to verify that

                the document didn't change. Optional.


                Since: cosmos-sdk 0.46
          description: |-
            Metadata represents a struct that describes
            a basic token.
        description: >-
          metadata provides the client information for all the registered
          tokens.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryDenomsMetadataResponse is the response type for the
      Query/DenomsMetadata RPC

      method.
  cosmos.bank.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          send_enabled:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                enabled:
                  type: boolean
              description: >-
                SendEnabled maps coin denom to a send_enabled status (whether a
                denom is

                sendable).
            description: >-
              Deprecated: Use of SendEnabled in params is deprecated.

              For genesis, use the newly added send_enabled field in the genesis
              object.

              Storage, lookup, and manipulation of this information is now in
              the keeper.


              As of cosmos-sdk 0.47, this only exists for backwards
              compatibility of genesis files.
          default_send_enabled:
            type: boolean
        description: Params defines the parameters for the bank module.
    description: >-
      QueryParamsResponse defines the response type for querying x/bank
      parameters.
  cosmos.bank.v1beta1.QuerySendEnabledResponse:
    type: object
    properties:
      send_enabled:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            enabled:
              type: boolean
          description: >-
            SendEnabled maps coin denom to a send_enabled status (whether a
            denom is

            sendable).
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QuerySendEnabledResponse defines the RPC response of a SendEnable query.

      Since: cosmos-sdk 0.47
  cosmos.bank.v1beta1.QuerySpendableBalancesResponse:
    type: object
    properties:
      balances:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: balances is the spendable balances of all the coins.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QuerySpendableBalancesResponse defines the gRPC response structure for
      querying

      an account's spendable balances.


      Since: cosmos-sdk 0.46
  cosmos.bank.v1beta1.QuerySupplyOfResponse:
    type: object
    properties:
      amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: >-
      QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC
      method.
  cosmos.bank.v1beta1.QueryTotalSupplyResponse:
    type: object
    properties:
      supply:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: supply is the supply of the coins
      pagination:
        description: |-
          pagination defines the pagination in the response.

          Since: cosmos-sdk 0.43
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: >-
      QueryTotalSupplyResponse is the response type for the Query/TotalSupply
      RPC

      method
  cosmos.bank.v1beta1.SendEnabled:
    type: object
    properties:
      denom:
        type: string
      enabled:
        type: boolean
    description: |-
      SendEnabled maps coin denom to a send_enabled status (whether a denom is
      sendable).
  cosmos.base.v1beta1.Coin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
  cosmos.base.tendermint.v1beta1.ABCIQueryResponse:
    type: object
    properties:
      code:
        type: integer
        format: int64
      log:
        type: string
      info:
        type: string
      index:
        type: string
        format: int64
      key:
        type: string
        format: byte
      value:
        type: string
        format: byte
      proof_ops:
        type: object
        properties:
          ops:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                key:
                  type: string
                  format: byte
                data:
                  type: string
                  format: byte
              description: >-
                ProofOp defines an operation used for calculating Merkle root.
                The data could

                be arbitrary format, providing nessecary data for example
                neighbouring node

                hash.


                Note: This type is a duplicate of the ProofOp proto type defined
                in

                Tendermint.
        description: |-
          ProofOps is Merkle proof defined by the list of ProofOps.

          Note: This type is a duplicate of the ProofOps proto type defined in
          Tendermint.
      height:
        type: string
        format: int64
      codespace:
        type: string
    description: |-
      ABCIQueryResponse defines the response structure for the ABCIQuery gRPC
      query.

      Note: This type is a duplicate of the ResponseQuery proto type defined in
      Tendermint.
  cosmos.base.tendermint.v1beta1.Block:
    type: object
    properties:
      header:
        type: object
        properties:
          version:
            title: basic block info
            type: object
            properties:
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
          chain_id:
            type: string
          height:
            type: string
            format: int64
          time:
            type: string
            format: date-time
          last_block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          last_commit_hash:
            type: string
            format: byte
            title: hashes of block data
          data_hash:
            type: string
            format: byte
          validators_hash:
            type: string
            format: byte
            title: hashes from the app output from the prev block
          next_validators_hash:
            type: string
            format: byte
          consensus_hash:
            type: string
            format: byte
          app_hash:
            type: string
            format: byte
          last_results_hash:
            type: string
            format: byte
          evidence_hash:
            type: string
            format: byte
            title: consensus info
          proposer_address:
            type: string
            description: >-
              proposer_address is the original block proposer address, formatted
              as a Bech32 string.

              In Tendermint, this type is `bytes`, but in the SDK, we convert it
              to a Bech32 string

              for better UX.
        description: Header defines the structure of a Tendermint block header.
      data:
        type: object
        properties:
          txs:
            type: array
            items:
              type: string
              format: byte
            description: >-
              Txs that will be applied by state @ block.Height+1.

              NOTE: not all txs here are valid.  We're just agreeing on the
              order first.

              This means that block.AppHash does not include these txs.
        title: Data contains the set of transactions included in the block
      evidence:
        type: object
        properties:
          evidence:
            type: array
            items:
              type: object
              properties:
                duplicate_vote_evidence:
                  type: object
                  properties:
                    vote_a:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                        height:
                          type: string
                          format: int64
                        round:
                          type: integer
                          format: int32
                        block_id:
                          type: object
                          properties:
                            hash:
                              type: string
                              format: byte
                            part_set_header:
                              type: object
                              properties:
                                total:
                                  type: integer
                                  format: int64
                                hash:
                                  type: string
                                  format: byte
                              title: PartsetHeader
                          title: BlockID
                        timestamp:
                          type: string
                          format: date-time
                        validator_address:
                          type: string
                          format: byte
                        validator_index:
                          type: integer
                          format: int32
                        signature:
                          type: string
                          format: byte
                      description: >-
                        Vote represents a prevote, precommit, or commit vote
                        from validators for

                        consensus.
                    vote_b:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                        height:
                          type: string
                          format: int64
                        round:
                          type: integer
                          format: int32
                        block_id:
                          type: object
                          properties:
                            hash:
                              type: string
                              format: byte
                            part_set_header:
                              type: object
                              properties:
                                total:
                                  type: integer
                                  format: int64
                                hash:
                                  type: string
                                  format: byte
                              title: PartsetHeader
                          title: BlockID
                        timestamp:
                          type: string
                          format: date-time
                        validator_address:
                          type: string
                          format: byte
                        validator_index:
                          type: integer
                          format: int32
                        signature:
                          type: string
                          format: byte
                      description: >-
                        Vote represents a prevote, precommit, or commit vote
                        from validators for

                        consensus.
                    total_voting_power:
                      type: string
                      format: int64
                    validator_power:
                      type: string
                      format: int64
                    timestamp:
                      type: string
                      format: date-time
                  description: >-
                    DuplicateVoteEvidence contains evidence of a validator
                    signed two conflicting votes.
                light_client_attack_evidence:
                  type: object
                  properties:
                    conflicting_block:
                      type: object
                      properties:
                        signed_header:
                          type: object
                          properties:
                            header:
                              type: object
                              properties:
                                version:
                                  title: basic block info
                                  type: object
                                  properties:
                                    block:
                                      type: string
                                      format: uint64
                                    app:
                                      type: string
                                      format: uint64
                                  description: >-
                                    Consensus captures the consensus rules for
                                    processing a block in the blockchain,

                                    including all blockchain data structures and
                                    the rules of the application's

                                    state transition machine.
                                chain_id:
                                  type: string
                                height:
                                  type: string
                                  format: int64
                                time:
                                  type: string
                                  format: date-time
                                last_block_id:
                                  type: object
                                  properties:
                                    hash:
                                      type: string
                                      format: byte
                                    part_set_header:
                                      type: object
                                      properties:
                                        total:
                                          type: integer
                                          format: int64
                                        hash:
                                          type: string
                                          format: byte
                                      title: PartsetHeader
                                  title: BlockID
                                last_commit_hash:
                                  type: string
                                  format: byte
                                  title: hashes of block data
                                data_hash:
                                  type: string
                                  format: byte
                                validators_hash:
                                  type: string
                                  format: byte
                                  title: >-
                                    hashes from the app output from the prev
                                    block
                                next_validators_hash:
                                  type: string
                                  format: byte
                                consensus_hash:
                                  type: string
                                  format: byte
                                app_hash:
                                  type: string
                                  format: byte
                                last_results_hash:
                                  type: string
                                  format: byte
                                evidence_hash:
                                  type: string
                                  format: byte
                                  title: consensus info
                                proposer_address:
                                  type: string
                                  format: byte
                              description: Header defines the structure of a block header.
                            commit:
                              type: object
                              properties:
                                height:
                                  type: string
                                  format: int64
                                round:
                                  type: integer
                                  format: int32
                                block_id:
                                  type: object
                                  properties:
                                    hash:
                                      type: string
                                      format: byte
                                    part_set_header:
                                      type: object
                                      properties:
                                        total:
                                          type: integer
                                          format: int64
                                        hash:
                                          type: string
                                          format: byte
                                      title: PartsetHeader
                                  title: BlockID
                                signatures:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      block_id_flag:
                                        type: string
                                        enum:
                                          - BLOCK_ID_FLAG_UNKNOWN
                                          - BLOCK_ID_FLAG_ABSENT
                                          - BLOCK_ID_FLAG_COMMIT
                                          - BLOCK_ID_FLAG_NIL
                                        default: BLOCK_ID_FLAG_UNKNOWN
                                        title: >-
                                          BlockIdFlag indicates which BlcokID the
                                          signature is for
                                      validator_address:
                                        type: string
                                        format: byte
                                      timestamp:
                                        type: string
                                        format: date-time
                                      signature:
                                        type: string
                                        format: byte
                                    description: >-
                                      CommitSig is a part of the Vote included
                                      in a Commit.
                              description: >-
                                Commit contains the evidence that a block was
                                committed by a set of validators.
                        validator_set:
                          type: object
                          properties:
                            validators:
                              type: array
                              items:
                                type: object
                                properties:
                                  address:
                                    type: string
                                    format: byte
                                  pub_key:
                                    type: object
                                    properties:
                                      ed25519:
                                        type: string
                                        format: byte
                                      secp256k1:
                                        type: string
                                        format: byte
                                    title: >-
                                      PublicKey defines the keys available for
                                      use with Validators
                                  voting_power:
                                    type: string
                                    format: int64
                                  proposer_priority:
                                    type: string
                                    format: int64
                            proposer:
                              type: object
                              properties:
                                address:
                                  type: string
                                  format: byte
                                pub_key:
                                  type: object
                                  properties:
                                    ed25519:
                                      type: string
                                      format: byte
                                    secp256k1:
                                      type: string
                                      format: byte
                                  title: >-
                                    PublicKey defines the keys available for use
                                    with Validators
                                voting_power:
                                  type: string
                                  format: int64
                                proposer_priority:
                                  type: string
                                  format: int64
                            total_voting_power:
                              type: string
                              format: int64
                    common_height:
                      type: string
                      format: int64
                    byzantine_validators:
                      type: array
                      items:
                        type: object
                        properties:
                          address:
                            type: string
                            format: byte
                          pub_key:
                            type: object
                            properties:
                              ed25519:
                                type: string
                                format: byte
                              secp256k1:
                                type: string
                                format: byte
                            title: >-
                              PublicKey defines the keys available for use with
                              Validators
                          voting_power:
                            type: string
                            format: int64
                          proposer_priority:
                            type: string
                            format: int64
                    total_voting_power:
                      type: string
                      format: int64
                    timestamp:
                      type: string
                      format: date-time
                  description: >-
                    LightClientAttackEvidence contains evidence of a set of
                    validators attempting to mislead a light client.
      last_commit:
        type: object
        properties:
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          signatures:
            type: array
            items:
              type: object
              properties:
                block_id_flag:
                  type: string
                  enum:
                    - BLOCK_ID_FLAG_UNKNOWN
                    - BLOCK_ID_FLAG_ABSENT
                    - BLOCK_ID_FLAG_COMMIT
                    - BLOCK_ID_FLAG_NIL
                  default: BLOCK_ID_FLAG_UNKNOWN
                  title: BlockIdFlag indicates which BlcokID the signature is for
                validator_address:
                  type: string
                  format: byte
                timestamp:
                  type: string
                  format: date-time
                signature:
                  type: string
                  format: byte
              description: CommitSig is a part of the Vote included in a Commit.
        description: >-
          Commit contains the evidence that a block was committed by a set of
          validators.
    description: |-
      Block is tendermint type Block, with the Header proposer address
      field converted to bech32 string.
  cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse:
    type: object
    properties:
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      block:
        title: 'Deprecated: please use `sdk_block` instead'
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                format: byte
            description: Header defines the structure of a block header.
          data:
            type: object
            properties:
              txs:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
            title: Data contains the set of transactions included in the block
          evidence:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    duplicate_vote_evidence:
                      type: object
                      properties:
                        vote_a:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        vote_b:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        total_voting_power:
                          type: string
                          format: int64
                        validator_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                    light_client_attack_evidence:
                      type: object
                      properties:
                        conflicting_block:
                          type: object
                          properties:
                            signed_header:
                              type: object
                              properties:
                                header:
                                  type: object
                                  properties:
                                    version:
                                      title: basic block info
                                      type: object
                                      properties:
                                        block:
                                          type: string
                                          format: uint64
                                        app:
                                          type: string
                                          format: uint64
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                    chain_id:
                                      type: string
                                    height:
                                      type: string
                                      format: int64
                                    time:
                                      type: string
                                      format: date-time
                                    last_block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    last_commit_hash:
                                      type: string
                                      format: byte
                                      title: hashes of block data
                                    data_hash:
                                      type: string
                                      format: byte
                                    validators_hash:
                                      type: string
                                      format: byte
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                    next_validators_hash:
                                      type: string
                                      format: byte
                                    consensus_hash:
                                      type: string
                                      format: byte
                                    app_hash:
                                      type: string
                                      format: byte
                                    last_results_hash:
                                      type: string
                                      format: byte
                                    evidence_hash:
                                      type: string
                                      format: byte
                                      title: consensus info
                                    proposer_address:
                                      type: string
                                      format: byte
                                  description: >-
                                    Header defines the structure of a block
                                    header.
                                commit:
                                  type: object
                                  properties:
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    signatures:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          block_id_flag:
                                            type: string
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            title: >-
                                              BlockIdFlag indicates which BlcokID the
                                              signature is for
                                          validator_address:
                                            type: string
                                            format: byte
                                          timestamp:
                                            type: string
                                            format: date-time
                                          signature:
                                            type: string
                                            format: byte
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                            validator_set:
                              type: object
                              properties:
                                validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                proposer:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                      format: byte
                                    pub_key:
                                      type: object
                                      properties:
                                        ed25519:
                                          type: string
                                          format: byte
                                        secp256k1:
                                          type: string
                                          format: byte
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Validators
                                    voting_power:
                                      type: string
                                      format: int64
                                    proposer_priority:
                                      type: string
                                      format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                        common_height:
                          type: string
                          format: int64
                        byzantine_validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        total_voting_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
          last_commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
      sdk_block:
        title: 'Since: cosmos-sdk 0.47'
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                description: >-
                  proposer_address is the original block proposer address,
                  formatted as a Bech32 string.

                  In Tendermint, this type is `bytes`, but in the SDK, we
                  convert it to a Bech32 string

                  for better UX.
            description: Header defines the structure of a Tendermint block header.
          data:
            type: object
            properties:
              txs:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
            title: Data contains the set of transactions included in the block
          evidence:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    duplicate_vote_evidence:
                      type: object
                      properties:
                        vote_a:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        vote_b:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        total_voting_power:
                          type: string
                          format: int64
                        validator_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                    light_client_attack_evidence:
                      type: object
                      properties:
                        conflicting_block:
                          type: object
                          properties:
                            signed_header:
                              type: object
                              properties:
                                header:
                                  type: object
                                  properties:
                                    version:
                                      title: basic block info
                                      type: object
                                      properties:
                                        block:
                                          type: string
                                          format: uint64
                                        app:
                                          type: string
                                          format: uint64
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                    chain_id:
                                      type: string
                                    height:
                                      type: string
                                      format: int64
                                    time:
                                      type: string
                                      format: date-time
                                    last_block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    last_commit_hash:
                                      type: string
                                      format: byte
                                      title: hashes of block data
                                    data_hash:
                                      type: string
                                      format: byte
                                    validators_hash:
                                      type: string
                                      format: byte
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                    next_validators_hash:
                                      type: string
                                      format: byte
                                    consensus_hash:
                                      type: string
                                      format: byte
                                    app_hash:
                                      type: string
                                      format: byte
                                    last_results_hash:
                                      type: string
                                      format: byte
                                    evidence_hash:
                                      type: string
                                      format: byte
                                      title: consensus info
                                    proposer_address:
                                      type: string
                                      format: byte
                                  description: >-
                                    Header defines the structure of a block
                                    header.
                                commit:
                                  type: object
                                  properties:
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    signatures:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          block_id_flag:
                                            type: string
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            title: >-
                                              BlockIdFlag indicates which BlcokID the
                                              signature is for
                                          validator_address:
                                            type: string
                                            format: byte
                                          timestamp:
                                            type: string
                                            format: date-time
                                          signature:
                                            type: string
                                            format: byte
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                            validator_set:
                              type: object
                              properties:
                                validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                proposer:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                      format: byte
                                    pub_key:
                                      type: object
                                      properties:
                                        ed25519:
                                          type: string
                                          format: byte
                                        secp256k1:
                                          type: string
                                          format: byte
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Validators
                                    voting_power:
                                      type: string
                                      format: int64
                                    proposer_priority:
                                      type: string
                                      format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                        common_height:
                          type: string
                          format: int64
                        byzantine_validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        total_voting_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
          last_commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
        description: |-
          Block is tendermint type Block, with the Header proposer address
          field converted to bech32 string.
    description: >-
      GetBlockByHeightResponse is the response type for the
      Query/GetBlockByHeight

      RPC method.
  cosmos.base.tendermint.v1beta1.GetLatestBlockResponse:
    type: object
    properties:
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      block:
        title: 'Deprecated: please use `sdk_block` instead'
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                format: byte
            description: Header defines the structure of a block header.
          data:
            type: object
            properties:
              txs:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
            title: Data contains the set of transactions included in the block
          evidence:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    duplicate_vote_evidence:
                      type: object
                      properties:
                        vote_a:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        vote_b:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        total_voting_power:
                          type: string
                          format: int64
                        validator_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                    light_client_attack_evidence:
                      type: object
                      properties:
                        conflicting_block:
                          type: object
                          properties:
                            signed_header:
                              type: object
                              properties:
                                header:
                                  type: object
                                  properties:
                                    version:
                                      title: basic block info
                                      type: object
                                      properties:
                                        block:
                                          type: string
                                          format: uint64
                                        app:
                                          type: string
                                          format: uint64
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                    chain_id:
                                      type: string
                                    height:
                                      type: string
                                      format: int64
                                    time:
                                      type: string
                                      format: date-time
                                    last_block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    last_commit_hash:
                                      type: string
                                      format: byte
                                      title: hashes of block data
                                    data_hash:
                                      type: string
                                      format: byte
                                    validators_hash:
                                      type: string
                                      format: byte
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                    next_validators_hash:
                                      type: string
                                      format: byte
                                    consensus_hash:
                                      type: string
                                      format: byte
                                    app_hash:
                                      type: string
                                      format: byte
                                    last_results_hash:
                                      type: string
                                      format: byte
                                    evidence_hash:
                                      type: string
                                      format: byte
                                      title: consensus info
                                    proposer_address:
                                      type: string
                                      format: byte
                                  description: >-
                                    Header defines the structure of a block
                                    header.
                                commit:
                                  type: object
                                  properties:
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    signatures:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          block_id_flag:
                                            type: string
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            title: >-
                                              BlockIdFlag indicates which BlcokID the
                                              signature is for
                                          validator_address:
                                            type: string
                                            format: byte
                                          timestamp:
                                            type: string
                                            format: date-time
                                          signature:
                                            type: string
                                            format: byte
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                            validator_set:
                              type: object
                              properties:
                                validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                proposer:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                      format: byte
                                    pub_key:
                                      type: object
                                      properties:
                                        ed25519:
                                          type: string
                                          format: byte
                                        secp256k1:
                                          type: string
                                          format: byte
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Validators
                                    voting_power:
                                      type: string
                                      format: int64
                                    proposer_priority:
                                      type: string
                                      format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                        common_height:
                          type: string
                          format: int64
                        byzantine_validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        total_voting_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
          last_commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
      sdk_block:
        title: 'Since: cosmos-sdk 0.47'
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                description: >-
                  proposer_address is the original block proposer address,
                  formatted as a Bech32 string.

                  In Tendermint, this type is `bytes`, but in the SDK, we
                  convert it to a Bech32 string

                  for better UX.
            description: Header defines the structure of a Tendermint block header.
          data:
            type: object
            properties:
              txs:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
            title: Data contains the set of transactions included in the block
          evidence:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    duplicate_vote_evidence:
                      type: object
                      properties:
                        vote_a:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        vote_b:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        total_voting_power:
                          type: string
                          format: int64
                        validator_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                    light_client_attack_evidence:
                      type: object
                      properties:
                        conflicting_block:
                          type: object
                          properties:
                            signed_header:
                              type: object
                              properties:
                                header:
                                  type: object
                                  properties:
                                    version:
                                      title: basic block info
                                      type: object
                                      properties:
                                        block:
                                          type: string
                                          format: uint64
                                        app:
                                          type: string
                                          format: uint64
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                    chain_id:
                                      type: string
                                    height:
                                      type: string
                                      format: int64
                                    time:
                                      type: string
                                      format: date-time
                                    last_block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    last_commit_hash:
                                      type: string
                                      format: byte
                                      title: hashes of block data
                                    data_hash:
                                      type: string
                                      format: byte
                                    validators_hash:
                                      type: string
                                      format: byte
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                    next_validators_hash:
                                      type: string
                                      format: byte
                                    consensus_hash:
                                      type: string
                                      format: byte
                                    app_hash:
                                      type: string
                                      format: byte
                                    last_results_hash:
                                      type: string
                                      format: byte
                                    evidence_hash:
                                      type: string
                                      format: byte
                                      title: consensus info
                                    proposer_address:
                                      type: string
                                      format: byte
                                  description: >-
                                    Header defines the structure of a block
                                    header.
                                commit:
                                  type: object
                                  properties:
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    signatures:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          block_id_flag:
                                            type: string
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            title: >-
                                              BlockIdFlag indicates which BlcokID the
                                              signature is for
                                          validator_address:
                                            type: string
                                            format: byte
                                          timestamp:
                                            type: string
                                            format: date-time
                                          signature:
                                            type: string
                                            format: byte
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                            validator_set:
                              type: object
                              properties:
                                validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                proposer:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                      format: byte
                                    pub_key:
                                      type: object
                                      properties:
                                        ed25519:
                                          type: string
                                          format: byte
                                        secp256k1:
                                          type: string
                                          format: byte
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Validators
                                    voting_power:
                                      type: string
                                      format: int64
                                    proposer_priority:
                                      type: string
                                      format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                        common_height:
                          type: string
                          format: int64
                        byzantine_validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        total_voting_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
          last_commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
        description: |-
          Block is tendermint type Block, with the Header proposer address
          field converted to bech32 string.
    description: >-
      GetLatestBlockResponse is the response type for the Query/GetLatestBlock
      RPC

      method.
  cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse:
    type: object
    properties:
      block_height:
        type: string
        format: int64
      validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            pub_key:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
          description: Validator is the type for the validator-set.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      GetLatestValidatorSetResponse is the response type for the
      Query/GetValidatorSetByHeight RPC method.
  cosmos.base.tendermint.v1beta1.GetNodeInfoResponse:
    type: object
    properties:
      default_node_info:
        type: object
        properties:
          protocol_version:
            type: object
            properties:
              p2p:
                type: string
                format: uint64
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
          default_node_id:
            type: string
          listen_addr:
            type: string
          network:
            type: string
          version:
            type: string
          channels:
            type: string
            format: byte
          moniker:
            type: string
          other:
            type: object
            properties:
              tx_index:
                type: string
              rpc_address:
                type: string
      application_version:
        type: object
        properties:
          name:
            type: string
          app_name:
            type: string
          version:
            type: string
          git_commit:
            type: string
          build_tags:
            type: string
          go_version:
            type: string
          build_deps:
            type: array
            items:
              type: object
              properties:
                path:
                  type: string
                  title: module path
                version:
                  type: string
                  title: module version
                sum:
                  type: string
                  title: checksum
              title: Module is the type for VersionInfo
          cosmos_sdk_version:
            type: string
            title: 'Since: cosmos-sdk 0.43'
        description: VersionInfo is the type for the GetNodeInfoResponse message.
    description: |-
      GetNodeInfoResponse is the response type for the Query/GetNodeInfo RPC
      method.
  cosmos.base.tendermint.v1beta1.GetSyncingResponse:
    type: object
    properties:
      syncing:
        type: boolean
    description: >-
      GetSyncingResponse is the response type for the Query/GetSyncing RPC
      method.
  cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse:
    type: object
    properties:
      block_height:
        type: string
        format: int64
      validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            pub_key:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
          description: Validator is the type for the validator-set.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      GetValidatorSetByHeightResponse is the response type for the
      Query/GetValidatorSetByHeight RPC method.
  cosmos.base.tendermint.v1beta1.Header:
    type: object
    properties:
      version:
        title: basic block info
        type: object
        properties:
          block:
            type: string
            format: uint64
          app:
            type: string
            format: uint64
        description: >-
          Consensus captures the consensus rules for processing a block in the
          blockchain,

          including all blockchain data structures and the rules of the
          application's

          state transition machine.
      chain_id:
        type: string
      height:
        type: string
        format: int64
      time:
        type: string
        format: date-time
      last_block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      last_commit_hash:
        type: string
        format: byte
        title: hashes of block data
      data_hash:
        type: string
        format: byte
      validators_hash:
        type: string
        format: byte
        title: hashes from the app output from the prev block
      next_validators_hash:
        type: string
        format: byte
      consensus_hash:
        type: string
        format: byte
      app_hash:
        type: string
        format: byte
      last_results_hash:
        type: string
        format: byte
      evidence_hash:
        type: string
        format: byte
        title: consensus info
      proposer_address:
        type: string
        description: >-
          proposer_address is the original block proposer address, formatted as
          a Bech32 string.

          In Tendermint, this type is `bytes`, but in the SDK, we convert it to
          a Bech32 string

          for better UX.
    description: Header defines the structure of a Tendermint block header.
  cosmos.base.tendermint.v1beta1.Module:
    type: object
    properties:
      path:
        type: string
        title: module path
      version:
        type: string
        title: module version
      sum:
        type: string
        title: checksum
    title: Module is the type for VersionInfo
  cosmos.base.tendermint.v1beta1.ProofOp:
    type: object
    properties:
      type:
        type: string
      key:
        type: string
        format: byte
      data:
        type: string
        format: byte
    description: >-
      ProofOp defines an operation used for calculating Merkle root. The data
      could

      be arbitrary format, providing nessecary data for example neighbouring
      node

      hash.


      Note: This type is a duplicate of the ProofOp proto type defined in

      Tendermint.
  cosmos.base.tendermint.v1beta1.ProofOps:
    type: object
    properties:
      ops:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            key:
              type: string
              format: byte
            data:
              type: string
              format: byte
          description: >-
            ProofOp defines an operation used for calculating Merkle root. The
            data could

            be arbitrary format, providing nessecary data for example
            neighbouring node

            hash.


            Note: This type is a duplicate of the ProofOp proto type defined in

            Tendermint.
    description: |-
      ProofOps is Merkle proof defined by the list of ProofOps.

      Note: This type is a duplicate of the ProofOps proto type defined in
      Tendermint.
  cosmos.base.tendermint.v1beta1.Validator:
    type: object
    properties:
      address:
        type: string
      pub_key:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      voting_power:
        type: string
        format: int64
      proposer_priority:
        type: string
        format: int64
    description: Validator is the type for the validator-set.
  cosmos.base.tendermint.v1beta1.VersionInfo:
    type: object
    properties:
      name:
        type: string
      app_name:
        type: string
      version:
        type: string
      git_commit:
        type: string
      build_tags:
        type: string
      go_version:
        type: string
      build_deps:
        type: array
        items:
          type: object
          properties:
            path:
              type: string
              title: module path
            version:
              type: string
              title: module version
            sum:
              type: string
              title: checksum
          title: Module is the type for VersionInfo
      cosmos_sdk_version:
        type: string
        title: 'Since: cosmos-sdk 0.43'
    description: VersionInfo is the type for the GetNodeInfoResponse message.
  tendermint.crypto.PublicKey:
    type: object
    properties:
      ed25519:
        type: string
        format: byte
      secp256k1:
        type: string
        format: byte
    title: PublicKey defines the keys available for use with Validators
  tendermint.p2p.DefaultNodeInfo:
    type: object
    properties:
      protocol_version:
        type: object
        properties:
          p2p:
            type: string
            format: uint64
          block:
            type: string
            format: uint64
          app:
            type: string
            format: uint64
      default_node_id:
        type: string
      listen_addr:
        type: string
      network:
        type: string
      version:
        type: string
      channels:
        type: string
        format: byte
      moniker:
        type: string
      other:
        type: object
        properties:
          tx_index:
            type: string
          rpc_address:
            type: string
  tendermint.p2p.DefaultNodeInfoOther:
    type: object
    properties:
      tx_index:
        type: string
      rpc_address:
        type: string
  tendermint.p2p.ProtocolVersion:
    type: object
    properties:
      p2p:
        type: string
        format: uint64
      block:
        type: string
        format: uint64
      app:
        type: string
        format: uint64
  tendermint.types.Block:
    type: object
    properties:
      header:
        type: object
        properties:
          version:
            title: basic block info
            type: object
            properties:
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
          chain_id:
            type: string
          height:
            type: string
            format: int64
          time:
            type: string
            format: date-time
          last_block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          last_commit_hash:
            type: string
            format: byte
            title: hashes of block data
          data_hash:
            type: string
            format: byte
          validators_hash:
            type: string
            format: byte
            title: hashes from the app output from the prev block
          next_validators_hash:
            type: string
            format: byte
          consensus_hash:
            type: string
            format: byte
          app_hash:
            type: string
            format: byte
          last_results_hash:
            type: string
            format: byte
          evidence_hash:
            type: string
            format: byte
            title: consensus info
          proposer_address:
            type: string
            format: byte
        description: Header defines the structure of a block header.
      data:
        type: object
        properties:
          txs:
            type: array
            items:
              type: string
              format: byte
            description: >-
              Txs that will be applied by state @ block.Height+1.

              NOTE: not all txs here are valid.  We're just agreeing on the
              order first.

              This means that block.AppHash does not include these txs.
        title: Data contains the set of transactions included in the block
      evidence:
        type: object
        properties:
          evidence:
            type: array
            items:
              type: object
              properties:
                duplicate_vote_evidence:
                  type: object
                  properties:
                    vote_a:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                        height:
                          type: string
                          format: int64
                        round:
                          type: integer
                          format: int32
                        block_id:
                          type: object
                          properties:
                            hash:
                              type: string
                              format: byte
                            part_set_header:
                              type: object
                              properties:
                                total:
                                  type: integer
                                  format: int64
                                hash:
                                  type: string
                                  format: byte
                              title: PartsetHeader
                          title: BlockID
                        timestamp:
                          type: string
                          format: date-time
                        validator_address:
                          type: string
                          format: byte
                        validator_index:
                          type: integer
                          format: int32
                        signature:
                          type: string
                          format: byte
                      description: >-
                        Vote represents a prevote, precommit, or commit vote
                        from validators for

                        consensus.
                    vote_b:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                        height:
                          type: string
                          format: int64
                        round:
                          type: integer
                          format: int32
                        block_id:
                          type: object
                          properties:
                            hash:
                              type: string
                              format: byte
                            part_set_header:
                              type: object
                              properties:
                                total:
                                  type: integer
                                  format: int64
                                hash:
                                  type: string
                                  format: byte
                              title: PartsetHeader
                          title: BlockID
                        timestamp:
                          type: string
                          format: date-time
                        validator_address:
                          type: string
                          format: byte
                        validator_index:
                          type: integer
                          format: int32
                        signature:
                          type: string
                          format: byte
                      description: >-
                        Vote represents a prevote, precommit, or commit vote
                        from validators for

                        consensus.
                    total_voting_power:
                      type: string
                      format: int64
                    validator_power:
                      type: string
                      format: int64
                    timestamp:
                      type: string
                      format: date-time
                  description: >-
                    DuplicateVoteEvidence contains evidence of a validator
                    signed two conflicting votes.
                light_client_attack_evidence:
                  type: object
                  properties:
                    conflicting_block:
                      type: object
                      properties:
                        signed_header:
                          type: object
                          properties:
                            header:
                              type: object
                              properties:
                                version:
                                  title: basic block info
                                  type: object
                                  properties:
                                    block:
                                      type: string
                                      format: uint64
                                    app:
                                      type: string
                                      format: uint64
                                  description: >-
                                    Consensus captures the consensus rules for
                                    processing a block in the blockchain,

                                    including all blockchain data structures and
                                    the rules of the application's

                                    state transition machine.
                                chain_id:
                                  type: string
                                height:
                                  type: string
                                  format: int64
                                time:
                                  type: string
                                  format: date-time
                                last_block_id:
                                  type: object
                                  properties:
                                    hash:
                                      type: string
                                      format: byte
                                    part_set_header:
                                      type: object
                                      properties:
                                        total:
                                          type: integer
                                          format: int64
                                        hash:
                                          type: string
                                          format: byte
                                      title: PartsetHeader
                                  title: BlockID
                                last_commit_hash:
                                  type: string
                                  format: byte
                                  title: hashes of block data
                                data_hash:
                                  type: string
                                  format: byte
                                validators_hash:
                                  type: string
                                  format: byte
                                  title: >-
                                    hashes from the app output from the prev
                                    block
                                next_validators_hash:
                                  type: string
                                  format: byte
                                consensus_hash:
                                  type: string
                                  format: byte
                                app_hash:
                                  type: string
                                  format: byte
                                last_results_hash:
                                  type: string
                                  format: byte
                                evidence_hash:
                                  type: string
                                  format: byte
                                  title: consensus info
                                proposer_address:
                                  type: string
                                  format: byte
                              description: Header defines the structure of a block header.
                            commit:
                              type: object
                              properties:
                                height:
                                  type: string
                                  format: int64
                                round:
                                  type: integer
                                  format: int32
                                block_id:
                                  type: object
                                  properties:
                                    hash:
                                      type: string
                                      format: byte
                                    part_set_header:
                                      type: object
                                      properties:
                                        total:
                                          type: integer
                                          format: int64
                                        hash:
                                          type: string
                                          format: byte
                                      title: PartsetHeader
                                  title: BlockID
                                signatures:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      block_id_flag:
                                        type: string
                                        enum:
                                          - BLOCK_ID_FLAG_UNKNOWN
                                          - BLOCK_ID_FLAG_ABSENT
                                          - BLOCK_ID_FLAG_COMMIT
                                          - BLOCK_ID_FLAG_NIL
                                        default: BLOCK_ID_FLAG_UNKNOWN
                                        title: >-
                                          BlockIdFlag indicates which BlcokID the
                                          signature is for
                                      validator_address:
                                        type: string
                                        format: byte
                                      timestamp:
                                        type: string
                                        format: date-time
                                      signature:
                                        type: string
                                        format: byte
                                    description: >-
                                      CommitSig is a part of the Vote included
                                      in a Commit.
                              description: >-
                                Commit contains the evidence that a block was
                                committed by a set of validators.
                        validator_set:
                          type: object
                          properties:
                            validators:
                              type: array
                              items:
                                type: object
                                properties:
                                  address:
                                    type: string
                                    format: byte
                                  pub_key:
                                    type: object
                                    properties:
                                      ed25519:
                                        type: string
                                        format: byte
                                      secp256k1:
                                        type: string
                                        format: byte
                                    title: >-
                                      PublicKey defines the keys available for
                                      use with Validators
                                  voting_power:
                                    type: string
                                    format: int64
                                  proposer_priority:
                                    type: string
                                    format: int64
                            proposer:
                              type: object
                              properties:
                                address:
                                  type: string
                                  format: byte
                                pub_key:
                                  type: object
                                  properties:
                                    ed25519:
                                      type: string
                                      format: byte
                                    secp256k1:
                                      type: string
                                      format: byte
                                  title: >-
                                    PublicKey defines the keys available for use
                                    with Validators
                                voting_power:
                                  type: string
                                  format: int64
                                proposer_priority:
                                  type: string
                                  format: int64
                            total_voting_power:
                              type: string
                              format: int64
                    common_height:
                      type: string
                      format: int64
                    byzantine_validators:
                      type: array
                      items:
                        type: object
                        properties:
                          address:
                            type: string
                            format: byte
                          pub_key:
                            type: object
                            properties:
                              ed25519:
                                type: string
                                format: byte
                              secp256k1:
                                type: string
                                format: byte
                            title: >-
                              PublicKey defines the keys available for use with
                              Validators
                          voting_power:
                            type: string
                            format: int64
                          proposer_priority:
                            type: string
                            format: int64
                    total_voting_power:
                      type: string
                      format: int64
                    timestamp:
                      type: string
                      format: date-time
                  description: >-
                    LightClientAttackEvidence contains evidence of a set of
                    validators attempting to mislead a light client.
      last_commit:
        type: object
        properties:
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          signatures:
            type: array
            items:
              type: object
              properties:
                block_id_flag:
                  type: string
                  enum:
                    - BLOCK_ID_FLAG_UNKNOWN
                    - BLOCK_ID_FLAG_ABSENT
                    - BLOCK_ID_FLAG_COMMIT
                    - BLOCK_ID_FLAG_NIL
                  default: BLOCK_ID_FLAG_UNKNOWN
                  title: BlockIdFlag indicates which BlcokID the signature is for
                validator_address:
                  type: string
                  format: byte
                timestamp:
                  type: string
                  format: date-time
                signature:
                  type: string
                  format: byte
              description: CommitSig is a part of the Vote included in a Commit.
        description: >-
          Commit contains the evidence that a block was committed by a set of
          validators.
  tendermint.types.BlockID:
    type: object
    properties:
      hash:
        type: string
        format: byte
      part_set_header:
        type: object
        properties:
          total:
            type: integer
            format: int64
          hash:
            type: string
            format: byte
        title: PartsetHeader
    title: BlockID
  tendermint.types.BlockIDFlag:
    type: string
    enum:
      - BLOCK_ID_FLAG_UNKNOWN
      - BLOCK_ID_FLAG_ABSENT
      - BLOCK_ID_FLAG_COMMIT
      - BLOCK_ID_FLAG_NIL
    default: BLOCK_ID_FLAG_UNKNOWN
    title: BlockIdFlag indicates which BlcokID the signature is for
  tendermint.types.Commit:
    type: object
    properties:
      height:
        type: string
        format: int64
      round:
        type: integer
        format: int32
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      signatures:
        type: array
        items:
          type: object
          properties:
            block_id_flag:
              type: string
              enum:
                - BLOCK_ID_FLAG_UNKNOWN
                - BLOCK_ID_FLAG_ABSENT
                - BLOCK_ID_FLAG_COMMIT
                - BLOCK_ID_FLAG_NIL
              default: BLOCK_ID_FLAG_UNKNOWN
              title: BlockIdFlag indicates which BlcokID the signature is for
            validator_address:
              type: string
              format: byte
            timestamp:
              type: string
              format: date-time
            signature:
              type: string
              format: byte
          description: CommitSig is a part of the Vote included in a Commit.
    description: >-
      Commit contains the evidence that a block was committed by a set of
      validators.
  tendermint.types.CommitSig:
    type: object
    properties:
      block_id_flag:
        type: string
        enum:
          - BLOCK_ID_FLAG_UNKNOWN
          - BLOCK_ID_FLAG_ABSENT
          - BLOCK_ID_FLAG_COMMIT
          - BLOCK_ID_FLAG_NIL
        default: BLOCK_ID_FLAG_UNKNOWN
        title: BlockIdFlag indicates which BlcokID the signature is for
      validator_address:
        type: string
        format: byte
      timestamp:
        type: string
        format: date-time
      signature:
        type: string
        format: byte
    description: CommitSig is a part of the Vote included in a Commit.
  tendermint.types.Data:
    type: object
    properties:
      txs:
        type: array
        items:
          type: string
          format: byte
        description: >-
          Txs that will be applied by state @ block.Height+1.

          NOTE: not all txs here are valid.  We're just agreeing on the order
          first.

          This means that block.AppHash does not include these txs.
    title: Data contains the set of transactions included in the block
  tendermint.types.DuplicateVoteEvidence:
    type: object
    properties:
      vote_a:
        type: object
        properties:
          type:
            type: string
            enum:
              - SIGNED_MSG_TYPE_UNKNOWN
              - SIGNED_MSG_TYPE_PREVOTE
              - SIGNED_MSG_TYPE_PRECOMMIT
              - SIGNED_MSG_TYPE_PROPOSAL
            default: SIGNED_MSG_TYPE_UNKNOWN
            description: |-
              SignedMsgType is a type of signed message in the consensus.

               - SIGNED_MSG_TYPE_PREVOTE: Votes
               - SIGNED_MSG_TYPE_PROPOSAL: Proposals
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          timestamp:
            type: string
            format: date-time
          validator_address:
            type: string
            format: byte
          validator_index:
            type: integer
            format: int32
          signature:
            type: string
            format: byte
        description: >-
          Vote represents a prevote, precommit, or commit vote from validators
          for

          consensus.
      vote_b:
        type: object
        properties:
          type:
            type: string
            enum:
              - SIGNED_MSG_TYPE_UNKNOWN
              - SIGNED_MSG_TYPE_PREVOTE
              - SIGNED_MSG_TYPE_PRECOMMIT
              - SIGNED_MSG_TYPE_PROPOSAL
            default: SIGNED_MSG_TYPE_UNKNOWN
            description: |-
              SignedMsgType is a type of signed message in the consensus.

               - SIGNED_MSG_TYPE_PREVOTE: Votes
               - SIGNED_MSG_TYPE_PROPOSAL: Proposals
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          timestamp:
            type: string
            format: date-time
          validator_address:
            type: string
            format: byte
          validator_index:
            type: integer
            format: int32
          signature:
            type: string
            format: byte
        description: >-
          Vote represents a prevote, precommit, or commit vote from validators
          for

          consensus.
      total_voting_power:
        type: string
        format: int64
      validator_power:
        type: string
        format: int64
      timestamp:
        type: string
        format: date-time
    description: >-
      DuplicateVoteEvidence contains evidence of a validator signed two
      conflicting votes.
  tendermint.types.Evidence:
    type: object
    properties:
      duplicate_vote_evidence:
        type: object
        properties:
          vote_a:
            type: object
            properties:
              type:
                type: string
                enum:
                  - SIGNED_MSG_TYPE_UNKNOWN
                  - SIGNED_MSG_TYPE_PREVOTE
                  - SIGNED_MSG_TYPE_PRECOMMIT
                  - SIGNED_MSG_TYPE_PROPOSAL
                default: SIGNED_MSG_TYPE_UNKNOWN
                description: |-
                  SignedMsgType is a type of signed message in the consensus.

                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              timestamp:
                type: string
                format: date-time
              validator_address:
                type: string
                format: byte
              validator_index:
                type: integer
                format: int32
              signature:
                type: string
                format: byte
            description: >-
              Vote represents a prevote, precommit, or commit vote from
              validators for

              consensus.
          vote_b:
            type: object
            properties:
              type:
                type: string
                enum:
                  - SIGNED_MSG_TYPE_UNKNOWN
                  - SIGNED_MSG_TYPE_PREVOTE
                  - SIGNED_MSG_TYPE_PRECOMMIT
                  - SIGNED_MSG_TYPE_PROPOSAL
                default: SIGNED_MSG_TYPE_UNKNOWN
                description: |-
                  SignedMsgType is a type of signed message in the consensus.

                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              timestamp:
                type: string
                format: date-time
              validator_address:
                type: string
                format: byte
              validator_index:
                type: integer
                format: int32
              signature:
                type: string
                format: byte
            description: >-
              Vote represents a prevote, precommit, or commit vote from
              validators for

              consensus.
          total_voting_power:
            type: string
            format: int64
          validator_power:
            type: string
            format: int64
          timestamp:
            type: string
            format: date-time
        description: >-
          DuplicateVoteEvidence contains evidence of a validator signed two
          conflicting votes.
      light_client_attack_evidence:
        type: object
        properties:
          conflicting_block:
            type: object
            properties:
              signed_header:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                    description: Header defines the structure of a block header.
                  commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
              validator_set:
                type: object
                properties:
                  validators:
                    type: array
                    items:
                      type: object
                      properties:
                        address:
                          type: string
                          format: byte
                        pub_key:
                          type: object
                          properties:
                            ed25519:
                              type: string
                              format: byte
                            secp256k1:
                              type: string
                              format: byte
                          title: >-
                            PublicKey defines the keys available for use with
                            Validators
                        voting_power:
                          type: string
                          format: int64
                        proposer_priority:
                          type: string
                          format: int64
                  proposer:
                    type: object
                    properties:
                      address:
                        type: string
                        format: byte
                      pub_key:
                        type: object
                        properties:
                          ed25519:
                            type: string
                            format: byte
                          secp256k1:
                            type: string
                            format: byte
                        title: >-
                          PublicKey defines the keys available for use with
                          Validators
                      voting_power:
                        type: string
                        format: int64
                      proposer_priority:
                        type: string
                        format: int64
                  total_voting_power:
                    type: string
                    format: int64
          common_height:
            type: string
            format: int64
          byzantine_validators:
            type: array
            items:
              type: object
              properties:
                address:
                  type: string
                  format: byte
                pub_key:
                  type: object
                  properties:
                    ed25519:
                      type: string
                      format: byte
                    secp256k1:
                      type: string
                      format: byte
                  title: PublicKey defines the keys available for use with Validators
                voting_power:
                  type: string
                  format: int64
                proposer_priority:
                  type: string
                  format: int64
          total_voting_power:
            type: string
            format: int64
          timestamp:
            type: string
            format: date-time
        description: >-
          LightClientAttackEvidence contains evidence of a set of validators
          attempting to mislead a light client.
  tendermint.types.EvidenceList:
    type: object
    properties:
      evidence:
        type: array
        items:
          type: object
          properties:
            duplicate_vote_evidence:
              type: object
              properties:
                vote_a:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - SIGNED_MSG_TYPE_UNKNOWN
                        - SIGNED_MSG_TYPE_PREVOTE
                        - SIGNED_MSG_TYPE_PRECOMMIT
                        - SIGNED_MSG_TYPE_PROPOSAL
                      default: SIGNED_MSG_TYPE_UNKNOWN
                      description: >-
                        SignedMsgType is a type of signed message in the
                        consensus.

                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                    height:
                      type: string
                      format: int64
                    round:
                      type: integer
                      format: int32
                    block_id:
                      type: object
                      properties:
                        hash:
                          type: string
                          format: byte
                        part_set_header:
                          type: object
                          properties:
                            total:
                              type: integer
                              format: int64
                            hash:
                              type: string
                              format: byte
                          title: PartsetHeader
                      title: BlockID
                    timestamp:
                      type: string
                      format: date-time
                    validator_address:
                      type: string
                      format: byte
                    validator_index:
                      type: integer
                      format: int32
                    signature:
                      type: string
                      format: byte
                  description: >-
                    Vote represents a prevote, precommit, or commit vote from
                    validators for

                    consensus.
                vote_b:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - SIGNED_MSG_TYPE_UNKNOWN
                        - SIGNED_MSG_TYPE_PREVOTE
                        - SIGNED_MSG_TYPE_PRECOMMIT
                        - SIGNED_MSG_TYPE_PROPOSAL
                      default: SIGNED_MSG_TYPE_UNKNOWN
                      description: >-
                        SignedMsgType is a type of signed message in the
                        consensus.

                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                    height:
                      type: string
                      format: int64
                    round:
                      type: integer
                      format: int32
                    block_id:
                      type: object
                      properties:
                        hash:
                          type: string
                          format: byte
                        part_set_header:
                          type: object
                          properties:
                            total:
                              type: integer
                              format: int64
                            hash:
                              type: string
                              format: byte
                          title: PartsetHeader
                      title: BlockID
                    timestamp:
                      type: string
                      format: date-time
                    validator_address:
                      type: string
                      format: byte
                    validator_index:
                      type: integer
                      format: int32
                    signature:
                      type: string
                      format: byte
                  description: >-
                    Vote represents a prevote, precommit, or commit vote from
                    validators for

                    consensus.
                total_voting_power:
                  type: string
                  format: int64
                validator_power:
                  type: string
                  format: int64
                timestamp:
                  type: string
                  format: date-time
              description: >-
                DuplicateVoteEvidence contains evidence of a validator signed
                two conflicting votes.
            light_client_attack_evidence:
              type: object
              properties:
                conflicting_block:
                  type: object
                  properties:
                    signed_header:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            version:
                              title: basic block info
                              type: object
                              properties:
                                block:
                                  type: string
                                  format: uint64
                                app:
                                  type: string
                                  format: uint64
                              description: >-
                                Consensus captures the consensus rules for
                                processing a block in the blockchain,

                                including all blockchain data structures and the
                                rules of the application's

                                state transition machine.
                            chain_id:
                              type: string
                            height:
                              type: string
                              format: int64
                            time:
                              type: string
                              format: date-time
                            last_block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            last_commit_hash:
                              type: string
                              format: byte
                              title: hashes of block data
                            data_hash:
                              type: string
                              format: byte
                            validators_hash:
                              type: string
                              format: byte
                              title: hashes from the app output from the prev block
                            next_validators_hash:
                              type: string
                              format: byte
                            consensus_hash:
                              type: string
                              format: byte
                            app_hash:
                              type: string
                              format: byte
                            last_results_hash:
                              type: string
                              format: byte
                            evidence_hash:
                              type: string
                              format: byte
                              title: consensus info
                            proposer_address:
                              type: string
                              format: byte
                          description: Header defines the structure of a block header.
                        commit:
                          type: object
                          properties:
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            signatures:
                              type: array
                              items:
                                type: object
                                properties:
                                  block_id_flag:
                                    type: string
                                    enum:
                                      - BLOCK_ID_FLAG_UNKNOWN
                                      - BLOCK_ID_FLAG_ABSENT
                                      - BLOCK_ID_FLAG_COMMIT
                                      - BLOCK_ID_FLAG_NIL
                                    default: BLOCK_ID_FLAG_UNKNOWN
                                    title: >-
                                      BlockIdFlag indicates which BlcokID the
                                      signature is for
                                  validator_address:
                                    type: string
                                    format: byte
                                  timestamp:
                                    type: string
                                    format: date-time
                                  signature:
                                    type: string
                                    format: byte
                                description: >-
                                  CommitSig is a part of the Vote included in a
                                  Commit.
                          description: >-
                            Commit contains the evidence that a block was
                            committed by a set of validators.
                    validator_set:
                      type: object
                      properties:
                        validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        proposer:
                          type: object
                          properties:
                            address:
                              type: string
                              format: byte
                            pub_key:
                              type: object
                              properties:
                                ed25519:
                                  type: string
                                  format: byte
                                secp256k1:
                                  type: string
                                  format: byte
                              title: >-
                                PublicKey defines the keys available for use
                                with Validators
                            voting_power:
                              type: string
                              format: int64
                            proposer_priority:
                              type: string
                              format: int64
                        total_voting_power:
                          type: string
                          format: int64
                common_height:
                  type: string
                  format: int64
                byzantine_validators:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        format: byte
                      pub_key:
                        type: object
                        properties:
                          ed25519:
                            type: string
                            format: byte
                          secp256k1:
                            type: string
                            format: byte
                        title: >-
                          PublicKey defines the keys available for use with
                          Validators
                      voting_power:
                        type: string
                        format: int64
                      proposer_priority:
                        type: string
                        format: int64
                total_voting_power:
                  type: string
                  format: int64
                timestamp:
                  type: string
                  format: date-time
              description: >-
                LightClientAttackEvidence contains evidence of a set of
                validators attempting to mislead a light client.
  tendermint.types.Header:
    type: object
    properties:
      version:
        title: basic block info
        type: object
        properties:
          block:
            type: string
            format: uint64
          app:
            type: string
            format: uint64
        description: >-
          Consensus captures the consensus rules for processing a block in the
          blockchain,

          including all blockchain data structures and the rules of the
          application's

          state transition machine.
      chain_id:
        type: string
      height:
        type: string
        format: int64
      time:
        type: string
        format: date-time
      last_block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      last_commit_hash:
        type: string
        format: byte
        title: hashes of block data
      data_hash:
        type: string
        format: byte
      validators_hash:
        type: string
        format: byte
        title: hashes from the app output from the prev block
      next_validators_hash:
        type: string
        format: byte
      consensus_hash:
        type: string
        format: byte
      app_hash:
        type: string
        format: byte
      last_results_hash:
        type: string
        format: byte
      evidence_hash:
        type: string
        format: byte
        title: consensus info
      proposer_address:
        type: string
        format: byte
    description: Header defines the structure of a block header.
  tendermint.types.LightBlock:
    type: object
    properties:
      signed_header:
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                format: byte
            description: Header defines the structure of a block header.
          commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
      validator_set:
        type: object
        properties:
          validators:
            type: array
            items:
              type: object
              properties:
                address:
                  type: string
                  format: byte
                pub_key:
                  type: object
                  properties:
                    ed25519:
                      type: string
                      format: byte
                    secp256k1:
                      type: string
                      format: byte
                  title: PublicKey defines the keys available for use with Validators
                voting_power:
                  type: string
                  format: int64
                proposer_priority:
                  type: string
                  format: int64
          proposer:
            type: object
            properties:
              address:
                type: string
                format: byte
              pub_key:
                type: object
                properties:
                  ed25519:
                    type: string
                    format: byte
                  secp256k1:
                    type: string
                    format: byte
                title: PublicKey defines the keys available for use with Validators
              voting_power:
                type: string
                format: int64
              proposer_priority:
                type: string
                format: int64
          total_voting_power:
            type: string
            format: int64
  tendermint.types.LightClientAttackEvidence:
    type: object
    properties:
      conflicting_block:
        type: object
        properties:
          signed_header:
            type: object
            properties:
              header:
                type: object
                properties:
                  version:
                    title: basic block info
                    type: object
                    properties:
                      block:
                        type: string
                        format: uint64
                      app:
                        type: string
                        format: uint64
                    description: >-
                      Consensus captures the consensus rules for processing a
                      block in the blockchain,

                      including all blockchain data structures and the rules of
                      the application's

                      state transition machine.
                  chain_id:
                    type: string
                  height:
                    type: string
                    format: int64
                  time:
                    type: string
                    format: date-time
                  last_block_id:
                    type: object
                    properties:
                      hash:
                        type: string
                        format: byte
                      part_set_header:
                        type: object
                        properties:
                          total:
                            type: integer
                            format: int64
                          hash:
                            type: string
                            format: byte
                        title: PartsetHeader
                    title: BlockID
                  last_commit_hash:
                    type: string
                    format: byte
                    title: hashes of block data
                  data_hash:
                    type: string
                    format: byte
                  validators_hash:
                    type: string
                    format: byte
                    title: hashes from the app output from the prev block
                  next_validators_hash:
                    type: string
                    format: byte
                  consensus_hash:
                    type: string
                    format: byte
                  app_hash:
                    type: string
                    format: byte
                  last_results_hash:
                    type: string
                    format: byte
                  evidence_hash:
                    type: string
                    format: byte
                    title: consensus info
                  proposer_address:
                    type: string
                    format: byte
                description: Header defines the structure of a block header.
              commit:
                type: object
                properties:
                  height:
                    type: string
                    format: int64
                  round:
                    type: integer
                    format: int32
                  block_id:
                    type: object
                    properties:
                      hash:
                        type: string
                        format: byte
                      part_set_header:
                        type: object
                        properties:
                          total:
                            type: integer
                            format: int64
                          hash:
                            type: string
                            format: byte
                        title: PartsetHeader
                    title: BlockID
                  signatures:
                    type: array
                    items:
                      type: object
                      properties:
                        block_id_flag:
                          type: string
                          enum:
                            - BLOCK_ID_FLAG_UNKNOWN
                            - BLOCK_ID_FLAG_ABSENT
                            - BLOCK_ID_FLAG_COMMIT
                            - BLOCK_ID_FLAG_NIL
                          default: BLOCK_ID_FLAG_UNKNOWN
                          title: >-
                            BlockIdFlag indicates which BlcokID the signature is
                            for
                        validator_address:
                          type: string
                          format: byte
                        timestamp:
                          type: string
                          format: date-time
                        signature:
                          type: string
                          format: byte
                      description: CommitSig is a part of the Vote included in a Commit.
                description: >-
                  Commit contains the evidence that a block was committed by a
                  set of validators.
          validator_set:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      format: byte
                    pub_key:
                      type: object
                      properties:
                        ed25519:
                          type: string
                          format: byte
                        secp256k1:
                          type: string
                          format: byte
                      title: >-
                        PublicKey defines the keys available for use with
                        Validators
                    voting_power:
                      type: string
                      format: int64
                    proposer_priority:
                      type: string
                      format: int64
              proposer:
                type: object
                properties:
                  address:
                    type: string
                    format: byte
                  pub_key:
                    type: object
                    properties:
                      ed25519:
                        type: string
                        format: byte
                      secp256k1:
                        type: string
                        format: byte
                    title: >-
                      PublicKey defines the keys available for use with
                      Validators
                  voting_power:
                    type: string
                    format: int64
                  proposer_priority:
                    type: string
                    format: int64
              total_voting_power:
                type: string
                format: int64
      common_height:
        type: string
        format: int64
      byzantine_validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              format: byte
            pub_key:
              type: object
              properties:
                ed25519:
                  type: string
                  format: byte
                secp256k1:
                  type: string
                  format: byte
              title: PublicKey defines the keys available for use with Validators
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
      total_voting_power:
        type: string
        format: int64
      timestamp:
        type: string
        format: date-time
    description: >-
      LightClientAttackEvidence contains evidence of a set of validators
      attempting to mislead a light client.
  tendermint.types.PartSetHeader:
    type: object
    properties:
      total:
        type: integer
        format: int64
      hash:
        type: string
        format: byte
    title: PartsetHeader
  tendermint.types.SignedHeader:
    type: object
    properties:
      header:
        type: object
        properties:
          version:
            title: basic block info
            type: object
            properties:
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
          chain_id:
            type: string
          height:
            type: string
            format: int64
          time:
            type: string
            format: date-time
          last_block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          last_commit_hash:
            type: string
            format: byte
            title: hashes of block data
          data_hash:
            type: string
            format: byte
          validators_hash:
            type: string
            format: byte
            title: hashes from the app output from the prev block
          next_validators_hash:
            type: string
            format: byte
          consensus_hash:
            type: string
            format: byte
          app_hash:
            type: string
            format: byte
          last_results_hash:
            type: string
            format: byte
          evidence_hash:
            type: string
            format: byte
            title: consensus info
          proposer_address:
            type: string
            format: byte
        description: Header defines the structure of a block header.
      commit:
        type: object
        properties:
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          signatures:
            type: array
            items:
              type: object
              properties:
                block_id_flag:
                  type: string
                  enum:
                    - BLOCK_ID_FLAG_UNKNOWN
                    - BLOCK_ID_FLAG_ABSENT
                    - BLOCK_ID_FLAG_COMMIT
                    - BLOCK_ID_FLAG_NIL
                  default: BLOCK_ID_FLAG_UNKNOWN
                  title: BlockIdFlag indicates which BlcokID the signature is for
                validator_address:
                  type: string
                  format: byte
                timestamp:
                  type: string
                  format: date-time
                signature:
                  type: string
                  format: byte
              description: CommitSig is a part of the Vote included in a Commit.
        description: >-
          Commit contains the evidence that a block was committed by a set of
          validators.
  tendermint.types.SignedMsgType:
    type: string
    enum:
      - SIGNED_MSG_TYPE_UNKNOWN
      - SIGNED_MSG_TYPE_PREVOTE
      - SIGNED_MSG_TYPE_PRECOMMIT
      - SIGNED_MSG_TYPE_PROPOSAL
    default: SIGNED_MSG_TYPE_UNKNOWN
    description: |-
      SignedMsgType is a type of signed message in the consensus.

       - SIGNED_MSG_TYPE_PREVOTE: Votes
       - SIGNED_MSG_TYPE_PROPOSAL: Proposals
  tendermint.types.Validator:
    type: object
    properties:
      address:
        type: string
        format: byte
      pub_key:
        type: object
        properties:
          ed25519:
            type: string
            format: byte
          secp256k1:
            type: string
            format: byte
        title: PublicKey defines the keys available for use with Validators
      voting_power:
        type: string
        format: int64
      proposer_priority:
        type: string
        format: int64
  tendermint.types.ValidatorSet:
    type: object
    properties:
      validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              format: byte
            pub_key:
              type: object
              properties:
                ed25519:
                  type: string
                  format: byte
                secp256k1:
                  type: string
                  format: byte
              title: PublicKey defines the keys available for use with Validators
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
      proposer:
        type: object
        properties:
          address:
            type: string
            format: byte
          pub_key:
            type: object
            properties:
              ed25519:
                type: string
                format: byte
              secp256k1:
                type: string
                format: byte
            title: PublicKey defines the keys available for use with Validators
          voting_power:
            type: string
            format: int64
          proposer_priority:
            type: string
            format: int64
      total_voting_power:
        type: string
        format: int64
  tendermint.types.Vote:
    type: object
    properties:
      type:
        type: string
        enum:
          - SIGNED_MSG_TYPE_UNKNOWN
          - SIGNED_MSG_TYPE_PREVOTE
          - SIGNED_MSG_TYPE_PRECOMMIT
          - SIGNED_MSG_TYPE_PROPOSAL
        default: SIGNED_MSG_TYPE_UNKNOWN
        description: |-
          SignedMsgType is a type of signed message in the consensus.

           - SIGNED_MSG_TYPE_PREVOTE: Votes
           - SIGNED_MSG_TYPE_PROPOSAL: Proposals
      height:
        type: string
        format: int64
      round:
        type: integer
        format: int32
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      timestamp:
        type: string
        format: date-time
      validator_address:
        type: string
        format: byte
      validator_index:
        type: integer
        format: int32
      signature:
        type: string
        format: byte
    description: |-
      Vote represents a prevote, precommit, or commit vote from validators for
      consensus.
  tendermint.version.Consensus:
    type: object
    properties:
      block:
        type: string
        format: uint64
      app:
        type: string
        format: uint64
    description: >-
      Consensus captures the consensus rules for processing a block in the
      blockchain,

      including all blockchain data structures and the rules of the
      application's

      state transition machine.
  cosmos.base.v1beta1.DecCoin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      DecCoin defines a token with a denomination and a decimal amount.

      NOTE: The amount field is an Dec which implements the custom method
      signatures required by gogoproto.
  cosmos.distribution.v1beta1.DelegationDelegatorReward:
    type: object
    properties:
      validator_address:
        type: string
      reward:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
    description: |-
      DelegationDelegatorReward represents the properties
      of a delegator's delegation reward.
  cosmos.distribution.v1beta1.Params:
    type: object
    properties:
      community_tax:
        type: string
      base_proposer_reward:
        type: string
      bonus_proposer_reward:
        type: string
      withdraw_addr_enabled:
        type: boolean
    description: Params defines the set of params for the distribution module.
  cosmos.distribution.v1beta1.QueryCommunityPoolResponse:
    type: object
    properties:
      pool:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
        description: pool defines community pool's coins.
    description: >-
      QueryCommunityPoolResponse is the response type for the
      Query/CommunityPool

      RPC method.
  cosmos.distribution.v1beta1.QueryDelegationRewardsResponse:
    type: object
    properties:
      rewards:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
        description: rewards defines the rewards accrued by a delegation.
    description: |-
      QueryDelegationRewardsResponse is the response type for the
      Query/DelegationRewards RPC method.
  cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse:
    type: object
    properties:
      rewards:
        type: array
        items:
          type: object
          properties:
            validator_address:
              type: string
            reward:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  DecCoin defines a token with a denomination and a decimal
                  amount.


                  NOTE: The amount field is an Dec which implements the custom
                  method

                  signatures required by gogoproto.
          description: |-
            DelegationDelegatorReward represents the properties
            of a delegator's delegation reward.
        description: rewards defines all the rewards accrued by a delegator.
      total:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
        description: total defines the sum of all the rewards.
    description: |-
      QueryDelegationTotalRewardsResponse is the response type for the
      Query/DelegationTotalRewards RPC method.
  cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse:
    type: object
    properties:
      validators:
        type: array
        items:
          type: string
        description: validators defines the validators a delegator is delegating for.
    description: |-
      QueryDelegatorValidatorsResponse is the response type for the
      Query/DelegatorValidators RPC method.
  cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse:
    type: object
    properties:
      withdraw_address:
        type: string
        description: withdraw_address defines the delegator address to query for.
    description: |-
      QueryDelegatorWithdrawAddressResponse is the response type for the
      Query/DelegatorWithdrawAddress RPC method.
  cosmos.distribution.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          community_tax:
            type: string
          base_proposer_reward:
            type: string
          bonus_proposer_reward:
            type: string
          withdraw_addr_enabled:
            type: boolean
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmos.distribution.v1beta1.QueryValidatorCommissionResponse:
    type: object
    properties:
      commission:
        description: commission defines the commision the validator received.
        type: object
        properties:
          commission:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                DecCoin defines a token with a denomination and a decimal
                amount.


                NOTE: The amount field is an Dec which implements the custom
                method

                signatures required by gogoproto.
    title: |-
      QueryValidatorCommissionResponse is the response type for the
      Query/ValidatorCommission RPC method
  cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse:
    type: object
    properties:
      rewards:
        type: object
        properties:
          rewards:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                DecCoin defines a token with a denomination and a decimal
                amount.


                NOTE: The amount field is an Dec which implements the custom
                method

                signatures required by gogoproto.
        description: >-
          ValidatorOutstandingRewards represents outstanding (un-withdrawn)
          rewards

          for a validator inexpensive to track, allows simple sanity checks.
    description: |-
      QueryValidatorOutstandingRewardsResponse is the response type for the
      Query/ValidatorOutstandingRewards RPC method.
  cosmos.distribution.v1beta1.QueryValidatorSlashesResponse:
    type: object
    properties:
      slashes:
        type: array
        items:
          type: object
          properties:
            validator_period:
              type: string
              format: uint64
            fraction:
              type: string
          description: |-
            ValidatorSlashEvent represents a validator slash event.
            Height is implicit within the store key.
            This is needed to calculate appropriate amount of staking tokens
            for delegations which are withdrawn after a slash has occurred.
        description: slashes defines the slashes the validator received.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryValidatorSlashesResponse is the response type for the
      Query/ValidatorSlashes RPC method.
  cosmos.distribution.v1beta1.ValidatorAccumulatedCommission:
    type: object
    properties:
      commission:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
    description: |-
      ValidatorAccumulatedCommission represents accumulated commission
      for a validator kept as a running counter, can be withdrawn at any time.
  cosmos.distribution.v1beta1.ValidatorOutstandingRewards:
    type: object
    properties:
      rewards:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
    description: |-
      ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
      for a validator inexpensive to track, allows simple sanity checks.
  cosmos.distribution.v1beta1.ValidatorSlashEvent:
    type: object
    properties:
      validator_period:
        type: string
        format: uint64
      fraction:
        type: string
    description: |-
      ValidatorSlashEvent represents a validator slash event.
      Height is implicit within the store key.
      This is needed to calculate appropriate amount of staking tokens
      for delegations which are withdrawn after a slash has occurred.
  cosmos.evidence.v1beta1.QueryAllEvidenceResponse:
    type: object
    properties:
      evidence:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: evidence returns all evidences.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllEvidenceResponse is the response type for the Query/AllEvidence
      RPC

      method.
  cosmos.evidence.v1beta1.QueryEvidenceResponse:
    type: object
    properties:
      evidence:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: >-
      QueryEvidenceResponse is the response type for the Query/Evidence RPC
      method.
  cosmos.gov.v1beta1.Deposit:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
      depositor:
        type: string
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: |-
      Deposit defines an amount deposited by an account address to an active
      proposal.
  cosmos.gov.v1beta1.DepositParams:
    type: object
    properties:
      min_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: Minimum deposit for a proposal to enter voting period.
      max_deposit_period:
        type: string
        description: >-
          Maximum period for Atom holders to deposit on a proposal. Initial
          value: 2
           months.
    description: DepositParams defines the params for deposits on governance proposals.
  cosmos.gov.v1beta1.Proposal:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
      content:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      status:
        type: string
        enum:
          - PROPOSAL_STATUS_UNSPECIFIED
          - PROPOSAL_STATUS_DEPOSIT_PERIOD
          - PROPOSAL_STATUS_VOTING_PERIOD
          - PROPOSAL_STATUS_PASSED
          - PROPOSAL_STATUS_REJECTED
          - PROPOSAL_STATUS_FAILED
        default: PROPOSAL_STATUS_UNSPECIFIED
        description: |-
          ProposalStatus enumerates the valid statuses of a proposal.

           - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
           - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
          period.
           - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
          period.
           - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
          passed.
           - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
          been rejected.
           - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
          failed.
      final_tally_result:
        description: |-
          final_tally_result is the final tally result of the proposal. When
          querying a proposal via gRPC, this field is not populated until the
          proposal's voting period has ended.
        type: object
        properties:
          'yes':
            type: string
          abstain:
            type: string
          'no':
            type: string
          no_with_veto:
            type: string
      submit_time:
        type: string
        format: date-time
      deposit_end_time:
        type: string
        format: date-time
      total_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      voting_start_time:
        type: string
        format: date-time
      voting_end_time:
        type: string
        format: date-time
    description: Proposal defines the core field members of a governance proposal.
  cosmos.gov.v1beta1.ProposalStatus:
    type: string
    enum:
      - PROPOSAL_STATUS_UNSPECIFIED
      - PROPOSAL_STATUS_DEPOSIT_PERIOD
      - PROPOSAL_STATUS_VOTING_PERIOD
      - PROPOSAL_STATUS_PASSED
      - PROPOSAL_STATUS_REJECTED
      - PROPOSAL_STATUS_FAILED
    default: PROPOSAL_STATUS_UNSPECIFIED
    description: |-
      ProposalStatus enumerates the valid statuses of a proposal.

       - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
       - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
      period.
       - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
      period.
       - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
      passed.
       - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
      been rejected.
       - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
      failed.
  cosmos.gov.v1beta1.QueryDepositResponse:
    type: object
    properties:
      deposit:
        type: object
        properties:
          proposal_id:
            type: string
            format: uint64
          depositor:
            type: string
          amount:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
        description: |-
          Deposit defines an amount deposited by an account address to an active
          proposal.
    description: >-
      QueryDepositResponse is the response type for the Query/Deposit RPC
      method.
  cosmos.gov.v1beta1.QueryDepositsResponse:
    type: object
    properties:
      deposits:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            depositor:
              type: string
            amount:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
          description: >-
            Deposit defines an amount deposited by an account address to an
            active

            proposal.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryDepositsResponse is the response type for the Query/Deposits RPC
      method.
  cosmos.gov.v1beta1.QueryParamsResponse:
    type: object
    properties:
      voting_params:
        description: voting_params defines the parameters related to voting.
        type: object
        properties:
          voting_period:
            type: string
            description: Length of the voting period.
      deposit_params:
        description: deposit_params defines the parameters related to deposit.
        type: object
        properties:
          min_deposit:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: Minimum deposit for a proposal to enter voting period.
          max_deposit_period:
            type: string
            description: >-
              Maximum period for Atom holders to deposit on a proposal. Initial
              value: 2
               months.
      tally_params:
        description: tally_params defines the parameters related to tally.
        type: object
        properties:
          quorum:
            type: string
            format: byte
            description: >-
              Minimum percentage of total stake needed to vote for a result to
              be
               considered valid.
          threshold:
            type: string
            format: byte
            description: >-
              Minimum proportion of Yes votes for proposal to pass. Default
              value: 0.5.
          veto_threshold:
            type: string
            format: byte
            description: >-
              Minimum value of Veto votes to Total votes ratio for proposal to
              be
               vetoed. Default value: 1/3.
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmos.gov.v1beta1.QueryProposalResponse:
    type: object
    properties:
      proposal:
        type: object
        properties:
          proposal_id:
            type: string
            format: uint64
          content:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          status:
            type: string
            enum:
              - PROPOSAL_STATUS_UNSPECIFIED
              - PROPOSAL_STATUS_DEPOSIT_PERIOD
              - PROPOSAL_STATUS_VOTING_PERIOD
              - PROPOSAL_STATUS_PASSED
              - PROPOSAL_STATUS_REJECTED
              - PROPOSAL_STATUS_FAILED
            default: PROPOSAL_STATUS_UNSPECIFIED
            description: |-
              ProposalStatus enumerates the valid statuses of a proposal.

               - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
               - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
              period.
               - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
              period.
               - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
              passed.
               - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
              been rejected.
               - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
              failed.
          final_tally_result:
            description: >-
              final_tally_result is the final tally result of the proposal. When

              querying a proposal via gRPC, this field is not populated until
              the

              proposal's voting period has ended.
            type: object
            properties:
              'yes':
                type: string
              abstain:
                type: string
              'no':
                type: string
              no_with_veto:
                type: string
          submit_time:
            type: string
            format: date-time
          deposit_end_time:
            type: string
            format: date-time
          total_deposit:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          voting_start_time:
            type: string
            format: date-time
          voting_end_time:
            type: string
            format: date-time
        description: Proposal defines the core field members of a governance proposal.
    description: >-
      QueryProposalResponse is the response type for the Query/Proposal RPC
      method.
  cosmos.gov.v1beta1.QueryProposalsResponse:
    type: object
    properties:
      proposals:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            content:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            status:
              type: string
              enum:
                - PROPOSAL_STATUS_UNSPECIFIED
                - PROPOSAL_STATUS_DEPOSIT_PERIOD
                - PROPOSAL_STATUS_VOTING_PERIOD
                - PROPOSAL_STATUS_PASSED
                - PROPOSAL_STATUS_REJECTED
                - PROPOSAL_STATUS_FAILED
              default: PROPOSAL_STATUS_UNSPECIFIED
              description: |-
                ProposalStatus enumerates the valid statuses of a proposal.

                 - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
                 - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                period.
                 - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                period.
                 - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                passed.
                 - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                been rejected.
                 - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                failed.
            final_tally_result:
              description: >-
                final_tally_result is the final tally result of the proposal.
                When

                querying a proposal via gRPC, this field is not populated until
                the

                proposal's voting period has ended.
              type: object
              properties:
                'yes':
                  type: string
                abstain:
                  type: string
                'no':
                  type: string
                no_with_veto:
                  type: string
            submit_time:
              type: string
              format: date-time
            deposit_end_time:
              type: string
              format: date-time
            total_deposit:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            voting_start_time:
              type: string
              format: date-time
            voting_end_time:
              type: string
              format: date-time
          description: Proposal defines the core field members of a governance proposal.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryProposalsResponse is the response type for the Query/Proposals RPC
      method.
  cosmos.gov.v1beta1.QueryTallyResultResponse:
    type: object
    properties:
      tally:
        description: tally defines the requested tally.
        type: object
        properties:
          'yes':
            type: string
          abstain:
            type: string
          'no':
            type: string
          no_with_veto:
            type: string
    description: >-
      QueryTallyResultResponse is the response type for the Query/Tally RPC
      method.
  cosmos.gov.v1beta1.QueryVoteResponse:
    type: object
    properties:
      vote:
        type: object
        properties:
          proposal_id:
            type: string
            format: uint64
          voter:
            type: string
          option:
            description: >-
              Deprecated: Prefer to use `options` instead. This field is set in
              queries

              if and only if `len(options) == 1` and that option has weight 1.
              In all

              other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
            type: string
            enum:
              - VOTE_OPTION_UNSPECIFIED
              - VOTE_OPTION_YES
              - VOTE_OPTION_ABSTAIN
              - VOTE_OPTION_NO
              - VOTE_OPTION_NO_WITH_VETO
            default: VOTE_OPTION_UNSPECIFIED
          options:
            type: array
            items:
              type: object
              properties:
                option:
                  type: string
                  enum:
                    - VOTE_OPTION_UNSPECIFIED
                    - VOTE_OPTION_YES
                    - VOTE_OPTION_ABSTAIN
                    - VOTE_OPTION_NO
                    - VOTE_OPTION_NO_WITH_VETO
                  default: VOTE_OPTION_UNSPECIFIED
                  description: >-
                    VoteOption enumerates the valid vote options for a given
                    governance proposal.

                     - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                     - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                     - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                     - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                     - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                weight:
                  type: string
              description: |-
                WeightedVoteOption defines a unit of vote for vote split.

                Since: cosmos-sdk 0.43
            title: 'Since: cosmos-sdk 0.43'
        description: |-
          Vote defines a vote on a governance proposal.
          A Vote consists of a proposal ID, the voter, and the vote option.
    description: QueryVoteResponse is the response type for the Query/Vote RPC method.
  cosmos.gov.v1beta1.QueryVotesResponse:
    type: object
    properties:
      votes:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            voter:
              type: string
            option:
              description: >-
                Deprecated: Prefer to use `options` instead. This field is set
                in queries

                if and only if `len(options) == 1` and that option has weight 1.
                In all

                other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
              type: string
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              default: VOTE_OPTION_UNSPECIFIED
            options:
              type: array
              items:
                type: object
                properties:
                  option:
                    type: string
                    enum:
                      - VOTE_OPTION_UNSPECIFIED
                      - VOTE_OPTION_YES
                      - VOTE_OPTION_ABSTAIN
                      - VOTE_OPTION_NO
                      - VOTE_OPTION_NO_WITH_VETO
                    default: VOTE_OPTION_UNSPECIFIED
                    description: >-
                      VoteOption enumerates the valid vote options for a given
                      governance proposal.

                       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                  weight:
                    type: string
                description: |-
                  WeightedVoteOption defines a unit of vote for vote split.

                  Since: cosmos-sdk 0.43
              title: 'Since: cosmos-sdk 0.43'
          description: |-
            Vote defines a vote on a governance proposal.
            A Vote consists of a proposal ID, the voter, and the vote option.
        description: votes defined the queried votes.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: QueryVotesResponse is the response type for the Query/Votes RPC method.
  cosmos.gov.v1beta1.TallyParams:
    type: object
    properties:
      quorum:
        type: string
        format: byte
        description: |-
          Minimum percentage of total stake needed to vote for a result to be
           considered valid.
      threshold:
        type: string
        format: byte
        description: >-
          Minimum proportion of Yes votes for proposal to pass. Default value:
          0.5.
      veto_threshold:
        type: string
        format: byte
        description: |-
          Minimum value of Veto votes to Total votes ratio for proposal to be
           vetoed. Default value: 1/3.
    description: TallyParams defines the params for tallying votes on governance proposals.
  cosmos.gov.v1beta1.TallyResult:
    type: object
    properties:
      'yes':
        type: string
      abstain:
        type: string
      'no':
        type: string
      no_with_veto:
        type: string
    description: TallyResult defines a standard tally for a governance proposal.
  cosmos.gov.v1beta1.Vote:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
      voter:
        type: string
      option:
        description: >-
          Deprecated: Prefer to use `options` instead. This field is set in
          queries

          if and only if `len(options) == 1` and that option has weight 1. In
          all

          other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
        type: string
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        default: VOTE_OPTION_UNSPECIFIED
      options:
        type: array
        items:
          type: object
          properties:
            option:
              type: string
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              default: VOTE_OPTION_UNSPECIFIED
              description: >-
                VoteOption enumerates the valid vote options for a given
                governance proposal.

                 - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                 - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                 - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                 - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                 - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
            weight:
              type: string
          description: |-
            WeightedVoteOption defines a unit of vote for vote split.

            Since: cosmos-sdk 0.43
        title: 'Since: cosmos-sdk 0.43'
    description: |-
      Vote defines a vote on a governance proposal.
      A Vote consists of a proposal ID, the voter, and the vote option.
  cosmos.gov.v1beta1.VoteOption:
    type: string
    enum:
      - VOTE_OPTION_UNSPECIFIED
      - VOTE_OPTION_YES
      - VOTE_OPTION_ABSTAIN
      - VOTE_OPTION_NO
      - VOTE_OPTION_NO_WITH_VETO
    default: VOTE_OPTION_UNSPECIFIED
    description: >-
      VoteOption enumerates the valid vote options for a given governance
      proposal.

       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
  cosmos.gov.v1beta1.VotingParams:
    type: object
    properties:
      voting_period:
        type: string
        description: Length of the voting period.
    description: VotingParams defines the params for voting on governance proposals.
  cosmos.gov.v1beta1.WeightedVoteOption:
    type: object
    properties:
      option:
        type: string
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        default: VOTE_OPTION_UNSPECIFIED
        description: >-
          VoteOption enumerates the valid vote options for a given governance
          proposal.

           - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
           - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
           - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
           - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
           - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
      weight:
        type: string
    description: |-
      WeightedVoteOption defines a unit of vote for vote split.

      Since: cosmos-sdk 0.43
  cosmos.gov.v1.Deposit:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
      depositor:
        type: string
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: |-
      Deposit defines an amount deposited by an account address to an active
      proposal.
  cosmos.gov.v1.DepositParams:
    type: object
    properties:
      min_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: Minimum deposit for a proposal to enter voting period.
      max_deposit_period:
        type: string
        description: >-
          Maximum period for Atom holders to deposit on a proposal. Initial
          value: 2
           months.
    description: DepositParams defines the params for deposits on governance proposals.
  cosmos.gov.v1.Proposal:
    type: object
    properties:
      id:
        type: string
        format: uint64
      messages:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      status:
        type: string
        enum:
          - PROPOSAL_STATUS_UNSPECIFIED
          - PROPOSAL_STATUS_DEPOSIT_PERIOD
          - PROPOSAL_STATUS_VOTING_PERIOD
          - PROPOSAL_STATUS_PASSED
          - PROPOSAL_STATUS_REJECTED
          - PROPOSAL_STATUS_FAILED
        default: PROPOSAL_STATUS_UNSPECIFIED
        description: |-
          ProposalStatus enumerates the valid statuses of a proposal.

           - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
           - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
          period.
           - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
          period.
           - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
          passed.
           - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
          been rejected.
           - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
          failed.
      final_tally_result:
        description: |-
          final_tally_result is the final tally result of the proposal. When
          querying a proposal via gRPC, this field is not populated until the
          proposal's voting period has ended.
        type: object
        properties:
          yes_count:
            type: string
          abstain_count:
            type: string
          no_count:
            type: string
          no_with_veto_count:
            type: string
      submit_time:
        type: string
        format: date-time
      deposit_end_time:
        type: string
        format: date-time
      total_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      voting_start_time:
        type: string
        format: date-time
      voting_end_time:
        type: string
        format: date-time
      metadata:
        type: string
        description: metadata is any arbitrary metadata attached to the proposal.
    description: Proposal defines the core field members of a governance proposal.
  cosmos.gov.v1.ProposalStatus:
    type: string
    enum:
      - PROPOSAL_STATUS_UNSPECIFIED
      - PROPOSAL_STATUS_DEPOSIT_PERIOD
      - PROPOSAL_STATUS_VOTING_PERIOD
      - PROPOSAL_STATUS_PASSED
      - PROPOSAL_STATUS_REJECTED
      - PROPOSAL_STATUS_FAILED
    default: PROPOSAL_STATUS_UNSPECIFIED
    description: |-
      ProposalStatus enumerates the valid statuses of a proposal.

       - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
       - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
      period.
       - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
      period.
       - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
      passed.
       - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
      been rejected.
       - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
      failed.
  cosmos.gov.v1.QueryDepositResponse:
    type: object
    properties:
      deposit:
        type: object
        properties:
          proposal_id:
            type: string
            format: uint64
          depositor:
            type: string
          amount:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
        description: |-
          Deposit defines an amount deposited by an account address to an active
          proposal.
    description: >-
      QueryDepositResponse is the response type for the Query/Deposit RPC
      method.
  cosmos.gov.v1.QueryDepositsResponse:
    type: object
    properties:
      deposits:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            depositor:
              type: string
            amount:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
          description: >-
            Deposit defines an amount deposited by an account address to an
            active

            proposal.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryDepositsResponse is the response type for the Query/Deposits RPC
      method.
  cosmos.gov.v1.QueryParamsResponse:
    type: object
    properties:
      voting_params:
        description: voting_params defines the parameters related to voting.
        type: object
        properties:
          voting_period:
            type: string
            description: Length of the voting period.
      deposit_params:
        description: deposit_params defines the parameters related to deposit.
        type: object
        properties:
          min_deposit:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: Minimum deposit for a proposal to enter voting period.
          max_deposit_period:
            type: string
            description: >-
              Maximum period for Atom holders to deposit on a proposal. Initial
              value: 2
               months.
      tally_params:
        description: tally_params defines the parameters related to tally.
        type: object
        properties:
          quorum:
            type: string
            description: >-
              Minimum percentage of total stake needed to vote for a result to
              be
               considered valid.
          threshold:
            type: string
            description: >-
              Minimum proportion of Yes votes for proposal to pass. Default
              value: 0.5.
          veto_threshold:
            type: string
            description: >-
              Minimum value of Veto votes to Total votes ratio for proposal to
              be
               vetoed. Default value: 1/3.
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmos.gov.v1.QueryProposalResponse:
    type: object
    properties:
      proposal:
        type: object
        properties:
          id:
            type: string
            format: uint64
          messages:
            type: array
            items:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
          status:
            type: string
            enum:
              - PROPOSAL_STATUS_UNSPECIFIED
              - PROPOSAL_STATUS_DEPOSIT_PERIOD
              - PROPOSAL_STATUS_VOTING_PERIOD
              - PROPOSAL_STATUS_PASSED
              - PROPOSAL_STATUS_REJECTED
              - PROPOSAL_STATUS_FAILED
            default: PROPOSAL_STATUS_UNSPECIFIED
            description: |-
              ProposalStatus enumerates the valid statuses of a proposal.

               - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
               - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
              period.
               - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
              period.
               - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
              passed.
               - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
              been rejected.
               - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
              failed.
          final_tally_result:
            description: >-
              final_tally_result is the final tally result of the proposal. When

              querying a proposal via gRPC, this field is not populated until
              the

              proposal's voting period has ended.
            type: object
            properties:
              yes_count:
                type: string
              abstain_count:
                type: string
              no_count:
                type: string
              no_with_veto_count:
                type: string
          submit_time:
            type: string
            format: date-time
          deposit_end_time:
            type: string
            format: date-time
          total_deposit:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          voting_start_time:
            type: string
            format: date-time
          voting_end_time:
            type: string
            format: date-time
          metadata:
            type: string
            description: metadata is any arbitrary metadata attached to the proposal.
        description: Proposal defines the core field members of a governance proposal.
    description: >-
      QueryProposalResponse is the response type for the Query/Proposal RPC
      method.
  cosmos.gov.v1.QueryProposalsResponse:
    type: object
    properties:
      proposals:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
            messages:
              type: array
              items:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            status:
              type: string
              enum:
                - PROPOSAL_STATUS_UNSPECIFIED
                - PROPOSAL_STATUS_DEPOSIT_PERIOD
                - PROPOSAL_STATUS_VOTING_PERIOD
                - PROPOSAL_STATUS_PASSED
                - PROPOSAL_STATUS_REJECTED
                - PROPOSAL_STATUS_FAILED
              default: PROPOSAL_STATUS_UNSPECIFIED
              description: |-
                ProposalStatus enumerates the valid statuses of a proposal.

                 - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
                 - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                period.
                 - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                period.
                 - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                passed.
                 - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                been rejected.
                 - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                failed.
            final_tally_result:
              description: >-
                final_tally_result is the final tally result of the proposal.
                When

                querying a proposal via gRPC, this field is not populated until
                the

                proposal's voting period has ended.
              type: object
              properties:
                yes_count:
                  type: string
                abstain_count:
                  type: string
                no_count:
                  type: string
                no_with_veto_count:
                  type: string
            submit_time:
              type: string
              format: date-time
            deposit_end_time:
              type: string
              format: date-time
            total_deposit:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            voting_start_time:
              type: string
              format: date-time
            voting_end_time:
              type: string
              format: date-time
            metadata:
              type: string
              description: metadata is any arbitrary metadata attached to the proposal.
          description: Proposal defines the core field members of a governance proposal.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryProposalsResponse is the response type for the Query/Proposals RPC
      method.
  cosmos.gov.v1.QueryTallyResultResponse:
    type: object
    properties:
      tally:
        description: tally defines the requested tally.
        type: object
        properties:
          yes_count:
            type: string
          abstain_count:
            type: string
          no_count:
            type: string
          no_with_veto_count:
            type: string
    description: >-
      QueryTallyResultResponse is the response type for the Query/Tally RPC
      method.
  cosmos.gov.v1.QueryVoteResponse:
    type: object
    properties:
      vote:
        type: object
        properties:
          proposal_id:
            type: string
            format: uint64
          voter:
            type: string
          options:
            type: array
            items:
              type: object
              properties:
                option:
                  type: string
                  enum:
                    - VOTE_OPTION_UNSPECIFIED
                    - VOTE_OPTION_YES
                    - VOTE_OPTION_ABSTAIN
                    - VOTE_OPTION_NO
                    - VOTE_OPTION_NO_WITH_VETO
                  default: VOTE_OPTION_UNSPECIFIED
                  description: >-
                    VoteOption enumerates the valid vote options for a given
                    governance proposal.

                     - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                     - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                     - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                     - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                     - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                weight:
                  type: string
              description: WeightedVoteOption defines a unit of vote for vote split.
          metadata:
            type: string
            description: metadata is any  arbitrary metadata to attached to the vote.
        description: |-
          Vote defines a vote on a governance proposal.
          A Vote consists of a proposal ID, the voter, and the vote option.
    description: QueryVoteResponse is the response type for the Query/Vote RPC method.
  cosmos.gov.v1.QueryVotesResponse:
    type: object
    properties:
      votes:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            voter:
              type: string
            options:
              type: array
              items:
                type: object
                properties:
                  option:
                    type: string
                    enum:
                      - VOTE_OPTION_UNSPECIFIED
                      - VOTE_OPTION_YES
                      - VOTE_OPTION_ABSTAIN
                      - VOTE_OPTION_NO
                      - VOTE_OPTION_NO_WITH_VETO
                    default: VOTE_OPTION_UNSPECIFIED
                    description: >-
                      VoteOption enumerates the valid vote options for a given
                      governance proposal.

                       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                  weight:
                    type: string
                description: WeightedVoteOption defines a unit of vote for vote split.
            metadata:
              type: string
              description: metadata is any  arbitrary metadata to attached to the vote.
          description: |-
            Vote defines a vote on a governance proposal.
            A Vote consists of a proposal ID, the voter, and the vote option.
        description: votes defined the queried votes.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: QueryVotesResponse is the response type for the Query/Votes RPC method.
  cosmos.gov.v1.TallyParams:
    type: object
    properties:
      quorum:
        type: string
        description: |-
          Minimum percentage of total stake needed to vote for a result to be
           considered valid.
      threshold:
        type: string
        description: >-
          Minimum proportion of Yes votes for proposal to pass. Default value:
          0.5.
      veto_threshold:
        type: string
        description: |-
          Minimum value of Veto votes to Total votes ratio for proposal to be
           vetoed. Default value: 1/3.
    description: TallyParams defines the params for tallying votes on governance proposals.
  cosmos.gov.v1.TallyResult:
    type: object
    properties:
      yes_count:
        type: string
      abstain_count:
        type: string
      no_count:
        type: string
      no_with_veto_count:
        type: string
    description: TallyResult defines a standard tally for a governance proposal.
  cosmos.gov.v1.Vote:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
      voter:
        type: string
      options:
        type: array
        items:
          type: object
          properties:
            option:
              type: string
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              default: VOTE_OPTION_UNSPECIFIED
              description: >-
                VoteOption enumerates the valid vote options for a given
                governance proposal.

                 - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                 - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                 - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                 - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                 - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
            weight:
              type: string
          description: WeightedVoteOption defines a unit of vote for vote split.
      metadata:
        type: string
        description: metadata is any  arbitrary metadata to attached to the vote.
    description: |-
      Vote defines a vote on a governance proposal.
      A Vote consists of a proposal ID, the voter, and the vote option.
  cosmos.gov.v1.VoteOption:
    type: string
    enum:
      - VOTE_OPTION_UNSPECIFIED
      - VOTE_OPTION_YES
      - VOTE_OPTION_ABSTAIN
      - VOTE_OPTION_NO
      - VOTE_OPTION_NO_WITH_VETO
    default: VOTE_OPTION_UNSPECIFIED
    description: >-
      VoteOption enumerates the valid vote options for a given governance
      proposal.

       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
  cosmos.gov.v1.VotingParams:
    type: object
    properties:
      voting_period:
        type: string
        description: Length of the voting period.
    description: VotingParams defines the params for voting on governance proposals.
  cosmos.gov.v1.WeightedVoteOption:
    type: object
    properties:
      option:
        type: string
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        default: VOTE_OPTION_UNSPECIFIED
        description: >-
          VoteOption enumerates the valid vote options for a given governance
          proposal.

           - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
           - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
           - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
           - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
           - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
      weight:
        type: string
    description: WeightedVoteOption defines a unit of vote for vote split.
  cosmos.mint.v1beta1.Params:
    type: object
    properties:
      mint_denom:
        type: string
        title: type of coin to mint
      inflation_rate_change:
        type: string
        title: maximum annual change in inflation rate
      inflation_max:
        type: string
        title: maximum inflation rate
      inflation_min:
        type: string
        title: minimum inflation rate
      goal_bonded:
        type: string
        title: goal of percent bonded atoms
      blocks_per_year:
        type: string
        format: uint64
        title: expected blocks per year
    description: Params holds parameters for the mint module.
  cosmos.mint.v1beta1.QueryAnnualProvisionsResponse:
    type: object
    properties:
      annual_provisions:
        type: string
        format: byte
        description: annual_provisions is the current minting annual provisions value.
    description: |-
      QueryAnnualProvisionsResponse is the response type for the
      Query/AnnualProvisions RPC method.
  cosmos.mint.v1beta1.QueryInflationResponse:
    type: object
    properties:
      inflation:
        type: string
        format: byte
        description: inflation is the current minting inflation value.
    description: |-
      QueryInflationResponse is the response type for the Query/Inflation RPC
      method.
  cosmos.mint.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          mint_denom:
            type: string
            title: type of coin to mint
          inflation_rate_change:
            type: string
            title: maximum annual change in inflation rate
          inflation_max:
            type: string
            title: maximum inflation rate
          inflation_min:
            type: string
            title: minimum inflation rate
          goal_bonded:
            type: string
            title: goal of percent bonded atoms
          blocks_per_year:
            type: string
            format: uint64
            title: expected blocks per year
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmos.params.v1beta1.ParamChange:
    type: object
    properties:
      subspace:
        type: string
      key:
        type: string
      value:
        type: string
    description: |-
      ParamChange defines an individual parameter change, for use in
      ParameterChangeProposal.
  cosmos.params.v1beta1.QueryParamsResponse:
    type: object
    properties:
      param:
        description: param defines the queried parameter.
        type: object
        properties:
          subspace:
            type: string
          key:
            type: string
          value:
            type: string
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  cosmos.params.v1beta1.QuerySubspacesResponse:
    type: object
    properties:
      subspaces:
        type: array
        items:
          type: object
          properties:
            subspace:
              type: string
            keys:
              type: array
              items:
                type: string
          description: >-
            Subspace defines a parameter subspace name and all the keys that
            exist for

            the subspace.


            Since: cosmos-sdk 0.46
    description: |-
      QuerySubspacesResponse defines the response types for querying for all
      registered subspaces and all keys for a subspace.

      Since: cosmos-sdk 0.46
  cosmos.params.v1beta1.Subspace:
    type: object
    properties:
      subspace:
        type: string
      keys:
        type: array
        items:
          type: string
    description: |-
      Subspace defines a parameter subspace name and all the keys that exist for
      the subspace.

      Since: cosmos-sdk 0.46
  cosmos.quarantine.v1beta1.AutoResponse:
    type: string
    enum:
      - AUTO_RESPONSE_UNSPECIFIED
      - AUTO_RESPONSE_ACCEPT
      - AUTO_RESPONSE_DECLINE
    default: AUTO_RESPONSE_UNSPECIFIED
    description: >-
      AutoResponse enumerates the quarantine auto-response options.

       - AUTO_RESPONSE_UNSPECIFIED: AUTO_RESPONSE_UNSPECIFIED defines that an automatic response has not been specified.
      This means that no automatic action should be taken, i.e. this
      auto-response is off,

      and default quarantine behavior is used.
       - AUTO_RESPONSE_ACCEPT: AUTO_RESPONSE_ACCEPT defines that sends should be automatically accepted, bypassing quarantine.
       - AUTO_RESPONSE_DECLINE: AUTO_RESPONSE_DECLINE defines that sends should be automatically declined.
  cosmos.quarantine.v1beta1.AutoResponseEntry:
    type: object
    properties:
      to_address:
        type: string
        description: to_address is the receiving address.
      from_address:
        type: string
        description: from_address is the sending address.
      response:
        description: response is the auto-response setting for these two addresses.
        type: string
        enum:
          - AUTO_RESPONSE_UNSPECIFIED
          - AUTO_RESPONSE_ACCEPT
          - AUTO_RESPONSE_DECLINE
        default: AUTO_RESPONSE_UNSPECIFIED
    description: AutoResponseEntry defines the auto response to one address from another.
  cosmos.quarantine.v1beta1.QuarantinedFunds:
    type: object
    properties:
      to_address:
        type: string
        description: >-
          to_address is the intended recipient of the coins that have been
          quarantined.
      unaccepted_from_addresses:
        type: array
        items:
          type: string
        description: >-
          unaccepted_from_addresses are the senders that have not been part of
          an accept yet for these coins.
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: coins is the amount currently in quarantined for the two addresses.
      declined:
        type: boolean
        description: declined is true if these funds were previously declined.
    description: >-
      QuarantinedFunds defines structure that represents coins that have been
      quarantined.
  cosmos.quarantine.v1beta1.QueryAutoResponsesResponse:
    type: object
    properties:
      auto_responses:
        type: array
        items:
          type: object
          properties:
            to_address:
              type: string
              description: to_address is the receiving address.
            from_address:
              type: string
              description: from_address is the sending address.
            response:
              description: response is the auto-response setting for these two addresses.
              type: string
              enum:
                - AUTO_RESPONSE_UNSPECIFIED
                - AUTO_RESPONSE_ACCEPT
                - AUTO_RESPONSE_DECLINE
              default: AUTO_RESPONSE_UNSPECIFIED
          description: >-
            AutoResponseEntry defines the auto response to one address from
            another.
        description: auto_responses are the auto-response entries from the provided query.
      pagination:
        description: pagination defines the pagination parameters of the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAutoResponsesResponse defines the RPC response of a AutoResponses
      query.
  cosmos.quarantine.v1beta1.QueryIsQuarantinedResponse:
    type: object
    properties:
      is_quarantined:
        type: boolean
        description: is_quarantined is true if the to_address has opted into quarantine.
    description: >-
      QueryIsQuarantinedResponse defines the RPC response of an IsQuarantined
      query.
  cosmos.quarantine.v1beta1.QueryQuarantinedFundsResponse:
    type: object
    properties:
      quarantinedFunds:
        type: array
        items:
          type: object
          properties:
            to_address:
              type: string
              description: >-
                to_address is the intended recipient of the coins that have been
                quarantined.
            unaccepted_from_addresses:
              type: array
              items:
                type: string
              description: >-
                unaccepted_from_addresses are the senders that have not been
                part of an accept yet for these coins.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: >-
                coins is the amount currently in quarantined for the two
                addresses.
            declined:
              type: boolean
              description: declined is true if these funds were previously declined.
          description: >-
            QuarantinedFunds defines structure that represents coins that have
            been quarantined.
        description: quarantinedFunds is info about coins sitting in quarantine.
      pagination:
        description: pagination defines the pagination parameters of the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryQuarantinedFundsResponse defines the RPC response of a
      QuarantinedFunds query.
  cosmos.slashing.v1beta1.Params:
    type: object
    properties:
      signed_blocks_window:
        type: string
        format: int64
      min_signed_per_window:
        type: string
        format: byte
      downtime_jail_duration:
        type: string
      slash_fraction_double_sign:
        type: string
        format: byte
      slash_fraction_downtime:
        type: string
        format: byte
    description: Params represents the parameters used for by the slashing module.
  cosmos.slashing.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          signed_blocks_window:
            type: string
            format: int64
          min_signed_per_window:
            type: string
            format: byte
          downtime_jail_duration:
            type: string
          slash_fraction_double_sign:
            type: string
            format: byte
          slash_fraction_downtime:
            type: string
            format: byte
        description: Params represents the parameters used for by the slashing module.
    title: QueryParamsResponse is the response type for the Query/Params RPC method
  cosmos.slashing.v1beta1.QuerySigningInfoResponse:
    type: object
    properties:
      val_signing_info:
        type: object
        properties:
          address:
            type: string
          start_height:
            type: string
            format: int64
            title: Height at which validator was first a candidate OR was unjailed
          index_offset:
            type: string
            format: int64
            description: >-
              Index which is incremented each time the validator was a bonded

              in a block and may have signed a precommit or not. This in
              conjunction with the

              `SignedBlocksWindow` param determines the index in the
              `MissedBlocksBitArray`.
          jailed_until:
            type: string
            format: date-time
            description: >-
              Timestamp until which the validator is jailed due to liveness
              downtime.
          tombstoned:
            type: boolean
            description: >-
              Whether or not a validator has been tombstoned (killed out of
              validator set). It is set

              once the validator commits an equivocation or for any other
              configured misbehiavor.
          missed_blocks_counter:
            type: string
            format: int64
            description: >-
              A counter kept to avoid unnecessary array reads.

              Note that `Sum(MissedBlocksBitArray)` always equals
              `MissedBlocksCounter`.
        description: >-
          ValidatorSigningInfo defines a validator's signing info for monitoring
          their

          liveness activity.
        title: val_signing_info is the signing info of requested val cons address
    title: >-
      QuerySigningInfoResponse is the response type for the Query/SigningInfo
      RPC

      method
  cosmos.slashing.v1beta1.QuerySigningInfosResponse:
    type: object
    properties:
      info:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            start_height:
              type: string
              format: int64
              title: Height at which validator was first a candidate OR was unjailed
            index_offset:
              type: string
              format: int64
              description: >-
                Index which is incremented each time the validator was a bonded

                in a block and may have signed a precommit or not. This in
                conjunction with the

                `SignedBlocksWindow` param determines the index in the
                `MissedBlocksBitArray`.
            jailed_until:
              type: string
              format: date-time
              description: >-
                Timestamp until which the validator is jailed due to liveness
                downtime.
            tombstoned:
              type: boolean
              description: >-
                Whether or not a validator has been tombstoned (killed out of
                validator set). It is set

                once the validator commits an equivocation or for any other
                configured misbehiavor.
            missed_blocks_counter:
              type: string
              format: int64
              description: >-
                A counter kept to avoid unnecessary array reads.

                Note that `Sum(MissedBlocksBitArray)` always equals
                `MissedBlocksCounter`.
          description: >-
            ValidatorSigningInfo defines a validator's signing info for
            monitoring their

            liveness activity.
        title: info is the signing info of all validators
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: >-
      QuerySigningInfosResponse is the response type for the Query/SigningInfos
      RPC

      method
  cosmos.slashing.v1beta1.ValidatorSigningInfo:
    type: object
    properties:
      address:
        type: string
      start_height:
        type: string
        format: int64
        title: Height at which validator was first a candidate OR was unjailed
      index_offset:
        type: string
        format: int64
        description: >-
          Index which is incremented each time the validator was a bonded

          in a block and may have signed a precommit or not. This in conjunction
          with the

          `SignedBlocksWindow` param determines the index in the
          `MissedBlocksBitArray`.
      jailed_until:
        type: string
        format: date-time
        description: >-
          Timestamp until which the validator is jailed due to liveness
          downtime.
      tombstoned:
        type: boolean
        description: >-
          Whether or not a validator has been tombstoned (killed out of
          validator set). It is set

          once the validator commits an equivocation or for any other configured
          misbehiavor.
      missed_blocks_counter:
        type: string
        format: int64
        description: >-
          A counter kept to avoid unnecessary array reads.

          Note that `Sum(MissedBlocksBitArray)` always equals
          `MissedBlocksCounter`.
    description: >-
      ValidatorSigningInfo defines a validator's signing info for monitoring
      their

      liveness activity.
  cosmos.staking.v1beta1.BondStatus:
    type: string
    enum:
      - BOND_STATUS_UNSPECIFIED
      - BOND_STATUS_UNBONDED
      - BOND_STATUS_UNBONDING
      - BOND_STATUS_BONDED
    default: BOND_STATUS_UNSPECIFIED
    description: |-
      BondStatus is the status of a validator.

       - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.
       - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.
       - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.
       - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
  cosmos.staking.v1beta1.Commission:
    type: object
    properties:
      commission_rates:
        description: >-
          commission_rates defines the initial commission rates to be used for
          creating a validator.
        type: object
        properties:
          rate:
            type: string
            description: 'rate is the commission rate charged to delegators, as a fraction.'
          max_rate:
            type: string
            description: >-
              max_rate defines the maximum commission rate which validator can
              ever charge, as a fraction.
          max_change_rate:
            type: string
            description: >-
              max_change_rate defines the maximum daily increase of the
              validator commission, as a fraction.
      update_time:
        type: string
        format: date-time
        description: update_time is the last time the commission rate was changed.
    description: Commission defines commission parameters for a given validator.
  cosmos.staking.v1beta1.CommissionRates:
    type: object
    properties:
      rate:
        type: string
        description: 'rate is the commission rate charged to delegators, as a fraction.'
      max_rate:
        type: string
        description: >-
          max_rate defines the maximum commission rate which validator can ever
          charge, as a fraction.
      max_change_rate:
        type: string
        description: >-
          max_change_rate defines the maximum daily increase of the validator
          commission, as a fraction.
    description: >-
      CommissionRates defines the initial commission rates to be used for
      creating

      a validator.
  cosmos.staking.v1beta1.Delegation:
    type: object
    properties:
      delegator_address:
        type: string
        description: delegator_address is the bech32-encoded address of the delegator.
      validator_address:
        type: string
        description: validator_address is the bech32-encoded address of the validator.
      shares:
        type: string
        description: shares define the delegation shares received.
    description: |-
      Delegation represents the bond with tokens held by an account. It is
      owned by one delegator, and is associated with the voting power of one
      validator.
  cosmos.staking.v1beta1.DelegationResponse:
    type: object
    properties:
      delegation:
        type: object
        properties:
          delegator_address:
            type: string
            description: delegator_address is the bech32-encoded address of the delegator.
          validator_address:
            type: string
            description: validator_address is the bech32-encoded address of the validator.
          shares:
            type: string
            description: shares define the delegation shares received.
        description: |-
          Delegation represents the bond with tokens held by an account. It is
          owned by one delegator, and is associated with the voting power of one
          validator.
      balance:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: |-
      DelegationResponse is equivalent to Delegation except that it contains a
      balance in addition to shares which is more suitable for client responses.
  cosmos.staking.v1beta1.Description:
    type: object
    properties:
      moniker:
        type: string
        description: moniker defines a human-readable name for the validator.
      identity:
        type: string
        description: >-
          identity defines an optional identity signature (ex. UPort or
          Keybase).
      website:
        type: string
        description: website defines an optional website link.
      security_contact:
        type: string
        description: security_contact defines an optional email for security contact.
      details:
        type: string
        description: details define other optional details.
    description: Description defines a validator description.
  cosmos.staking.v1beta1.HistoricalInfo:
    type: object
    properties:
      header:
        type: object
        properties:
          version:
            title: basic block info
            type: object
            properties:
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
          chain_id:
            type: string
          height:
            type: string
            format: int64
          time:
            type: string
            format: date-time
          last_block_id:
            title: prev block info
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
          last_commit_hash:
            type: string
            format: byte
            title: hashes of block data
          data_hash:
            type: string
            format: byte
          validators_hash:
            type: string
            format: byte
            title: hashes from the app output from the prev block
          next_validators_hash:
            type: string
            format: byte
          consensus_hash:
            type: string
            format: byte
          app_hash:
            type: string
            format: byte
          last_results_hash:
            type: string
            format: byte
          evidence_hash:
            type: string
            format: byte
            title: consensus info
          proposer_address:
            type: string
            format: byte
        description: Header defines the structure of a block header.
      valset:
        type: array
        items:
          type: object
          properties:
            operator_address:
              type: string
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
            consensus_pubkey:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            jailed:
              type: boolean
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
            status:
              description: status is the validator status (bonded/unbonding/unbonded).
              type: string
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              default: BOND_STATUS_UNSPECIFIED
            tokens:
              type: string
              description: tokens define the delegated tokens (incl. self-delegation).
            delegator_shares:
              type: string
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
            description:
              description: description defines the description terms for the validator.
              type: object
              properties:
                moniker:
                  type: string
                  description: moniker defines a human-readable name for the validator.
                identity:
                  type: string
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                website:
                  type: string
                  description: website defines an optional website link.
                security_contact:
                  type: string
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                details:
                  type: string
                  description: details define other optional details.
            unbonding_height:
              type: string
              format: int64
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
            unbonding_time:
              type: string
              format: date-time
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
            commission:
              description: commission defines the commission parameters.
              type: object
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  type: object
                  properties:
                    rate:
                      type: string
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                    max_rate:
                      type: string
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                    max_change_rate:
                      type: string
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                update_time:
                  type: string
                  format: date-time
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
            min_self_delegation:
              type: string
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.


                Since: cosmos-sdk 0.46
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
    description: >-
      HistoricalInfo contains header and validator information for a given
      block.

      It is stored as part of staking module's state, which persists the `n`
      most

      recent HistoricalInfo

      (`n` is set by the staking module's `historical_entries` parameter).
  cosmos.staking.v1beta1.Params:
    type: object
    properties:
      unbonding_time:
        type: string
        description: unbonding_time is the time duration of unbonding.
      max_validators:
        type: integer
        format: int64
        description: max_validators is the maximum number of validators.
      max_entries:
        type: integer
        format: int64
        description: >-
          max_entries is the max entries for either unbonding delegation or
          redelegation (per pair/trio).
      historical_entries:
        type: integer
        format: int64
        description: historical_entries is the number of historical entries to persist.
      bond_denom:
        type: string
        description: bond_denom defines the bondable coin denomination.
      min_commission_rate:
        type: string
        title: >-
          min_commission_rate is the chain-wide minimum commission rate that a
          validator can charge their delegators
    description: Params defines the parameters for the staking module.
  cosmos.staking.v1beta1.Pool:
    type: object
    properties:
      not_bonded_tokens:
        type: string
      bonded_tokens:
        type: string
    description: |-
      Pool is used for tracking bonded and not-bonded token supply of the bond
      denomination.
  cosmos.staking.v1beta1.QueryDelegationResponse:
    type: object
    properties:
      delegation_response:
        type: object
        properties:
          delegation:
            type: object
            properties:
              delegator_address:
                type: string
                description: >-
                  delegator_address is the bech32-encoded address of the
                  delegator.
              validator_address:
                type: string
                description: >-
                  validator_address is the bech32-encoded address of the
                  validator.
              shares:
                type: string
                description: shares define the delegation shares received.
            description: >-
              Delegation represents the bond with tokens held by an account. It
              is

              owned by one delegator, and is associated with the voting power of
              one

              validator.
          balance:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
        description: >-
          DelegationResponse is equivalent to Delegation except that it contains
          a

          balance in addition to shares which is more suitable for client
          responses.
    description: >-
      QueryDelegationResponse is response type for the Query/Delegation RPC
      method.
  cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse:
    type: object
    properties:
      delegation_responses:
        type: array
        items:
          type: object
          properties:
            delegation:
              type: object
              properties:
                delegator_address:
                  type: string
                  description: >-
                    delegator_address is the bech32-encoded address of the
                    delegator.
                validator_address:
                  type: string
                  description: >-
                    validator_address is the bech32-encoded address of the
                    validator.
                shares:
                  type: string
                  description: shares define the delegation shares received.
              description: >-
                Delegation represents the bond with tokens held by an account.
                It is

                owned by one delegator, and is associated with the voting power
                of one

                validator.
            balance:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          description: >-
            DelegationResponse is equivalent to Delegation except that it
            contains a

            balance in addition to shares which is more suitable for client
            responses.
        description: delegation_responses defines all the delegations' info of a delegator.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryDelegatorDelegationsResponse is response type for the
      Query/DelegatorDelegations RPC method.
  cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse:
    type: object
    properties:
      unbonding_responses:
        type: array
        items:
          type: object
          properties:
            delegator_address:
              type: string
              description: >-
                delegator_address is the bech32-encoded address of the
                delegator.
            validator_address:
              type: string
              description: >-
                validator_address is the bech32-encoded address of the
                validator.
            entries:
              type: array
              items:
                type: object
                properties:
                  creation_height:
                    type: string
                    format: int64
                    description: >-
                      creation_height is the height which the unbonding took
                      place.
                  completion_time:
                    type: string
                    format: date-time
                    description: completion_time is the unix time for unbonding completion.
                  initial_balance:
                    type: string
                    description: >-
                      initial_balance defines the tokens initially scheduled to
                      receive at completion.
                  balance:
                    type: string
                    description: balance defines the tokens to receive at completion.
                description: >-
                  UnbondingDelegationEntry defines an unbonding object with
                  relevant metadata.
              description: entries are the unbonding delegation entries.
          description: >-
            UnbondingDelegation stores all of a single delegator's unbonding
            bonds

            for a single validator in an time-ordered list.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryUnbondingDelegatorDelegationsResponse is response type for the
      Query/UnbondingDelegatorDelegations RPC method.
  cosmos.staking.v1beta1.QueryDelegatorValidatorResponse:
    type: object
    properties:
      validator:
        type: object
        properties:
          operator_address:
            type: string
            description: >-
              operator_address defines the address of the validator's operator;
              bech encoded in JSON.
          consensus_pubkey:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          jailed:
            type: boolean
            description: >-
              jailed defined whether the validator has been jailed from bonded
              status or not.
          status:
            description: status is the validator status (bonded/unbonding/unbonded).
            type: string
            enum:
              - BOND_STATUS_UNSPECIFIED
              - BOND_STATUS_UNBONDED
              - BOND_STATUS_UNBONDING
              - BOND_STATUS_BONDED
            default: BOND_STATUS_UNSPECIFIED
          tokens:
            type: string
            description: tokens define the delegated tokens (incl. self-delegation).
          delegator_shares:
            type: string
            description: >-
              delegator_shares defines total shares issued to a validator's
              delegators.
          description:
            description: description defines the description terms for the validator.
            type: object
            properties:
              moniker:
                type: string
                description: moniker defines a human-readable name for the validator.
              identity:
                type: string
                description: >-
                  identity defines an optional identity signature (ex. UPort or
                  Keybase).
              website:
                type: string
                description: website defines an optional website link.
              security_contact:
                type: string
                description: >-
                  security_contact defines an optional email for security
                  contact.
              details:
                type: string
                description: details define other optional details.
          unbonding_height:
            type: string
            format: int64
            description: >-
              unbonding_height defines, if unbonding, the height at which this
              validator has begun unbonding.
          unbonding_time:
            type: string
            format: date-time
            description: >-
              unbonding_time defines, if unbonding, the min time for the
              validator to complete unbonding.
          commission:
            description: commission defines the commission parameters.
            type: object
            properties:
              commission_rates:
                description: >-
                  commission_rates defines the initial commission rates to be
                  used for creating a validator.
                type: object
                properties:
                  rate:
                    type: string
                    description: >-
                      rate is the commission rate charged to delegators, as a
                      fraction.
                  max_rate:
                    type: string
                    description: >-
                      max_rate defines the maximum commission rate which
                      validator can ever charge, as a fraction.
                  max_change_rate:
                    type: string
                    description: >-
                      max_change_rate defines the maximum daily increase of the
                      validator commission, as a fraction.
              update_time:
                type: string
                format: date-time
                description: update_time is the last time the commission rate was changed.
          min_self_delegation:
            type: string
            description: >-
              min_self_delegation is the validator's self declared minimum self
              delegation.


              Since: cosmos-sdk 0.46
        description: >-
          Validator defines a validator, together with the total amount of the

          Validator's bond shares and their exchange rate to coins. Slashing
          results in

          a decrease in the exchange rate, allowing correct calculation of
          future

          undelegations without iterating over delegators. When coins are
          delegated to

          this validator, the validator is credited with a delegation whose
          number of

          bond shares is based on the amount of coins delegated divided by the
          current

          exchange rate. Voting power can be calculated as total bonded shares

          multiplied by exchange rate.
    description: |-
      QueryDelegatorValidatorResponse response type for the
      Query/DelegatorValidator RPC method.
  cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse:
    type: object
    properties:
      validators:
        type: array
        items:
          type: object
          properties:
            operator_address:
              type: string
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
            consensus_pubkey:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            jailed:
              type: boolean
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
            status:
              description: status is the validator status (bonded/unbonding/unbonded).
              type: string
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              default: BOND_STATUS_UNSPECIFIED
            tokens:
              type: string
              description: tokens define the delegated tokens (incl. self-delegation).
            delegator_shares:
              type: string
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
            description:
              description: description defines the description terms for the validator.
              type: object
              properties:
                moniker:
                  type: string
                  description: moniker defines a human-readable name for the validator.
                identity:
                  type: string
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                website:
                  type: string
                  description: website defines an optional website link.
                security_contact:
                  type: string
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                details:
                  type: string
                  description: details define other optional details.
            unbonding_height:
              type: string
              format: int64
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
            unbonding_time:
              type: string
              format: date-time
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
            commission:
              description: commission defines the commission parameters.
              type: object
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  type: object
                  properties:
                    rate:
                      type: string
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                    max_rate:
                      type: string
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                    max_change_rate:
                      type: string
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                update_time:
                  type: string
                  format: date-time
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
            min_self_delegation:
              type: string
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.


                Since: cosmos-sdk 0.46
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
        description: validators defines the validators' info of a delegator.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryDelegatorValidatorsResponse is response type for the
      Query/DelegatorValidators RPC method.
  cosmos.staking.v1beta1.QueryHistoricalInfoResponse:
    type: object
    properties:
      hist:
        description: hist defines the historical info at the given height.
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                title: prev block info
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                format: byte
            description: Header defines the structure of a block header.
          valset:
            type: array
            items:
              type: object
              properties:
                operator_address:
                  type: string
                  description: >-
                    operator_address defines the address of the validator's
                    operator; bech encoded in JSON.
                consensus_pubkey:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                jailed:
                  type: boolean
                  description: >-
                    jailed defined whether the validator has been jailed from
                    bonded status or not.
                status:
                  description: status is the validator status (bonded/unbonding/unbonded).
                  type: string
                  enum:
                    - BOND_STATUS_UNSPECIFIED
                    - BOND_STATUS_UNBONDED
                    - BOND_STATUS_UNBONDING
                    - BOND_STATUS_BONDED
                  default: BOND_STATUS_UNSPECIFIED
                tokens:
                  type: string
                  description: tokens define the delegated tokens (incl. self-delegation).
                delegator_shares:
                  type: string
                  description: >-
                    delegator_shares defines total shares issued to a
                    validator's delegators.
                description:
                  description: description defines the description terms for the validator.
                  type: object
                  properties:
                    moniker:
                      type: string
                      description: moniker defines a human-readable name for the validator.
                    identity:
                      type: string
                      description: >-
                        identity defines an optional identity signature (ex.
                        UPort or Keybase).
                    website:
                      type: string
                      description: website defines an optional website link.
                    security_contact:
                      type: string
                      description: >-
                        security_contact defines an optional email for security
                        contact.
                    details:
                      type: string
                      description: details define other optional details.
                unbonding_height:
                  type: string
                  format: int64
                  description: >-
                    unbonding_height defines, if unbonding, the height at which
                    this validator has begun unbonding.
                unbonding_time:
                  type: string
                  format: date-time
                  description: >-
                    unbonding_time defines, if unbonding, the min time for the
                    validator to complete unbonding.
                commission:
                  description: commission defines the commission parameters.
                  type: object
                  properties:
                    commission_rates:
                      description: >-
                        commission_rates defines the initial commission rates to
                        be used for creating a validator.
                      type: object
                      properties:
                        rate:
                          type: string
                          description: >-
                            rate is the commission rate charged to delegators,
                            as a fraction.
                        max_rate:
                          type: string
                          description: >-
                            max_rate defines the maximum commission rate which
                            validator can ever charge, as a fraction.
                        max_change_rate:
                          type: string
                          description: >-
                            max_change_rate defines the maximum daily increase
                            of the validator commission, as a fraction.
                    update_time:
                      type: string
                      format: date-time
                      description: >-
                        update_time is the last time the commission rate was
                        changed.
                min_self_delegation:
                  type: string
                  description: >-
                    min_self_delegation is the validator's self declared minimum
                    self delegation.


                    Since: cosmos-sdk 0.46
              description: >-
                Validator defines a validator, together with the total amount of
                the

                Validator's bond shares and their exchange rate to coins.
                Slashing results in

                a decrease in the exchange rate, allowing correct calculation of
                future

                undelegations without iterating over delegators. When coins are
                delegated to

                this validator, the validator is credited with a delegation
                whose number of

                bond shares is based on the amount of coins delegated divided by
                the current

                exchange rate. Voting power can be calculated as total bonded
                shares

                multiplied by exchange rate.
    description: >-
      QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo
      RPC

      method.
  cosmos.staking.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params holds all the parameters of this module.
        type: object
        properties:
          unbonding_time:
            type: string
            description: unbonding_time is the time duration of unbonding.
          max_validators:
            type: integer
            format: int64
            description: max_validators is the maximum number of validators.
          max_entries:
            type: integer
            format: int64
            description: >-
              max_entries is the max entries for either unbonding delegation or
              redelegation (per pair/trio).
          historical_entries:
            type: integer
            format: int64
            description: historical_entries is the number of historical entries to persist.
          bond_denom:
            type: string
            description: bond_denom defines the bondable coin denomination.
          min_commission_rate:
            type: string
            title: >-
              min_commission_rate is the chain-wide minimum commission rate that
              a validator can charge their delegators
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  cosmos.staking.v1beta1.QueryPoolResponse:
    type: object
    properties:
      pool:
        description: pool defines the pool info.
        type: object
        properties:
          not_bonded_tokens:
            type: string
          bonded_tokens:
            type: string
    description: QueryPoolResponse is response type for the Query/Pool RPC method.
  cosmos.staking.v1beta1.QueryRedelegationsResponse:
    type: object
    properties:
      redelegation_responses:
        type: array
        items:
          type: object
          properties:
            redelegation:
              type: object
              properties:
                delegator_address:
                  type: string
                  description: >-
                    delegator_address is the bech32-encoded address of the
                    delegator.
                validator_src_address:
                  type: string
                  description: >-
                    validator_src_address is the validator redelegation source
                    operator address.
                validator_dst_address:
                  type: string
                  description: >-
                    validator_dst_address is the validator redelegation
                    destination operator address.
                entries:
                  type: array
                  items:
                    type: object
                    properties:
                      creation_height:
                        type: string
                        format: int64
                        description: >-
                          creation_height  defines the height which the
                          redelegation took place.
                      completion_time:
                        type: string
                        format: date-time
                        description: >-
                          completion_time defines the unix time for redelegation
                          completion.
                      initial_balance:
                        type: string
                        description: >-
                          initial_balance defines the initial balance when
                          redelegation started.
                      shares_dst:
                        type: string
                        description: >-
                          shares_dst is the amount of destination-validator
                          shares created by redelegation.
                    description: >-
                      RedelegationEntry defines a redelegation object with
                      relevant metadata.
                  description: entries are the redelegation entries.
              description: >-
                Redelegation contains the list of a particular delegator's
                redelegating bonds

                from a particular source validator to a particular destination
                validator.
            entries:
              type: array
              items:
                type: object
                properties:
                  redelegation_entry:
                    type: object
                    properties:
                      creation_height:
                        type: string
                        format: int64
                        description: >-
                          creation_height  defines the height which the
                          redelegation took place.
                      completion_time:
                        type: string
                        format: date-time
                        description: >-
                          completion_time defines the unix time for redelegation
                          completion.
                      initial_balance:
                        type: string
                        description: >-
                          initial_balance defines the initial balance when
                          redelegation started.
                      shares_dst:
                        type: string
                        description: >-
                          shares_dst is the amount of destination-validator
                          shares created by redelegation.
                    description: >-
                      RedelegationEntry defines a redelegation object with
                      relevant metadata.
                  balance:
                    type: string
                description: >-
                  RedelegationEntryResponse is equivalent to a RedelegationEntry
                  except that it

                  contains a balance in addition to shares which is more
                  suitable for client

                  responses.
          description: >-
            RedelegationResponse is equivalent to a Redelegation except that its
            entries

            contain a balance in addition to shares which is more suitable for
            client

            responses.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryRedelegationsResponse is response type for the Query/Redelegations
      RPC

      method.
  cosmos.staking.v1beta1.QueryUnbondingDelegationResponse:
    type: object
    properties:
      unbond:
        type: object
        properties:
          delegator_address:
            type: string
            description: delegator_address is the bech32-encoded address of the delegator.
          validator_address:
            type: string
            description: validator_address is the bech32-encoded address of the validator.
          entries:
            type: array
            items:
              type: object
              properties:
                creation_height:
                  type: string
                  format: int64
                  description: >-
                    creation_height is the height which the unbonding took
                    place.
                completion_time:
                  type: string
                  format: date-time
                  description: completion_time is the unix time for unbonding completion.
                initial_balance:
                  type: string
                  description: >-
                    initial_balance defines the tokens initially scheduled to
                    receive at completion.
                balance:
                  type: string
                  description: balance defines the tokens to receive at completion.
              description: >-
                UnbondingDelegationEntry defines an unbonding object with
                relevant metadata.
            description: entries are the unbonding delegation entries.
        description: |-
          UnbondingDelegation stores all of a single delegator's unbonding bonds
          for a single validator in an time-ordered list.
    description: |-
      QueryDelegationResponse is response type for the Query/UnbondingDelegation
      RPC method.
  cosmos.staking.v1beta1.QueryValidatorDelegationsResponse:
    type: object
    properties:
      delegation_responses:
        type: array
        items:
          type: object
          properties:
            delegation:
              type: object
              properties:
                delegator_address:
                  type: string
                  description: >-
                    delegator_address is the bech32-encoded address of the
                    delegator.
                validator_address:
                  type: string
                  description: >-
                    validator_address is the bech32-encoded address of the
                    validator.
                shares:
                  type: string
                  description: shares define the delegation shares received.
              description: >-
                Delegation represents the bond with tokens held by an account.
                It is

                owned by one delegator, and is associated with the voting power
                of one

                validator.
            balance:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          description: >-
            DelegationResponse is equivalent to Delegation except that it
            contains a

            balance in addition to shares which is more suitable for client
            responses.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: |-
      QueryValidatorDelegationsResponse is response type for the
      Query/ValidatorDelegations RPC method
  cosmos.staking.v1beta1.QueryValidatorResponse:
    type: object
    properties:
      validator:
        type: object
        properties:
          operator_address:
            type: string
            description: >-
              operator_address defines the address of the validator's operator;
              bech encoded in JSON.
          consensus_pubkey:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          jailed:
            type: boolean
            description: >-
              jailed defined whether the validator has been jailed from bonded
              status or not.
          status:
            description: status is the validator status (bonded/unbonding/unbonded).
            type: string
            enum:
              - BOND_STATUS_UNSPECIFIED
              - BOND_STATUS_UNBONDED
              - BOND_STATUS_UNBONDING
              - BOND_STATUS_BONDED
            default: BOND_STATUS_UNSPECIFIED
          tokens:
            type: string
            description: tokens define the delegated tokens (incl. self-delegation).
          delegator_shares:
            type: string
            description: >-
              delegator_shares defines total shares issued to a validator's
              delegators.
          description:
            description: description defines the description terms for the validator.
            type: object
            properties:
              moniker:
                type: string
                description: moniker defines a human-readable name for the validator.
              identity:
                type: string
                description: >-
                  identity defines an optional identity signature (ex. UPort or
                  Keybase).
              website:
                type: string
                description: website defines an optional website link.
              security_contact:
                type: string
                description: >-
                  security_contact defines an optional email for security
                  contact.
              details:
                type: string
                description: details define other optional details.
          unbonding_height:
            type: string
            format: int64
            description: >-
              unbonding_height defines, if unbonding, the height at which this
              validator has begun unbonding.
          unbonding_time:
            type: string
            format: date-time
            description: >-
              unbonding_time defines, if unbonding, the min time for the
              validator to complete unbonding.
          commission:
            description: commission defines the commission parameters.
            type: object
            properties:
              commission_rates:
                description: >-
                  commission_rates defines the initial commission rates to be
                  used for creating a validator.
                type: object
                properties:
                  rate:
                    type: string
                    description: >-
                      rate is the commission rate charged to delegators, as a
                      fraction.
                  max_rate:
                    type: string
                    description: >-
                      max_rate defines the maximum commission rate which
                      validator can ever charge, as a fraction.
                  max_change_rate:
                    type: string
                    description: >-
                      max_change_rate defines the maximum daily increase of the
                      validator commission, as a fraction.
              update_time:
                type: string
                format: date-time
                description: update_time is the last time the commission rate was changed.
          min_self_delegation:
            type: string
            description: >-
              min_self_delegation is the validator's self declared minimum self
              delegation.


              Since: cosmos-sdk 0.46
        description: >-
          Validator defines a validator, together with the total amount of the

          Validator's bond shares and their exchange rate to coins. Slashing
          results in

          a decrease in the exchange rate, allowing correct calculation of
          future

          undelegations without iterating over delegators. When coins are
          delegated to

          this validator, the validator is credited with a delegation whose
          number of

          bond shares is based on the amount of coins delegated divided by the
          current

          exchange rate. Voting power can be calculated as total bonded shares

          multiplied by exchange rate.
    title: QueryValidatorResponse is response type for the Query/Validator RPC method
  cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse:
    type: object
    properties:
      unbonding_responses:
        type: array
        items:
          type: object
          properties:
            delegator_address:
              type: string
              description: >-
                delegator_address is the bech32-encoded address of the
                delegator.
            validator_address:
              type: string
              description: >-
                validator_address is the bech32-encoded address of the
                validator.
            entries:
              type: array
              items:
                type: object
                properties:
                  creation_height:
                    type: string
                    format: int64
                    description: >-
                      creation_height is the height which the unbonding took
                      place.
                  completion_time:
                    type: string
                    format: date-time
                    description: completion_time is the unix time for unbonding completion.
                  initial_balance:
                    type: string
                    description: >-
                      initial_balance defines the tokens initially scheduled to
                      receive at completion.
                  balance:
                    type: string
                    description: balance defines the tokens to receive at completion.
                description: >-
                  UnbondingDelegationEntry defines an unbonding object with
                  relevant metadata.
              description: entries are the unbonding delegation entries.
          description: >-
            UnbondingDelegation stores all of a single delegator's unbonding
            bonds

            for a single validator in an time-ordered list.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryValidatorUnbondingDelegationsResponse is response type for the
      Query/ValidatorUnbondingDelegations RPC method.
  cosmos.staking.v1beta1.QueryValidatorsResponse:
    type: object
    properties:
      validators:
        type: array
        items:
          type: object
          properties:
            operator_address:
              type: string
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
            consensus_pubkey:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            jailed:
              type: boolean
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
            status:
              description: status is the validator status (bonded/unbonding/unbonded).
              type: string
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              default: BOND_STATUS_UNSPECIFIED
            tokens:
              type: string
              description: tokens define the delegated tokens (incl. self-delegation).
            delegator_shares:
              type: string
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
            description:
              description: description defines the description terms for the validator.
              type: object
              properties:
                moniker:
                  type: string
                  description: moniker defines a human-readable name for the validator.
                identity:
                  type: string
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                website:
                  type: string
                  description: website defines an optional website link.
                security_contact:
                  type: string
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                details:
                  type: string
                  description: details define other optional details.
            unbonding_height:
              type: string
              format: int64
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
            unbonding_time:
              type: string
              format: date-time
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
            commission:
              description: commission defines the commission parameters.
              type: object
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  type: object
                  properties:
                    rate:
                      type: string
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                    max_rate:
                      type: string
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                    max_change_rate:
                      type: string
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                update_time:
                  type: string
                  format: date-time
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
            min_self_delegation:
              type: string
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.


                Since: cosmos-sdk 0.46
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
        description: validators contains all the queried validators.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: >-
      QueryValidatorsResponse is response type for the Query/Validators RPC
      method
  cosmos.staking.v1beta1.Redelegation:
    type: object
    properties:
      delegator_address:
        type: string
        description: delegator_address is the bech32-encoded address of the delegator.
      validator_src_address:
        type: string
        description: >-
          validator_src_address is the validator redelegation source operator
          address.
      validator_dst_address:
        type: string
        description: >-
          validator_dst_address is the validator redelegation destination
          operator address.
      entries:
        type: array
        items:
          type: object
          properties:
            creation_height:
              type: string
              format: int64
              description: >-
                creation_height  defines the height which the redelegation took
                place.
            completion_time:
              type: string
              format: date-time
              description: >-
                completion_time defines the unix time for redelegation
                completion.
            initial_balance:
              type: string
              description: >-
                initial_balance defines the initial balance when redelegation
                started.
            shares_dst:
              type: string
              description: >-
                shares_dst is the amount of destination-validator shares created
                by redelegation.
          description: >-
            RedelegationEntry defines a redelegation object with relevant
            metadata.
        description: entries are the redelegation entries.
    description: >-
      Redelegation contains the list of a particular delegator's redelegating
      bonds

      from a particular source validator to a particular destination validator.
  cosmos.staking.v1beta1.RedelegationEntry:
    type: object
    properties:
      creation_height:
        type: string
        format: int64
        description: creation_height  defines the height which the redelegation took place.
      completion_time:
        type: string
        format: date-time
        description: completion_time defines the unix time for redelegation completion.
      initial_balance:
        type: string
        description: initial_balance defines the initial balance when redelegation started.
      shares_dst:
        type: string
        description: >-
          shares_dst is the amount of destination-validator shares created by
          redelegation.
    description: RedelegationEntry defines a redelegation object with relevant metadata.
  cosmos.staking.v1beta1.RedelegationEntryResponse:
    type: object
    properties:
      redelegation_entry:
        type: object
        properties:
          creation_height:
            type: string
            format: int64
            description: >-
              creation_height  defines the height which the redelegation took
              place.
          completion_time:
            type: string
            format: date-time
            description: completion_time defines the unix time for redelegation completion.
          initial_balance:
            type: string
            description: >-
              initial_balance defines the initial balance when redelegation
              started.
          shares_dst:
            type: string
            description: >-
              shares_dst is the amount of destination-validator shares created
              by redelegation.
        description: >-
          RedelegationEntry defines a redelegation object with relevant
          metadata.
      balance:
        type: string
    description: >-
      RedelegationEntryResponse is equivalent to a RedelegationEntry except that
      it

      contains a balance in addition to shares which is more suitable for client

      responses.
  cosmos.staking.v1beta1.RedelegationResponse:
    type: object
    properties:
      redelegation:
        type: object
        properties:
          delegator_address:
            type: string
            description: delegator_address is the bech32-encoded address of the delegator.
          validator_src_address:
            type: string
            description: >-
              validator_src_address is the validator redelegation source
              operator address.
          validator_dst_address:
            type: string
            description: >-
              validator_dst_address is the validator redelegation destination
              operator address.
          entries:
            type: array
            items:
              type: object
              properties:
                creation_height:
                  type: string
                  format: int64
                  description: >-
                    creation_height  defines the height which the redelegation
                    took place.
                completion_time:
                  type: string
                  format: date-time
                  description: >-
                    completion_time defines the unix time for redelegation
                    completion.
                initial_balance:
                  type: string
                  description: >-
                    initial_balance defines the initial balance when
                    redelegation started.
                shares_dst:
                  type: string
                  description: >-
                    shares_dst is the amount of destination-validator shares
                    created by redelegation.
              description: >-
                RedelegationEntry defines a redelegation object with relevant
                metadata.
            description: entries are the redelegation entries.
        description: >-
          Redelegation contains the list of a particular delegator's
          redelegating bonds

          from a particular source validator to a particular destination
          validator.
      entries:
        type: array
        items:
          type: object
          properties:
            redelegation_entry:
              type: object
              properties:
                creation_height:
                  type: string
                  format: int64
                  description: >-
                    creation_height  defines the height which the redelegation
                    took place.
                completion_time:
                  type: string
                  format: date-time
                  description: >-
                    completion_time defines the unix time for redelegation
                    completion.
                initial_balance:
                  type: string
                  description: >-
                    initial_balance defines the initial balance when
                    redelegation started.
                shares_dst:
                  type: string
                  description: >-
                    shares_dst is the amount of destination-validator shares
                    created by redelegation.
              description: >-
                RedelegationEntry defines a redelegation object with relevant
                metadata.
            balance:
              type: string
          description: >-
            RedelegationEntryResponse is equivalent to a RedelegationEntry
            except that it

            contains a balance in addition to shares which is more suitable for
            client

            responses.
    description: >-
      RedelegationResponse is equivalent to a Redelegation except that its
      entries

      contain a balance in addition to shares which is more suitable for client

      responses.
  cosmos.staking.v1beta1.UnbondingDelegation:
    type: object
    properties:
      delegator_address:
        type: string
        description: delegator_address is the bech32-encoded address of the delegator.
      validator_address:
        type: string
        description: validator_address is the bech32-encoded address of the validator.
      entries:
        type: array
        items:
          type: object
          properties:
            creation_height:
              type: string
              format: int64
              description: creation_height is the height which the unbonding took place.
            completion_time:
              type: string
              format: date-time
              description: completion_time is the unix time for unbonding completion.
            initial_balance:
              type: string
              description: >-
                initial_balance defines the tokens initially scheduled to
                receive at completion.
            balance:
              type: string
              description: balance defines the tokens to receive at completion.
          description: >-
            UnbondingDelegationEntry defines an unbonding object with relevant
            metadata.
        description: entries are the unbonding delegation entries.
    description: |-
      UnbondingDelegation stores all of a single delegator's unbonding bonds
      for a single validator in an time-ordered list.
  cosmos.staking.v1beta1.UnbondingDelegationEntry:
    type: object
    properties:
      creation_height:
        type: string
        format: int64
        description: creation_height is the height which the unbonding took place.
      completion_time:
        type: string
        format: date-time
        description: completion_time is the unix time for unbonding completion.
      initial_balance:
        type: string
        description: >-
          initial_balance defines the tokens initially scheduled to receive at
          completion.
      balance:
        type: string
        description: balance defines the tokens to receive at completion.
    description: >-
      UnbondingDelegationEntry defines an unbonding object with relevant
      metadata.
  cosmos.staking.v1beta1.Validator:
    type: object
    properties:
      operator_address:
        type: string
        description: >-
          operator_address defines the address of the validator's operator; bech
          encoded in JSON.
      consensus_pubkey:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      jailed:
        type: boolean
        description: >-
          jailed defined whether the validator has been jailed from bonded
          status or not.
      status:
        description: status is the validator status (bonded/unbonding/unbonded).
        type: string
        enum:
          - BOND_STATUS_UNSPECIFIED
          - BOND_STATUS_UNBONDED
          - BOND_STATUS_UNBONDING
          - BOND_STATUS_BONDED
        default: BOND_STATUS_UNSPECIFIED
      tokens:
        type: string
        description: tokens define the delegated tokens (incl. self-delegation).
      delegator_shares:
        type: string
        description: >-
          delegator_shares defines total shares issued to a validator's
          delegators.
      description:
        description: description defines the description terms for the validator.
        type: object
        properties:
          moniker:
            type: string
            description: moniker defines a human-readable name for the validator.
          identity:
            type: string
            description: >-
              identity defines an optional identity signature (ex. UPort or
              Keybase).
          website:
            type: string
            description: website defines an optional website link.
          security_contact:
            type: string
            description: security_contact defines an optional email for security contact.
          details:
            type: string
            description: details define other optional details.
      unbonding_height:
        type: string
        format: int64
        description: >-
          unbonding_height defines, if unbonding, the height at which this
          validator has begun unbonding.
      unbonding_time:
        type: string
        format: date-time
        description: >-
          unbonding_time defines, if unbonding, the min time for the validator
          to complete unbonding.
      commission:
        description: commission defines the commission parameters.
        type: object
        properties:
          commission_rates:
            description: >-
              commission_rates defines the initial commission rates to be used
              for creating a validator.
            type: object
            properties:
              rate:
                type: string
                description: >-
                  rate is the commission rate charged to delegators, as a
                  fraction.
              max_rate:
                type: string
                description: >-
                  max_rate defines the maximum commission rate which validator
                  can ever charge, as a fraction.
              max_change_rate:
                type: string
                description: >-
                  max_change_rate defines the maximum daily increase of the
                  validator commission, as a fraction.
          update_time:
            type: string
            format: date-time
            description: update_time is the last time the commission rate was changed.
      min_self_delegation:
        type: string
        description: >-
          min_self_delegation is the validator's self declared minimum self
          delegation.


          Since: cosmos-sdk 0.46
    description: >-
      Validator defines a validator, together with the total amount of the

      Validator's bond shares and their exchange rate to coins. Slashing results
      in

      a decrease in the exchange rate, allowing correct calculation of future

      undelegations without iterating over delegators. When coins are delegated
      to

      this validator, the validator is credited with a delegation whose number
      of

      bond shares is based on the amount of coins delegated divided by the
      current

      exchange rate. Voting power can be calculated as total bonded shares

      multiplied by exchange rate.
  cosmos.base.abci.v1beta1.ABCIMessageLog:
    type: object
    properties:
      msg_index:
        type: integer
        format: int64
      log:
        type: string
      events:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            attributes:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                  value:
                    type: string
                description: >-
                  Attribute defines an attribute wrapper where the key and value
                  are

                  strings instead of raw bytes.
          description: |-
            StringEvent defines en Event object wrapper where all the attributes
            contain key/value pairs that are strings instead of raw bytes.
        description: |-
          Events contains a slice of Event objects that were emitted during some
          execution.
    description: >-
      ABCIMessageLog defines a structure containing an indexed tx ABCI message
      log.
  cosmos.base.abci.v1beta1.Attribute:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
    description: |-
      Attribute defines an attribute wrapper where the key and value are
      strings instead of raw bytes.
  cosmos.base.abci.v1beta1.GasInfo:
    type: object
    properties:
      gas_wanted:
        type: string
        format: uint64
        description: GasWanted is the maximum units of work we allow this tx to perform.
      gas_used:
        type: string
        format: uint64
        description: GasUsed is the amount of gas actually consumed.
    description: GasInfo defines tx execution gas context.
  cosmos.base.abci.v1beta1.Result:
    type: object
    properties:
      data:
        type: string
        format: byte
        description: >-
          Data is any data returned from message or handler execution. It MUST
          be

          length prefixed in order to separate data from multiple message
          executions.

          Deprecated. This field is still populated, but prefer msg_response
          instead

          because it also contains the Msg response typeURL.
      log:
        type: string
        description: Log contains the log information from message or handler execution.
      events:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            attributes:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                    format: byte
                  value:
                    type: string
                    format: byte
                  index:
                    type: boolean
                description: >-
                  EventAttribute is a single key-value pair, associated with an
                  event.
          description: >-
            Event allows application developers to attach additional information
            to

            ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
            ResponseDeliverTx.

            Later, transactions may be queried using these events.
        description: >-
          Events contains a slice of Event objects that were emitted during
          message

          or handler execution.
      msg_responses:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: |-
          msg_responses contains the Msg handler responses type packed in Anys.

          Since: cosmos-sdk 0.46
    description: Result is the union of ResponseFormat and ResponseCheckTx.
  cosmos.base.abci.v1beta1.StringEvent:
    type: object
    properties:
      type:
        type: string
      attributes:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
          description: |-
            Attribute defines an attribute wrapper where the key and value are
            strings instead of raw bytes.
    description: |-
      StringEvent defines en Event object wrapper where all the attributes
      contain key/value pairs that are strings instead of raw bytes.
  cosmos.base.abci.v1beta1.TxResponse:
    type: object
    properties:
      height:
        type: string
        format: int64
        title: The block height
      txhash:
        type: string
        description: The transaction hash.
      codespace:
        type: string
        title: Namespace for the Code
      code:
        type: integer
        format: int64
        description: Response code.
      data:
        type: string
        description: 'Result bytes, if any.'
      raw_log:
        type: string
        description: |-
          The output of the application's logger (raw string). May be
          non-deterministic.
      logs:
        type: array
        items:
          type: object
          properties:
            msg_index:
              type: integer
              format: int64
            log:
              type: string
            events:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  attributes:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                      description: >-
                        Attribute defines an attribute wrapper where the key and
                        value are

                        strings instead of raw bytes.
                description: >-
                  StringEvent defines en Event object wrapper where all the
                  attributes

                  contain key/value pairs that are strings instead of raw bytes.
              description: >-
                Events contains a slice of Event objects that were emitted
                during some

                execution.
          description: >-
            ABCIMessageLog defines a structure containing an indexed tx ABCI
            message log.
        description: >-
          The output of the application's logger (typed). May be
          non-deterministic.
      info:
        type: string
        description: Additional information. May be non-deterministic.
      gas_wanted:
        type: string
        format: int64
        description: Amount of gas requested for transaction.
      gas_used:
        type: string
        format: int64
        description: Amount of gas consumed by transaction.
      tx:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      timestamp:
        type: string
        description: >-
          Time of the previous block. For heights > 1, it's the weighted median
          of

          the timestamps of the valid votes in the block.LastCommit. For height
          == 1,

          it's genesis time.
      events:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            attributes:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                    format: byte
                  value:
                    type: string
                    format: byte
                  index:
                    type: boolean
                description: >-
                  EventAttribute is a single key-value pair, associated with an
                  event.
          description: >-
            Event allows application developers to attach additional information
            to

            ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
            ResponseDeliverTx.

            Later, transactions may be queried using these events.
        description: >-
          Events defines all the events emitted by processing a transaction.
          Note,

          these events include those emitted by processing all the messages and
          those

          emitted from the ante. Whereas Logs contains the events, with

          additional metadata, emitted only by processing the messages.


          Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
    description: >-
      TxResponse defines a structure containing relevant tx data and metadata.
      The

      tags are stringified and the log is JSON decoded.
  cosmos.crypto.multisig.v1beta1.CompactBitArray:
    type: object
    properties:
      extra_bits_stored:
        type: integer
        format: int64
      elems:
        type: string
        format: byte
    description: |-
      CompactBitArray is an implementation of a space efficient bit array.
      This is used to ensure that the encoded data takes up a minimal amount of
      space after proto encoding.
      This is not thread safe, and is not intended for concurrent usage.
  cosmos.tx.signing.v1beta1.SignMode:
    type: string
    enum:
      - SIGN_MODE_UNSPECIFIED
      - SIGN_MODE_DIRECT
      - SIGN_MODE_TEXTUAL
      - SIGN_MODE_DIRECT_AUX
      - SIGN_MODE_LEGACY_AMINO_JSON
      - SIGN_MODE_EIP_191
    default: SIGN_MODE_UNSPECIFIED
    description: |-
      SignMode represents a signing mode with its own security guarantees.

      This enum should be considered a registry of all known sign modes
      in the Cosmos ecosystem. Apps are not expected to support all known
      sign modes. Apps that would like to support custom  sign modes are
      encouraged to open a small PR against this file to add a new case
      to this SignMode enum describing their sign mode so that different
      apps have a consistent version of this enum.

       - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
      rejected.
       - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
      verified with raw bytes from Tx.
       - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
      human-readable textual representation on top of the binary representation
      from SIGN_MODE_DIRECT. It is currently not supported.
       - SIGN_MODE_DIRECT_AUX: SIGN_MODE_DIRECT_AUX specifies a signing mode which uses
      SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not
      require signers signing over other signers' `signer_info`. It also allows
      for adding Tips in transactions.

      Since: cosmos-sdk 0.46
       - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
      Amino JSON and will be removed in the future.
       - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
      SDK. Ref: https://eips.ethereum.org/EIPS/eip-191

      Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,
      but is not implemented on the SDK by default. To enable EIP-191, you need
      to pass a custom `TxConfig` that has an implementation of
      `SignModeHandler` for EIP-191. The SDK may decide to fully support
      EIP-191 in the future.

      Since: cosmos-sdk 0.45.2
  cosmos.tx.v1beta1.AuthInfo:
    type: object
    properties:
      signer_infos:
        type: array
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.SignerInfo'
        description: >-
          signer_infos defines the signing modes for the required signers. The
          number

          and order of elements must match the required signers from TxBody's

          messages. The first element is the primary signer and the one which
          pays

          the fee.
      fee:
        description: >-
          Fee is the fee and gas limit for the transaction. The first signer is
          the

          primary signer and the one which pays the fee. The fee can be
          calculated

          based on the cost of evaluating the body and doing signature
          verification

          of the signers. This can be estimated via simulation.
        type: object
        properties:
          amount:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: amount is the amount of coins to be paid as a fee
          gas_limit:
            type: string
            format: uint64
            title: >-
              gas_limit is the maximum gas that can be used in transaction
              processing

              before an out of gas error occurs
          payer:
            type: string
            description: >-
              if unset, the first signer is responsible for paying the fees. If
              set, the specified account must pay the fees.

              the payer must be a tx signer (and thus have signed this field in
              AuthInfo).

              setting this field does *not* change the ordering of required
              signers for the transaction.
          granter:
            type: string
            title: >-
              if set, the fee payer (either the first signer or the value of the
              payer field) requests that a fee grant be used

              to pay fees instead of the fee payer's own balance. If an
              appropriate fee grant does not exist or the chain does

              not support fee grants, this will fail
      tip:
        description: >-
          Tip is the optional tip used for transactions fees paid in another
          denom.


          This field is ignored if the chain didn't enable tips, i.e. didn't add
          the

          `TipDecorator` in its posthandler.


          Since: cosmos-sdk 0.46
        type: object
        properties:
          amount:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: amount is the amount of the tip
          tipper:
            type: string
            title: tipper is the address of the account paying for the tip
    description: |-
      AuthInfo describes the fee and signer modes that are used to sign a
      transaction.
  cosmos.tx.v1beta1.BroadcastMode:
    type: string
    enum:
      - BROADCAST_MODE_UNSPECIFIED
      - BROADCAST_MODE_BLOCK
      - BROADCAST_MODE_SYNC
      - BROADCAST_MODE_ASYNC
    default: BROADCAST_MODE_UNSPECIFIED
    description: >-
      BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC
      method.

       - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
       - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
      the tx to be committed in a block.
       - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
      a CheckTx execution response only.
       - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
      immediately.
  cosmos.tx.v1beta1.BroadcastTxRequest:
    type: object
    properties:
      tx_bytes:
        type: string
        format: byte
        description: tx_bytes is the raw transaction.
      mode:
        type: string
        enum:
          - BROADCAST_MODE_UNSPECIFIED
          - BROADCAST_MODE_BLOCK
          - BROADCAST_MODE_SYNC
          - BROADCAST_MODE_ASYNC
        default: BROADCAST_MODE_UNSPECIFIED
        description: >-
          BroadcastMode specifies the broadcast mode for the TxService.Broadcast
          RPC method.

           - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
           - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
          the tx to be committed in a block.
           - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
          a CheckTx execution response only.
           - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
          immediately.
    description: |-
      BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
      RPC method.
  cosmos.tx.v1beta1.BroadcastTxResponse:
    type: object
    properties:
      tx_response:
        type: object
        properties:
          height:
            type: string
            format: int64
            title: The block height
          txhash:
            type: string
            description: The transaction hash.
          codespace:
            type: string
            title: Namespace for the Code
          code:
            type: integer
            format: int64
            description: Response code.
          data:
            type: string
            description: 'Result bytes, if any.'
          raw_log:
            type: string
            description: |-
              The output of the application's logger (raw string). May be
              non-deterministic.
          logs:
            type: array
            items:
              type: object
              properties:
                msg_index:
                  type: integer
                  format: int64
                log:
                  type: string
                events:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                      attributes:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                            value:
                              type: string
                          description: >-
                            Attribute defines an attribute wrapper where the key
                            and value are

                            strings instead of raw bytes.
                    description: >-
                      StringEvent defines en Event object wrapper where all the
                      attributes

                      contain key/value pairs that are strings instead of raw
                      bytes.
                  description: >-
                    Events contains a slice of Event objects that were emitted
                    during some

                    execution.
              description: >-
                ABCIMessageLog defines a structure containing an indexed tx ABCI
                message log.
            description: >-
              The output of the application's logger (typed). May be
              non-deterministic.
          info:
            type: string
            description: Additional information. May be non-deterministic.
          gas_wanted:
            type: string
            format: int64
            description: Amount of gas requested for transaction.
          gas_used:
            type: string
            format: int64
            description: Amount of gas consumed by transaction.
          tx:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          timestamp:
            type: string
            description: >-
              Time of the previous block. For heights > 1, it's the weighted
              median of

              the timestamps of the valid votes in the block.LastCommit. For
              height == 1,

              it's genesis time.
          events:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                attributes:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                      value:
                        type: string
                        format: byte
                      index:
                        type: boolean
                    description: >-
                      EventAttribute is a single key-value pair, associated with
                      an event.
              description: >-
                Event allows application developers to attach additional
                information to

                ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                ResponseDeliverTx.

                Later, transactions may be queried using these events.
            description: >-
              Events defines all the events emitted by processing a transaction.
              Note,

              these events include those emitted by processing all the messages
              and those

              emitted from the ante. Whereas Logs contains the events, with

              additional metadata, emitted only by processing the messages.


              Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
        description: >-
          TxResponse defines a structure containing relevant tx data and
          metadata. The

          tags are stringified and the log is JSON decoded.
    description: |-
      BroadcastTxResponse is the response type for the
      Service.BroadcastTx method.
  cosmos.tx.v1beta1.Fee:
    type: object
    properties:
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: amount is the amount of coins to be paid as a fee
      gas_limit:
        type: string
        format: uint64
        title: >-
          gas_limit is the maximum gas that can be used in transaction
          processing

          before an out of gas error occurs
      payer:
        type: string
        description: >-
          if unset, the first signer is responsible for paying the fees. If set,
          the specified account must pay the fees.

          the payer must be a tx signer (and thus have signed this field in
          AuthInfo).

          setting this field does *not* change the ordering of required signers
          for the transaction.
      granter:
        type: string
        title: >-
          if set, the fee payer (either the first signer or the value of the
          payer field) requests that a fee grant be used

          to pay fees instead of the fee payer's own balance. If an appropriate
          fee grant does not exist or the chain does

          not support fee grants, this will fail
    description: >-
      Fee includes the amount of coins paid in fees and the maximum

      gas to be used by the transaction. The ratio yields an effective
      "gasprice",

      which must be above some miminum to be accepted into the mempool.
  cosmos.tx.v1beta1.GetBlockWithTxsResponse:
    type: object
    properties:
      txs:
        type: array
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: txs are the transactions in the block.
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      block:
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                format: byte
            description: Header defines the structure of a block header.
          data:
            type: object
            properties:
              txs:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
            title: Data contains the set of transactions included in the block
          evidence:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    duplicate_vote_evidence:
                      type: object
                      properties:
                        vote_a:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        vote_b:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        total_voting_power:
                          type: string
                          format: int64
                        validator_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                    light_client_attack_evidence:
                      type: object
                      properties:
                        conflicting_block:
                          type: object
                          properties:
                            signed_header:
                              type: object
                              properties:
                                header:
                                  type: object
                                  properties:
                                    version:
                                      title: basic block info
                                      type: object
                                      properties:
                                        block:
                                          type: string
                                          format: uint64
                                        app:
                                          type: string
                                          format: uint64
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                    chain_id:
                                      type: string
                                    height:
                                      type: string
                                      format: int64
                                    time:
                                      type: string
                                      format: date-time
                                    last_block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    last_commit_hash:
                                      type: string
                                      format: byte
                                      title: hashes of block data
                                    data_hash:
                                      type: string
                                      format: byte
                                    validators_hash:
                                      type: string
                                      format: byte
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                    next_validators_hash:
                                      type: string
                                      format: byte
                                    consensus_hash:
                                      type: string
                                      format: byte
                                    app_hash:
                                      type: string
                                      format: byte
                                    last_results_hash:
                                      type: string
                                      format: byte
                                    evidence_hash:
                                      type: string
                                      format: byte
                                      title: consensus info
                                    proposer_address:
                                      type: string
                                      format: byte
                                  description: >-
                                    Header defines the structure of a block
                                    header.
                                commit:
                                  type: object
                                  properties:
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    signatures:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          block_id_flag:
                                            type: string
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            title: >-
                                              BlockIdFlag indicates which BlcokID the
                                              signature is for
                                          validator_address:
                                            type: string
                                            format: byte
                                          timestamp:
                                            type: string
                                            format: date-time
                                          signature:
                                            type: string
                                            format: byte
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                            validator_set:
                              type: object
                              properties:
                                validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                proposer:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                      format: byte
                                    pub_key:
                                      type: object
                                      properties:
                                        ed25519:
                                          type: string
                                          format: byte
                                        secp256k1:
                                          type: string
                                          format: byte
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Validators
                                    voting_power:
                                      type: string
                                      format: int64
                                    proposer_priority:
                                      type: string
                                      format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                        common_height:
                          type: string
                          format: int64
                        byzantine_validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        total_voting_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
          last_commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
      pagination:
        description: pagination defines a pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      GetBlockWithTxsResponse is the response type for the
      Service.GetBlockWithTxs method.


      Since: cosmos-sdk 0.45.2
  cosmos.tx.v1beta1.GetTxResponse:
    type: object
    properties:
      tx:
        $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: tx is the queried transaction.
      tx_response:
        type: object
        properties:
          height:
            type: string
            format: int64
            title: The block height
          txhash:
            type: string
            description: The transaction hash.
          codespace:
            type: string
            title: Namespace for the Code
          code:
            type: integer
            format: int64
            description: Response code.
          data:
            type: string
            description: 'Result bytes, if any.'
          raw_log:
            type: string
            description: |-
              The output of the application's logger (raw string). May be
              non-deterministic.
          logs:
            type: array
            items:
              type: object
              properties:
                msg_index:
                  type: integer
                  format: int64
                log:
                  type: string
                events:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                      attributes:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                            value:
                              type: string
                          description: >-
                            Attribute defines an attribute wrapper where the key
                            and value are

                            strings instead of raw bytes.
                    description: >-
                      StringEvent defines en Event object wrapper where all the
                      attributes

                      contain key/value pairs that are strings instead of raw
                      bytes.
                  description: >-
                    Events contains a slice of Event objects that were emitted
                    during some

                    execution.
              description: >-
                ABCIMessageLog defines a structure containing an indexed tx ABCI
                message log.
            description: >-
              The output of the application's logger (typed). May be
              non-deterministic.
          info:
            type: string
            description: Additional information. May be non-deterministic.
          gas_wanted:
            type: string
            format: int64
            description: Amount of gas requested for transaction.
          gas_used:
            type: string
            format: int64
            description: Amount of gas consumed by transaction.
          tx:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          timestamp:
            type: string
            description: >-
              Time of the previous block. For heights > 1, it's the weighted
              median of

              the timestamps of the valid votes in the block.LastCommit. For
              height == 1,

              it's genesis time.
          events:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                attributes:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                      value:
                        type: string
                        format: byte
                      index:
                        type: boolean
                    description: >-
                      EventAttribute is a single key-value pair, associated with
                      an event.
              description: >-
                Event allows application developers to attach additional
                information to

                ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                ResponseDeliverTx.

                Later, transactions may be queried using these events.
            description: >-
              Events defines all the events emitted by processing a transaction.
              Note,

              these events include those emitted by processing all the messages
              and those

              emitted from the ante. Whereas Logs contains the events, with

              additional metadata, emitted only by processing the messages.


              Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
        description: >-
          TxResponse defines a structure containing relevant tx data and
          metadata. The

          tags are stringified and the log is JSON decoded.
    description: GetTxResponse is the response type for the Service.GetTx method.
  cosmos.tx.v1beta1.GetTxsEventResponse:
    type: object
    properties:
      txs:
        type: array
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: txs is the list of queried transactions.
      tx_responses:
        type: array
        items:
          type: object
          properties:
            height:
              type: string
              format: int64
              title: The block height
            txhash:
              type: string
              description: The transaction hash.
            codespace:
              type: string
              title: Namespace for the Code
            code:
              type: integer
              format: int64
              description: Response code.
            data:
              type: string
              description: 'Result bytes, if any.'
            raw_log:
              type: string
              description: |-
                The output of the application's logger (raw string). May be
                non-deterministic.
            logs:
              type: array
              items:
                type: object
                properties:
                  msg_index:
                    type: integer
                    format: int64
                  log:
                    type: string
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                              value:
                                type: string
                            description: >-
                              Attribute defines an attribute wrapper where the
                              key and value are

                              strings instead of raw bytes.
                      description: >-
                        StringEvent defines en Event object wrapper where all
                        the attributes

                        contain key/value pairs that are strings instead of raw
                        bytes.
                    description: >-
                      Events contains a slice of Event objects that were emitted
                      during some

                      execution.
                description: >-
                  ABCIMessageLog defines a structure containing an indexed tx
                  ABCI message log.
              description: >-
                The output of the application's logger (typed). May be
                non-deterministic.
            info:
              type: string
              description: Additional information. May be non-deterministic.
            gas_wanted:
              type: string
              format: int64
              description: Amount of gas requested for transaction.
            gas_used:
              type: string
              format: int64
              description: Amount of gas consumed by transaction.
            tx:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            timestamp:
              type: string
              description: >-
                Time of the previous block. For heights > 1, it's the weighted
                median of

                the timestamps of the valid votes in the block.LastCommit. For
                height == 1,

                it's genesis time.
            events:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  attributes:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                          format: byte
                        value:
                          type: string
                          format: byte
                        index:
                          type: boolean
                      description: >-
                        EventAttribute is a single key-value pair, associated
                        with an event.
                description: >-
                  Event allows application developers to attach additional
                  information to

                  ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                  ResponseDeliverTx.

                  Later, transactions may be queried using these events.
              description: >-
                Events defines all the events emitted by processing a
                transaction. Note,

                these events include those emitted by processing all the
                messages and those

                emitted from the ante. Whereas Logs contains the events, with

                additional metadata, emitted only by processing the messages.


                Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
          description: >-
            TxResponse defines a structure containing relevant tx data and
            metadata. The

            tags are stringified and the log is JSON decoded.
        description: tx_responses is the list of queried TxResponses.
      pagination:
        description: |-
          pagination defines a pagination for the response.
          Deprecated post v0.46.x: use total instead.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
      total:
        type: string
        format: uint64
        title: total is total number of results available
    description: |-
      GetTxsEventResponse is the response type for the Service.TxsByEvents
      RPC method.
  cosmos.tx.v1beta1.ModeInfo:
    type: object
    properties:
      single:
        title: single represents a single signer
        type: object
        properties:
          mode:
            title: mode is the signing mode of the single signer
            type: string
            enum:
              - SIGN_MODE_UNSPECIFIED
              - SIGN_MODE_DIRECT
              - SIGN_MODE_TEXTUAL
              - SIGN_MODE_DIRECT_AUX
              - SIGN_MODE_LEGACY_AMINO_JSON
              - SIGN_MODE_EIP_191
            default: SIGN_MODE_UNSPECIFIED
            description: >-
              SignMode represents a signing mode with its own security
              guarantees.


              This enum should be considered a registry of all known sign modes

              in the Cosmos ecosystem. Apps are not expected to support all
              known

              sign modes. Apps that would like to support custom  sign modes are

              encouraged to open a small PR against this file to add a new case

              to this SignMode enum describing their sign mode so that different

              apps have a consistent version of this enum.

               - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
              rejected.
               - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
              verified with raw bytes from Tx.
               - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
              human-readable textual representation on top of the binary
              representation

              from SIGN_MODE_DIRECT. It is currently not supported.
               - SIGN_MODE_DIRECT_AUX: SIGN_MODE_DIRECT_AUX specifies a signing mode which uses
              SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode
              does not

              require signers signing over other signers' `signer_info`. It also
              allows

              for adding Tips in transactions.


              Since: cosmos-sdk 0.46
               - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
              Amino JSON and will be removed in the future.
               - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
              SDK. Ref: https://eips.ethereum.org/EIPS/eip-191


              Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum
              variant,

              but is not implemented on the SDK by default. To enable EIP-191,
              you need

              to pass a custom `TxConfig` that has an implementation of

              `SignModeHandler` for EIP-191. The SDK may decide to fully support

              EIP-191 in the future.


              Since: cosmos-sdk 0.45.2
      multi:
        $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo.Multi'
        title: multi represents a nested multisig signer
    description: ModeInfo describes the signing mode of a single or nested multisig signer.
  cosmos.tx.v1beta1.ModeInfo.Multi:
    type: object
    properties:
      bitarray:
        title: bitarray specifies which keys within the multisig are signing
        type: object
        properties:
          extra_bits_stored:
            type: integer
            format: int64
          elems:
            type: string
            format: byte
        description: >-
          CompactBitArray is an implementation of a space efficient bit array.

          This is used to ensure that the encoded data takes up a minimal amount
          of

          space after proto encoding.

          This is not thread safe, and is not intended for concurrent usage.
      mode_infos:
        type: array
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo'
        title: |-
          mode_infos is the corresponding modes of the signers of the multisig
          which could include nested multisig public keys
    title: Multi is the mode info for a multisig public key
  cosmos.tx.v1beta1.ModeInfo.Single:
    type: object
    properties:
      mode:
        title: mode is the signing mode of the single signer
        type: string
        enum:
          - SIGN_MODE_UNSPECIFIED
          - SIGN_MODE_DIRECT
          - SIGN_MODE_TEXTUAL
          - SIGN_MODE_DIRECT_AUX
          - SIGN_MODE_LEGACY_AMINO_JSON
          - SIGN_MODE_EIP_191
        default: SIGN_MODE_UNSPECIFIED
        description: >-
          SignMode represents a signing mode with its own security guarantees.


          This enum should be considered a registry of all known sign modes

          in the Cosmos ecosystem. Apps are not expected to support all known

          sign modes. Apps that would like to support custom  sign modes are

          encouraged to open a small PR against this file to add a new case

          to this SignMode enum describing their sign mode so that different

          apps have a consistent version of this enum.

           - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
          rejected.
           - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
          verified with raw bytes from Tx.
           - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
          human-readable textual representation on top of the binary
          representation

          from SIGN_MODE_DIRECT. It is currently not supported.
           - SIGN_MODE_DIRECT_AUX: SIGN_MODE_DIRECT_AUX specifies a signing mode which uses
          SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does
          not

          require signers signing over other signers' `signer_info`. It also
          allows

          for adding Tips in transactions.


          Since: cosmos-sdk 0.46
           - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
          Amino JSON and will be removed in the future.
           - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
          SDK. Ref: https://eips.ethereum.org/EIPS/eip-191


          Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,

          but is not implemented on the SDK by default. To enable EIP-191, you
          need

          to pass a custom `TxConfig` that has an implementation of

          `SignModeHandler` for EIP-191. The SDK may decide to fully support

          EIP-191 in the future.


          Since: cosmos-sdk 0.45.2
    title: |-
      Single is the mode info for a single signer. It is structured as a message
      to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
      future
  cosmos.tx.v1beta1.OrderBy:
    type: string
    enum:
      - ORDER_BY_UNSPECIFIED
      - ORDER_BY_ASC
      - ORDER_BY_DESC
    default: ORDER_BY_UNSPECIFIED
    description: >-
      - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting
      order. OrderBy defaults to ASC in this case.
       - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order
       - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
    title: OrderBy defines the sorting order
  cosmos.tx.v1beta1.SignerInfo:
    type: object
    properties:
      public_key:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      mode_info:
        $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo'
        title: |-
          mode_info describes the signing mode of the signer and is a nested
          structure to support nested multisig pubkey's
      sequence:
        type: string
        format: uint64
        description: >-
          sequence is the sequence of the account, which describes the

          number of committed transactions signed by a given address. It is used
          to

          prevent replay attacks.
    description: |-
      SignerInfo describes the public key and signing mode of a single top-level
      signer.
  cosmos.tx.v1beta1.SimulateRequest:
    type: object
    properties:
      tx:
        $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: |-
          tx is the transaction to simulate.
          Deprecated. Send raw tx bytes instead.
      tx_bytes:
        type: string
        format: byte
        description: |-
          tx_bytes is the raw transaction.

          Since: cosmos-sdk 0.43
    description: |-
      SimulateRequest is the request type for the Service.Simulate
      RPC method.
  cosmos.tx.v1beta1.SimulateResponse:
    type: object
    properties:
      gas_info:
        description: gas_info is the information about gas used in the simulation.
        type: object
        properties:
          gas_wanted:
            type: string
            format: uint64
            description: >-
              GasWanted is the maximum units of work we allow this tx to
              perform.
          gas_used:
            type: string
            format: uint64
            description: GasUsed is the amount of gas actually consumed.
      result:
        description: result is the result of the simulation.
        type: object
        properties:
          data:
            type: string
            format: byte
            description: >-
              Data is any data returned from message or handler execution. It
              MUST be

              length prefixed in order to separate data from multiple message
              executions.

              Deprecated. This field is still populated, but prefer msg_response
              instead

              because it also contains the Msg response typeURL.
          log:
            type: string
            description: >-
              Log contains the log information from message or handler
              execution.
          events:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                attributes:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                      value:
                        type: string
                        format: byte
                      index:
                        type: boolean
                    description: >-
                      EventAttribute is a single key-value pair, associated with
                      an event.
              description: >-
                Event allows application developers to attach additional
                information to

                ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                ResponseDeliverTx.

                Later, transactions may be queried using these events.
            description: >-
              Events contains a slice of Event objects that were emitted during
              message

              or handler execution.
          msg_responses:
            type: array
            items:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            description: >-
              msg_responses contains the Msg handler responses type packed in
              Anys.


              Since: cosmos-sdk 0.46
    description: |-
      SimulateResponse is the response type for the
      Service.SimulateRPC method.
  cosmos.tx.v1beta1.Tip:
    type: object
    properties:
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: amount is the amount of the tip
      tipper:
        type: string
        title: tipper is the address of the account paying for the tip
    description: |-
      Tip is the tip used for meta-transactions.

      Since: cosmos-sdk 0.46
  cosmos.tx.v1beta1.Tx:
    type: object
    properties:
      body:
        title: body is the processable content of the transaction
        type: object
        properties:
          messages:
            type: array
            items:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            description: >-
              messages is a list of messages to be executed. The required
              signers of

              those messages define the number and order of elements in
              AuthInfo's

              signer_infos and Tx's signatures. Each required signer address is
              added to

              the list only the first time it occurs.

              By convention, the first required signer (usually from the first
              message)

              is referred to as the primary signer and pays the fee for the
              whole

              transaction.
          memo:
            type: string
            description: >-
              memo is any arbitrary note/comment to be added to the transaction.

              WARNING: in clients, any publicly exposed text should not be
              called memo,

              but should be called `note` instead (see
              https://github.com/cosmos/cosmos-sdk/issues/9122).
          timeout_height:
            type: string
            format: uint64
            title: |-
              timeout is the block height after which this transaction will not
              be processed by the chain
          extension_options:
            type: array
            items:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            title: >-
              extension_options are arbitrary options that can be added by
              chains

              when the default options are not sufficient. If any of these are
              present

              and can't be handled, the transaction will be rejected
          non_critical_extension_options:
            type: array
            items:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            title: >-
              extension_options are arbitrary options that can be added by
              chains

              when the default options are not sufficient. If any of these are
              present

              and can't be handled, they will be ignored
        description: TxBody is the body of a transaction that all signers sign over.
      auth_info:
        $ref: '#/definitions/cosmos.tx.v1beta1.AuthInfo'
        title: |-
          auth_info is the authorization related content of the transaction,
          specifically signers, signer modes and fee
      signatures:
        type: array
        items:
          type: string
          format: byte
        description: >-
          signatures is a list of signatures that matches the length and order
          of

          AuthInfo's signer_infos to allow connecting signature meta information
          like

          public key and signing mode by position.
    description: Tx is the standard type used for broadcasting transactions.
  cosmos.tx.v1beta1.TxBody:
    type: object
    properties:
      messages:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: >-
          messages is a list of messages to be executed. The required signers of

          those messages define the number and order of elements in AuthInfo's

          signer_infos and Tx's signatures. Each required signer address is
          added to

          the list only the first time it occurs.

          By convention, the first required signer (usually from the first
          message)

          is referred to as the primary signer and pays the fee for the whole

          transaction.
      memo:
        type: string
        description: >-
          memo is any arbitrary note/comment to be added to the transaction.

          WARNING: in clients, any publicly exposed text should not be called
          memo,

          but should be called `note` instead (see
          https://github.com/cosmos/cosmos-sdk/issues/9122).
      timeout_height:
        type: string
        format: uint64
        title: |-
          timeout is the block height after which this transaction will not
          be processed by the chain
      extension_options:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        title: >-
          extension_options are arbitrary options that can be added by chains

          when the default options are not sufficient. If any of these are
          present

          and can't be handled, the transaction will be rejected
      non_critical_extension_options:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        title: >-
          extension_options are arbitrary options that can be added by chains

          when the default options are not sufficient. If any of these are
          present

          and can't be handled, they will be ignored
    description: TxBody is the body of a transaction that all signers sign over.
  tendermint.abci.Event:
    type: object
    properties:
      type:
        type: string
      attributes:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
              format: byte
            value:
              type: string
              format: byte
            index:
              type: boolean
          description: 'EventAttribute is a single key-value pair, associated with an event.'
    description: >-
      Event allows application developers to attach additional information to

      ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
      ResponseDeliverTx.

      Later, transactions may be queried using these events.
  tendermint.abci.EventAttribute:
    type: object
    properties:
      key:
        type: string
        format: byte
      value:
        type: string
        format: byte
      index:
        type: boolean
    description: 'EventAttribute is a single key-value pair, associated with an event.'
  cosmos.upgrade.v1beta1.ModuleVersion:
    type: object
    properties:
      name:
        type: string
        title: name of the app module
      version:
        type: string
        format: uint64
        title: consensus version of the app module
    description: |-
      ModuleVersion specifies a module and its consensus version.

      Since: cosmos-sdk 0.43
  cosmos.upgrade.v1beta1.Plan:
    type: object
    properties:
      name:
        type: string
        description: >-
          Sets the name for the upgrade. This name will be used by the upgraded

          version of the software to apply any special "on-upgrade" commands
          during

          the first BeginBlock method after the upgrade is applied. It is also
          used

          to detect whether a software version can handle a given upgrade. If no

          upgrade handler with this name has been set in the software, it will
          be

          assumed that the software is out-of-date when the upgrade Time or
          Height is

          reached and the software will exit.
      time:
        type: string
        format: date-time
        description: >-
          Deprecated: Time based upgrades have been deprecated. Time based
          upgrade logic

          has been removed from the SDK.

          If this field is not empty, an error will be thrown.
      height:
        type: string
        format: int64
        description: |-
          The height at which the upgrade must be performed.
          Only used if Time is not set.
      info:
        type: string
        title: |-
          Any application specific upgrade info to be included on-chain
          such as a git commit that validators could automatically upgrade to
      upgraded_client_state:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: >-
      Plan specifies information about a planned upgrade and when it should
      occur.
  cosmos.upgrade.v1beta1.QueryAppliedPlanResponse:
    type: object
    properties:
      height:
        type: string
        format: int64
        description: height is the block height at which the plan was applied.
    description: >-
      QueryAppliedPlanResponse is the response type for the Query/AppliedPlan
      RPC

      method.
  cosmos.upgrade.v1beta1.QueryAuthorityResponse:
    type: object
    properties:
      address:
        type: string
    description: 'Since: cosmos-sdk 0.46'
    title: QueryAuthorityResponse is the response type for Query/Authority
  cosmos.upgrade.v1beta1.QueryCurrentPlanResponse:
    type: object
    properties:
      plan:
        description: plan is the current upgrade plan.
        type: object
        properties:
          name:
            type: string
            description: >-
              Sets the name for the upgrade. This name will be used by the
              upgraded

              version of the software to apply any special "on-upgrade" commands
              during

              the first BeginBlock method after the upgrade is applied. It is
              also used

              to detect whether a software version can handle a given upgrade.
              If no

              upgrade handler with this name has been set in the software, it
              will be

              assumed that the software is out-of-date when the upgrade Time or
              Height is

              reached and the software will exit.
          time:
            type: string
            format: date-time
            description: >-
              Deprecated: Time based upgrades have been deprecated. Time based
              upgrade logic

              has been removed from the SDK.

              If this field is not empty, an error will be thrown.
          height:
            type: string
            format: int64
            description: |-
              The height at which the upgrade must be performed.
              Only used if Time is not set.
          info:
            type: string
            title: >-
              Any application specific upgrade info to be included on-chain

              such as a git commit that validators could automatically upgrade
              to
          upgraded_client_state:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
    description: >-
      QueryCurrentPlanResponse is the response type for the Query/CurrentPlan
      RPC

      method.
  cosmos.upgrade.v1beta1.QueryModuleVersionsResponse:
    type: object
    properties:
      module_versions:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              title: name of the app module
            version:
              type: string
              format: uint64
              title: consensus version of the app module
          description: |-
            ModuleVersion specifies a module and its consensus version.

            Since: cosmos-sdk 0.43
        description: >-
          module_versions is a list of module names with their consensus
          versions.
    description: >-
      QueryModuleVersionsResponse is the response type for the
      Query/ModuleVersions

      RPC method.


      Since: cosmos-sdk 0.43
  cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse:
    type: object
    properties:
      upgraded_consensus_state:
        type: string
        format: byte
        title: 'Since: cosmos-sdk 0.43'
    description: >-
      QueryUpgradedConsensusStateResponse is the response type for the
      Query/UpgradedConsensusState

      RPC method.
  cosmos.authz.v1beta1.Grant:
    type: object
    properties:
      authorization:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      expiration:
        type: string
        format: date-time
        title: >-
          time when the grant will expire and will be pruned. If null, then the
          grant

          doesn't have a time expiration (other conditions  in `authorization`

          may apply to invalidate the grant)
    description: |-
      Grant gives permissions to execute
      the provide method with expiration time.
  cosmos.authz.v1beta1.GrantAuthorization:
    type: object
    properties:
      granter:
        type: string
      grantee:
        type: string
      authorization:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      expiration:
        type: string
        format: date-time
    title: >-
      GrantAuthorization extends a grant with both the addresses of the grantee
      and granter.

      It is used in genesis.proto and query.proto
  cosmos.authz.v1beta1.QueryGranteeGrantsResponse:
    type: object
    properties:
      grants:
        type: array
        items:
          type: object
          properties:
            granter:
              type: string
            grantee:
              type: string
            authorization:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            expiration:
              type: string
              format: date-time
          title: >-
            GrantAuthorization extends a grant with both the addresses of the
            grantee and granter.

            It is used in genesis.proto and query.proto
        description: grants is a list of grants granted to the grantee.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryGranteeGrantsResponse is the response type for the
      Query/GranteeGrants RPC method.
  cosmos.authz.v1beta1.QueryGranterGrantsResponse:
    type: object
    properties:
      grants:
        type: array
        items:
          type: object
          properties:
            granter:
              type: string
            grantee:
              type: string
            authorization:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            expiration:
              type: string
              format: date-time
          title: >-
            GrantAuthorization extends a grant with both the addresses of the
            grantee and granter.

            It is used in genesis.proto and query.proto
        description: grants is a list of grants granted by the granter.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryGranterGrantsResponse is the response type for the
      Query/GranterGrants RPC method.
  cosmos.authz.v1beta1.QueryGrantsResponse:
    type: object
    properties:
      grants:
        type: array
        items:
          type: object
          properties:
            authorization:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            expiration:
              type: string
              format: date-time
              title: >-
                time when the grant will expire and will be pruned. If null,
                then the grant

                doesn't have a time expiration (other conditions  in
                `authorization`

                may apply to invalidate the grant)
          description: |-
            Grant gives permissions to execute
            the provide method with expiration time.
        description: authorizations is a list of grants granted for grantee by granter.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryGrantsResponse is the response type for the Query/Authorizations RPC
      method.
  cosmos.feegrant.v1beta1.Grant:
    type: object
    properties:
      granter:
        type: string
        description: >-
          granter is the address of the user granting an allowance of their
          funds.
      grantee:
        type: string
        description: >-
          grantee is the address of the user being granted an allowance of
          another user's funds.
      allowance:
        description: 'allowance can be any of basic, periodic, allowed fee allowance.'
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
    title: Grant is stored in the KVStore to record a grant with full context
  cosmos.feegrant.v1beta1.QueryAllowanceResponse:
    type: object
    properties:
      allowance:
        description: allowance is a allowance granted for grantee by granter.
        type: object
        properties:
          granter:
            type: string
            description: >-
              granter is the address of the user granting an allowance of their
              funds.
          grantee:
            type: string
            description: >-
              grantee is the address of the user being granted an allowance of
              another user's funds.
          allowance:
            description: 'allowance can be any of basic, periodic, allowed fee allowance.'
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
        title: Grant is stored in the KVStore to record a grant with full context
    description: >-
      QueryAllowanceResponse is the response type for the Query/Allowance RPC
      method.
  cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse:
    type: object
    properties:
      allowances:
        type: array
        items:
          type: object
          properties:
            granter:
              type: string
              description: >-
                granter is the address of the user granting an allowance of
                their funds.
            grantee:
              type: string
              description: >-
                grantee is the address of the user being granted an allowance of
                another user's funds.
            allowance:
              description: 'allowance can be any of basic, periodic, allowed fee allowance.'
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
          title: Grant is stored in the KVStore to record a grant with full context
        description: allowances that have been issued by the granter.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllowancesByGranterResponse is the response type for the
      Query/AllowancesByGranter RPC method.


      Since: cosmos-sdk 0.46
  cosmos.feegrant.v1beta1.QueryAllowancesResponse:
    type: object
    properties:
      allowances:
        type: array
        items:
          type: object
          properties:
            granter:
              type: string
              description: >-
                granter is the address of the user granting an allowance of
                their funds.
            grantee:
              type: string
              description: >-
                grantee is the address of the user being granted an allowance of
                another user's funds.
            allowance:
              description: 'allowance can be any of basic, periodic, allowed fee allowance.'
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
          title: Grant is stored in the KVStore to record a grant with full context
        description: allowances are allowance's granted for grantee by granter.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllowancesResponse is the response type for the Query/Allowances RPC
      method.
  cosmos.nft.v1beta1.Class:
    type: object
    properties:
      id:
        type: string
        title: >-
          id defines the unique identifier of the NFT classification, similar to
          the contract address of ERC721
      name:
        type: string
        title: >-
          name defines the human-readable name of the NFT classification.
          Optional
      symbol:
        type: string
        title: symbol is an abbreviated name for nft classification. Optional
      description:
        type: string
        title: description is a brief description of nft classification. Optional
      uri:
        type: string
        title: >-
          uri for the class metadata stored off chain. It can define schema for
          Class and NFT `Data` attributes. Optional
      uri_hash:
        type: string
        title: uri_hash is a hash of the document pointed by uri. Optional
      data:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: data is the app specific metadata of the NFT class. Optional
    description: Class defines the class of the nft type.
  cosmos.nft.v1beta1.NFT:
    type: object
    properties:
      class_id:
        type: string
        title: >-
          class_id associated with the NFT, similar to the contract address of
          ERC721
      id:
        type: string
        title: id is a unique identifier of the NFT
      uri:
        type: string
        title: uri for the NFT metadata stored off chain
      uri_hash:
        type: string
        title: uri_hash is a hash of the document pointed by uri
      data:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: data is an app specific data of the NFT. Optional
    description: NFT defines the NFT.
  cosmos.nft.v1beta1.QueryBalanceResponse:
    type: object
    properties:
      amount:
        type: string
        format: uint64
    title: QueryBalanceResponse is the response type for the Query/Balance RPC method
  cosmos.nft.v1beta1.QueryClassResponse:
    type: object
    properties:
      class:
        type: object
        properties:
          id:
            type: string
            title: >-
              id defines the unique identifier of the NFT classification,
              similar to the contract address of ERC721
          name:
            type: string
            title: >-
              name defines the human-readable name of the NFT classification.
              Optional
          symbol:
            type: string
            title: symbol is an abbreviated name for nft classification. Optional
          description:
            type: string
            title: description is a brief description of nft classification. Optional
          uri:
            type: string
            title: >-
              uri for the class metadata stored off chain. It can define schema
              for Class and NFT `Data` attributes. Optional
          uri_hash:
            type: string
            title: uri_hash is a hash of the document pointed by uri. Optional
          data:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            title: data is the app specific metadata of the NFT class. Optional
        description: Class defines the class of the nft type.
    title: QueryClassResponse is the response type for the Query/Class RPC method
  cosmos.nft.v1beta1.QueryClassesResponse:
    type: object
    properties:
      classes:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              title: >-
                id defines the unique identifier of the NFT classification,
                similar to the contract address of ERC721
            name:
              type: string
              title: >-
                name defines the human-readable name of the NFT classification.
                Optional
            symbol:
              type: string
              title: symbol is an abbreviated name for nft classification. Optional
            description:
              type: string
              title: >-
                description is a brief description of nft classification.
                Optional
            uri:
              type: string
              title: >-
                uri for the class metadata stored off chain. It can define
                schema for Class and NFT `Data` attributes. Optional
            uri_hash:
              type: string
              title: uri_hash is a hash of the document pointed by uri. Optional
            data:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              title: data is the app specific metadata of the NFT class. Optional
          description: Class defines the class of the nft type.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: QueryClassesResponse is the response type for the Query/Classes RPC method
  cosmos.nft.v1beta1.QueryNFTResponse:
    type: object
    properties:
      nft:
        type: object
        properties:
          class_id:
            type: string
            title: >-
              class_id associated with the NFT, similar to the contract address
              of ERC721
          id:
            type: string
            title: id is a unique identifier of the NFT
          uri:
            type: string
            title: uri for the NFT metadata stored off chain
          uri_hash:
            type: string
            title: uri_hash is a hash of the document pointed by uri
          data:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            title: data is an app specific data of the NFT. Optional
        description: NFT defines the NFT.
    title: QueryNFTResponse is the response type for the Query/NFT RPC method
  cosmos.nft.v1beta1.QueryNFTsResponse:
    type: object
    properties:
      nfts:
        type: array
        items:
          type: object
          properties:
            class_id:
              type: string
              title: >-
                class_id associated with the NFT, similar to the contract
                address of ERC721
            id:
              type: string
              title: id is a unique identifier of the NFT
            uri:
              type: string
              title: uri for the NFT metadata stored off chain
            uri_hash:
              type: string
              title: uri_hash is a hash of the document pointed by uri
            data:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              title: data is an app specific data of the NFT. Optional
          description: NFT defines the NFT.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: QueryNFTsResponse is the response type for the Query/NFTs RPC methods
  cosmos.nft.v1beta1.QueryOwnerResponse:
    type: object
    properties:
      owner:
        type: string
    title: QueryOwnerResponse is the response type for the Query/Owner RPC method
  cosmos.nft.v1beta1.QuerySupplyResponse:
    type: object
    properties:
      amount:
        type: string
        format: uint64
    title: QuerySupplyResponse is the response type for the Query/Supply RPC method
  cosmos.group.v1.GroupInfo:
    type: object
    properties:
      id:
        type: string
        format: uint64
        description: id is the unique ID of the group.
      admin:
        type: string
        description: admin is the account address of the group's admin.
      metadata:
        type: string
        description: metadata is any arbitrary metadata to attached to the group.
      version:
        type: string
        format: uint64
        title: >-
          version is used to track changes to a group's membership structure
          that

          would break existing proposals. Whenever any members weight is
          changed,

          or any member is added or removed this version is incremented and will

          cause proposals based on older versions of this group to fail
      total_weight:
        type: string
        description: total_weight is the sum of the group members' weights.
      created_at:
        type: string
        format: date-time
        description: created_at is a timestamp specifying when a group was created.
    description: GroupInfo represents the high-level on-chain information for a group.
  cosmos.group.v1.GroupMember:
    type: object
    properties:
      group_id:
        type: string
        format: uint64
        description: group_id is the unique ID of the group.
      member:
        description: member is the member data.
        type: object
        properties:
          address:
            type: string
            description: address is the member's account address.
          weight:
            type: string
            description: >-
              weight is the member's voting weight that should be greater than
              0.
          metadata:
            type: string
            description: metadata is any arbitrary metadata attached to the member.
          added_at:
            type: string
            format: date-time
            description: added_at is a timestamp specifying when a member was added.
    description: GroupMember represents the relationship between a group and a member.
  cosmos.group.v1.GroupPolicyInfo:
    type: object
    properties:
      address:
        type: string
        description: address is the account address of group policy.
      group_id:
        type: string
        format: uint64
        description: group_id is the unique ID of the group.
      admin:
        type: string
        description: admin is the account address of the group admin.
      metadata:
        type: string
        description: metadata is any arbitrary metadata to attached to the group policy.
      version:
        type: string
        format: uint64
        description: >-
          version is used to track changes to a group's GroupPolicyInfo
          structure that

          would create a different result on a running proposal.
      decision_policy:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      created_at:
        type: string
        format: date-time
        description: created_at is a timestamp specifying when a group policy was created.
    description: >-
      GroupPolicyInfo represents the high-level on-chain information for a group
      policy.
  cosmos.group.v1.Member:
    type: object
    properties:
      address:
        type: string
        description: address is the member's account address.
      weight:
        type: string
        description: weight is the member's voting weight that should be greater than 0.
      metadata:
        type: string
        description: metadata is any arbitrary metadata attached to the member.
      added_at:
        type: string
        format: date-time
        description: added_at is a timestamp specifying when a member was added.
    description: |-
      Member represents a group member with an account address,
      non-zero weight, metadata and added_at timestamp.
  cosmos.group.v1.Proposal:
    type: object
    properties:
      id:
        type: string
        format: uint64
        description: id is the unique id of the proposal.
      group_policy_address:
        type: string
        description: group_policy_address is the account address of group policy.
      metadata:
        type: string
        description: metadata is any arbitrary metadata to attached to the proposal.
      proposers:
        type: array
        items:
          type: string
        description: proposers are the account addresses of the proposers.
      submit_time:
        type: string
        format: date-time
        description: submit_time is a timestamp specifying when a proposal was submitted.
      group_version:
        type: string
        format: uint64
        description: |-
          group_version tracks the version of the group at proposal submission.
          This field is here for informational purposes only.
      group_policy_version:
        type: string
        format: uint64
        description: >-
          group_policy_version tracks the version of the group policy at
          proposal submission.

          When a decision policy is changed, existing proposals from previous
          policy

          versions will become invalid with the `ABORTED` status.

          This field is here for informational purposes only.
      status:
        description: >-
          status represents the high level position in the life cycle of the
          proposal. Initial value is Submitted.
        type: string
        enum:
          - PROPOSAL_STATUS_UNSPECIFIED
          - PROPOSAL_STATUS_SUBMITTED
          - PROPOSAL_STATUS_ACCEPTED
          - PROPOSAL_STATUS_REJECTED
          - PROPOSAL_STATUS_ABORTED
          - PROPOSAL_STATUS_WITHDRAWN
        default: PROPOSAL_STATUS_UNSPECIFIED
      final_tally_result:
        description: >-
          final_tally_result contains the sums of all weighted votes for this

          proposal for each vote option. It is empty at submission, and only

          populated after tallying, at voting period end or at proposal
          execution,

          whichever happens first.
        type: object
        properties:
          yes_count:
            type: string
            description: yes_count is the weighted sum of yes votes.
          abstain_count:
            type: string
            description: abstain_count is the weighted sum of abstainers.
          no_count:
            type: string
            description: no_count is the weighted sum of no votes.
          no_with_veto_count:
            type: string
            description: no_with_veto_count is the weighted sum of veto.
      voting_period_end:
        type: string
        format: date-time
        description: >-
          voting_period_end is the timestamp before which voting must be done.

          Unless a successfull MsgExec is called before (to execute a proposal
          whose

          tally is successful before the voting period ends), tallying will be
          done

          at this point, and the `final_tally_result`and `status` fields will be

          accordingly updated.
      executor_result:
        description: >-
          executor_result is the final result of the proposal execution. Initial
          value is NotRun.
        type: string
        enum:
          - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
          - PROPOSAL_EXECUTOR_RESULT_NOT_RUN
          - PROPOSAL_EXECUTOR_RESULT_SUCCESS
          - PROPOSAL_EXECUTOR_RESULT_FAILURE
        default: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
      messages:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: >-
          messages is a list of `sdk.Msg`s that will be executed if the proposal
          passes.
    description: >-
      Proposal defines a group proposal. Any member of a group can submit a
      proposal

      for a group policy to decide upon.

      A proposal consists of a set of `sdk.Msg`s that will be executed if the
      proposal

      passes as well as some optional metadata associated with the proposal.
  cosmos.group.v1.ProposalExecutorResult:
    type: string
    enum:
      - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
      - PROPOSAL_EXECUTOR_RESULT_NOT_RUN
      - PROPOSAL_EXECUTOR_RESULT_SUCCESS
      - PROPOSAL_EXECUTOR_RESULT_FAILURE
    default: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
    description: |-
      ProposalExecutorResult defines types of proposal executor results.

       - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED: An empty value is not allowed.
       - PROPOSAL_EXECUTOR_RESULT_NOT_RUN: We have not yet run the executor.
       - PROPOSAL_EXECUTOR_RESULT_SUCCESS: The executor was successful and proposed action updated state.
       - PROPOSAL_EXECUTOR_RESULT_FAILURE: The executor returned an error and proposed action didn't update state.
  cosmos.group.v1.ProposalStatus:
    type: string
    enum:
      - PROPOSAL_STATUS_UNSPECIFIED
      - PROPOSAL_STATUS_SUBMITTED
      - PROPOSAL_STATUS_ACCEPTED
      - PROPOSAL_STATUS_REJECTED
      - PROPOSAL_STATUS_ABORTED
      - PROPOSAL_STATUS_WITHDRAWN
    default: PROPOSAL_STATUS_UNSPECIFIED
    description: |-
      ProposalStatus defines proposal statuses.

       - PROPOSAL_STATUS_UNSPECIFIED: An empty value is invalid and not allowed.
       - PROPOSAL_STATUS_SUBMITTED: Initial status of a proposal when submitted.
       - PROPOSAL_STATUS_ACCEPTED: Final status of a proposal when the final tally is done and the outcome
      passes the group policy's decision policy.
       - PROPOSAL_STATUS_REJECTED: Final status of a proposal when the final tally is done and the outcome
      is rejected by the group policy's decision policy.
       - PROPOSAL_STATUS_ABORTED: Final status of a proposal when the group policy is modified before the
      final tally.
       - PROPOSAL_STATUS_WITHDRAWN: A proposal can be withdrawn before the voting start time by the owner.
      When this happens the final status is Withdrawn.
  cosmos.group.v1.QueryGroupInfoResponse:
    type: object
    properties:
      info:
        description: info is the GroupInfo for the group.
        type: object
        properties:
          id:
            type: string
            format: uint64
            description: id is the unique ID of the group.
          admin:
            type: string
            description: admin is the account address of the group's admin.
          metadata:
            type: string
            description: metadata is any arbitrary metadata to attached to the group.
          version:
            type: string
            format: uint64
            title: >-
              version is used to track changes to a group's membership structure
              that

              would break existing proposals. Whenever any members weight is
              changed,

              or any member is added or removed this version is incremented and
              will

              cause proposals based on older versions of this group to fail
          total_weight:
            type: string
            description: total_weight is the sum of the group members' weights.
          created_at:
            type: string
            format: date-time
            description: created_at is a timestamp specifying when a group was created.
    description: QueryGroupInfoResponse is the Query/GroupInfo response type.
  cosmos.group.v1.QueryGroupMembersResponse:
    type: object
    properties:
      members:
        type: array
        items:
          type: object
          properties:
            group_id:
              type: string
              format: uint64
              description: group_id is the unique ID of the group.
            member:
              description: member is the member data.
              type: object
              properties:
                address:
                  type: string
                  description: address is the member's account address.
                weight:
                  type: string
                  description: >-
                    weight is the member's voting weight that should be greater
                    than 0.
                metadata:
                  type: string
                  description: metadata is any arbitrary metadata attached to the member.
                added_at:
                  type: string
                  format: date-time
                  description: added_at is a timestamp specifying when a member was added.
          description: >-
            GroupMember represents the relationship between a group and a
            member.
        description: members are the members of the group with given group_id.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: QueryGroupMembersResponse is the Query/GroupMembersResponse response type.
  cosmos.group.v1.QueryGroupPoliciesByAdminResponse:
    type: object
    properties:
      group_policies:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              description: address is the account address of group policy.
            group_id:
              type: string
              format: uint64
              description: group_id is the unique ID of the group.
            admin:
              type: string
              description: admin is the account address of the group admin.
            metadata:
              type: string
              description: >-
                metadata is any arbitrary metadata to attached to the group
                policy.
            version:
              type: string
              format: uint64
              description: >-
                version is used to track changes to a group's GroupPolicyInfo
                structure that

                would create a different result on a running proposal.
            decision_policy:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            created_at:
              type: string
              format: date-time
              description: >-
                created_at is a timestamp specifying when a group policy was
                created.
          description: >-
            GroupPolicyInfo represents the high-level on-chain information for a
            group policy.
        description: group_policies are the group policies info with provided admin.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryGroupPoliciesByAdminResponse is the Query/GroupPoliciesByAdmin
      response type.
  cosmos.group.v1.QueryGroupPoliciesByGroupResponse:
    type: object
    properties:
      group_policies:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              description: address is the account address of group policy.
            group_id:
              type: string
              format: uint64
              description: group_id is the unique ID of the group.
            admin:
              type: string
              description: admin is the account address of the group admin.
            metadata:
              type: string
              description: >-
                metadata is any arbitrary metadata to attached to the group
                policy.
            version:
              type: string
              format: uint64
              description: >-
                version is used to track changes to a group's GroupPolicyInfo
                structure that

                would create a different result on a running proposal.
            decision_policy:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            created_at:
              type: string
              format: date-time
              description: >-
                created_at is a timestamp specifying when a group policy was
                created.
          description: >-
            GroupPolicyInfo represents the high-level on-chain information for a
            group policy.
        description: >-
          group_policies are the group policies info associated with the
          provided group.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryGroupPoliciesByGroupResponse is the Query/GroupPoliciesByGroup
      response type.
  cosmos.group.v1.QueryGroupPolicyInfoResponse:
    type: object
    properties:
      info:
        type: object
        properties:
          address:
            type: string
            description: address is the account address of group policy.
          group_id:
            type: string
            format: uint64
            description: group_id is the unique ID of the group.
          admin:
            type: string
            description: admin is the account address of the group admin.
          metadata:
            type: string
            description: >-
              metadata is any arbitrary metadata to attached to the group
              policy.
          version:
            type: string
            format: uint64
            description: >-
              version is used to track changes to a group's GroupPolicyInfo
              structure that

              would create a different result on a running proposal.
          decision_policy:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          created_at:
            type: string
            format: date-time
            description: >-
              created_at is a timestamp specifying when a group policy was
              created.
        description: >-
          GroupPolicyInfo represents the high-level on-chain information for a
          group policy.
    description: QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response type.
  cosmos.group.v1.QueryGroupsByAdminResponse:
    type: object
    properties:
      groups:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              description: id is the unique ID of the group.
            admin:
              type: string
              description: admin is the account address of the group's admin.
            metadata:
              type: string
              description: metadata is any arbitrary metadata to attached to the group.
            version:
              type: string
              format: uint64
              title: >-
                version is used to track changes to a group's membership
                structure that

                would break existing proposals. Whenever any members weight is
                changed,

                or any member is added or removed this version is incremented
                and will

                cause proposals based on older versions of this group to fail
            total_weight:
              type: string
              description: total_weight is the sum of the group members' weights.
            created_at:
              type: string
              format: date-time
              description: created_at is a timestamp specifying when a group was created.
          description: >-
            GroupInfo represents the high-level on-chain information for a
            group.
        description: groups are the groups info with the provided admin.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse response
      type.
  cosmos.group.v1.QueryGroupsByMemberResponse:
    type: object
    properties:
      groups:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              description: id is the unique ID of the group.
            admin:
              type: string
              description: admin is the account address of the group's admin.
            metadata:
              type: string
              description: metadata is any arbitrary metadata to attached to the group.
            version:
              type: string
              format: uint64
              title: >-
                version is used to track changes to a group's membership
                structure that

                would break existing proposals. Whenever any members weight is
                changed,

                or any member is added or removed this version is incremented
                and will

                cause proposals based on older versions of this group to fail
            total_weight:
              type: string
              description: total_weight is the sum of the group members' weights.
            created_at:
              type: string
              format: date-time
              description: created_at is a timestamp specifying when a group was created.
          description: >-
            GroupInfo represents the high-level on-chain information for a
            group.
        description: groups are the groups info with the provided group member.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: QueryGroupsByMemberResponse is the Query/GroupsByMember response type.
  cosmos.group.v1.QueryGroupsResponse:
    type: object
    properties:
      groups:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              description: id is the unique ID of the group.
            admin:
              type: string
              description: admin is the account address of the group's admin.
            metadata:
              type: string
              description: metadata is any arbitrary metadata to attached to the group.
            version:
              type: string
              format: uint64
              title: >-
                version is used to track changes to a group's membership
                structure that

                would break existing proposals. Whenever any members weight is
                changed,

                or any member is added or removed this version is incremented
                and will

                cause proposals based on older versions of this group to fail
            total_weight:
              type: string
              description: total_weight is the sum of the group members' weights.
            created_at:
              type: string
              format: date-time
              description: created_at is a timestamp specifying when a group was created.
          description: >-
            GroupInfo represents the high-level on-chain information for a
            group.
        description: '`groups` is all the groups present in state.'
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryGroupsResponse is the Query/Groups response type.

      Since: cosmos-sdk 0.47.1
  cosmos.group.v1.QueryProposalResponse:
    type: object
    properties:
      proposal:
        description: proposal is the proposal info.
        type: object
        properties:
          id:
            type: string
            format: uint64
            description: id is the unique id of the proposal.
          group_policy_address:
            type: string
            description: group_policy_address is the account address of group policy.
          metadata:
            type: string
            description: metadata is any arbitrary metadata to attached to the proposal.
          proposers:
            type: array
            items:
              type: string
            description: proposers are the account addresses of the proposers.
          submit_time:
            type: string
            format: date-time
            description: >-
              submit_time is a timestamp specifying when a proposal was
              submitted.
          group_version:
            type: string
            format: uint64
            description: >-
              group_version tracks the version of the group at proposal
              submission.

              This field is here for informational purposes only.
          group_policy_version:
            type: string
            format: uint64
            description: >-
              group_policy_version tracks the version of the group policy at
              proposal submission.

              When a decision policy is changed, existing proposals from
              previous policy

              versions will become invalid with the `ABORTED` status.

              This field is here for informational purposes only.
          status:
            description: >-
              status represents the high level position in the life cycle of the
              proposal. Initial value is Submitted.
            type: string
            enum:
              - PROPOSAL_STATUS_UNSPECIFIED
              - PROPOSAL_STATUS_SUBMITTED
              - PROPOSAL_STATUS_ACCEPTED
              - PROPOSAL_STATUS_REJECTED
              - PROPOSAL_STATUS_ABORTED
              - PROPOSAL_STATUS_WITHDRAWN
            default: PROPOSAL_STATUS_UNSPECIFIED
          final_tally_result:
            description: >-
              final_tally_result contains the sums of all weighted votes for
              this

              proposal for each vote option. It is empty at submission, and only

              populated after tallying, at voting period end or at proposal
              execution,

              whichever happens first.
            type: object
            properties:
              yes_count:
                type: string
                description: yes_count is the weighted sum of yes votes.
              abstain_count:
                type: string
                description: abstain_count is the weighted sum of abstainers.
              no_count:
                type: string
                description: no_count is the weighted sum of no votes.
              no_with_veto_count:
                type: string
                description: no_with_veto_count is the weighted sum of veto.
          voting_period_end:
            type: string
            format: date-time
            description: >-
              voting_period_end is the timestamp before which voting must be
              done.

              Unless a successfull MsgExec is called before (to execute a
              proposal whose

              tally is successful before the voting period ends), tallying will
              be done

              at this point, and the `final_tally_result`and `status` fields
              will be

              accordingly updated.
          executor_result:
            description: >-
              executor_result is the final result of the proposal execution.
              Initial value is NotRun.
            type: string
            enum:
              - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
              - PROPOSAL_EXECUTOR_RESULT_NOT_RUN
              - PROPOSAL_EXECUTOR_RESULT_SUCCESS
              - PROPOSAL_EXECUTOR_RESULT_FAILURE
            default: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
          messages:
            type: array
            items:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            description: >-
              messages is a list of `sdk.Msg`s that will be executed if the
              proposal passes.
    description: QueryProposalResponse is the Query/Proposal response type.
  cosmos.group.v1.QueryProposalsByGroupPolicyResponse:
    type: object
    properties:
      proposals:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              description: id is the unique id of the proposal.
            group_policy_address:
              type: string
              description: group_policy_address is the account address of group policy.
            metadata:
              type: string
              description: metadata is any arbitrary metadata to attached to the proposal.
            proposers:
              type: array
              items:
                type: string
              description: proposers are the account addresses of the proposers.
            submit_time:
              type: string
              format: date-time
              description: >-
                submit_time is a timestamp specifying when a proposal was
                submitted.
            group_version:
              type: string
              format: uint64
              description: >-
                group_version tracks the version of the group at proposal
                submission.

                This field is here for informational purposes only.
            group_policy_version:
              type: string
              format: uint64
              description: >-
                group_policy_version tracks the version of the group policy at
                proposal submission.

                When a decision policy is changed, existing proposals from
                previous policy

                versions will become invalid with the `ABORTED` status.

                This field is here for informational purposes only.
            status:
              description: >-
                status represents the high level position in the life cycle of
                the proposal. Initial value is Submitted.
              type: string
              enum:
                - PROPOSAL_STATUS_UNSPECIFIED
                - PROPOSAL_STATUS_SUBMITTED
                - PROPOSAL_STATUS_ACCEPTED
                - PROPOSAL_STATUS_REJECTED
                - PROPOSAL_STATUS_ABORTED
                - PROPOSAL_STATUS_WITHDRAWN
              default: PROPOSAL_STATUS_UNSPECIFIED
            final_tally_result:
              description: >-
                final_tally_result contains the sums of all weighted votes for
                this

                proposal for each vote option. It is empty at submission, and
                only

                populated after tallying, at voting period end or at proposal
                execution,

                whichever happens first.
              type: object
              properties:
                yes_count:
                  type: string
                  description: yes_count is the weighted sum of yes votes.
                abstain_count:
                  type: string
                  description: abstain_count is the weighted sum of abstainers.
                no_count:
                  type: string
                  description: no_count is the weighted sum of no votes.
                no_with_veto_count:
                  type: string
                  description: no_with_veto_count is the weighted sum of veto.
            voting_period_end:
              type: string
              format: date-time
              description: >-
                voting_period_end is the timestamp before which voting must be
                done.

                Unless a successfull MsgExec is called before (to execute a
                proposal whose

                tally is successful before the voting period ends), tallying
                will be done

                at this point, and the `final_tally_result`and `status` fields
                will be

                accordingly updated.
            executor_result:
              description: >-
                executor_result is the final result of the proposal execution.
                Initial value is NotRun.
              type: string
              enum:
                - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
                - PROPOSAL_EXECUTOR_RESULT_NOT_RUN
                - PROPOSAL_EXECUTOR_RESULT_SUCCESS
                - PROPOSAL_EXECUTOR_RESULT_FAILURE
              default: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
            messages:
              type: array
              items:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              description: >-
                messages is a list of `sdk.Msg`s that will be executed if the
                proposal passes.
          description: >-
            Proposal defines a group proposal. Any member of a group can submit
            a proposal

            for a group policy to decide upon.

            A proposal consists of a set of `sdk.Msg`s that will be executed if
            the proposal

            passes as well as some optional metadata associated with the
            proposal.
        description: proposals are the proposals with given group policy.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryProposalsByGroupPolicyResponse is the Query/ProposalByGroupPolicy
      response type.
  cosmos.group.v1.QueryTallyResultResponse:
    type: object
    properties:
      tally:
        description: tally defines the requested tally.
        type: object
        properties:
          yes_count:
            type: string
            description: yes_count is the weighted sum of yes votes.
          abstain_count:
            type: string
            description: abstain_count is the weighted sum of abstainers.
          no_count:
            type: string
            description: no_count is the weighted sum of no votes.
          no_with_veto_count:
            type: string
            description: no_with_veto_count is the weighted sum of veto.
    description: QueryTallyResultResponse is the Query/TallyResult response type.
  cosmos.group.v1.QueryVoteByProposalVoterResponse:
    type: object
    properties:
      vote:
        description: vote is the vote with given proposal_id and voter.
        type: object
        properties:
          proposal_id:
            type: string
            format: uint64
            description: proposal is the unique ID of the proposal.
          voter:
            type: string
            description: voter is the account address of the voter.
          option:
            description: option is the voter's choice on the proposal.
            type: string
            enum:
              - VOTE_OPTION_UNSPECIFIED
              - VOTE_OPTION_YES
              - VOTE_OPTION_ABSTAIN
              - VOTE_OPTION_NO
              - VOTE_OPTION_NO_WITH_VETO
            default: VOTE_OPTION_UNSPECIFIED
          metadata:
            type: string
            description: metadata is any arbitrary metadata to attached to the vote.
          submit_time:
            type: string
            format: date-time
            description: submit_time is the timestamp when the vote was submitted.
    description: >-
      QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter response
      type.
  cosmos.group.v1.QueryVotesByProposalResponse:
    type: object
    properties:
      votes:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
              description: proposal is the unique ID of the proposal.
            voter:
              type: string
              description: voter is the account address of the voter.
            option:
              description: option is the voter's choice on the proposal.
              type: string
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              default: VOTE_OPTION_UNSPECIFIED
            metadata:
              type: string
              description: metadata is any arbitrary metadata to attached to the vote.
            submit_time:
              type: string
              format: date-time
              description: submit_time is the timestamp when the vote was submitted.
          description: Vote represents a vote for a proposal.
        description: votes are the list of votes for given proposal_id.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: QueryVotesByProposalResponse is the Query/VotesByProposal response type.
  cosmos.group.v1.QueryVotesByVoterResponse:
    type: object
    properties:
      votes:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
              description: proposal is the unique ID of the proposal.
            voter:
              type: string
              description: voter is the account address of the voter.
            option:
              description: option is the voter's choice on the proposal.
              type: string
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              default: VOTE_OPTION_UNSPECIFIED
            metadata:
              type: string
              description: metadata is any arbitrary metadata to attached to the vote.
            submit_time:
              type: string
              format: date-time
              description: submit_time is the timestamp when the vote was submitted.
          description: Vote represents a vote for a proposal.
        description: votes are the list of votes by given voter.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: QueryVotesByVoterResponse is the Query/VotesByVoter response type.
  cosmos.group.v1.TallyResult:
    type: object
    properties:
      yes_count:
        type: string
        description: yes_count is the weighted sum of yes votes.
      abstain_count:
        type: string
        description: abstain_count is the weighted sum of abstainers.
      no_count:
        type: string
        description: no_count is the weighted sum of no votes.
      no_with_veto_count:
        type: string
        description: no_with_veto_count is the weighted sum of veto.
    description: TallyResult represents the sum of weighted votes for each vote option.
  cosmos.group.v1.Vote:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
        description: proposal is the unique ID of the proposal.
      voter:
        type: string
        description: voter is the account address of the voter.
      option:
        description: option is the voter's choice on the proposal.
        type: string
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        default: VOTE_OPTION_UNSPECIFIED
      metadata:
        type: string
        description: metadata is any arbitrary metadata to attached to the vote.
      submit_time:
        type: string
        format: date-time
        description: submit_time is the timestamp when the vote was submitted.
    description: Vote represents a vote for a proposal.
  cosmos.group.v1.VoteOption:
    type: string
    enum:
      - VOTE_OPTION_UNSPECIFIED
      - VOTE_OPTION_YES
      - VOTE_OPTION_ABSTAIN
      - VOTE_OPTION_NO
      - VOTE_OPTION_NO_WITH_VETO
    default: VOTE_OPTION_UNSPECIFIED
    description: |-
      VoteOption enumerates the valid vote options for a given proposal.

       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines an unspecified vote option which will
      return an error.
       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
  provenance.attribute.v1.Attribute:
    type: object
    properties:
      name:
        type: string
        description: The attribute name.
      value:
        type: string
        format: byte
        description: The attribute value.
      attribute_type:
        description: The attribute value type.
        type: string
        enum:
          - ATTRIBUTE_TYPE_UNSPECIFIED
          - ATTRIBUTE_TYPE_UUID
          - ATTRIBUTE_TYPE_JSON
          - ATTRIBUTE_TYPE_STRING
          - ATTRIBUTE_TYPE_URI
          - ATTRIBUTE_TYPE_INT
          - ATTRIBUTE_TYPE_FLOAT
          - ATTRIBUTE_TYPE_PROTO
          - ATTRIBUTE_TYPE_BYTES
        default: ATTRIBUTE_TYPE_UNSPECIFIED
        title: >-
          AttributeType defines the type of the data stored in the attribute
          value
      address:
        type: string
        title: The address the attribute is bound to
      expiration_date:
        type: string
        format: date-time
        description: Time that an attribute will expire.
    title: >-
      Attribute holds a typed key/value structure for data associated with an
      account
  provenance.attribute.v1.AttributeType:
    type: string
    enum:
      - ATTRIBUTE_TYPE_UNSPECIFIED
      - ATTRIBUTE_TYPE_UUID
      - ATTRIBUTE_TYPE_JSON
      - ATTRIBUTE_TYPE_STRING
      - ATTRIBUTE_TYPE_URI
      - ATTRIBUTE_TYPE_INT
      - ATTRIBUTE_TYPE_FLOAT
      - ATTRIBUTE_TYPE_PROTO
      - ATTRIBUTE_TYPE_BYTES
    default: ATTRIBUTE_TYPE_UNSPECIFIED
    description: >-
      - ATTRIBUTE_TYPE_UNSPECIFIED: ATTRIBUTE_TYPE_UNSPECIFIED defines an
      unknown/invalid type
       - ATTRIBUTE_TYPE_UUID: ATTRIBUTE_TYPE_UUID defines an attribute value that contains a string value representation of a V4 uuid
       - ATTRIBUTE_TYPE_JSON: ATTRIBUTE_TYPE_JSON defines an attribute value that contains a byte string containing json data
       - ATTRIBUTE_TYPE_STRING: ATTRIBUTE_TYPE_STRING defines an attribute value that contains a generic string value
       - ATTRIBUTE_TYPE_URI: ATTRIBUTE_TYPE_URI defines an attribute value that contains a URI
       - ATTRIBUTE_TYPE_INT: ATTRIBUTE_TYPE_INT defines an attribute value that contains an integer (cast as int64)
       - ATTRIBUTE_TYPE_FLOAT: ATTRIBUTE_TYPE_FLOAT defines an attribute value that contains a float
       - ATTRIBUTE_TYPE_PROTO: ATTRIBUTE_TYPE_PROTO defines an attribute value that contains a serialized proto value in bytes
       - ATTRIBUTE_TYPE_BYTES: ATTRIBUTE_TYPE_BYTES defines an attribute value that contains an untyped array of bytes
    title: AttributeType defines the type of the data stored in the attribute value
  provenance.attribute.v1.Params:
    type: object
    properties:
      max_value_length:
        type: integer
        format: int64
        title: maximum length of data to allow in an attribute value
    description: Params defines the set of params for the attribute module.
  provenance.attribute.v1.QueryAccountDataResponse:
    type: object
    properties:
      value:
        type: string
        description: value is the accountdata attribute value for the requested account.
    description: >-
      QueryAccountDataResponse is the response type for the Query/AccountData
      method.
  provenance.attribute.v1.QueryAttributeAccountsResponse:
    type: object
    properties:
      accounts:
        type: array
        items:
          type: string
        title: list of account addresses that have attributes of request name
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAttributeAccountsResponse is the response type for the
      Query/AttributeAccounts method.
  provenance.attribute.v1.QueryAttributeResponse:
    type: object
    properties:
      account:
        type: string
        description: >-
          a string containing the address of the account the attributes are
          assigned to.
      attributes:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: The attribute name.
            value:
              type: string
              format: byte
              description: The attribute value.
            attribute_type:
              description: The attribute value type.
              type: string
              enum:
                - ATTRIBUTE_TYPE_UNSPECIFIED
                - ATTRIBUTE_TYPE_UUID
                - ATTRIBUTE_TYPE_JSON
                - ATTRIBUTE_TYPE_STRING
                - ATTRIBUTE_TYPE_URI
                - ATTRIBUTE_TYPE_INT
                - ATTRIBUTE_TYPE_FLOAT
                - ATTRIBUTE_TYPE_PROTO
                - ATTRIBUTE_TYPE_BYTES
              default: ATTRIBUTE_TYPE_UNSPECIFIED
              title: >-
                AttributeType defines the type of the data stored in the
                attribute value
            address:
              type: string
              title: The address the attribute is bound to
            expiration_date:
              type: string
              format: date-time
              description: Time that an attribute will expire.
          title: >-
            Attribute holds a typed key/value structure for data associated with
            an account
        title: a list of attribute values
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAttributeResponse is the response type for the Query/Attribute
      method.
  provenance.attribute.v1.QueryAttributesResponse:
    type: object
    properties:
      account:
        type: string
        title: >-
          a string containing the address of the account the attributes are
          assigned to=
      attributes:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: The attribute name.
            value:
              type: string
              format: byte
              description: The attribute value.
            attribute_type:
              description: The attribute value type.
              type: string
              enum:
                - ATTRIBUTE_TYPE_UNSPECIFIED
                - ATTRIBUTE_TYPE_UUID
                - ATTRIBUTE_TYPE_JSON
                - ATTRIBUTE_TYPE_STRING
                - ATTRIBUTE_TYPE_URI
                - ATTRIBUTE_TYPE_INT
                - ATTRIBUTE_TYPE_FLOAT
                - ATTRIBUTE_TYPE_PROTO
                - ATTRIBUTE_TYPE_BYTES
              default: ATTRIBUTE_TYPE_UNSPECIFIED
              title: >-
                AttributeType defines the type of the data stored in the
                attribute value
            address:
              type: string
              title: The address the attribute is bound to
            expiration_date:
              type: string
              format: date-time
              description: Time that an attribute will expire.
          title: >-
            Attribute holds a typed key/value structure for data associated with
            an account
        title: a list of attribute values
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAttributesResponse is the response type for the Query/Attributes
      method.
  provenance.attribute.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          max_value_length:
            type: integer
            format: int64
            title: maximum length of data to allow in an attribute value
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  provenance.attribute.v1.QueryScanResponse:
    type: object
    properties:
      account:
        type: string
        title: >-
          a string containing the address of the account the attributes are
          assigned to=
      attributes:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: The attribute name.
            value:
              type: string
              format: byte
              description: The attribute value.
            attribute_type:
              description: The attribute value type.
              type: string
              enum:
                - ATTRIBUTE_TYPE_UNSPECIFIED
                - ATTRIBUTE_TYPE_UUID
                - ATTRIBUTE_TYPE_JSON
                - ATTRIBUTE_TYPE_STRING
                - ATTRIBUTE_TYPE_URI
                - ATTRIBUTE_TYPE_INT
                - ATTRIBUTE_TYPE_FLOAT
                - ATTRIBUTE_TYPE_PROTO
                - ATTRIBUTE_TYPE_BYTES
              default: ATTRIBUTE_TYPE_UNSPECIFIED
              title: >-
                AttributeType defines the type of the data stored in the
                attribute value
            address:
              type: string
              title: The address the attribute is bound to
            expiration_date:
              type: string
              format: date-time
              description: Time that an attribute will expire.
          title: >-
            Attribute holds a typed key/value structure for data associated with
            an account
        title: a list of attribute values
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: QueryScanResponse is the response type for the Query/Scan method.
  provenance.attribute.v1.MsgAddAttributeResponse:
    type: object
    description: MsgAddAttributeResponse defines the Msg/AddAttribute response type.
  provenance.attribute.v1.MsgDeleteAttributeResponse:
    type: object
    description: MsgDeleteAttributeResponse defines the Msg/DeleteAttribute response type.
  provenance.attribute.v1.MsgDeleteDistinctAttributeResponse:
    type: object
    description: >-
      MsgDeleteDistinctAttributeResponse defines the Msg/DeleteDistinctAttribute
      response type.
  provenance.attribute.v1.MsgSetAccountDataResponse:
    type: object
    description: MsgSetAccountDataResponse defines the Msg/SetAccountData response type.
  provenance.attribute.v1.MsgUpdateAttributeExpirationResponse:
    type: object
    description: MsgUpdateAttributeExpirationResponse defines the Msg/Vote response type.
  provenance.attribute.v1.MsgUpdateAttributeResponse:
    type: object
    description: MsgUpdateAttributeResponse defines the Msg/UpdateAttribute response type.
  provenance.marker.v1.Access:
    type: string
    enum:
      - ACCESS_UNSPECIFIED
      - ACCESS_MINT
      - ACCESS_BURN
      - ACCESS_DEPOSIT
      - ACCESS_WITHDRAW
      - ACCESS_DELETE
      - ACCESS_ADMIN
      - ACCESS_TRANSFER
    default: ACCESS_UNSPECIFIED
    description: >-
      Access defines the different types of permissions that a marker supports
      granting to an address.

       - ACCESS_UNSPECIFIED: ACCESS_UNSPECIFIED defines a no-op vote option.
       - ACCESS_MINT: ACCESS_MINT is the ability to increase the supply of a marker
       - ACCESS_BURN: ACCESS_BURN is the ability to decrease the supply of the marker using coin held by the marker.
       - ACCESS_DEPOSIT: ACCESS_DEPOSIT is the ability to set a marker reference to this marker in the metadata/scopes module
       - ACCESS_WITHDRAW: ACCESS_WITHDRAW is the ability to remove marker references to this marker in from metadata/scopes or
      transfer coin from this marker account to another account.
       - ACCESS_DELETE: ACCESS_DELETE is the ability to move a proposed, finalized or active marker into the cancelled state. This
      access also allows cancelled markers to be marked for deletion
       - ACCESS_ADMIN: ACCESS_ADMIN is the ability to add access grants for accounts to the list of marker permissions.
       - ACCESS_TRANSFER: ACCESS_TRANSFER is the ability to invoke a send operation using the marker module to facilitate exchange.
      This access right is only supported on RESTRICTED markers.
  provenance.marker.v1.AccessGrant:
    type: object
    properties:
      address:
        type: string
      permissions:
        type: array
        items:
          type: string
          enum:
            - ACCESS_UNSPECIFIED
            - ACCESS_MINT
            - ACCESS_BURN
            - ACCESS_DEPOSIT
            - ACCESS_WITHDRAW
            - ACCESS_DELETE
            - ACCESS_ADMIN
            - ACCESS_TRANSFER
          default: ACCESS_UNSPECIFIED
          description: >-
            Access defines the different types of permissions that a marker
            supports granting to an address.

             - ACCESS_UNSPECIFIED: ACCESS_UNSPECIFIED defines a no-op vote option.
             - ACCESS_MINT: ACCESS_MINT is the ability to increase the supply of a marker
             - ACCESS_BURN: ACCESS_BURN is the ability to decrease the supply of the marker using coin held by the marker.
             - ACCESS_DEPOSIT: ACCESS_DEPOSIT is the ability to set a marker reference to this marker in the metadata/scopes module
             - ACCESS_WITHDRAW: ACCESS_WITHDRAW is the ability to remove marker references to this marker in from metadata/scopes or
            transfer coin from this marker account to another account.
             - ACCESS_DELETE: ACCESS_DELETE is the ability to move a proposed, finalized or active marker into the cancelled state. This
            access also allows cancelled markers to be marked for deletion
             - ACCESS_ADMIN: ACCESS_ADMIN is the ability to add access grants for accounts to the list of marker permissions.
             - ACCESS_TRANSFER: ACCESS_TRANSFER is the ability to invoke a send operation using the marker module to facilitate exchange.
            This access right is only supported on RESTRICTED markers.
    description: >-
      AccessGrant associates a collection of permissions with an address for
      delegated marker account control.
  provenance.marker.v1.Balance:
    type: object
    properties:
      address:
        type: string
        description: address is the address of the balance holder.
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: coins defines the different coins this balance holds.
    title: >-
      Balance defines an account address and balance pair used in queries for
      accounts holding a marker
  provenance.marker.v1.MarkerStatus:
    type: string
    enum:
      - MARKER_STATUS_UNSPECIFIED
      - MARKER_STATUS_PROPOSED
      - MARKER_STATUS_FINALIZED
      - MARKER_STATUS_ACTIVE
      - MARKER_STATUS_CANCELLED
      - MARKER_STATUS_DESTROYED
    default: MARKER_STATUS_UNSPECIFIED
    description: |-
      MarkerStatus defines the various states a marker account can be in.

       - MARKER_STATUS_UNSPECIFIED: MARKER_STATUS_UNSPECIFIED - Unknown/Invalid Marker Status
       - MARKER_STATUS_PROPOSED: MARKER_STATUS_PROPOSED - Initial configuration period, updates allowed, token supply not created.
       - MARKER_STATUS_FINALIZED: MARKER_STATUS_FINALIZED - Configuration finalized, ready for supply creation
       - MARKER_STATUS_ACTIVE: MARKER_STATUS_ACTIVE - Supply is created, rules are in force.
       - MARKER_STATUS_CANCELLED: MARKER_STATUS_CANCELLED - Marker has been cancelled, pending destroy
       - MARKER_STATUS_DESTROYED: MARKER_STATUS_DESTROYED - Marker supply has all been recalled, marker is considered destroyed and no further
      actions allowed.
  provenance.marker.v1.NetAssetValue:
    type: object
    properties:
      price:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        title: price is the complete value of the asset's volume
      volume:
        type: string
        format: uint64
        title: >-
          volume is the number of tokens of the marker that were purchased for
          the price
      updated_block_height:
        type: string
        format: uint64
        title: updated_block_height is the block height of last update
    title: NetAssetValue defines a marker's net asset value
  provenance.marker.v1.Params:
    type: object
    properties:
      max_total_supply:
        type: string
        format: uint64
        title: maximum amount of supply to allow a marker to be created with
      enable_governance:
        type: boolean
        format: boolean
        description: indicates if governance based controls of markers is allowed.
      unrestricted_denom_regex:
        type: string
        title: >-
          a regular expression used to validate marker denom values from normal
          create requests (governance

          requests are only subject to platform coin validation denom
          expression)
    description: Params defines the set of params for the account module.
  provenance.marker.v1.QueryAccessResponse:
    type: object
    properties:
      accounts:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            permissions:
              type: array
              items:
                type: string
                enum:
                  - ACCESS_UNSPECIFIED
                  - ACCESS_MINT
                  - ACCESS_BURN
                  - ACCESS_DEPOSIT
                  - ACCESS_WITHDRAW
                  - ACCESS_DELETE
                  - ACCESS_ADMIN
                  - ACCESS_TRANSFER
                default: ACCESS_UNSPECIFIED
                description: >-
                  Access defines the different types of permissions that a
                  marker supports granting to an address.

                   - ACCESS_UNSPECIFIED: ACCESS_UNSPECIFIED defines a no-op vote option.
                   - ACCESS_MINT: ACCESS_MINT is the ability to increase the supply of a marker
                   - ACCESS_BURN: ACCESS_BURN is the ability to decrease the supply of the marker using coin held by the marker.
                   - ACCESS_DEPOSIT: ACCESS_DEPOSIT is the ability to set a marker reference to this marker in the metadata/scopes module
                   - ACCESS_WITHDRAW: ACCESS_WITHDRAW is the ability to remove marker references to this marker in from metadata/scopes or
                  transfer coin from this marker account to another account.
                   - ACCESS_DELETE: ACCESS_DELETE is the ability to move a proposed, finalized or active marker into the cancelled state. This
                  access also allows cancelled markers to be marked for deletion
                   - ACCESS_ADMIN: ACCESS_ADMIN is the ability to add access grants for accounts to the list of marker permissions.
                   - ACCESS_TRANSFER: ACCESS_TRANSFER is the ability to invoke a send operation using the marker module to facilitate exchange.
                  This access right is only supported on RESTRICTED markers.
          description: >-
            AccessGrant associates a collection of permissions with an address
            for delegated marker account control.
    description: >-
      QueryAccessResponse is the response type for the Query/MarkerAccess
      method.
  provenance.marker.v1.QueryAccountDataResponse:
    type: object
    properties:
      value:
        type: string
        description: The accountdata for the requested denom.
    title: QueryAccountDataResponse is the response type for the Query/AccountData
  provenance.marker.v1.QueryAllMarkersResponse:
    type: object
    properties:
      markers:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllMarkersResponse is the response type for the Query/AllMarkers
      method.
  provenance.marker.v1.QueryDenomMetadataResponse:
    type: object
    properties:
      metadata:
        type: object
        properties:
          description:
            type: string
          denom_units:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                  description: >-
                    denom represents the string name of the given denom unit
                    (e.g uatom).
                exponent:
                  type: integer
                  format: int64
                  description: >-
                    exponent represents power of 10 exponent that one must

                    raise the base_denom to in order to equal the given
                    DenomUnit's denom

                    1 denom = 10^exponent base_denom

                    (e.g. with a base_denom of uatom, one can create a DenomUnit
                    of 'atom' with

                    exponent = 6, thus: 1 atom = 10^6 uatom).
                aliases:
                  type: array
                  items:
                    type: string
                  title: aliases is a list of string aliases for the given denom
              description: |-
                DenomUnit represents a struct that describes a given
                denomination unit of the basic token.
            title: denom_units represents the list of DenomUnit's for a given coin
          base:
            type: string
            description: >-
              base represents the base denom (should be the DenomUnit with
              exponent = 0).
          display:
            type: string
            description: |-
              display indicates the suggested denom that should be
              displayed in clients.
          name:
            type: string
            description: 'Since: cosmos-sdk 0.43'
            title: 'name defines the name of the token (eg: Cosmos Atom)'
          symbol:
            type: string
            description: >-
              symbol is the token symbol usually shown on exchanges (eg: ATOM).
              This can

              be the same as the display.


              Since: cosmos-sdk 0.43
          uri:
            type: string
            description: >-
              URI to a document (on or off-chain) that contains additional
              information. Optional.


              Since: cosmos-sdk 0.46
          uri_hash:
            type: string
            description: >-
              URIHash is a sha256 hash of a document pointed by URI. It's used
              to verify that

              the document didn't change. Optional.


              Since: cosmos-sdk 0.46
        description: |-
          Metadata represents a struct that describes
          a basic token.
    title: >-
      QueryDenomMetadataResponse is the response type for the
      Query/DenomMetadata
  provenance.marker.v1.QueryEscrowResponse:
    type: object
    properties:
      escrow:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: >-
      QueryEscrowResponse is the response type for the Query/MarkerEscrow
      method.
  provenance.marker.v1.QueryHoldingResponse:
    type: object
    properties:
      balances:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              description: address is the address of the balance holder.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: coins defines the different coins this balance holds.
          title: >-
            Balance defines an account address and balance pair used in queries
            for accounts holding a marker
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryHoldingResponse is the response type for the Query/MarkerHolders
      method.
  provenance.marker.v1.QueryMarkerResponse:
    type: object
    properties:
      marker:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: QueryMarkerResponse is the response type for the Query/Marker method.
  provenance.marker.v1.QueryNetAssetValuesResponse:
    type: object
    properties:
      net_asset_values:
        type: array
        items:
          type: object
          properties:
            price:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              title: price is the complete value of the asset's volume
            volume:
              type: string
              format: uint64
              title: >-
                volume is the number of tokens of the marker that were purchased
                for the price
            updated_block_height:
              type: string
              format: uint64
              title: updated_block_height is the block height of last update
          title: NetAssetValue defines a marker's net asset value
        title: net asset values for marker denom
    description: >-
      QueryNetAssetValuesRequest is the response type for the
      Query/NetAssetValues method.
  provenance.marker.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          max_total_supply:
            type: string
            format: uint64
            title: maximum amount of supply to allow a marker to be created with
          enable_governance:
            type: boolean
            format: boolean
            description: indicates if governance based controls of markers is allowed.
          unrestricted_denom_regex:
            type: string
            title: >-
              a regular expression used to validate marker denom values from
              normal create requests (governance

              requests are only subject to platform coin validation denom
              expression)
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  provenance.marker.v1.QuerySupplyResponse:
    type: object
    properties:
      amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: >-
      QuerySupplyResponse is the response type for the Query/MarkerSupply
      method.
  ibc.applications.transfer.v1.MsgTransfer:
    type: object
    properties:
      source_port:
        type: string
        title: the port on which the packet will be sent
      source_channel:
        type: string
        title: the channel by which the packet will be sent
      token:
        title: the tokens to be transferred
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      sender:
        type: string
        title: the sender address
      receiver:
        type: string
        title: the recipient address on the destination chain
      timeout_height:
        description: |-
          Timeout height relative to the current block height.
          The timeout is disabled when set to 0.
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      timeout_timestamp:
        type: string
        format: uint64
        description: |-
          Timeout timestamp in absolute nanoseconds since unix epoch.
          The timeout is disabled when set to 0.
      memo:
        type: string
        title: optional memo
    title: >-
      MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between

      ICS20 enabled chains. See ICS Spec here:

      https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
  ibc.core.client.v1.Height:
    type: object
    properties:
      revision_number:
        type: string
        format: uint64
        title: the revision that the client is currently on
      revision_height:
        type: string
        format: uint64
        title: the height within the given revision
    description: |-
      Normally the RevisionHeight is incremented at each height while keeping
      RevisionNumber the same. However some consensus algorithms may choose to
      reset the height in certain conditions e.g. hard forks, state-machine
      breaking changes In these cases, the RevisionNumber is incremented so that
      height continues to be monitonically increasing even as the RevisionHeight
      gets reset
    title: >-
      Height is a monotonically increasing data type

      that can be compared against another Height for the purposes of updating
      and

      freezing clients
  provenance.marker.v1.MarkerType:
    type: string
    enum:
      - MARKER_TYPE_UNSPECIFIED
      - MARKER_TYPE_COIN
      - MARKER_TYPE_RESTRICTED
    default: MARKER_TYPE_UNSPECIFIED
    description: >-
      - MARKER_TYPE_UNSPECIFIED: MARKER_TYPE_UNSPECIFIED is an invalid/unknown
      marker type.
       - MARKER_TYPE_COIN: MARKER_TYPE_COIN is a marker that represents a standard fungible coin (default).
       - MARKER_TYPE_RESTRICTED: MARKER_TYPE_RESTRICTED is a marker that represents a denom with send_enabled = false.
    title: MarkerType defines the types of marker
  provenance.marker.v1.MsgActivateResponse:
    type: object
    title: MsgActivateResponse defines the Msg/Activate response type
  provenance.marker.v1.MsgAddAccessResponse:
    type: object
    title: MsgAddAccessResponse defines the Msg/AddAccess response type
  provenance.marker.v1.MsgAddFinalizeActivateMarkerResponse:
    type: object
    title: >-
      MsgAddFinalizeActivateMarkerResponse defines the
      Msg/AddFinalizeActivateMarker response type
  provenance.marker.v1.MsgAddMarkerResponse:
    type: object
    title: MsgAddMarkerResponse defines the Msg/AddMarker response type
  provenance.marker.v1.MsgAddNetAssetValuesResponse:
    type: object
    title: >-
      MsgAddNetAssetValuesResponse defines the Msg/AddNetAssetValue response
      type
  provenance.marker.v1.MsgBurnResponse:
    type: object
    title: MsgBurnResponse defines the Msg/Burn response type
  provenance.marker.v1.MsgCancelResponse:
    type: object
    title: MsgCancelResponse defines the Msg/Cancel response type
  provenance.marker.v1.MsgDeleteAccessResponse:
    type: object
    title: MsgDeleteAccessResponse defines the Msg/DeleteAccess response type
  provenance.marker.v1.MsgDeleteResponse:
    type: object
    title: MsgDeleteResponse defines the Msg/Delete response type
  provenance.marker.v1.MsgFinalizeResponse:
    type: object
    title: MsgFinalizeResponse defines the Msg/Finalize response type
  provenance.marker.v1.MsgGrantAllowanceResponse:
    type: object
    description: >-
      MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response
      type.
  provenance.marker.v1.MsgIbcTransferResponse:
    type: object
    title: MsgIbcTransferResponse defines the Msg/IbcTransfer response type
  provenance.marker.v1.MsgMintResponse:
    type: object
    title: MsgMintResponse defines the Msg/Mint response type
  provenance.marker.v1.MsgSetAccountDataResponse:
    type: object
    title: MsgSetAccountDataResponse defines the Msg/SetAccountData response type
  provenance.marker.v1.MsgSetDenomMetadataResponse:
    type: object
    title: MsgSetDenomMetadataResponse defines the Msg/SetDenomMetadata response type
  provenance.marker.v1.MsgSupplyIncreaseProposalResponse:
    type: object
    title: >-
      MsgSupplyIncreaseProposalResponse defines the Msg/SupplyIncreaseProposal
      response type
  provenance.marker.v1.MsgTransferResponse:
    type: object
    title: MsgTransferResponse defines the Msg/Transfer response type
  provenance.marker.v1.MsgUpdateForcedTransferResponse:
    type: object
    title: >-
      MsgUpdateForcedTransferResponse defines the Msg/UpdateForcedTransfer
      response type
  provenance.marker.v1.MsgUpdateRequiredAttributesResponse:
    type: object
    title: >-
      MsgUpdateRequiredAttributesResponse defines the
      Msg/UpdateRequiredAttributes response type
  provenance.marker.v1.MsgUpdateSendDenyListResponse:
    type: object
    title: >-
      MsgUpdateSendDenyListResponse defines the Msg/UpdateSendDenyList response
      type
  provenance.marker.v1.MsgWithdrawResponse:
    type: object
    title: MsgWithdrawResponse defines the Msg/Withdraw response type
  provenance.metadata.v1.AccountDataResponse:
    type: object
    properties:
      value:
        type: string
        description: The accountdata for the requested metadata address.
    description: >-
      AccountDataResponse is the response type for the Query/AccountData RPC
      method.
  provenance.metadata.v1.AuditFields:
    type: object
    properties:
      created_date:
        type: string
        format: date-time
        title: the date/time when this entry was created
      created_by:
        type: string
        title: the address of the account that created this record
      updated_date:
        type: string
        format: date-time
        title: the date/time when this entry was last updated
      updated_by:
        type: string
        title: the address of the account that modified this record
      version:
        type: integer
        format: int64
        title: an optional version number that is incremented with each update
      message:
        type: string
        title: an optional message associated with the creation/update event
    title: >-
      AuditFields capture information about the last account to make
      modifications and when they were made
  provenance.metadata.v1.ContractSpecIdInfo:
    type: object
    properties:
      contract_spec_id:
        type: string
        format: byte
        description: >-
          contract_spec_id is the raw bytes of the contract specification
          address.
      contract_spec_id_prefix:
        type: string
        format: byte
        description: contract_spec_id_prefix is the prefix portion of the contract_spec_id.
      contract_spec_id_contract_spec_uuid:
        type: string
        format: byte
        description: >-
          contract_spec_id_contract_spec_uuid is the contract_spec_uuid portion
          of the contract_spec_id.
      contract_spec_addr:
        type: string
        description: >-
          contract_spec_addr is the bech32 string version of the
          contract_spec_id.
      contract_spec_uuid:
        type: string
        description: >-
          contract_spec_uuid is the uuid hex string of the
          contract_spec_id_contract_spec_uuid.
    description: >-
      ContractSpecIdInfo contains various info regarding a contract
      specification id.
  provenance.metadata.v1.ContractSpecification:
    type: object
    properties:
      specification_id:
        type: string
        format: byte
        title: unique identifier for this specification on chain
      description:
        title: Description information for this contract specification
        type: object
        properties:
          name:
            type: string
            description: A Name for this thing.
          description:
            type: string
            description: A description of this thing.
          website_url:
            type: string
            description: URL to find even more info.
          icon_url:
            type: string
            description: URL of an icon.
        description: >-
          Description holds general information that is handy to associate with
          a structure.
      owner_addresses:
        type: array
        items:
          type: string
        title: Address of the account that owns this specificaiton
      parties_involved:
        type: array
        items:
          type: string
          enum:
            - PARTY_TYPE_UNSPECIFIED
            - PARTY_TYPE_ORIGINATOR
            - PARTY_TYPE_SERVICER
            - PARTY_TYPE_INVESTOR
            - PARTY_TYPE_CUSTODIAN
            - PARTY_TYPE_OWNER
            - PARTY_TYPE_AFFILIATE
            - PARTY_TYPE_OMNIBUS
            - PARTY_TYPE_PROVENANCE
            - PARTY_TYPE_CONTROLLER
            - PARTY_TYPE_VALIDATOR
          default: PARTY_TYPE_UNSPECIFIED
          description: >-
            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
            condition
             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
          title: PartyType are the different roles parties on a contract may use
        title: >-
          a list of party roles that must be fullfilled when signing a
          transaction for this contract specification
      resource_id:
        type: string
        format: byte
        title: the address of a record on chain that represents this contract
      hash:
        type: string
        title: the hash of contract binary (off-chain instance)
      class_name:
        type: string
        title: name of the class/type of this contract executable
    title: >-
      ContractSpecification defines the required parties, resources, conditions,
      and consideration outputs for a contract
  provenance.metadata.v1.ContractSpecificationRequest:
    type: object
    properties:
      specification_id:
        type: string
        description: >-
          specification_id can either be a uuid, e.g.
          def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
          specification

          address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

          It can also be a record specification address, e.g.

          recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
      include_record_specs:
        type: boolean
        format: boolean
        description: >-
          include_record_specs is a flag for whether to include the the record
          specifications of this contract specification

          in the response.
      exclude_id_info:
        type: boolean
        format: boolean
        description: >-
          exclude_id_info is a flag for whether to exclude the id info from the
          response.
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
    description: >-
      ContractSpecificationRequest is the request type for the
      Query/ContractSpecification RPC method.
  provenance.metadata.v1.ContractSpecificationResponse:
    type: object
    properties:
      contract_specification:
        description: contract_specification is the wrapped contract specification.
        type: object
        properties:
          specification:
            type: object
            properties:
              specification_id:
                type: string
                format: byte
                title: unique identifier for this specification on chain
              description:
                title: Description information for this contract specification
                type: object
                properties:
                  name:
                    type: string
                    description: A Name for this thing.
                  description:
                    type: string
                    description: A description of this thing.
                  website_url:
                    type: string
                    description: URL to find even more info.
                  icon_url:
                    type: string
                    description: URL of an icon.
                description: >-
                  Description holds general information that is handy to
                  associate with a structure.
              owner_addresses:
                type: array
                items:
                  type: string
                title: Address of the account that owns this specificaiton
              parties_involved:
                type: array
                items:
                  type: string
                  enum:
                    - PARTY_TYPE_UNSPECIFIED
                    - PARTY_TYPE_ORIGINATOR
                    - PARTY_TYPE_SERVICER
                    - PARTY_TYPE_INVESTOR
                    - PARTY_TYPE_CUSTODIAN
                    - PARTY_TYPE_OWNER
                    - PARTY_TYPE_AFFILIATE
                    - PARTY_TYPE_OMNIBUS
                    - PARTY_TYPE_PROVENANCE
                    - PARTY_TYPE_CONTROLLER
                    - PARTY_TYPE_VALIDATOR
                  default: PARTY_TYPE_UNSPECIFIED
                  description: >-
                    - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                    condition
                     - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                     - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                     - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                     - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                     - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                     - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                     - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                     - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                     - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                     - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                  title: >-
                    PartyType are the different roles parties on a contract may
                    use
                title: >-
                  a list of party roles that must be fullfilled when signing a
                  transaction for this contract specification
              resource_id:
                type: string
                format: byte
                title: the address of a record on chain that represents this contract
              hash:
                type: string
                title: the hash of contract binary (off-chain instance)
              class_name:
                type: string
                title: name of the class/type of this contract executable
            title: >-
              ContractSpecification defines the required parties, resources,
              conditions, and consideration outputs for a contract
            description: specification is the on-chain contract specification message.
          contract_spec_id_info:
            description: >-
              contract_spec_id_info contains information about the id/address of
              the contract specification.
            type: object
            properties:
              contract_spec_id:
                type: string
                format: byte
                description: >-
                  contract_spec_id is the raw bytes of the contract
                  specification address.
              contract_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  contract_spec_id_prefix is the prefix portion of the
                  contract_spec_id.
              contract_spec_id_contract_spec_uuid:
                type: string
                format: byte
                description: >-
                  contract_spec_id_contract_spec_uuid is the contract_spec_uuid
                  portion of the contract_spec_id.
              contract_spec_addr:
                type: string
                description: >-
                  contract_spec_addr is the bech32 string version of the
                  contract_spec_id.
              contract_spec_uuid:
                type: string
                description: >-
                  contract_spec_uuid is the uuid hex string of the
                  contract_spec_id_contract_spec_uuid.
      record_specifications:
        type: array
        items:
          type: object
          properties:
            specification:
              type: object
              properties:
                specification_id:
                  type: string
                  format: byte
                  title: unique identifier for this specification on chain
                name:
                  type: string
                  title: >-
                    Name of Record that will be created when this specification
                    is used
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        title: name for this input
                      type_name:
                        type: string
                        title: a type_name (typically a proto name or class_name)
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                    title: >-
                      InputSpecification defines a name, type_name, and source
                      reference (either on or off chain) to define an input

                      parameter
                  title: >-
                    A set of inputs that must be satisified to apply this
                    RecordSpecification and create a Record
                type_name:
                  type: string
                  title: >-
                    A type name for data associated with this record (typically
                    a class or proto name)
                result_type:
                  title: >-
                    Type of result for this record specification (must be RECORD
                    or RECORD_LIST)
                  type: string
                  enum:
                    - DEFINITION_TYPE_UNSPECIFIED
                    - DEFINITION_TYPE_PROPOSED
                    - DEFINITION_TYPE_RECORD
                    - DEFINITION_TYPE_RECORD_LIST
                  default: DEFINITION_TYPE_UNSPECIFIED
                  description: >-
                    - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED
                    indicates an unknown/invalid value
                     - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                     - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                     - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                    the same name
                responsible_parties:
                  type: array
                  items:
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    title: >-
                      PartyType are the different roles parties on a contract
                      may use
                  title: Type of party responsible for this record
              title: >-
                RecordSpecification defines the specification for a Record
                including allowed/required inputs/outputs
              description: specification is the on-chain record specification message.
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordSpecificationWrapper contains a single record specification
            and some extra identifiers for it.
        description: >-
          record_specifications is any number or wrapped record specifications
          associated with this contract_specification

          (if requested).
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          specification_id:
            type: string
            description: >-
              specification_id can either be a uuid, e.g.
              def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
              specification

              address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

              It can also be a record specification address, e.g.

              recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
          include_record_specs:
            type: boolean
            format: boolean
            description: >-
              include_record_specs is a flag for whether to include the the
              record specifications of this contract specification

              in the response.
          exclude_id_info:
            type: boolean
            format: boolean
            description: >-
              exclude_id_info is a flag for whether to exclude the id info from
              the response.
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
    description: >-
      ContractSpecificationResponse is the response type for the
      Query/ContractSpecification RPC method.
  provenance.metadata.v1.ContractSpecificationWrapper:
    type: object
    properties:
      specification:
        type: object
        properties:
          specification_id:
            type: string
            format: byte
            title: unique identifier for this specification on chain
          description:
            title: Description information for this contract specification
            type: object
            properties:
              name:
                type: string
                description: A Name for this thing.
              description:
                type: string
                description: A description of this thing.
              website_url:
                type: string
                description: URL to find even more info.
              icon_url:
                type: string
                description: URL of an icon.
            description: >-
              Description holds general information that is handy to associate
              with a structure.
          owner_addresses:
            type: array
            items:
              type: string
            title: Address of the account that owns this specificaiton
          parties_involved:
            type: array
            items:
              type: string
              enum:
                - PARTY_TYPE_UNSPECIFIED
                - PARTY_TYPE_ORIGINATOR
                - PARTY_TYPE_SERVICER
                - PARTY_TYPE_INVESTOR
                - PARTY_TYPE_CUSTODIAN
                - PARTY_TYPE_OWNER
                - PARTY_TYPE_AFFILIATE
                - PARTY_TYPE_OMNIBUS
                - PARTY_TYPE_PROVENANCE
                - PARTY_TYPE_CONTROLLER
                - PARTY_TYPE_VALIDATOR
              default: PARTY_TYPE_UNSPECIFIED
              description: >-
                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                condition
                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
              title: PartyType are the different roles parties on a contract may use
            title: >-
              a list of party roles that must be fullfilled when signing a
              transaction for this contract specification
          resource_id:
            type: string
            format: byte
            title: the address of a record on chain that represents this contract
          hash:
            type: string
            title: the hash of contract binary (off-chain instance)
          class_name:
            type: string
            title: name of the class/type of this contract executable
        title: >-
          ContractSpecification defines the required parties, resources,
          conditions, and consideration outputs for a contract
        description: specification is the on-chain contract specification message.
      contract_spec_id_info:
        description: >-
          contract_spec_id_info contains information about the id/address of the
          contract specification.
        type: object
        properties:
          contract_spec_id:
            type: string
            format: byte
            description: >-
              contract_spec_id is the raw bytes of the contract specification
              address.
          contract_spec_id_prefix:
            type: string
            format: byte
            description: >-
              contract_spec_id_prefix is the prefix portion of the
              contract_spec_id.
          contract_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              contract_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the contract_spec_id.
          contract_spec_addr:
            type: string
            description: >-
              contract_spec_addr is the bech32 string version of the
              contract_spec_id.
          contract_spec_uuid:
            type: string
            description: >-
              contract_spec_uuid is the uuid hex string of the
              contract_spec_id_contract_spec_uuid.
    description: >-
      ContractSpecificationWrapper contains a single contract specification and
      some extra identifiers for it.
  provenance.metadata.v1.ContractSpecificationsAllRequest:
    type: object
    properties:
      exclude_id_info:
        type: boolean
        format: boolean
        description: >-
          exclude_id_info is a flag for whether to exclude the id info from the
          response.
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      ContractSpecificationsAllRequest is the request type for the
      Query/ContractSpecificationsAll RPC method.
  provenance.metadata.v1.ContractSpecificationsAllResponse:
    type: object
    properties:
      contract_specifications:
        type: array
        items:
          type: object
          properties:
            specification:
              type: object
              properties:
                specification_id:
                  type: string
                  format: byte
                  title: unique identifier for this specification on chain
                description:
                  title: Description information for this contract specification
                  type: object
                  properties:
                    name:
                      type: string
                      description: A Name for this thing.
                    description:
                      type: string
                      description: A description of this thing.
                    website_url:
                      type: string
                      description: URL to find even more info.
                    icon_url:
                      type: string
                      description: URL of an icon.
                  description: >-
                    Description holds general information that is handy to
                    associate with a structure.
                owner_addresses:
                  type: array
                  items:
                    type: string
                  title: Address of the account that owns this specificaiton
                parties_involved:
                  type: array
                  items:
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    title: >-
                      PartyType are the different roles parties on a contract
                      may use
                  title: >-
                    a list of party roles that must be fullfilled when signing a
                    transaction for this contract specification
                resource_id:
                  type: string
                  format: byte
                  title: >-
                    the address of a record on chain that represents this
                    contract
                hash:
                  type: string
                  title: the hash of contract binary (off-chain instance)
                class_name:
                  type: string
                  title: name of the class/type of this contract executable
              title: >-
                ContractSpecification defines the required parties, resources,
                conditions, and consideration outputs for a contract
              description: specification is the on-chain contract specification message.
            contract_spec_id_info:
              description: >-
                contract_spec_id_info contains information about the id/address
                of the contract specification.
              type: object
              properties:
                contract_spec_id:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id is the raw bytes of the contract
                    specification address.
                contract_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_prefix is the prefix portion of the
                    contract_spec_id.
                contract_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_contract_spec_uuid is the
                    contract_spec_uuid portion of the contract_spec_id.
                contract_spec_addr:
                  type: string
                  description: >-
                    contract_spec_addr is the bech32 string version of the
                    contract_spec_id.
                contract_spec_uuid:
                  type: string
                  description: >-
                    contract_spec_uuid is the uuid hex string of the
                    contract_spec_id_contract_spec_uuid.
          description: >-
            ContractSpecificationWrapper contains a single contract
            specification and some extra identifiers for it.
        description: contract_specifications are the wrapped contract specifications.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          exclude_id_info:
            type: boolean
            format: boolean
            description: >-
              exclude_id_info is a flag for whether to exclude the id info from
              the response.
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      ContractSpecificationsAllResponse is the response type for the
      Query/ContractSpecificationsAll RPC method.
  provenance.metadata.v1.DefinitionType:
    type: string
    enum:
      - DEFINITION_TYPE_UNSPECIFIED
      - DEFINITION_TYPE_PROPOSED
      - DEFINITION_TYPE_RECORD
      - DEFINITION_TYPE_RECORD_LIST
    default: DEFINITION_TYPE_UNSPECIFIED
    description: >-
      - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED indicates an
      unknown/invalid value
       - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
       - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
       - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
      the same name
    title: DefinitionType indicates the required definition type for this value
  provenance.metadata.v1.Description:
    type: object
    properties:
      name:
        type: string
        description: A Name for this thing.
      description:
        type: string
        description: A description of this thing.
      website_url:
        type: string
        description: URL to find even more info.
      icon_url:
        type: string
        description: URL of an icon.
    description: >-
      Description holds general information that is handy to associate with a
      structure.
  provenance.metadata.v1.GetByAddrResponse:
    type: object
    properties:
      scopes:
        type: array
        items:
          type: object
          properties:
            scope_id:
              type: string
              format: byte
              title: >-
                Unique ID for this scope.  Implements sdk.Address interface for
                use where addresses are required in Cosmos
            specification_id:
              type: string
              format: byte
              title: >-
                the scope specification that contains the specifications for
                data elements allowed within this scope
            owners:
              type: array
              items:
                type: object
                properties:
                  address:
                    type: string
                    title: address of the account (on chain)
                  role:
                    title: >-
                      a role for this account within the context of the
                      processes used
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                  optional:
                    type: boolean
                    format: boolean
                    title: whether this party's signature is optional
                title: >-
                  A Party is an address with/in a given role associated with a
                  contract
              description: >-
                These parties represent top level owners of the records within. 
                These parties must sign any requests that modify

                the data within the scope.  These addresses are in union with
                parties listed on the sessions.
            data_access:
              type: array
              items:
                type: string
              description: >-
                Addresses in this list are authorized to receive off-chain data
                associated with this scope.
            value_owner_address:
              type: string
              description: >-
                An address that controls the value associated with this scope. 
                Standard blockchain accounts and marker accounts

                are supported for this value.  This attribute may only be
                changed by the entity indicated once it is set.
            require_party_rollup:
              type: boolean
              format: boolean
              description: >-
                Whether all parties in this scope and its sessions must be
                present in this scope's owners field.

                This also enables use of optional=true scope owners and session
                parties.
          description: >-
            Scope defines a root reference for a collection of records owned by
            one or more parties.
        description: scopes contains any scopes that were requested and found.
      sessions:
        type: array
        items:
          type: object
          properties:
            session_id:
              type: string
              format: byte
            specification_id:
              type: string
              format: byte
              description: >-
                unique id of the contract specification that was used to create
                this session.
            parties:
              type: array
              items:
                type: object
                properties:
                  address:
                    type: string
                    title: address of the account (on chain)
                  role:
                    title: >-
                      a role for this account within the context of the
                      processes used
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                  optional:
                    type: boolean
                    format: boolean
                    title: whether this party's signature is optional
                title: >-
                  A Party is an address with/in a given role associated with a
                  contract
              title: parties is the set of identities that signed this contract
            name:
              type: string
              title: >-
                name to associate with this session execution context, typically
                classname
            context:
              type: string
              format: byte
              description: >-
                context is a field for storing client specific data associated
                with a session.
            audit:
              description: >-
                Created by, updated by, timestamps, version number, and related
                info.
              type: object
              properties:
                created_date:
                  type: string
                  format: date-time
                  title: the date/time when this entry was created
                created_by:
                  type: string
                  title: the address of the account that created this record
                updated_date:
                  type: string
                  format: date-time
                  title: the date/time when this entry was last updated
                updated_by:
                  type: string
                  title: the address of the account that modified this record
                version:
                  type: integer
                  format: int64
                  title: >-
                    an optional version number that is incremented with each
                    update
                message:
                  type: string
                  title: >-
                    an optional message associated with the creation/update
                    event
              title: >-
                AuditFields capture information about the last account to make
                modifications and when they were made
          description: >-
            Session defines an execution context against a specific
            specification instance.

            The context will have a specification and set of parties involved.


            NOTE: When there are no more Records within a Scope that reference a
            Session, the Session is removed.
        description: sessions contains any sessions that were requested and found.
      records:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              title: >-
                name/identifier for this record.  Value must be unique within
                the scope.  Also known as a Fact name
            session_id:
              type: string
              format: byte
              title: >-
                id of the session context that was used to create this record
                (use with filtered kvprefix iterator)
            process:
              title: >-
                process contain information used to uniquely identify an
                execution on or off chain that generated this record
              type: object
              properties:
                address:
                  type: string
                  title: the address of a smart contract used for this process
                hash:
                  type: string
                  title: the hash of an off-chain process used
                name:
                  type: string
                  title: >-
                    a name associated with the process (type_name, classname or
                    smart contract common name)
                method:
                  type: string
                  title: >-
                    method is a name or reference to a specific operation
                    (method) within a class/contract that was invoked
            inputs:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Name value included to link back to the definition spec.
                  record_id:
                    type: string
                    format: byte
                    title: the address of a record on chain (For Established Records)
                  hash:
                    type: string
                    title: >-
                      the hash of an off-chain piece of information (For
                      Proposed Records)
                  type_name:
                    type: string
                    title: from proposed fact structure to unmarshal
                  status:
                    title: >-
                      Indicates if this input was a recorded fact on chain or
                      just a given hashed input
                    type: string
                    enum:
                      - RECORD_INPUT_STATUS_UNSPECIFIED
                      - RECORD_INPUT_STATUS_PROPOSED
                      - RECORD_INPUT_STATUS_RECORD
                    default: RECORD_INPUT_STATUS_UNSPECIFIED
                    description: >-
                      - RECORD_INPUT_STATUS_UNSPECIFIED:
                      RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                      invalid/unknown input type
                       - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                       - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                title: Tracks the inputs used to establish this record
              title: >-
                inputs used with the process to achieve the output on this
                record
            outputs:
              type: array
              items:
                type: object
                properties:
                  hash:
                    type: string
                    title: >-
                      Hash of the data output that was output/generated for this
                      record
                  status:
                    title: >-
                      Status of the process execution associated with this
                      output indicating success,failure, or pending
                    type: string
                    enum:
                      - RESULT_STATUS_UNSPECIFIED
                      - RESULT_STATUS_PASS
                      - RESULT_STATUS_SKIP
                      - RESULT_STATUS_FAIL
                    default: RESULT_STATUS_UNSPECIFIED
                    description: >-
                      - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED
                      indicates an unset condition
                       - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                       - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                       - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                title: >-
                  RecordOutput encapsulates the output of a process recorded on
                  chain
              title: >-
                output(s) is the results of executing the process on the given
                process indicated in this record
            specification_id:
              type: string
              format: byte
              description: >-
                specification_id is the id of the record specification that was
                used to create this record.
          title: >-
            A record (of fact) is attached to a session or each consideration
            output from a contract
        description: records contains any records that were requested and found.
      scope_specs:
        type: array
        items:
          type: object
          properties:
            specification_id:
              type: string
              format: byte
              title: unique identifier for this specification on chain
            description:
              description: General information about this scope specification.
              type: object
              properties:
                name:
                  type: string
                  description: A Name for this thing.
                description:
                  type: string
                  description: A description of this thing.
                website_url:
                  type: string
                  description: URL to find even more info.
                icon_url:
                  type: string
                  description: URL of an icon.
            owner_addresses:
              type: array
              items:
                type: string
              description: Addresses of the owners of this scope specification.
            parties_involved:
              type: array
              items:
                type: string
                enum:
                  - PARTY_TYPE_UNSPECIFIED
                  - PARTY_TYPE_ORIGINATOR
                  - PARTY_TYPE_SERVICER
                  - PARTY_TYPE_INVESTOR
                  - PARTY_TYPE_CUSTODIAN
                  - PARTY_TYPE_OWNER
                  - PARTY_TYPE_AFFILIATE
                  - PARTY_TYPE_OMNIBUS
                  - PARTY_TYPE_PROVENANCE
                  - PARTY_TYPE_CONTROLLER
                  - PARTY_TYPE_VALIDATOR
                default: PARTY_TYPE_UNSPECIFIED
                description: >-
                  - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                  condition
                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                title: >-
                  PartyType are the different roles parties on a contract may
                  use
              title: >-
                A list of parties that must be present on a scope (and their
                associated roles)
            contract_spec_ids:
              type: array
              items:
                type: string
                format: byte
              description: >-
                A list of contract specification ids allowed for a scope based
                on this specification.
          title: >-
            ScopeSpecification defines the required parties, resources,
            conditions, and consideration outputs for a contract
        description: >-
          scope_specs contains any scope specifications that were requested and
          found.
      contract_specs:
        type: array
        items:
          type: object
          properties:
            specification_id:
              type: string
              format: byte
              title: unique identifier for this specification on chain
            description:
              title: Description information for this contract specification
              type: object
              properties:
                name:
                  type: string
                  description: A Name for this thing.
                description:
                  type: string
                  description: A description of this thing.
                website_url:
                  type: string
                  description: URL to find even more info.
                icon_url:
                  type: string
                  description: URL of an icon.
              description: >-
                Description holds general information that is handy to associate
                with a structure.
            owner_addresses:
              type: array
              items:
                type: string
              title: Address of the account that owns this specificaiton
            parties_involved:
              type: array
              items:
                type: string
                enum:
                  - PARTY_TYPE_UNSPECIFIED
                  - PARTY_TYPE_ORIGINATOR
                  - PARTY_TYPE_SERVICER
                  - PARTY_TYPE_INVESTOR
                  - PARTY_TYPE_CUSTODIAN
                  - PARTY_TYPE_OWNER
                  - PARTY_TYPE_AFFILIATE
                  - PARTY_TYPE_OMNIBUS
                  - PARTY_TYPE_PROVENANCE
                  - PARTY_TYPE_CONTROLLER
                  - PARTY_TYPE_VALIDATOR
                default: PARTY_TYPE_UNSPECIFIED
                description: >-
                  - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                  condition
                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                title: >-
                  PartyType are the different roles parties on a contract may
                  use
              title: >-
                a list of party roles that must be fullfilled when signing a
                transaction for this contract specification
            resource_id:
              type: string
              format: byte
              title: the address of a record on chain that represents this contract
            hash:
              type: string
              title: the hash of contract binary (off-chain instance)
            class_name:
              type: string
              title: name of the class/type of this contract executable
          title: >-
            ContractSpecification defines the required parties, resources,
            conditions, and consideration outputs for a contract
        description: >-
          contract_specs contains any contract specifications that were
          requested and found.
      record_specs:
        type: array
        items:
          type: object
          properties:
            specification_id:
              type: string
              format: byte
              title: unique identifier for this specification on chain
            name:
              type: string
              title: >-
                Name of Record that will be created when this specification is
                used
            inputs:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    title: name for this input
                  type_name:
                    type: string
                    title: a type_name (typically a proto name or class_name)
                  record_id:
                    type: string
                    format: byte
                    title: the address of a record on chain (For Established Records)
                  hash:
                    type: string
                    title: >-
                      the hash of an off-chain piece of information (For
                      Proposed Records)
                title: >-
                  InputSpecification defines a name, type_name, and source
                  reference (either on or off chain) to define an input

                  parameter
              title: >-
                A set of inputs that must be satisified to apply this
                RecordSpecification and create a Record
            type_name:
              type: string
              title: >-
                A type name for data associated with this record (typically a
                class or proto name)
            result_type:
              title: >-
                Type of result for this record specification (must be RECORD or
                RECORD_LIST)
              type: string
              enum:
                - DEFINITION_TYPE_UNSPECIFIED
                - DEFINITION_TYPE_PROPOSED
                - DEFINITION_TYPE_RECORD
                - DEFINITION_TYPE_RECORD_LIST
              default: DEFINITION_TYPE_UNSPECIFIED
              description: >-
                - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED
                indicates an unknown/invalid value
                 - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                 - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                 - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                the same name
            responsible_parties:
              type: array
              items:
                type: string
                enum:
                  - PARTY_TYPE_UNSPECIFIED
                  - PARTY_TYPE_ORIGINATOR
                  - PARTY_TYPE_SERVICER
                  - PARTY_TYPE_INVESTOR
                  - PARTY_TYPE_CUSTODIAN
                  - PARTY_TYPE_OWNER
                  - PARTY_TYPE_AFFILIATE
                  - PARTY_TYPE_OMNIBUS
                  - PARTY_TYPE_PROVENANCE
                  - PARTY_TYPE_CONTROLLER
                  - PARTY_TYPE_VALIDATOR
                default: PARTY_TYPE_UNSPECIFIED
                description: >-
                  - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                  condition
                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                title: >-
                  PartyType are the different roles parties on a contract may
                  use
              title: Type of party responsible for this record
          title: >-
            RecordSpecification defines the specification for a Record including
            allowed/required inputs/outputs
        description: >-
          record_specs contains any record specifications that were requested
          and found.
      not_found:
        type: array
        items:
          type: string
        description: not_found contains any addrs requested but not found.
    description: GetByAddrResponse is the response type for the Query/GetByAddr RPC method.
  provenance.metadata.v1.InputSpecification:
    type: object
    properties:
      name:
        type: string
        title: name for this input
      type_name:
        type: string
        title: a type_name (typically a proto name or class_name)
      record_id:
        type: string
        format: byte
        title: the address of a record on chain (For Established Records)
      hash:
        type: string
        title: the hash of an off-chain piece of information (For Proposed Records)
    title: >-
      InputSpecification defines a name, type_name, and source reference (either
      on or off chain) to define an input

      parameter
  provenance.metadata.v1.OSAllLocatorsRequest:
    type: object
    properties:
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      OSAllLocatorsRequest is the request type for the Query/OSAllLocators RPC
      method.
  provenance.metadata.v1.OSAllLocatorsResponse:
    type: object
    properties:
      locators:
        type: array
        items:
          type: object
          properties:
            owner:
              type: string
              title: account address the endpoint is owned by
            locator_uri:
              type: string
              title: locator endpoint uri
            encryption_key:
              type: string
              title: owners encryption key address
          description: >-
            Defines an Locator object stored on chain, which represents a owner(
            blockchain address) associated with a endpoint

            uri for it's associated object store.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      OSAllLocatorsResponse is the response type for the Query/OSAllLocators RPC
      method.
  provenance.metadata.v1.OSLocatorParams:
    type: object
    properties:
      max_uri_length:
        type: integer
        format: int64
    description: Params defines the parameters for the metadata-locator module methods.
  provenance.metadata.v1.OSLocatorParamsRequest:
    type: object
    properties:
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
    description: >-
      OSLocatorParamsRequest is the request type for the Query/OSLocatorParams
      RPC method.
  provenance.metadata.v1.OSLocatorParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          max_uri_length:
            type: integer
            format: int64
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
    description: >-
      OSLocatorParamsResponse is the response type for the Query/OSLocatorParams
      RPC method.
  provenance.metadata.v1.OSLocatorRequest:
    type: object
    properties:
      owner:
        type: string
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
    description: OSLocatorRequest is the request type for the Query/OSLocator RPC method.
  provenance.metadata.v1.OSLocatorResponse:
    type: object
    properties:
      locator:
        type: object
        properties:
          owner:
            type: string
            title: account address the endpoint is owned by
          locator_uri:
            type: string
            title: locator endpoint uri
          encryption_key:
            type: string
            title: owners encryption key address
        description: >-
          Defines an Locator object stored on chain, which represents a owner(
          blockchain address) associated with a endpoint

          uri for it's associated object store.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          owner:
            type: string
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
    description: OSLocatorResponse is the response type for the Query/OSLocator RPC method.
  provenance.metadata.v1.OSLocatorsByScopeRequest:
    type: object
    properties:
      scope_id:
        type: string
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
    description: >-
      OSLocatorsByScopeRequest is the request type for the
      Query/OSLocatorsByScope RPC method.
  provenance.metadata.v1.OSLocatorsByScopeResponse:
    type: object
    properties:
      locators:
        type: array
        items:
          type: object
          properties:
            owner:
              type: string
              title: account address the endpoint is owned by
            locator_uri:
              type: string
              title: locator endpoint uri
            encryption_key:
              type: string
              title: owners encryption key address
          description: >-
            Defines an Locator object stored on chain, which represents a owner(
            blockchain address) associated with a endpoint

            uri for it's associated object store.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          scope_id:
            type: string
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
    description: >-
      OSLocatorsByScopeResponse is the response type for the
      Query/OSLocatorsByScope RPC method.
  provenance.metadata.v1.OSLocatorsByURIRequest:
    type: object
    properties:
      uri:
        type: string
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      OSLocatorsByURIRequest is the request type for the Query/OSLocatorsByURI
      RPC method.
  provenance.metadata.v1.OSLocatorsByURIResponse:
    type: object
    properties:
      locators:
        type: array
        items:
          type: object
          properties:
            owner:
              type: string
              title: account address the endpoint is owned by
            locator_uri:
              type: string
              title: locator endpoint uri
            encryption_key:
              type: string
              title: owners encryption key address
          description: >-
            Defines an Locator object stored on chain, which represents a owner(
            blockchain address) associated with a endpoint

            uri for it's associated object store.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          uri:
            type: string
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      OSLocatorsByURIResponse is the response type for the Query/OSLocatorsByURI
      RPC method.
  provenance.metadata.v1.ObjectStoreLocator:
    type: object
    properties:
      owner:
        type: string
        title: account address the endpoint is owned by
      locator_uri:
        type: string
        title: locator endpoint uri
      encryption_key:
        type: string
        title: owners encryption key address
    description: >-
      Defines an Locator object stored on chain, which represents a owner(
      blockchain address) associated with a endpoint

      uri for it's associated object store.
  provenance.metadata.v1.OwnershipRequest:
    type: object
    properties:
      address:
        type: string
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: OwnershipRequest is the request type for the Query/Ownership RPC method.
  provenance.metadata.v1.OwnershipResponse:
    type: object
    properties:
      scope_uuids:
        type: array
        items:
          type: string
        description: A list of scope ids (uuid) associated with the given address.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          address:
            type: string
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: OwnershipResponse is the response type for the Query/Ownership RPC method.
  provenance.metadata.v1.Params:
    type: object
    description: Params defines the set of params for the metadata module.
  provenance.metadata.v1.Party:
    type: object
    properties:
      address:
        type: string
        title: address of the account (on chain)
      role:
        title: a role for this account within the context of the processes used
        type: string
        enum:
          - PARTY_TYPE_UNSPECIFIED
          - PARTY_TYPE_ORIGINATOR
          - PARTY_TYPE_SERVICER
          - PARTY_TYPE_INVESTOR
          - PARTY_TYPE_CUSTODIAN
          - PARTY_TYPE_OWNER
          - PARTY_TYPE_AFFILIATE
          - PARTY_TYPE_OMNIBUS
          - PARTY_TYPE_PROVENANCE
          - PARTY_TYPE_CONTROLLER
          - PARTY_TYPE_VALIDATOR
        default: PARTY_TYPE_UNSPECIFIED
        description: |-
          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error condition
           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
      optional:
        type: boolean
        format: boolean
        title: whether this party's signature is optional
    title: A Party is an address with/in a given role associated with a contract
  provenance.metadata.v1.PartyType:
    type: string
    enum:
      - PARTY_TYPE_UNSPECIFIED
      - PARTY_TYPE_ORIGINATOR
      - PARTY_TYPE_SERVICER
      - PARTY_TYPE_INVESTOR
      - PARTY_TYPE_CUSTODIAN
      - PARTY_TYPE_OWNER
      - PARTY_TYPE_AFFILIATE
      - PARTY_TYPE_OMNIBUS
      - PARTY_TYPE_PROVENANCE
      - PARTY_TYPE_CONTROLLER
      - PARTY_TYPE_VALIDATOR
    default: PARTY_TYPE_UNSPECIFIED
    description: |-
      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error condition
       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
    title: PartyType are the different roles parties on a contract may use
  provenance.metadata.v1.Process:
    type: object
    properties:
      address:
        type: string
        title: the address of a smart contract used for this process
      hash:
        type: string
        title: the hash of an off-chain process used
      name:
        type: string
        title: >-
          a name associated with the process (type_name, classname or smart
          contract common name)
      method:
        type: string
        title: >-
          method is a name or reference to a specific operation (method) within
          a class/contract that was invoked
    title: >-
      Process contains information used to uniquely identify what was used to
      generate this record
  provenance.metadata.v1.QueryParamsRequest:
    type: object
    properties:
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
    description: QueryParamsRequest is the request type for the Query/Params RPC method.
  provenance.metadata.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  provenance.metadata.v1.Record:
    type: object
    properties:
      name:
        type: string
        title: >-
          name/identifier for this record.  Value must be unique within the
          scope.  Also known as a Fact name
      session_id:
        type: string
        format: byte
        title: >-
          id of the session context that was used to create this record (use
          with filtered kvprefix iterator)
      process:
        title: >-
          process contain information used to uniquely identify an execution on
          or off chain that generated this record
        type: object
        properties:
          address:
            type: string
            title: the address of a smart contract used for this process
          hash:
            type: string
            title: the hash of an off-chain process used
          name:
            type: string
            title: >-
              a name associated with the process (type_name, classname or smart
              contract common name)
          method:
            type: string
            title: >-
              method is a name or reference to a specific operation (method)
              within a class/contract that was invoked
      inputs:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: Name value included to link back to the definition spec.
            record_id:
              type: string
              format: byte
              title: the address of a record on chain (For Established Records)
            hash:
              type: string
              title: >-
                the hash of an off-chain piece of information (For Proposed
                Records)
            type_name:
              type: string
              title: from proposed fact structure to unmarshal
            status:
              title: >-
                Indicates if this input was a recorded fact on chain or just a
                given hashed input
              type: string
              enum:
                - RECORD_INPUT_STATUS_UNSPECIFIED
                - RECORD_INPUT_STATUS_PROPOSED
                - RECORD_INPUT_STATUS_RECORD
              default: RECORD_INPUT_STATUS_UNSPECIFIED
              description: >-
                - RECORD_INPUT_STATUS_UNSPECIFIED:
                RECORD_INPUT_STATUS_UNSPECIFIED indicates an invalid/unknown
                input type
                 - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                 - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
          title: Tracks the inputs used to establish this record
        title: inputs used with the process to achieve the output on this record
      outputs:
        type: array
        items:
          type: object
          properties:
            hash:
              type: string
              title: >-
                Hash of the data output that was output/generated for this
                record
            status:
              title: >-
                Status of the process execution associated with this output
                indicating success,failure, or pending
              type: string
              enum:
                - RESULT_STATUS_UNSPECIFIED
                - RESULT_STATUS_PASS
                - RESULT_STATUS_SKIP
                - RESULT_STATUS_FAIL
              default: RESULT_STATUS_UNSPECIFIED
              description: >-
                - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED indicates
                an unset condition
                 - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                 - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                 - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
          title: RecordOutput encapsulates the output of a process recorded on chain
        title: >-
          output(s) is the results of executing the process on the given process
          indicated in this record
      specification_id:
        type: string
        format: byte
        description: >-
          specification_id is the id of the record specification that was used
          to create this record.
    title: >-
      A record (of fact) is attached to a session or each consideration output
      from a contract
  provenance.metadata.v1.RecordIdInfo:
    type: object
    properties:
      record_id:
        type: string
        format: byte
        description: record_id is the raw bytes of the record address.
      record_id_prefix:
        type: string
        format: byte
        description: record_id_prefix is the prefix portion of the record_id.
      record_id_scope_uuid:
        type: string
        format: byte
        description: record_id_scope_uuid is the scope_uuid portion of the record_id.
      record_id_hashed_name:
        type: string
        format: byte
        description: record_id_hashed_name is the hashed name portion of the record_id.
      record_addr:
        type: string
        description: record_addr is the bech32 string version of the record_id.
      scope_id_info:
        description: >-
          scope_id_info is information about the scope id referenced in the
          record_id.
        type: object
        properties:
          scope_id:
            type: string
            format: byte
            description: scope_id is the raw bytes of the scope address.
          scope_id_prefix:
            type: string
            format: byte
            description: scope_id_prefix is the prefix portion of the scope_id.
          scope_id_scope_uuid:
            type: string
            format: byte
            description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
          scope_addr:
            type: string
            description: scope_addr is the bech32 string version of the scope_id.
          scope_uuid:
            type: string
            description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
    description: RecordIdInfo contains various info regarding a record id.
  provenance.metadata.v1.RecordInput:
    type: object
    properties:
      name:
        type: string
        description: Name value included to link back to the definition spec.
      record_id:
        type: string
        format: byte
        title: the address of a record on chain (For Established Records)
      hash:
        type: string
        title: the hash of an off-chain piece of information (For Proposed Records)
      type_name:
        type: string
        title: from proposed fact structure to unmarshal
      status:
        title: >-
          Indicates if this input was a recorded fact on chain or just a given
          hashed input
        type: string
        enum:
          - RECORD_INPUT_STATUS_UNSPECIFIED
          - RECORD_INPUT_STATUS_PROPOSED
          - RECORD_INPUT_STATUS_RECORD
        default: RECORD_INPUT_STATUS_UNSPECIFIED
        description: >-
          - RECORD_INPUT_STATUS_UNSPECIFIED: RECORD_INPUT_STATUS_UNSPECIFIED
          indicates an invalid/unknown input type
           - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
           - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
    title: Tracks the inputs used to establish this record
  provenance.metadata.v1.RecordInputStatus:
    type: string
    enum:
      - RECORD_INPUT_STATUS_UNSPECIFIED
      - RECORD_INPUT_STATUS_PROPOSED
      - RECORD_INPUT_STATUS_RECORD
    default: RECORD_INPUT_STATUS_UNSPECIFIED
    description: >-
      - RECORD_INPUT_STATUS_UNSPECIFIED: RECORD_INPUT_STATUS_UNSPECIFIED
      indicates an invalid/unknown input type
       - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
       - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
    title: A set of types for inputs on a record (of fact)
  provenance.metadata.v1.RecordOutput:
    type: object
    properties:
      hash:
        type: string
        title: Hash of the data output that was output/generated for this record
      status:
        title: >-
          Status of the process execution associated with this output indicating
          success,failure, or pending
        type: string
        enum:
          - RESULT_STATUS_UNSPECIFIED
          - RESULT_STATUS_PASS
          - RESULT_STATUS_SKIP
          - RESULT_STATUS_FAIL
        default: RESULT_STATUS_UNSPECIFIED
        description: >-
          - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED indicates an
          unset condition
           - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
           - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
           - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
    title: RecordOutput encapsulates the output of a process recorded on chain
  provenance.metadata.v1.RecordSpecIdInfo:
    type: object
    properties:
      record_spec_id:
        type: string
        format: byte
        description: record_spec_id is the raw bytes of the record specification address.
      record_spec_id_prefix:
        type: string
        format: byte
        description: record_spec_id_prefix is the prefix portion of the record_spec_id.
      record_spec_id_contract_spec_uuid:
        type: string
        format: byte
        description: >-
          record_spec_id_contract_spec_uuid is the contract_spec_uuid portion of
          the record_spec_id.
      record_spec_id_hashed_name:
        type: string
        format: byte
        description: >-
          record_spec_id_hashed_name is the hashed name portion of the
          record_spec_id.
      record_spec_addr:
        type: string
        description: record_spec_addr is the bech32 string version of the record_spec_id.
      contract_spec_id_info:
        description: >-
          contract_spec_id_info is information about the contract spec id
          referenced in the record_spec_id.
        type: object
        properties:
          contract_spec_id:
            type: string
            format: byte
            description: >-
              contract_spec_id is the raw bytes of the contract specification
              address.
          contract_spec_id_prefix:
            type: string
            format: byte
            description: >-
              contract_spec_id_prefix is the prefix portion of the
              contract_spec_id.
          contract_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              contract_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the contract_spec_id.
          contract_spec_addr:
            type: string
            description: >-
              contract_spec_addr is the bech32 string version of the
              contract_spec_id.
          contract_spec_uuid:
            type: string
            description: >-
              contract_spec_uuid is the uuid hex string of the
              contract_spec_id_contract_spec_uuid.
    description: >-
      RecordSpecIdInfo contains various info regarding a record specification
      id.
  provenance.metadata.v1.RecordSpecification:
    type: object
    properties:
      specification_id:
        type: string
        format: byte
        title: unique identifier for this specification on chain
      name:
        type: string
        title: Name of Record that will be created when this specification is used
      inputs:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              title: name for this input
            type_name:
              type: string
              title: a type_name (typically a proto name or class_name)
            record_id:
              type: string
              format: byte
              title: the address of a record on chain (For Established Records)
            hash:
              type: string
              title: >-
                the hash of an off-chain piece of information (For Proposed
                Records)
          title: >-
            InputSpecification defines a name, type_name, and source reference
            (either on or off chain) to define an input

            parameter
        title: >-
          A set of inputs that must be satisified to apply this
          RecordSpecification and create a Record
      type_name:
        type: string
        title: >-
          A type name for data associated with this record (typically a class or
          proto name)
      result_type:
        title: >-
          Type of result for this record specification (must be RECORD or
          RECORD_LIST)
        type: string
        enum:
          - DEFINITION_TYPE_UNSPECIFIED
          - DEFINITION_TYPE_PROPOSED
          - DEFINITION_TYPE_RECORD
          - DEFINITION_TYPE_RECORD_LIST
        default: DEFINITION_TYPE_UNSPECIFIED
        description: >-
          - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED indicates
          an unknown/invalid value
           - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
           - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
           - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
          the same name
      responsible_parties:
        type: array
        items:
          type: string
          enum:
            - PARTY_TYPE_UNSPECIFIED
            - PARTY_TYPE_ORIGINATOR
            - PARTY_TYPE_SERVICER
            - PARTY_TYPE_INVESTOR
            - PARTY_TYPE_CUSTODIAN
            - PARTY_TYPE_OWNER
            - PARTY_TYPE_AFFILIATE
            - PARTY_TYPE_OMNIBUS
            - PARTY_TYPE_PROVENANCE
            - PARTY_TYPE_CONTROLLER
            - PARTY_TYPE_VALIDATOR
          default: PARTY_TYPE_UNSPECIFIED
          description: >-
            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
            condition
             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
          title: PartyType are the different roles parties on a contract may use
        title: Type of party responsible for this record
    title: >-
      RecordSpecification defines the specification for a Record including
      allowed/required inputs/outputs
  provenance.metadata.v1.RecordSpecificationRequest:
    type: object
    properties:
      specification_id:
        type: string
        description: >-
          specification_id can either be a uuid, e.g.
          def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
          specification

          address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

          It can also be a record specification address, e.g.

          recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
      name:
        type: string
        description: >-
          name is the name of the record to look up.

          It is required if the specification_id is a uuid or contract
          specification address.

          It is ignored if the specification_id is a record specification
          address.
      exclude_id_info:
        type: boolean
        format: boolean
        description: >-
          exclude_id_info is a flag for whether to exclude the id info from the
          response.
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
    description: >-
      RecordSpecificationRequest is the request type for the
      Query/RecordSpecification RPC method.
  provenance.metadata.v1.RecordSpecificationResponse:
    type: object
    properties:
      record_specification:
        type: object
        properties:
          specification:
            type: object
            properties:
              specification_id:
                type: string
                format: byte
                title: unique identifier for this specification on chain
              name:
                type: string
                title: >-
                  Name of Record that will be created when this specification is
                  used
              inputs:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      title: name for this input
                    type_name:
                      type: string
                      title: a type_name (typically a proto name or class_name)
                    record_id:
                      type: string
                      format: byte
                      title: >-
                        the address of a record on chain (For Established
                        Records)
                    hash:
                      type: string
                      title: >-
                        the hash of an off-chain piece of information (For
                        Proposed Records)
                  title: >-
                    InputSpecification defines a name, type_name, and source
                    reference (either on or off chain) to define an input

                    parameter
                title: >-
                  A set of inputs that must be satisified to apply this
                  RecordSpecification and create a Record
              type_name:
                type: string
                title: >-
                  A type name for data associated with this record (typically a
                  class or proto name)
              result_type:
                title: >-
                  Type of result for this record specification (must be RECORD
                  or RECORD_LIST)
                type: string
                enum:
                  - DEFINITION_TYPE_UNSPECIFIED
                  - DEFINITION_TYPE_PROPOSED
                  - DEFINITION_TYPE_RECORD
                  - DEFINITION_TYPE_RECORD_LIST
                default: DEFINITION_TYPE_UNSPECIFIED
                description: >-
                  - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED
                  indicates an unknown/invalid value
                   - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                   - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                   - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                  the same name
              responsible_parties:
                type: array
                items:
                  type: string
                  enum:
                    - PARTY_TYPE_UNSPECIFIED
                    - PARTY_TYPE_ORIGINATOR
                    - PARTY_TYPE_SERVICER
                    - PARTY_TYPE_INVESTOR
                    - PARTY_TYPE_CUSTODIAN
                    - PARTY_TYPE_OWNER
                    - PARTY_TYPE_AFFILIATE
                    - PARTY_TYPE_OMNIBUS
                    - PARTY_TYPE_PROVENANCE
                    - PARTY_TYPE_CONTROLLER
                    - PARTY_TYPE_VALIDATOR
                  default: PARTY_TYPE_UNSPECIFIED
                  description: >-
                    - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                    condition
                     - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                     - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                     - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                     - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                     - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                     - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                     - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                     - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                     - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                     - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                  title: >-
                    PartyType are the different roles parties on a contract may
                    use
                title: Type of party responsible for this record
            title: >-
              RecordSpecification defines the specification for a Record
              including allowed/required inputs/outputs
            description: specification is the on-chain record specification message.
          record_spec_id_info:
            description: >-
              record_spec_id_info contains information about the id/address of
              the record specification.
            type: object
            properties:
              record_spec_id:
                type: string
                format: byte
                description: >-
                  record_spec_id is the raw bytes of the record specification
                  address.
              record_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  record_spec_id_prefix is the prefix portion of the
                  record_spec_id.
              record_spec_id_contract_spec_uuid:
                type: string
                format: byte
                description: >-
                  record_spec_id_contract_spec_uuid is the contract_spec_uuid
                  portion of the record_spec_id.
              record_spec_id_hashed_name:
                type: string
                format: byte
                description: >-
                  record_spec_id_hashed_name is the hashed name portion of the
                  record_spec_id.
              record_spec_addr:
                type: string
                description: >-
                  record_spec_addr is the bech32 string version of the
                  record_spec_id.
              contract_spec_id_info:
                description: >-
                  contract_spec_id_info is information about the contract spec
                  id referenced in the record_spec_id.
                type: object
                properties:
                  contract_spec_id:
                    type: string
                    format: byte
                    description: >-
                      contract_spec_id is the raw bytes of the contract
                      specification address.
                  contract_spec_id_prefix:
                    type: string
                    format: byte
                    description: >-
                      contract_spec_id_prefix is the prefix portion of the
                      contract_spec_id.
                  contract_spec_id_contract_spec_uuid:
                    type: string
                    format: byte
                    description: >-
                      contract_spec_id_contract_spec_uuid is the
                      contract_spec_uuid portion of the contract_spec_id.
                  contract_spec_addr:
                    type: string
                    description: >-
                      contract_spec_addr is the bech32 string version of the
                      contract_spec_id.
                  contract_spec_uuid:
                    type: string
                    description: >-
                      contract_spec_uuid is the uuid hex string of the
                      contract_spec_id_contract_spec_uuid.
        description: >-
          RecordSpecificationWrapper contains a single record specification and
          some extra identifiers for it.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          specification_id:
            type: string
            description: >-
              specification_id can either be a uuid, e.g.
              def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
              specification

              address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

              It can also be a record specification address, e.g.

              recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
          name:
            type: string
            description: >-
              name is the name of the record to look up.

              It is required if the specification_id is a uuid or contract
              specification address.

              It is ignored if the specification_id is a record specification
              address.
          exclude_id_info:
            type: boolean
            format: boolean
            description: >-
              exclude_id_info is a flag for whether to exclude the id info from
              the response.
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
    description: >-
      RecordSpecificationResponse is the response type for the
      Query/RecordSpecification RPC method.
  provenance.metadata.v1.RecordSpecificationWrapper:
    type: object
    properties:
      specification:
        type: object
        properties:
          specification_id:
            type: string
            format: byte
            title: unique identifier for this specification on chain
          name:
            type: string
            title: >-
              Name of Record that will be created when this specification is
              used
          inputs:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  title: name for this input
                type_name:
                  type: string
                  title: a type_name (typically a proto name or class_name)
                record_id:
                  type: string
                  format: byte
                  title: the address of a record on chain (For Established Records)
                hash:
                  type: string
                  title: >-
                    the hash of an off-chain piece of information (For Proposed
                    Records)
              title: >-
                InputSpecification defines a name, type_name, and source
                reference (either on or off chain) to define an input

                parameter
            title: >-
              A set of inputs that must be satisified to apply this
              RecordSpecification and create a Record
          type_name:
            type: string
            title: >-
              A type name for data associated with this record (typically a
              class or proto name)
          result_type:
            title: >-
              Type of result for this record specification (must be RECORD or
              RECORD_LIST)
            type: string
            enum:
              - DEFINITION_TYPE_UNSPECIFIED
              - DEFINITION_TYPE_PROPOSED
              - DEFINITION_TYPE_RECORD
              - DEFINITION_TYPE_RECORD_LIST
            default: DEFINITION_TYPE_UNSPECIFIED
            description: >-
              - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED
              indicates an unknown/invalid value
               - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
               - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
               - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
              the same name
          responsible_parties:
            type: array
            items:
              type: string
              enum:
                - PARTY_TYPE_UNSPECIFIED
                - PARTY_TYPE_ORIGINATOR
                - PARTY_TYPE_SERVICER
                - PARTY_TYPE_INVESTOR
                - PARTY_TYPE_CUSTODIAN
                - PARTY_TYPE_OWNER
                - PARTY_TYPE_AFFILIATE
                - PARTY_TYPE_OMNIBUS
                - PARTY_TYPE_PROVENANCE
                - PARTY_TYPE_CONTROLLER
                - PARTY_TYPE_VALIDATOR
              default: PARTY_TYPE_UNSPECIFIED
              description: >-
                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                condition
                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
              title: PartyType are the different roles parties on a contract may use
            title: Type of party responsible for this record
        title: >-
          RecordSpecification defines the specification for a Record including
          allowed/required inputs/outputs
        description: specification is the on-chain record specification message.
      record_spec_id_info:
        description: >-
          record_spec_id_info contains information about the id/address of the
          record specification.
        type: object
        properties:
          record_spec_id:
            type: string
            format: byte
            description: >-
              record_spec_id is the raw bytes of the record specification
              address.
          record_spec_id_prefix:
            type: string
            format: byte
            description: record_spec_id_prefix is the prefix portion of the record_spec_id.
          record_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              record_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the record_spec_id.
          record_spec_id_hashed_name:
            type: string
            format: byte
            description: >-
              record_spec_id_hashed_name is the hashed name portion of the
              record_spec_id.
          record_spec_addr:
            type: string
            description: >-
              record_spec_addr is the bech32 string version of the
              record_spec_id.
          contract_spec_id_info:
            description: >-
              contract_spec_id_info is information about the contract spec id
              referenced in the record_spec_id.
            type: object
            properties:
              contract_spec_id:
                type: string
                format: byte
                description: >-
                  contract_spec_id is the raw bytes of the contract
                  specification address.
              contract_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  contract_spec_id_prefix is the prefix portion of the
                  contract_spec_id.
              contract_spec_id_contract_spec_uuid:
                type: string
                format: byte
                description: >-
                  contract_spec_id_contract_spec_uuid is the contract_spec_uuid
                  portion of the contract_spec_id.
              contract_spec_addr:
                type: string
                description: >-
                  contract_spec_addr is the bech32 string version of the
                  contract_spec_id.
              contract_spec_uuid:
                type: string
                description: >-
                  contract_spec_uuid is the uuid hex string of the
                  contract_spec_id_contract_spec_uuid.
    description: >-
      RecordSpecificationWrapper contains a single record specification and some
      extra identifiers for it.
  provenance.metadata.v1.RecordSpecificationsAllRequest:
    type: object
    properties:
      exclude_id_info:
        type: boolean
        format: boolean
        description: >-
          exclude_id_info is a flag for whether to exclude the id info from the
          response.
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      RecordSpecificationsAllRequest is the request type for the
      Query/RecordSpecificationsAll RPC method.
  provenance.metadata.v1.RecordSpecificationsAllResponse:
    type: object
    properties:
      record_specifications:
        type: array
        items:
          type: object
          properties:
            specification:
              type: object
              properties:
                specification_id:
                  type: string
                  format: byte
                  title: unique identifier for this specification on chain
                name:
                  type: string
                  title: >-
                    Name of Record that will be created when this specification
                    is used
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        title: name for this input
                      type_name:
                        type: string
                        title: a type_name (typically a proto name or class_name)
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                    title: >-
                      InputSpecification defines a name, type_name, and source
                      reference (either on or off chain) to define an input

                      parameter
                  title: >-
                    A set of inputs that must be satisified to apply this
                    RecordSpecification and create a Record
                type_name:
                  type: string
                  title: >-
                    A type name for data associated with this record (typically
                    a class or proto name)
                result_type:
                  title: >-
                    Type of result for this record specification (must be RECORD
                    or RECORD_LIST)
                  type: string
                  enum:
                    - DEFINITION_TYPE_UNSPECIFIED
                    - DEFINITION_TYPE_PROPOSED
                    - DEFINITION_TYPE_RECORD
                    - DEFINITION_TYPE_RECORD_LIST
                  default: DEFINITION_TYPE_UNSPECIFIED
                  description: >-
                    - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED
                    indicates an unknown/invalid value
                     - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                     - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                     - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                    the same name
                responsible_parties:
                  type: array
                  items:
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    title: >-
                      PartyType are the different roles parties on a contract
                      may use
                  title: Type of party responsible for this record
              title: >-
                RecordSpecification defines the specification for a Record
                including allowed/required inputs/outputs
              description: specification is the on-chain record specification message.
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordSpecificationWrapper contains a single record specification
            and some extra identifiers for it.
        description: record_specifications are the wrapped record specifications.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          exclude_id_info:
            type: boolean
            format: boolean
            description: >-
              exclude_id_info is a flag for whether to exclude the id info from
              the response.
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      RecordSpecificationsAllResponse is the response type for the
      Query/RecordSpecificationsAll RPC method.
  provenance.metadata.v1.RecordSpecificationsForContractSpecificationRequest:
    type: object
    properties:
      specification_id:
        type: string
        description: >-
          specification_id can either be a uuid, e.g.
          def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
          specification

          address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

          It can also be a record specification address, e.g.

          recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
      exclude_id_info:
        type: boolean
        format: boolean
        description: >-
          exclude_id_info is a flag for whether to exclude the id info from the
          response.
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
    description: >-
      RecordSpecificationsForContractSpecificationRequest is the request type
      for the

      Query/RecordSpecificationsForContractSpecification RPC method.
  provenance.metadata.v1.RecordSpecificationsForContractSpecificationResponse:
    type: object
    properties:
      record_specifications:
        type: array
        items:
          type: object
          properties:
            specification:
              type: object
              properties:
                specification_id:
                  type: string
                  format: byte
                  title: unique identifier for this specification on chain
                name:
                  type: string
                  title: >-
                    Name of Record that will be created when this specification
                    is used
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        title: name for this input
                      type_name:
                        type: string
                        title: a type_name (typically a proto name or class_name)
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                    title: >-
                      InputSpecification defines a name, type_name, and source
                      reference (either on or off chain) to define an input

                      parameter
                  title: >-
                    A set of inputs that must be satisified to apply this
                    RecordSpecification and create a Record
                type_name:
                  type: string
                  title: >-
                    A type name for data associated with this record (typically
                    a class or proto name)
                result_type:
                  title: >-
                    Type of result for this record specification (must be RECORD
                    or RECORD_LIST)
                  type: string
                  enum:
                    - DEFINITION_TYPE_UNSPECIFIED
                    - DEFINITION_TYPE_PROPOSED
                    - DEFINITION_TYPE_RECORD
                    - DEFINITION_TYPE_RECORD_LIST
                  default: DEFINITION_TYPE_UNSPECIFIED
                  description: >-
                    - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED
                    indicates an unknown/invalid value
                     - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                     - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                     - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                    the same name
                responsible_parties:
                  type: array
                  items:
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    title: >-
                      PartyType are the different roles parties on a contract
                      may use
                  title: Type of party responsible for this record
              title: >-
                RecordSpecification defines the specification for a Record
                including allowed/required inputs/outputs
              description: specification is the on-chain record specification message.
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordSpecificationWrapper contains a single record specification
            and some extra identifiers for it.
        description: >-
          record_specifications is any number of wrapped record specifications
          associated with this contract_specification.
      contract_specification_uuid:
        type: string
        description: >-
          contract_specification_uuid is the uuid of this contract
          specification.
      contract_specification_addr:
        type: string
        description: >-
          contract_specification_addr is the contract specification address as a
          bech32 encoded string.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          specification_id:
            type: string
            description: >-
              specification_id can either be a uuid, e.g.
              def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
              specification

              address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

              It can also be a record specification address, e.g.

              recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
          exclude_id_info:
            type: boolean
            format: boolean
            description: >-
              exclude_id_info is a flag for whether to exclude the id info from
              the response.
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
    description: >-
      RecordSpecificationsForContractSpecificationResponse is the response type
      for the

      Query/RecordSpecificationsForContractSpecification RPC method.
  provenance.metadata.v1.RecordWrapper:
    type: object
    properties:
      record:
        type: object
        properties:
          name:
            type: string
            title: >-
              name/identifier for this record.  Value must be unique within the
              scope.  Also known as a Fact name
          session_id:
            type: string
            format: byte
            title: >-
              id of the session context that was used to create this record (use
              with filtered kvprefix iterator)
          process:
            title: >-
              process contain information used to uniquely identify an execution
              on or off chain that generated this record
            type: object
            properties:
              address:
                type: string
                title: the address of a smart contract used for this process
              hash:
                type: string
                title: the hash of an off-chain process used
              name:
                type: string
                title: >-
                  a name associated with the process (type_name, classname or
                  smart contract common name)
              method:
                type: string
                title: >-
                  method is a name or reference to a specific operation (method)
                  within a class/contract that was invoked
          inputs:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  description: Name value included to link back to the definition spec.
                record_id:
                  type: string
                  format: byte
                  title: the address of a record on chain (For Established Records)
                hash:
                  type: string
                  title: >-
                    the hash of an off-chain piece of information (For Proposed
                    Records)
                type_name:
                  type: string
                  title: from proposed fact structure to unmarshal
                status:
                  title: >-
                    Indicates if this input was a recorded fact on chain or just
                    a given hashed input
                  type: string
                  enum:
                    - RECORD_INPUT_STATUS_UNSPECIFIED
                    - RECORD_INPUT_STATUS_PROPOSED
                    - RECORD_INPUT_STATUS_RECORD
                  default: RECORD_INPUT_STATUS_UNSPECIFIED
                  description: >-
                    - RECORD_INPUT_STATUS_UNSPECIFIED:
                    RECORD_INPUT_STATUS_UNSPECIFIED indicates an invalid/unknown
                    input type
                     - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                     - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
              title: Tracks the inputs used to establish this record
            title: inputs used with the process to achieve the output on this record
          outputs:
            type: array
            items:
              type: object
              properties:
                hash:
                  type: string
                  title: >-
                    Hash of the data output that was output/generated for this
                    record
                status:
                  title: >-
                    Status of the process execution associated with this output
                    indicating success,failure, or pending
                  type: string
                  enum:
                    - RESULT_STATUS_UNSPECIFIED
                    - RESULT_STATUS_PASS
                    - RESULT_STATUS_SKIP
                    - RESULT_STATUS_FAIL
                  default: RESULT_STATUS_UNSPECIFIED
                  description: >-
                    - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED
                    indicates an unset condition
                     - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                     - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                     - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
              title: >-
                RecordOutput encapsulates the output of a process recorded on
                chain
            title: >-
              output(s) is the results of executing the process on the given
              process indicated in this record
          specification_id:
            type: string
            format: byte
            description: >-
              specification_id is the id of the record specification that was
              used to create this record.
        title: >-
          A record (of fact) is attached to a session or each consideration
          output from a contract
        description: record is the on-chain record message.
      record_id_info:
        description: >-
          record_id_info contains information about the id/address of the
          record.
        type: object
        properties:
          record_id:
            type: string
            format: byte
            description: record_id is the raw bytes of the record address.
          record_id_prefix:
            type: string
            format: byte
            description: record_id_prefix is the prefix portion of the record_id.
          record_id_scope_uuid:
            type: string
            format: byte
            description: record_id_scope_uuid is the scope_uuid portion of the record_id.
          record_id_hashed_name:
            type: string
            format: byte
            description: record_id_hashed_name is the hashed name portion of the record_id.
          record_addr:
            type: string
            description: record_addr is the bech32 string version of the record_id.
          scope_id_info:
            description: >-
              scope_id_info is information about the scope id referenced in the
              record_id.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
      record_spec_id_info:
        description: >-
          record_spec_id_info contains information about the id/address of the
          record specification.
        type: object
        properties:
          record_spec_id:
            type: string
            format: byte
            description: >-
              record_spec_id is the raw bytes of the record specification
              address.
          record_spec_id_prefix:
            type: string
            format: byte
            description: record_spec_id_prefix is the prefix portion of the record_spec_id.
          record_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              record_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the record_spec_id.
          record_spec_id_hashed_name:
            type: string
            format: byte
            description: >-
              record_spec_id_hashed_name is the hashed name portion of the
              record_spec_id.
          record_spec_addr:
            type: string
            description: >-
              record_spec_addr is the bech32 string version of the
              record_spec_id.
          contract_spec_id_info:
            description: >-
              contract_spec_id_info is information about the contract spec id
              referenced in the record_spec_id.
            type: object
            properties:
              contract_spec_id:
                type: string
                format: byte
                description: >-
                  contract_spec_id is the raw bytes of the contract
                  specification address.
              contract_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  contract_spec_id_prefix is the prefix portion of the
                  contract_spec_id.
              contract_spec_id_contract_spec_uuid:
                type: string
                format: byte
                description: >-
                  contract_spec_id_contract_spec_uuid is the contract_spec_uuid
                  portion of the contract_spec_id.
              contract_spec_addr:
                type: string
                description: >-
                  contract_spec_addr is the bech32 string version of the
                  contract_spec_id.
              contract_spec_uuid:
                type: string
                description: >-
                  contract_spec_uuid is the uuid hex string of the
                  contract_spec_id_contract_spec_uuid.
    description: RecordWrapper contains a single record and some extra identifiers for it.
  provenance.metadata.v1.RecordsAllRequest:
    type: object
    properties:
      exclude_id_info:
        type: boolean
        format: boolean
        description: >-
          exclude_id_info is a flag for whether to exclude the id info from the
          response.
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: RecordsAllRequest is the request type for the Query/RecordsAll RPC method.
  provenance.metadata.v1.RecordsAllResponse:
    type: object
    properties:
      records:
        type: array
        items:
          type: object
          properties:
            record:
              type: object
              properties:
                name:
                  type: string
                  title: >-
                    name/identifier for this record.  Value must be unique
                    within the scope.  Also known as a Fact name
                session_id:
                  type: string
                  format: byte
                  title: >-
                    id of the session context that was used to create this
                    record (use with filtered kvprefix iterator)
                process:
                  title: >-
                    process contain information used to uniquely identify an
                    execution on or off chain that generated this record
                  type: object
                  properties:
                    address:
                      type: string
                      title: the address of a smart contract used for this process
                    hash:
                      type: string
                      title: the hash of an off-chain process used
                    name:
                      type: string
                      title: >-
                        a name associated with the process (type_name, classname
                        or smart contract common name)
                    method:
                      type: string
                      title: >-
                        method is a name or reference to a specific operation
                        (method) within a class/contract that was invoked
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: >-
                          Name value included to link back to the definition
                          spec.
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                      type_name:
                        type: string
                        title: from proposed fact structure to unmarshal
                      status:
                        title: >-
                          Indicates if this input was a recorded fact on chain
                          or just a given hashed input
                        type: string
                        enum:
                          - RECORD_INPUT_STATUS_UNSPECIFIED
                          - RECORD_INPUT_STATUS_PROPOSED
                          - RECORD_INPUT_STATUS_RECORD
                        default: RECORD_INPUT_STATUS_UNSPECIFIED
                        description: >-
                          - RECORD_INPUT_STATUS_UNSPECIFIED:
                          RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                          invalid/unknown input type
                           - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                           - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                    title: Tracks the inputs used to establish this record
                  title: >-
                    inputs used with the process to achieve the output on this
                    record
                outputs:
                  type: array
                  items:
                    type: object
                    properties:
                      hash:
                        type: string
                        title: >-
                          Hash of the data output that was output/generated for
                          this record
                      status:
                        title: >-
                          Status of the process execution associated with this
                          output indicating success,failure, or pending
                        type: string
                        enum:
                          - RESULT_STATUS_UNSPECIFIED
                          - RESULT_STATUS_PASS
                          - RESULT_STATUS_SKIP
                          - RESULT_STATUS_FAIL
                        default: RESULT_STATUS_UNSPECIFIED
                        description: >-
                          - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED
                          indicates an unset condition
                           - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                           - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                           - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                    title: >-
                      RecordOutput encapsulates the output of a process recorded
                      on chain
                  title: >-
                    output(s) is the results of executing the process on the
                    given process indicated in this record
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    specification_id is the id of the record specification that
                    was used to create this record.
              title: >-
                A record (of fact) is attached to a session or each
                consideration output from a contract
              description: record is the on-chain record message.
            record_id_info:
              description: >-
                record_id_info contains information about the id/address of the
                record.
              type: object
              properties:
                record_id:
                  type: string
                  format: byte
                  description: record_id is the raw bytes of the record address.
                record_id_prefix:
                  type: string
                  format: byte
                  description: record_id_prefix is the prefix portion of the record_id.
                record_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_id_scope_uuid is the scope_uuid portion of the
                    record_id.
                record_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_id_hashed_name is the hashed name portion of the
                    record_id.
                record_addr:
                  type: string
                  description: record_addr is the bech32 string version of the record_id.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the record_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordWrapper contains a single record and some extra identifiers
            for it.
        description: records are the wrapped records.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          exclude_id_info:
            type: boolean
            format: boolean
            description: >-
              exclude_id_info is a flag for whether to exclude the id info from
              the response.
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      RecordsAllResponse is the response type for the Query/RecordsAll RPC
      method.
  provenance.metadata.v1.RecordsRequest:
    type: object
    properties:
      record_addr:
        type: string
        description: >-
          record_addr is a bech32 record address, e.g.
          record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
      scope_id:
        type: string
        description: >-
          scope_id can either be a uuid, e.g.
          91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

          scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
      session_id:
        type: string
        description: >-
          session_id can either be a uuid, e.g.
          5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address, e.g.

          session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
          This can only be a uuid if a scope_id is also

          provided.
      name:
        type: string
        title: name is the name of the record to look for
      include_scope:
        type: boolean
        format: boolean
        description: >-
          include_scope is a flag for whether to include the the scope
          containing these records in the response.
      include_sessions:
        type: boolean
        format: boolean
        description: >-
          include_sessions is a flag for whether to include the sessions
          containing these records in the response.
      exclude_id_info:
        type: boolean
        format: boolean
        description: >-
          exclude_id_info is a flag for whether to exclude the id info from the
          response.
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
    description: RecordsRequest is the request type for the Query/Records RPC method.
  provenance.metadata.v1.RecordsResponse:
    type: object
    properties:
      scope:
        description: scope is the wrapped scope that holds these records (if requested).
        type: object
        properties:
          scope:
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                title: >-
                  Unique ID for this scope.  Implements sdk.Address interface
                  for use where addresses are required in Cosmos
              specification_id:
                type: string
                format: byte
                title: >-
                  the scope specification that contains the specifications for
                  data elements allowed within this scope
              owners:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      title: address of the account (on chain)
                    role:
                      title: >-
                        a role for this account within the context of the
                        processes used
                      type: string
                      enum:
                        - PARTY_TYPE_UNSPECIFIED
                        - PARTY_TYPE_ORIGINATOR
                        - PARTY_TYPE_SERVICER
                        - PARTY_TYPE_INVESTOR
                        - PARTY_TYPE_CUSTODIAN
                        - PARTY_TYPE_OWNER
                        - PARTY_TYPE_AFFILIATE
                        - PARTY_TYPE_OMNIBUS
                        - PARTY_TYPE_PROVENANCE
                        - PARTY_TYPE_CONTROLLER
                        - PARTY_TYPE_VALIDATOR
                      default: PARTY_TYPE_UNSPECIFIED
                      description: >-
                        - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                        error condition
                         - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                         - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                         - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                         - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                         - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                         - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                         - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                         - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                         - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                         - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    optional:
                      type: boolean
                      format: boolean
                      title: whether this party's signature is optional
                  title: >-
                    A Party is an address with/in a given role associated with a
                    contract
                description: >-
                  These parties represent top level owners of the records
                  within.  These parties must sign any requests that modify

                  the data within the scope.  These addresses are in union with
                  parties listed on the sessions.
              data_access:
                type: array
                items:
                  type: string
                description: >-
                  Addresses in this list are authorized to receive off-chain
                  data associated with this scope.
              value_owner_address:
                type: string
                description: >-
                  An address that controls the value associated with this
                  scope.  Standard blockchain accounts and marker accounts

                  are supported for this value.  This attribute may only be
                  changed by the entity indicated once it is set.
              require_party_rollup:
                type: boolean
                format: boolean
                description: >-
                  Whether all parties in this scope and its sessions must be
                  present in this scope's owners field.

                  This also enables use of optional=true scope owners and
                  session parties.
            description: >-
              Scope defines a root reference for a collection of records owned
              by one or more parties.
          scope_id_info:
            description: >-
              scope_id_info contains information about the id/address of the
              scope.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
          scope_spec_id_info:
            description: >-
              scope_spec_id_info contains information about the id/address of
              the scope specification.
            type: object
            properties:
              scope_spec_id:
                type: string
                format: byte
                description: >-
                  scope_spec_id is the raw bytes of the scope specification
                  address.
              scope_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  scope_spec_id_prefix is the prefix portion of the
                  scope_spec_id.
              scope_spec_id_scope_spec_uuid:
                type: string
                format: byte
                description: >-
                  scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion
                  of the scope_spec_id.
              scope_spec_addr:
                type: string
                description: >-
                  scope_spec_addr is the bech32 string version of the
                  scope_spec_id.
              scope_spec_uuid:
                type: string
                description: >-
                  scope_spec_uuid is the uuid hex string of the
                  scope_spec_id_scope_spec_uuid.
      sessions:
        type: array
        items:
          type: object
          properties:
            session:
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    unique id of the contract specification that was used to
                    create this session.
                parties:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        title: address of the account (on chain)
                      role:
                        title: >-
                          a role for this account within the context of the
                          processes used
                        type: string
                        enum:
                          - PARTY_TYPE_UNSPECIFIED
                          - PARTY_TYPE_ORIGINATOR
                          - PARTY_TYPE_SERVICER
                          - PARTY_TYPE_INVESTOR
                          - PARTY_TYPE_CUSTODIAN
                          - PARTY_TYPE_OWNER
                          - PARTY_TYPE_AFFILIATE
                          - PARTY_TYPE_OMNIBUS
                          - PARTY_TYPE_PROVENANCE
                          - PARTY_TYPE_CONTROLLER
                          - PARTY_TYPE_VALIDATOR
                        default: PARTY_TYPE_UNSPECIFIED
                        description: >-
                          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                          error condition
                           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                      optional:
                        type: boolean
                        format: boolean
                        title: whether this party's signature is optional
                    title: >-
                      A Party is an address with/in a given role associated with
                      a contract
                  title: parties is the set of identities that signed this contract
                name:
                  type: string
                  title: >-
                    name to associate with this session execution context,
                    typically classname
                context:
                  type: string
                  format: byte
                  description: >-
                    context is a field for storing client specific data
                    associated with a session.
                audit:
                  description: >-
                    Created by, updated by, timestamps, version number, and
                    related info.
                  type: object
                  properties:
                    created_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was created
                    created_by:
                      type: string
                      title: the address of the account that created this record
                    updated_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was last updated
                    updated_by:
                      type: string
                      title: the address of the account that modified this record
                    version:
                      type: integer
                      format: int64
                      title: >-
                        an optional version number that is incremented with each
                        update
                    message:
                      type: string
                      title: >-
                        an optional message associated with the creation/update
                        event
                  title: >-
                    AuditFields capture information about the last account to
                    make modifications and when they were made
              description: >-
                Session defines an execution context against a specific
                specification instance.

                The context will have a specification and set of parties
                involved.


                NOTE: When there are no more Records within a Scope that
                reference a Session, the Session is removed.
            session_id_info:
              description: >-
                session_id_info contains information about the id/address of the
                session.
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                  description: session_id is the raw bytes of the session address.
                session_id_prefix:
                  type: string
                  format: byte
                  description: session_id_prefix is the prefix portion of the session_id.
                session_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_scope_uuid is the scope_uuid portion of the
                    session_id.
                session_id_session_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_session_uuid is the session_uuid portion of the
                    session_id.
                session_addr:
                  type: string
                  description: session_addr is the bech32 string version of the session_id.
                session_uuid:
                  type: string
                  description: >-
                    session_uuid is the uuid hex string of the
                    session_id_session_uuid.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the session_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            contract_spec_id_info:
              description: >-
                contract_spec_id_info contains information about the id/address
                of the contract specification.
              type: object
              properties:
                contract_spec_id:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id is the raw bytes of the contract
                    specification address.
                contract_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_prefix is the prefix portion of the
                    contract_spec_id.
                contract_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_contract_spec_uuid is the
                    contract_spec_uuid portion of the contract_spec_id.
                contract_spec_addr:
                  type: string
                  description: >-
                    contract_spec_addr is the bech32 string version of the
                    contract_spec_id.
                contract_spec_uuid:
                  type: string
                  description: >-
                    contract_spec_uuid is the uuid hex string of the
                    contract_spec_id_contract_spec_uuid.
          description: >-
            SessionWrapper contains a single session and some extra identifiers
            for it.
        description: >-
          sessions is any number of wrapped sessions that hold these records (if
          requested).
      records:
        type: array
        items:
          type: object
          properties:
            record:
              type: object
              properties:
                name:
                  type: string
                  title: >-
                    name/identifier for this record.  Value must be unique
                    within the scope.  Also known as a Fact name
                session_id:
                  type: string
                  format: byte
                  title: >-
                    id of the session context that was used to create this
                    record (use with filtered kvprefix iterator)
                process:
                  title: >-
                    process contain information used to uniquely identify an
                    execution on or off chain that generated this record
                  type: object
                  properties:
                    address:
                      type: string
                      title: the address of a smart contract used for this process
                    hash:
                      type: string
                      title: the hash of an off-chain process used
                    name:
                      type: string
                      title: >-
                        a name associated with the process (type_name, classname
                        or smart contract common name)
                    method:
                      type: string
                      title: >-
                        method is a name or reference to a specific operation
                        (method) within a class/contract that was invoked
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: >-
                          Name value included to link back to the definition
                          spec.
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                      type_name:
                        type: string
                        title: from proposed fact structure to unmarshal
                      status:
                        title: >-
                          Indicates if this input was a recorded fact on chain
                          or just a given hashed input
                        type: string
                        enum:
                          - RECORD_INPUT_STATUS_UNSPECIFIED
                          - RECORD_INPUT_STATUS_PROPOSED
                          - RECORD_INPUT_STATUS_RECORD
                        default: RECORD_INPUT_STATUS_UNSPECIFIED
                        description: >-
                          - RECORD_INPUT_STATUS_UNSPECIFIED:
                          RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                          invalid/unknown input type
                           - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                           - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                    title: Tracks the inputs used to establish this record
                  title: >-
                    inputs used with the process to achieve the output on this
                    record
                outputs:
                  type: array
                  items:
                    type: object
                    properties:
                      hash:
                        type: string
                        title: >-
                          Hash of the data output that was output/generated for
                          this record
                      status:
                        title: >-
                          Status of the process execution associated with this
                          output indicating success,failure, or pending
                        type: string
                        enum:
                          - RESULT_STATUS_UNSPECIFIED
                          - RESULT_STATUS_PASS
                          - RESULT_STATUS_SKIP
                          - RESULT_STATUS_FAIL
                        default: RESULT_STATUS_UNSPECIFIED
                        description: >-
                          - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED
                          indicates an unset condition
                           - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                           - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                           - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                    title: >-
                      RecordOutput encapsulates the output of a process recorded
                      on chain
                  title: >-
                    output(s) is the results of executing the process on the
                    given process indicated in this record
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    specification_id is the id of the record specification that
                    was used to create this record.
              title: >-
                A record (of fact) is attached to a session or each
                consideration output from a contract
              description: record is the on-chain record message.
            record_id_info:
              description: >-
                record_id_info contains information about the id/address of the
                record.
              type: object
              properties:
                record_id:
                  type: string
                  format: byte
                  description: record_id is the raw bytes of the record address.
                record_id_prefix:
                  type: string
                  format: byte
                  description: record_id_prefix is the prefix portion of the record_id.
                record_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_id_scope_uuid is the scope_uuid portion of the
                    record_id.
                record_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_id_hashed_name is the hashed name portion of the
                    record_id.
                record_addr:
                  type: string
                  description: record_addr is the bech32 string version of the record_id.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the record_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordWrapper contains a single record and some extra identifiers
            for it.
        description: records is any number of wrapped record results.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          record_addr:
            type: string
            description: >-
              record_addr is a bech32 record address, e.g.
              record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          scope_id:
            type: string
            description: >-
              scope_id can either be a uuid, e.g.
              91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address,
              e.g.

              scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          session_id:
            type: string
            description: >-
              session_id can either be a uuid, e.g.
              5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
              e.g.

              session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
              This can only be a uuid if a scope_id is also

              provided.
          name:
            type: string
            title: name is the name of the record to look for
          include_scope:
            type: boolean
            format: boolean
            description: >-
              include_scope is a flag for whether to include the the scope
              containing these records in the response.
          include_sessions:
            type: boolean
            format: boolean
            description: >-
              include_sessions is a flag for whether to include the sessions
              containing these records in the response.
          exclude_id_info:
            type: boolean
            format: boolean
            description: >-
              exclude_id_info is a flag for whether to exclude the id info from
              the response.
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
    description: RecordsResponse is the response type for the Query/Records RPC method.
  provenance.metadata.v1.ResultStatus:
    type: string
    enum:
      - RESULT_STATUS_UNSPECIFIED
      - RESULT_STATUS_PASS
      - RESULT_STATUS_SKIP
      - RESULT_STATUS_FAIL
    default: RESULT_STATUS_UNSPECIFIED
    description: >-
      - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED indicates an unset
      condition
       - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
       - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
       - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
    title: ResultStatus indicates the various states of execution of a record
  provenance.metadata.v1.Scope:
    type: object
    properties:
      scope_id:
        type: string
        format: byte
        title: >-
          Unique ID for this scope.  Implements sdk.Address interface for use
          where addresses are required in Cosmos
      specification_id:
        type: string
        format: byte
        title: >-
          the scope specification that contains the specifications for data
          elements allowed within this scope
      owners:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              title: address of the account (on chain)
            role:
              title: a role for this account within the context of the processes used
              type: string
              enum:
                - PARTY_TYPE_UNSPECIFIED
                - PARTY_TYPE_ORIGINATOR
                - PARTY_TYPE_SERVICER
                - PARTY_TYPE_INVESTOR
                - PARTY_TYPE_CUSTODIAN
                - PARTY_TYPE_OWNER
                - PARTY_TYPE_AFFILIATE
                - PARTY_TYPE_OMNIBUS
                - PARTY_TYPE_PROVENANCE
                - PARTY_TYPE_CONTROLLER
                - PARTY_TYPE_VALIDATOR
              default: PARTY_TYPE_UNSPECIFIED
              description: >-
                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                condition
                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
            optional:
              type: boolean
              format: boolean
              title: whether this party's signature is optional
          title: >-
            A Party is an address with/in a given role associated with a
            contract
        description: >-
          These parties represent top level owners of the records within.  These
          parties must sign any requests that modify

          the data within the scope.  These addresses are in union with parties
          listed on the sessions.
      data_access:
        type: array
        items:
          type: string
        description: >-
          Addresses in this list are authorized to receive off-chain data
          associated with this scope.
      value_owner_address:
        type: string
        description: >-
          An address that controls the value associated with this scope. 
          Standard blockchain accounts and marker accounts

          are supported for this value.  This attribute may only be changed by
          the entity indicated once it is set.
      require_party_rollup:
        type: boolean
        format: boolean
        description: >-
          Whether all parties in this scope and its sessions must be present in
          this scope's owners field.

          This also enables use of optional=true scope owners and session
          parties.
    description: >-
      Scope defines a root reference for a collection of records owned by one or
      more parties.
  provenance.metadata.v1.ScopeIdInfo:
    type: object
    properties:
      scope_id:
        type: string
        format: byte
        description: scope_id is the raw bytes of the scope address.
      scope_id_prefix:
        type: string
        format: byte
        description: scope_id_prefix is the prefix portion of the scope_id.
      scope_id_scope_uuid:
        type: string
        format: byte
        description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
      scope_addr:
        type: string
        description: scope_addr is the bech32 string version of the scope_id.
      scope_uuid:
        type: string
        description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
    description: ScopeIdInfo contains various info regarding a scope id.
  provenance.metadata.v1.ScopeRequest:
    type: object
    properties:
      scope_id:
        type: string
        description: >-
          scope_id can either be a uuid, e.g.
          91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

          scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
      session_addr:
        type: string
        description: |-
          session_addr is a bech32 session address, e.g.
          session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
      record_addr:
        type: string
        description: >-
          record_addr is a bech32 record address, e.g.
          record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
      include_sessions:
        type: boolean
        format: boolean
        description: >-
          include_sessions is a flag for whether to include the sessions of the
          scope in the response.
      include_records:
        type: boolean
        format: boolean
        description: >-
          include_records is a flag for whether to include the records of the
          scope in the response.
      exclude_id_info:
        type: boolean
        format: boolean
        description: >-
          exclude_id_info is a flag for whether to exclude the id info from the
          response.
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
    description: ScopeRequest is the request type for the Query/Scope RPC method.
  provenance.metadata.v1.ScopeResponse:
    type: object
    properties:
      scope:
        description: scope is the wrapped scope result.
        type: object
        properties:
          scope:
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                title: >-
                  Unique ID for this scope.  Implements sdk.Address interface
                  for use where addresses are required in Cosmos
              specification_id:
                type: string
                format: byte
                title: >-
                  the scope specification that contains the specifications for
                  data elements allowed within this scope
              owners:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      title: address of the account (on chain)
                    role:
                      title: >-
                        a role for this account within the context of the
                        processes used
                      type: string
                      enum:
                        - PARTY_TYPE_UNSPECIFIED
                        - PARTY_TYPE_ORIGINATOR
                        - PARTY_TYPE_SERVICER
                        - PARTY_TYPE_INVESTOR
                        - PARTY_TYPE_CUSTODIAN
                        - PARTY_TYPE_OWNER
                        - PARTY_TYPE_AFFILIATE
                        - PARTY_TYPE_OMNIBUS
                        - PARTY_TYPE_PROVENANCE
                        - PARTY_TYPE_CONTROLLER
                        - PARTY_TYPE_VALIDATOR
                      default: PARTY_TYPE_UNSPECIFIED
                      description: >-
                        - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                        error condition
                         - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                         - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                         - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                         - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                         - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                         - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                         - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                         - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                         - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                         - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    optional:
                      type: boolean
                      format: boolean
                      title: whether this party's signature is optional
                  title: >-
                    A Party is an address with/in a given role associated with a
                    contract
                description: >-
                  These parties represent top level owners of the records
                  within.  These parties must sign any requests that modify

                  the data within the scope.  These addresses are in union with
                  parties listed on the sessions.
              data_access:
                type: array
                items:
                  type: string
                description: >-
                  Addresses in this list are authorized to receive off-chain
                  data associated with this scope.
              value_owner_address:
                type: string
                description: >-
                  An address that controls the value associated with this
                  scope.  Standard blockchain accounts and marker accounts

                  are supported for this value.  This attribute may only be
                  changed by the entity indicated once it is set.
              require_party_rollup:
                type: boolean
                format: boolean
                description: >-
                  Whether all parties in this scope and its sessions must be
                  present in this scope's owners field.

                  This also enables use of optional=true scope owners and
                  session parties.
            description: >-
              Scope defines a root reference for a collection of records owned
              by one or more parties.
          scope_id_info:
            description: >-
              scope_id_info contains information about the id/address of the
              scope.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
          scope_spec_id_info:
            description: >-
              scope_spec_id_info contains information about the id/address of
              the scope specification.
            type: object
            properties:
              scope_spec_id:
                type: string
                format: byte
                description: >-
                  scope_spec_id is the raw bytes of the scope specification
                  address.
              scope_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  scope_spec_id_prefix is the prefix portion of the
                  scope_spec_id.
              scope_spec_id_scope_spec_uuid:
                type: string
                format: byte
                description: >-
                  scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion
                  of the scope_spec_id.
              scope_spec_addr:
                type: string
                description: >-
                  scope_spec_addr is the bech32 string version of the
                  scope_spec_id.
              scope_spec_uuid:
                type: string
                description: >-
                  scope_spec_uuid is the uuid hex string of the
                  scope_spec_id_scope_spec_uuid.
      sessions:
        type: array
        items:
          type: object
          properties:
            session:
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    unique id of the contract specification that was used to
                    create this session.
                parties:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        title: address of the account (on chain)
                      role:
                        title: >-
                          a role for this account within the context of the
                          processes used
                        type: string
                        enum:
                          - PARTY_TYPE_UNSPECIFIED
                          - PARTY_TYPE_ORIGINATOR
                          - PARTY_TYPE_SERVICER
                          - PARTY_TYPE_INVESTOR
                          - PARTY_TYPE_CUSTODIAN
                          - PARTY_TYPE_OWNER
                          - PARTY_TYPE_AFFILIATE
                          - PARTY_TYPE_OMNIBUS
                          - PARTY_TYPE_PROVENANCE
                          - PARTY_TYPE_CONTROLLER
                          - PARTY_TYPE_VALIDATOR
                        default: PARTY_TYPE_UNSPECIFIED
                        description: >-
                          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                          error condition
                           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                      optional:
                        type: boolean
                        format: boolean
                        title: whether this party's signature is optional
                    title: >-
                      A Party is an address with/in a given role associated with
                      a contract
                  title: parties is the set of identities that signed this contract
                name:
                  type: string
                  title: >-
                    name to associate with this session execution context,
                    typically classname
                context:
                  type: string
                  format: byte
                  description: >-
                    context is a field for storing client specific data
                    associated with a session.
                audit:
                  description: >-
                    Created by, updated by, timestamps, version number, and
                    related info.
                  type: object
                  properties:
                    created_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was created
                    created_by:
                      type: string
                      title: the address of the account that created this record
                    updated_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was last updated
                    updated_by:
                      type: string
                      title: the address of the account that modified this record
                    version:
                      type: integer
                      format: int64
                      title: >-
                        an optional version number that is incremented with each
                        update
                    message:
                      type: string
                      title: >-
                        an optional message associated with the creation/update
                        event
                  title: >-
                    AuditFields capture information about the last account to
                    make modifications and when they were made
              description: >-
                Session defines an execution context against a specific
                specification instance.

                The context will have a specification and set of parties
                involved.


                NOTE: When there are no more Records within a Scope that
                reference a Session, the Session is removed.
            session_id_info:
              description: >-
                session_id_info contains information about the id/address of the
                session.
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                  description: session_id is the raw bytes of the session address.
                session_id_prefix:
                  type: string
                  format: byte
                  description: session_id_prefix is the prefix portion of the session_id.
                session_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_scope_uuid is the scope_uuid portion of the
                    session_id.
                session_id_session_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_session_uuid is the session_uuid portion of the
                    session_id.
                session_addr:
                  type: string
                  description: session_addr is the bech32 string version of the session_id.
                session_uuid:
                  type: string
                  description: >-
                    session_uuid is the uuid hex string of the
                    session_id_session_uuid.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the session_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            contract_spec_id_info:
              description: >-
                contract_spec_id_info contains information about the id/address
                of the contract specification.
              type: object
              properties:
                contract_spec_id:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id is the raw bytes of the contract
                    specification address.
                contract_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_prefix is the prefix portion of the
                    contract_spec_id.
                contract_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_contract_spec_uuid is the
                    contract_spec_uuid portion of the contract_spec_id.
                contract_spec_addr:
                  type: string
                  description: >-
                    contract_spec_addr is the bech32 string version of the
                    contract_spec_id.
                contract_spec_uuid:
                  type: string
                  description: >-
                    contract_spec_uuid is the uuid hex string of the
                    contract_spec_id_contract_spec_uuid.
          description: >-
            SessionWrapper contains a single session and some extra identifiers
            for it.
        description: >-
          sessions is any number of wrapped sessions in this scope (if
          requested).
      records:
        type: array
        items:
          type: object
          properties:
            record:
              type: object
              properties:
                name:
                  type: string
                  title: >-
                    name/identifier for this record.  Value must be unique
                    within the scope.  Also known as a Fact name
                session_id:
                  type: string
                  format: byte
                  title: >-
                    id of the session context that was used to create this
                    record (use with filtered kvprefix iterator)
                process:
                  title: >-
                    process contain information used to uniquely identify an
                    execution on or off chain that generated this record
                  type: object
                  properties:
                    address:
                      type: string
                      title: the address of a smart contract used for this process
                    hash:
                      type: string
                      title: the hash of an off-chain process used
                    name:
                      type: string
                      title: >-
                        a name associated with the process (type_name, classname
                        or smart contract common name)
                    method:
                      type: string
                      title: >-
                        method is a name or reference to a specific operation
                        (method) within a class/contract that was invoked
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: >-
                          Name value included to link back to the definition
                          spec.
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                      type_name:
                        type: string
                        title: from proposed fact structure to unmarshal
                      status:
                        title: >-
                          Indicates if this input was a recorded fact on chain
                          or just a given hashed input
                        type: string
                        enum:
                          - RECORD_INPUT_STATUS_UNSPECIFIED
                          - RECORD_INPUT_STATUS_PROPOSED
                          - RECORD_INPUT_STATUS_RECORD
                        default: RECORD_INPUT_STATUS_UNSPECIFIED
                        description: >-
                          - RECORD_INPUT_STATUS_UNSPECIFIED:
                          RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                          invalid/unknown input type
                           - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                           - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                    title: Tracks the inputs used to establish this record
                  title: >-
                    inputs used with the process to achieve the output on this
                    record
                outputs:
                  type: array
                  items:
                    type: object
                    properties:
                      hash:
                        type: string
                        title: >-
                          Hash of the data output that was output/generated for
                          this record
                      status:
                        title: >-
                          Status of the process execution associated with this
                          output indicating success,failure, or pending
                        type: string
                        enum:
                          - RESULT_STATUS_UNSPECIFIED
                          - RESULT_STATUS_PASS
                          - RESULT_STATUS_SKIP
                          - RESULT_STATUS_FAIL
                        default: RESULT_STATUS_UNSPECIFIED
                        description: >-
                          - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED
                          indicates an unset condition
                           - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                           - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                           - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                    title: >-
                      RecordOutput encapsulates the output of a process recorded
                      on chain
                  title: >-
                    output(s) is the results of executing the process on the
                    given process indicated in this record
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    specification_id is the id of the record specification that
                    was used to create this record.
              title: >-
                A record (of fact) is attached to a session or each
                consideration output from a contract
              description: record is the on-chain record message.
            record_id_info:
              description: >-
                record_id_info contains information about the id/address of the
                record.
              type: object
              properties:
                record_id:
                  type: string
                  format: byte
                  description: record_id is the raw bytes of the record address.
                record_id_prefix:
                  type: string
                  format: byte
                  description: record_id_prefix is the prefix portion of the record_id.
                record_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_id_scope_uuid is the scope_uuid portion of the
                    record_id.
                record_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_id_hashed_name is the hashed name portion of the
                    record_id.
                record_addr:
                  type: string
                  description: record_addr is the bech32 string version of the record_id.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the record_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordWrapper contains a single record and some extra identifiers
            for it.
        description: records is any number of wrapped records in this scope (if requested).
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          scope_id:
            type: string
            description: >-
              scope_id can either be a uuid, e.g.
              91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address,
              e.g.

              scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          session_addr:
            type: string
            description: >-
              session_addr is a bech32 session address, e.g.

              session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
          record_addr:
            type: string
            description: >-
              record_addr is a bech32 record address, e.g.
              record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          include_sessions:
            type: boolean
            format: boolean
            description: >-
              include_sessions is a flag for whether to include the sessions of
              the scope in the response.
          include_records:
            type: boolean
            format: boolean
            description: >-
              include_records is a flag for whether to include the records of
              the scope in the response.
          exclude_id_info:
            type: boolean
            format: boolean
            description: >-
              exclude_id_info is a flag for whether to exclude the id info from
              the response.
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
    description: ScopeResponse is the response type for the Query/Scope RPC method.
  provenance.metadata.v1.ScopeSpecIdInfo:
    type: object
    properties:
      scope_spec_id:
        type: string
        format: byte
        description: scope_spec_id is the raw bytes of the scope specification address.
      scope_spec_id_prefix:
        type: string
        format: byte
        description: scope_spec_id_prefix is the prefix portion of the scope_spec_id.
      scope_spec_id_scope_spec_uuid:
        type: string
        format: byte
        description: >-
          scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion of the
          scope_spec_id.
      scope_spec_addr:
        type: string
        description: scope_spec_addr is the bech32 string version of the scope_spec_id.
      scope_spec_uuid:
        type: string
        description: >-
          scope_spec_uuid is the uuid hex string of the
          scope_spec_id_scope_spec_uuid.
    description: ScopeSpecIdInfo contains various info regarding a scope specification id.
  provenance.metadata.v1.ScopeSpecification:
    type: object
    properties:
      specification_id:
        type: string
        format: byte
        title: unique identifier for this specification on chain
      description:
        description: General information about this scope specification.
        type: object
        properties:
          name:
            type: string
            description: A Name for this thing.
          description:
            type: string
            description: A description of this thing.
          website_url:
            type: string
            description: URL to find even more info.
          icon_url:
            type: string
            description: URL of an icon.
      owner_addresses:
        type: array
        items:
          type: string
        description: Addresses of the owners of this scope specification.
      parties_involved:
        type: array
        items:
          type: string
          enum:
            - PARTY_TYPE_UNSPECIFIED
            - PARTY_TYPE_ORIGINATOR
            - PARTY_TYPE_SERVICER
            - PARTY_TYPE_INVESTOR
            - PARTY_TYPE_CUSTODIAN
            - PARTY_TYPE_OWNER
            - PARTY_TYPE_AFFILIATE
            - PARTY_TYPE_OMNIBUS
            - PARTY_TYPE_PROVENANCE
            - PARTY_TYPE_CONTROLLER
            - PARTY_TYPE_VALIDATOR
          default: PARTY_TYPE_UNSPECIFIED
          description: >-
            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
            condition
             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
          title: PartyType are the different roles parties on a contract may use
        title: >-
          A list of parties that must be present on a scope (and their
          associated roles)
      contract_spec_ids:
        type: array
        items:
          type: string
          format: byte
        description: >-
          A list of contract specification ids allowed for a scope based on this
          specification.
    title: >-
      ScopeSpecification defines the required parties, resources, conditions,
      and consideration outputs for a contract
  provenance.metadata.v1.ScopeSpecificationRequest:
    type: object
    properties:
      specification_id:
        type: string
        description: >-
          specification_id can either be a uuid, e.g.
          dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope specification

          address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
      include_contract_specs:
        type: boolean
        format: boolean
        description: >-
          include_contract_specs is a flag for whether to include the contract
          specifications of the scope specification in

          the response.
      include_record_specs:
        type: boolean
        format: boolean
        description: >-
          include_record_specs is a flag for whether to include the record
          specifications of the scope specification in the

          response.
      exclude_id_info:
        type: boolean
        format: boolean
        description: >-
          exclude_id_info is a flag for whether to exclude the id info from the
          response.
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
    description: >-
      ScopeSpecificationRequest is the request type for the
      Query/ScopeSpecification RPC method.
  provenance.metadata.v1.ScopeSpecificationResponse:
    type: object
    properties:
      scope_specification:
        description: scope_specification is the wrapped scope specification.
        type: object
        properties:
          specification:
            type: object
            properties:
              specification_id:
                type: string
                format: byte
                title: unique identifier for this specification on chain
              description:
                description: General information about this scope specification.
                type: object
                properties:
                  name:
                    type: string
                    description: A Name for this thing.
                  description:
                    type: string
                    description: A description of this thing.
                  website_url:
                    type: string
                    description: URL to find even more info.
                  icon_url:
                    type: string
                    description: URL of an icon.
              owner_addresses:
                type: array
                items:
                  type: string
                description: Addresses of the owners of this scope specification.
              parties_involved:
                type: array
                items:
                  type: string
                  enum:
                    - PARTY_TYPE_UNSPECIFIED
                    - PARTY_TYPE_ORIGINATOR
                    - PARTY_TYPE_SERVICER
                    - PARTY_TYPE_INVESTOR
                    - PARTY_TYPE_CUSTODIAN
                    - PARTY_TYPE_OWNER
                    - PARTY_TYPE_AFFILIATE
                    - PARTY_TYPE_OMNIBUS
                    - PARTY_TYPE_PROVENANCE
                    - PARTY_TYPE_CONTROLLER
                    - PARTY_TYPE_VALIDATOR
                  default: PARTY_TYPE_UNSPECIFIED
                  description: >-
                    - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                    condition
                     - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                     - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                     - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                     - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                     - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                     - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                     - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                     - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                     - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                     - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                  title: >-
                    PartyType are the different roles parties on a contract may
                    use
                title: >-
                  A list of parties that must be present on a scope (and their
                  associated roles)
              contract_spec_ids:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  A list of contract specification ids allowed for a scope based
                  on this specification.
            title: >-
              ScopeSpecification defines the required parties, resources,
              conditions, and consideration outputs for a contract
            description: specification is the on-chain scope specification message.
          scope_spec_id_info:
            description: >-
              scope_spec_id_info contains information about the id/address of
              the scope specification.
            type: object
            properties:
              scope_spec_id:
                type: string
                format: byte
                description: >-
                  scope_spec_id is the raw bytes of the scope specification
                  address.
              scope_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  scope_spec_id_prefix is the prefix portion of the
                  scope_spec_id.
              scope_spec_id_scope_spec_uuid:
                type: string
                format: byte
                description: >-
                  scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion
                  of the scope_spec_id.
              scope_spec_addr:
                type: string
                description: >-
                  scope_spec_addr is the bech32 string version of the
                  scope_spec_id.
              scope_spec_uuid:
                type: string
                description: >-
                  scope_spec_uuid is the uuid hex string of the
                  scope_spec_id_scope_spec_uuid.
      contract_specs:
        type: array
        items:
          type: object
          properties:
            specification:
              type: object
              properties:
                specification_id:
                  type: string
                  format: byte
                  title: unique identifier for this specification on chain
                description:
                  title: Description information for this contract specification
                  type: object
                  properties:
                    name:
                      type: string
                      description: A Name for this thing.
                    description:
                      type: string
                      description: A description of this thing.
                    website_url:
                      type: string
                      description: URL to find even more info.
                    icon_url:
                      type: string
                      description: URL of an icon.
                  description: >-
                    Description holds general information that is handy to
                    associate with a structure.
                owner_addresses:
                  type: array
                  items:
                    type: string
                  title: Address of the account that owns this specificaiton
                parties_involved:
                  type: array
                  items:
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    title: >-
                      PartyType are the different roles parties on a contract
                      may use
                  title: >-
                    a list of party roles that must be fullfilled when signing a
                    transaction for this contract specification
                resource_id:
                  type: string
                  format: byte
                  title: >-
                    the address of a record on chain that represents this
                    contract
                hash:
                  type: string
                  title: the hash of contract binary (off-chain instance)
                class_name:
                  type: string
                  title: name of the class/type of this contract executable
              title: >-
                ContractSpecification defines the required parties, resources,
                conditions, and consideration outputs for a contract
              description: specification is the on-chain contract specification message.
            contract_spec_id_info:
              description: >-
                contract_spec_id_info contains information about the id/address
                of the contract specification.
              type: object
              properties:
                contract_spec_id:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id is the raw bytes of the contract
                    specification address.
                contract_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_prefix is the prefix portion of the
                    contract_spec_id.
                contract_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_contract_spec_uuid is the
                    contract_spec_uuid portion of the contract_spec_id.
                contract_spec_addr:
                  type: string
                  description: >-
                    contract_spec_addr is the bech32 string version of the
                    contract_spec_id.
                contract_spec_uuid:
                  type: string
                  description: >-
                    contract_spec_uuid is the uuid hex string of the
                    contract_spec_id_contract_spec_uuid.
          description: >-
            ContractSpecificationWrapper contains a single contract
            specification and some extra identifiers for it.
        description: >-
          contract_specs is any number of wrapped contract specifications in
          this scope specification (if requested).
      record_specs:
        type: array
        items:
          type: object
          properties:
            specification:
              type: object
              properties:
                specification_id:
                  type: string
                  format: byte
                  title: unique identifier for this specification on chain
                name:
                  type: string
                  title: >-
                    Name of Record that will be created when this specification
                    is used
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        title: name for this input
                      type_name:
                        type: string
                        title: a type_name (typically a proto name or class_name)
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                    title: >-
                      InputSpecification defines a name, type_name, and source
                      reference (either on or off chain) to define an input

                      parameter
                  title: >-
                    A set of inputs that must be satisified to apply this
                    RecordSpecification and create a Record
                type_name:
                  type: string
                  title: >-
                    A type name for data associated with this record (typically
                    a class or proto name)
                result_type:
                  title: >-
                    Type of result for this record specification (must be RECORD
                    or RECORD_LIST)
                  type: string
                  enum:
                    - DEFINITION_TYPE_UNSPECIFIED
                    - DEFINITION_TYPE_PROPOSED
                    - DEFINITION_TYPE_RECORD
                    - DEFINITION_TYPE_RECORD_LIST
                  default: DEFINITION_TYPE_UNSPECIFIED
                  description: >-
                    - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED
                    indicates an unknown/invalid value
                     - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                     - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                     - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                    the same name
                responsible_parties:
                  type: array
                  items:
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    title: >-
                      PartyType are the different roles parties on a contract
                      may use
                  title: Type of party responsible for this record
              title: >-
                RecordSpecification defines the specification for a Record
                including allowed/required inputs/outputs
              description: specification is the on-chain record specification message.
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordSpecificationWrapper contains a single record specification
            and some extra identifiers for it.
        description: >-
          record_specs is any number of wrapped record specifications in this
          scope specification (if requested).
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          specification_id:
            type: string
            description: >-
              specification_id can either be a uuid, e.g.
              dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope
              specification

              address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
          include_contract_specs:
            type: boolean
            format: boolean
            description: >-
              include_contract_specs is a flag for whether to include the
              contract specifications of the scope specification in

              the response.
          include_record_specs:
            type: boolean
            format: boolean
            description: >-
              include_record_specs is a flag for whether to include the record
              specifications of the scope specification in the

              response.
          exclude_id_info:
            type: boolean
            format: boolean
            description: >-
              exclude_id_info is a flag for whether to exclude the id info from
              the response.
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
    description: >-
      ScopeSpecificationResponse is the response type for the
      Query/ScopeSpecification RPC method.
  provenance.metadata.v1.ScopeSpecificationWrapper:
    type: object
    properties:
      specification:
        type: object
        properties:
          specification_id:
            type: string
            format: byte
            title: unique identifier for this specification on chain
          description:
            description: General information about this scope specification.
            type: object
            properties:
              name:
                type: string
                description: A Name for this thing.
              description:
                type: string
                description: A description of this thing.
              website_url:
                type: string
                description: URL to find even more info.
              icon_url:
                type: string
                description: URL of an icon.
          owner_addresses:
            type: array
            items:
              type: string
            description: Addresses of the owners of this scope specification.
          parties_involved:
            type: array
            items:
              type: string
              enum:
                - PARTY_TYPE_UNSPECIFIED
                - PARTY_TYPE_ORIGINATOR
                - PARTY_TYPE_SERVICER
                - PARTY_TYPE_INVESTOR
                - PARTY_TYPE_CUSTODIAN
                - PARTY_TYPE_OWNER
                - PARTY_TYPE_AFFILIATE
                - PARTY_TYPE_OMNIBUS
                - PARTY_TYPE_PROVENANCE
                - PARTY_TYPE_CONTROLLER
                - PARTY_TYPE_VALIDATOR
              default: PARTY_TYPE_UNSPECIFIED
              description: >-
                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                condition
                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
              title: PartyType are the different roles parties on a contract may use
            title: >-
              A list of parties that must be present on a scope (and their
              associated roles)
          contract_spec_ids:
            type: array
            items:
              type: string
              format: byte
            description: >-
              A list of contract specification ids allowed for a scope based on
              this specification.
        title: >-
          ScopeSpecification defines the required parties, resources,
          conditions, and consideration outputs for a contract
        description: specification is the on-chain scope specification message.
      scope_spec_id_info:
        description: >-
          scope_spec_id_info contains information about the id/address of the
          scope specification.
        type: object
        properties:
          scope_spec_id:
            type: string
            format: byte
            description: scope_spec_id is the raw bytes of the scope specification address.
          scope_spec_id_prefix:
            type: string
            format: byte
            description: scope_spec_id_prefix is the prefix portion of the scope_spec_id.
          scope_spec_id_scope_spec_uuid:
            type: string
            format: byte
            description: >-
              scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion of
              the scope_spec_id.
          scope_spec_addr:
            type: string
            description: scope_spec_addr is the bech32 string version of the scope_spec_id.
          scope_spec_uuid:
            type: string
            description: >-
              scope_spec_uuid is the uuid hex string of the
              scope_spec_id_scope_spec_uuid.
    description: >-
      ScopeSpecificationWrapper contains a single scope specification and some
      extra identifiers for it.
  provenance.metadata.v1.ScopeSpecificationsAllRequest:
    type: object
    properties:
      exclude_id_info:
        type: boolean
        format: boolean
        description: >-
          exclude_id_info is a flag for whether to exclude the id info from the
          response.
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      ScopeSpecificationsAllRequest is the request type for the
      Query/ScopeSpecificationsAll RPC method.
  provenance.metadata.v1.ScopeSpecificationsAllResponse:
    type: object
    properties:
      scope_specifications:
        type: array
        items:
          type: object
          properties:
            specification:
              type: object
              properties:
                specification_id:
                  type: string
                  format: byte
                  title: unique identifier for this specification on chain
                description:
                  description: General information about this scope specification.
                  type: object
                  properties:
                    name:
                      type: string
                      description: A Name for this thing.
                    description:
                      type: string
                      description: A description of this thing.
                    website_url:
                      type: string
                      description: URL to find even more info.
                    icon_url:
                      type: string
                      description: URL of an icon.
                owner_addresses:
                  type: array
                  items:
                    type: string
                  description: Addresses of the owners of this scope specification.
                parties_involved:
                  type: array
                  items:
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    title: >-
                      PartyType are the different roles parties on a contract
                      may use
                  title: >-
                    A list of parties that must be present on a scope (and their
                    associated roles)
                contract_spec_ids:
                  type: array
                  items:
                    type: string
                    format: byte
                  description: >-
                    A list of contract specification ids allowed for a scope
                    based on this specification.
              title: >-
                ScopeSpecification defines the required parties, resources,
                conditions, and consideration outputs for a contract
              description: specification is the on-chain scope specification message.
            scope_spec_id_info:
              description: >-
                scope_spec_id_info contains information about the id/address of
                the scope specification.
              type: object
              properties:
                scope_spec_id:
                  type: string
                  format: byte
                  description: >-
                    scope_spec_id is the raw bytes of the scope specification
                    address.
                scope_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    scope_spec_id_prefix is the prefix portion of the
                    scope_spec_id.
                scope_spec_id_scope_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion
                    of the scope_spec_id.
                scope_spec_addr:
                  type: string
                  description: >-
                    scope_spec_addr is the bech32 string version of the
                    scope_spec_id.
                scope_spec_uuid:
                  type: string
                  description: >-
                    scope_spec_uuid is the uuid hex string of the
                    scope_spec_id_scope_spec_uuid.
          description: >-
            ScopeSpecificationWrapper contains a single scope specification and
            some extra identifiers for it.
        description: scope_specifications are the wrapped scope specifications.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          exclude_id_info:
            type: boolean
            format: boolean
            description: >-
              exclude_id_info is a flag for whether to exclude the id info from
              the response.
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      ScopeSpecificationsAllResponse is the response type for the
      Query/ScopeSpecificationsAll RPC method.
  provenance.metadata.v1.ScopeWrapper:
    type: object
    properties:
      scope:
        type: object
        properties:
          scope_id:
            type: string
            format: byte
            title: >-
              Unique ID for this scope.  Implements sdk.Address interface for
              use where addresses are required in Cosmos
          specification_id:
            type: string
            format: byte
            title: >-
              the scope specification that contains the specifications for data
              elements allowed within this scope
          owners:
            type: array
            items:
              type: object
              properties:
                address:
                  type: string
                  title: address of the account (on chain)
                role:
                  title: >-
                    a role for this account within the context of the processes
                    used
                  type: string
                  enum:
                    - PARTY_TYPE_UNSPECIFIED
                    - PARTY_TYPE_ORIGINATOR
                    - PARTY_TYPE_SERVICER
                    - PARTY_TYPE_INVESTOR
                    - PARTY_TYPE_CUSTODIAN
                    - PARTY_TYPE_OWNER
                    - PARTY_TYPE_AFFILIATE
                    - PARTY_TYPE_OMNIBUS
                    - PARTY_TYPE_PROVENANCE
                    - PARTY_TYPE_CONTROLLER
                    - PARTY_TYPE_VALIDATOR
                  default: PARTY_TYPE_UNSPECIFIED
                  description: >-
                    - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                    condition
                     - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                     - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                     - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                     - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                     - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                     - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                     - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                     - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                     - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                     - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                optional:
                  type: boolean
                  format: boolean
                  title: whether this party's signature is optional
              title: >-
                A Party is an address with/in a given role associated with a
                contract
            description: >-
              These parties represent top level owners of the records within. 
              These parties must sign any requests that modify

              the data within the scope.  These addresses are in union with
              parties listed on the sessions.
          data_access:
            type: array
            items:
              type: string
            description: >-
              Addresses in this list are authorized to receive off-chain data
              associated with this scope.
          value_owner_address:
            type: string
            description: >-
              An address that controls the value associated with this scope. 
              Standard blockchain accounts and marker accounts

              are supported for this value.  This attribute may only be changed
              by the entity indicated once it is set.
          require_party_rollup:
            type: boolean
            format: boolean
            description: >-
              Whether all parties in this scope and its sessions must be present
              in this scope's owners field.

              This also enables use of optional=true scope owners and session
              parties.
        description: >-
          Scope defines a root reference for a collection of records owned by
          one or more parties.
      scope_id_info:
        description: scope_id_info contains information about the id/address of the scope.
        type: object
        properties:
          scope_id:
            type: string
            format: byte
            description: scope_id is the raw bytes of the scope address.
          scope_id_prefix:
            type: string
            format: byte
            description: scope_id_prefix is the prefix portion of the scope_id.
          scope_id_scope_uuid:
            type: string
            format: byte
            description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
          scope_addr:
            type: string
            description: scope_addr is the bech32 string version of the scope_id.
          scope_uuid:
            type: string
            description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
      scope_spec_id_info:
        description: >-
          scope_spec_id_info contains information about the id/address of the
          scope specification.
        type: object
        properties:
          scope_spec_id:
            type: string
            format: byte
            description: scope_spec_id is the raw bytes of the scope specification address.
          scope_spec_id_prefix:
            type: string
            format: byte
            description: scope_spec_id_prefix is the prefix portion of the scope_spec_id.
          scope_spec_id_scope_spec_uuid:
            type: string
            format: byte
            description: >-
              scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion of
              the scope_spec_id.
          scope_spec_addr:
            type: string
            description: scope_spec_addr is the bech32 string version of the scope_spec_id.
          scope_spec_uuid:
            type: string
            description: >-
              scope_spec_uuid is the uuid hex string of the
              scope_spec_id_scope_spec_uuid.
    description: SessionWrapper contains a single scope and its uuid.
  provenance.metadata.v1.ScopesAllRequest:
    type: object
    properties:
      exclude_id_info:
        type: boolean
        format: boolean
        description: >-
          exclude_id_info is a flag for whether to exclude the id info from the
          response.
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: ScopesAllRequest is the request type for the Query/ScopesAll RPC method.
  provenance.metadata.v1.ScopesAllResponse:
    type: object
    properties:
      scopes:
        type: array
        items:
          type: object
          properties:
            scope:
              type: object
              properties:
                scope_id:
                  type: string
                  format: byte
                  title: >-
                    Unique ID for this scope.  Implements sdk.Address interface
                    for use where addresses are required in Cosmos
                specification_id:
                  type: string
                  format: byte
                  title: >-
                    the scope specification that contains the specifications for
                    data elements allowed within this scope
                owners:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        title: address of the account (on chain)
                      role:
                        title: >-
                          a role for this account within the context of the
                          processes used
                        type: string
                        enum:
                          - PARTY_TYPE_UNSPECIFIED
                          - PARTY_TYPE_ORIGINATOR
                          - PARTY_TYPE_SERVICER
                          - PARTY_TYPE_INVESTOR
                          - PARTY_TYPE_CUSTODIAN
                          - PARTY_TYPE_OWNER
                          - PARTY_TYPE_AFFILIATE
                          - PARTY_TYPE_OMNIBUS
                          - PARTY_TYPE_PROVENANCE
                          - PARTY_TYPE_CONTROLLER
                          - PARTY_TYPE_VALIDATOR
                        default: PARTY_TYPE_UNSPECIFIED
                        description: >-
                          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                          error condition
                           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                      optional:
                        type: boolean
                        format: boolean
                        title: whether this party's signature is optional
                    title: >-
                      A Party is an address with/in a given role associated with
                      a contract
                  description: >-
                    These parties represent top level owners of the records
                    within.  These parties must sign any requests that modify

                    the data within the scope.  These addresses are in union
                    with parties listed on the sessions.
                data_access:
                  type: array
                  items:
                    type: string
                  description: >-
                    Addresses in this list are authorized to receive off-chain
                    data associated with this scope.
                value_owner_address:
                  type: string
                  description: >-
                    An address that controls the value associated with this
                    scope.  Standard blockchain accounts and marker accounts

                    are supported for this value.  This attribute may only be
                    changed by the entity indicated once it is set.
                require_party_rollup:
                  type: boolean
                  format: boolean
                  description: >-
                    Whether all parties in this scope and its sessions must be
                    present in this scope's owners field.

                    This also enables use of optional=true scope owners and
                    session parties.
              description: >-
                Scope defines a root reference for a collection of records owned
                by one or more parties.
            scope_id_info:
              description: >-
                scope_id_info contains information about the id/address of the
                scope.
              type: object
              properties:
                scope_id:
                  type: string
                  format: byte
                  description: scope_id is the raw bytes of the scope address.
                scope_id_prefix:
                  type: string
                  format: byte
                  description: scope_id_prefix is the prefix portion of the scope_id.
                scope_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    scope_id_scope_uuid is the scope_uuid portion of the
                    scope_id.
                scope_addr:
                  type: string
                  description: scope_addr is the bech32 string version of the scope_id.
                scope_uuid:
                  type: string
                  description: >-
                    scope_uuid is the uuid hex string of the
                    scope_id_scope_uuid.
            scope_spec_id_info:
              description: >-
                scope_spec_id_info contains information about the id/address of
                the scope specification.
              type: object
              properties:
                scope_spec_id:
                  type: string
                  format: byte
                  description: >-
                    scope_spec_id is the raw bytes of the scope specification
                    address.
                scope_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    scope_spec_id_prefix is the prefix portion of the
                    scope_spec_id.
                scope_spec_id_scope_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion
                    of the scope_spec_id.
                scope_spec_addr:
                  type: string
                  description: >-
                    scope_spec_addr is the bech32 string version of the
                    scope_spec_id.
                scope_spec_uuid:
                  type: string
                  description: >-
                    scope_spec_uuid is the uuid hex string of the
                    scope_spec_id_scope_spec_uuid.
          description: SessionWrapper contains a single scope and its uuid.
        description: scopes are the wrapped scopes.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          exclude_id_info:
            type: boolean
            format: boolean
            description: >-
              exclude_id_info is a flag for whether to exclude the id info from
              the response.
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: ScopesAllResponse is the response type for the Query/ScopesAll RPC method.
  provenance.metadata.v1.Session:
    type: object
    properties:
      session_id:
        type: string
        format: byte
      specification_id:
        type: string
        format: byte
        description: >-
          unique id of the contract specification that was used to create this
          session.
      parties:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              title: address of the account (on chain)
            role:
              title: a role for this account within the context of the processes used
              type: string
              enum:
                - PARTY_TYPE_UNSPECIFIED
                - PARTY_TYPE_ORIGINATOR
                - PARTY_TYPE_SERVICER
                - PARTY_TYPE_INVESTOR
                - PARTY_TYPE_CUSTODIAN
                - PARTY_TYPE_OWNER
                - PARTY_TYPE_AFFILIATE
                - PARTY_TYPE_OMNIBUS
                - PARTY_TYPE_PROVENANCE
                - PARTY_TYPE_CONTROLLER
                - PARTY_TYPE_VALIDATOR
              default: PARTY_TYPE_UNSPECIFIED
              description: >-
                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                condition
                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
            optional:
              type: boolean
              format: boolean
              title: whether this party's signature is optional
          title: >-
            A Party is an address with/in a given role associated with a
            contract
        title: parties is the set of identities that signed this contract
      name:
        type: string
        title: >-
          name to associate with this session execution context, typically
          classname
      context:
        type: string
        format: byte
        description: >-
          context is a field for storing client specific data associated with a
          session.
      audit:
        description: 'Created by, updated by, timestamps, version number, and related info.'
        type: object
        properties:
          created_date:
            type: string
            format: date-time
            title: the date/time when this entry was created
          created_by:
            type: string
            title: the address of the account that created this record
          updated_date:
            type: string
            format: date-time
            title: the date/time when this entry was last updated
          updated_by:
            type: string
            title: the address of the account that modified this record
          version:
            type: integer
            format: int64
            title: an optional version number that is incremented with each update
          message:
            type: string
            title: an optional message associated with the creation/update event
        title: >-
          AuditFields capture information about the last account to make
          modifications and when they were made
    description: >-
      Session defines an execution context against a specific specification
      instance.

      The context will have a specification and set of parties involved.


      NOTE: When there are no more Records within a Scope that reference a
      Session, the Session is removed.
  provenance.metadata.v1.SessionIdInfo:
    type: object
    properties:
      session_id:
        type: string
        format: byte
        description: session_id is the raw bytes of the session address.
      session_id_prefix:
        type: string
        format: byte
        description: session_id_prefix is the prefix portion of the session_id.
      session_id_scope_uuid:
        type: string
        format: byte
        description: session_id_scope_uuid is the scope_uuid portion of the session_id.
      session_id_session_uuid:
        type: string
        format: byte
        description: session_id_session_uuid is the session_uuid portion of the session_id.
      session_addr:
        type: string
        description: session_addr is the bech32 string version of the session_id.
      session_uuid:
        type: string
        description: session_uuid is the uuid hex string of the session_id_session_uuid.
      scope_id_info:
        description: >-
          scope_id_info is information about the scope id referenced in the
          session_id.
        type: object
        properties:
          scope_id:
            type: string
            format: byte
            description: scope_id is the raw bytes of the scope address.
          scope_id_prefix:
            type: string
            format: byte
            description: scope_id_prefix is the prefix portion of the scope_id.
          scope_id_scope_uuid:
            type: string
            format: byte
            description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
          scope_addr:
            type: string
            description: scope_addr is the bech32 string version of the scope_id.
          scope_uuid:
            type: string
            description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
    description: SessionIdInfo contains various info regarding a session id.
  provenance.metadata.v1.SessionWrapper:
    type: object
    properties:
      session:
        type: object
        properties:
          session_id:
            type: string
            format: byte
          specification_id:
            type: string
            format: byte
            description: >-
              unique id of the contract specification that was used to create
              this session.
          parties:
            type: array
            items:
              type: object
              properties:
                address:
                  type: string
                  title: address of the account (on chain)
                role:
                  title: >-
                    a role for this account within the context of the processes
                    used
                  type: string
                  enum:
                    - PARTY_TYPE_UNSPECIFIED
                    - PARTY_TYPE_ORIGINATOR
                    - PARTY_TYPE_SERVICER
                    - PARTY_TYPE_INVESTOR
                    - PARTY_TYPE_CUSTODIAN
                    - PARTY_TYPE_OWNER
                    - PARTY_TYPE_AFFILIATE
                    - PARTY_TYPE_OMNIBUS
                    - PARTY_TYPE_PROVENANCE
                    - PARTY_TYPE_CONTROLLER
                    - PARTY_TYPE_VALIDATOR
                  default: PARTY_TYPE_UNSPECIFIED
                  description: >-
                    - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                    condition
                     - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                     - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                     - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                     - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                     - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                     - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                     - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                     - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                     - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                     - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                optional:
                  type: boolean
                  format: boolean
                  title: whether this party's signature is optional
              title: >-
                A Party is an address with/in a given role associated with a
                contract
            title: parties is the set of identities that signed this contract
          name:
            type: string
            title: >-
              name to associate with this session execution context, typically
              classname
          context:
            type: string
            format: byte
            description: >-
              context is a field for storing client specific data associated
              with a session.
          audit:
            description: >-
              Created by, updated by, timestamps, version number, and related
              info.
            type: object
            properties:
              created_date:
                type: string
                format: date-time
                title: the date/time when this entry was created
              created_by:
                type: string
                title: the address of the account that created this record
              updated_date:
                type: string
                format: date-time
                title: the date/time when this entry was last updated
              updated_by:
                type: string
                title: the address of the account that modified this record
              version:
                type: integer
                format: int64
                title: >-
                  an optional version number that is incremented with each
                  update
              message:
                type: string
                title: an optional message associated with the creation/update event
            title: >-
              AuditFields capture information about the last account to make
              modifications and when they were made
        description: >-
          Session defines an execution context against a specific specification
          instance.

          The context will have a specification and set of parties involved.


          NOTE: When there are no more Records within a Scope that reference a
          Session, the Session is removed.
      session_id_info:
        description: >-
          session_id_info contains information about the id/address of the
          session.
        type: object
        properties:
          session_id:
            type: string
            format: byte
            description: session_id is the raw bytes of the session address.
          session_id_prefix:
            type: string
            format: byte
            description: session_id_prefix is the prefix portion of the session_id.
          session_id_scope_uuid:
            type: string
            format: byte
            description: session_id_scope_uuid is the scope_uuid portion of the session_id.
          session_id_session_uuid:
            type: string
            format: byte
            description: >-
              session_id_session_uuid is the session_uuid portion of the
              session_id.
          session_addr:
            type: string
            description: session_addr is the bech32 string version of the session_id.
          session_uuid:
            type: string
            description: >-
              session_uuid is the uuid hex string of the
              session_id_session_uuid.
          scope_id_info:
            description: >-
              scope_id_info is information about the scope id referenced in the
              session_id.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
      contract_spec_id_info:
        description: >-
          contract_spec_id_info contains information about the id/address of the
          contract specification.
        type: object
        properties:
          contract_spec_id:
            type: string
            format: byte
            description: >-
              contract_spec_id is the raw bytes of the contract specification
              address.
          contract_spec_id_prefix:
            type: string
            format: byte
            description: >-
              contract_spec_id_prefix is the prefix portion of the
              contract_spec_id.
          contract_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              contract_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the contract_spec_id.
          contract_spec_addr:
            type: string
            description: >-
              contract_spec_addr is the bech32 string version of the
              contract_spec_id.
          contract_spec_uuid:
            type: string
            description: >-
              contract_spec_uuid is the uuid hex string of the
              contract_spec_id_contract_spec_uuid.
    description: >-
      SessionWrapper contains a single session and some extra identifiers for
      it.
  provenance.metadata.v1.SessionsAllRequest:
    type: object
    properties:
      exclude_id_info:
        type: boolean
        format: boolean
        description: >-
          exclude_id_info is a flag for whether to exclude the id info from the
          response.
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      SessionsAllRequest is the request type for the Query/SessionsAll RPC
      method.
  provenance.metadata.v1.SessionsAllResponse:
    type: object
    properties:
      sessions:
        type: array
        items:
          type: object
          properties:
            session:
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    unique id of the contract specification that was used to
                    create this session.
                parties:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        title: address of the account (on chain)
                      role:
                        title: >-
                          a role for this account within the context of the
                          processes used
                        type: string
                        enum:
                          - PARTY_TYPE_UNSPECIFIED
                          - PARTY_TYPE_ORIGINATOR
                          - PARTY_TYPE_SERVICER
                          - PARTY_TYPE_INVESTOR
                          - PARTY_TYPE_CUSTODIAN
                          - PARTY_TYPE_OWNER
                          - PARTY_TYPE_AFFILIATE
                          - PARTY_TYPE_OMNIBUS
                          - PARTY_TYPE_PROVENANCE
                          - PARTY_TYPE_CONTROLLER
                          - PARTY_TYPE_VALIDATOR
                        default: PARTY_TYPE_UNSPECIFIED
                        description: >-
                          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                          error condition
                           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                      optional:
                        type: boolean
                        format: boolean
                        title: whether this party's signature is optional
                    title: >-
                      A Party is an address with/in a given role associated with
                      a contract
                  title: parties is the set of identities that signed this contract
                name:
                  type: string
                  title: >-
                    name to associate with this session execution context,
                    typically classname
                context:
                  type: string
                  format: byte
                  description: >-
                    context is a field for storing client specific data
                    associated with a session.
                audit:
                  description: >-
                    Created by, updated by, timestamps, version number, and
                    related info.
                  type: object
                  properties:
                    created_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was created
                    created_by:
                      type: string
                      title: the address of the account that created this record
                    updated_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was last updated
                    updated_by:
                      type: string
                      title: the address of the account that modified this record
                    version:
                      type: integer
                      format: int64
                      title: >-
                        an optional version number that is incremented with each
                        update
                    message:
                      type: string
                      title: >-
                        an optional message associated with the creation/update
                        event
                  title: >-
                    AuditFields capture information about the last account to
                    make modifications and when they were made
              description: >-
                Session defines an execution context against a specific
                specification instance.

                The context will have a specification and set of parties
                involved.


                NOTE: When there are no more Records within a Scope that
                reference a Session, the Session is removed.
            session_id_info:
              description: >-
                session_id_info contains information about the id/address of the
                session.
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                  description: session_id is the raw bytes of the session address.
                session_id_prefix:
                  type: string
                  format: byte
                  description: session_id_prefix is the prefix portion of the session_id.
                session_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_scope_uuid is the scope_uuid portion of the
                    session_id.
                session_id_session_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_session_uuid is the session_uuid portion of the
                    session_id.
                session_addr:
                  type: string
                  description: session_addr is the bech32 string version of the session_id.
                session_uuid:
                  type: string
                  description: >-
                    session_uuid is the uuid hex string of the
                    session_id_session_uuid.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the session_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            contract_spec_id_info:
              description: >-
                contract_spec_id_info contains information about the id/address
                of the contract specification.
              type: object
              properties:
                contract_spec_id:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id is the raw bytes of the contract
                    specification address.
                contract_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_prefix is the prefix portion of the
                    contract_spec_id.
                contract_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_contract_spec_uuid is the
                    contract_spec_uuid portion of the contract_spec_id.
                contract_spec_addr:
                  type: string
                  description: >-
                    contract_spec_addr is the bech32 string version of the
                    contract_spec_id.
                contract_spec_uuid:
                  type: string
                  description: >-
                    contract_spec_uuid is the uuid hex string of the
                    contract_spec_id_contract_spec_uuid.
          description: >-
            SessionWrapper contains a single session and some extra identifiers
            for it.
        description: sessions are the wrapped sessions.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          exclude_id_info:
            type: boolean
            format: boolean
            description: >-
              exclude_id_info is a flag for whether to exclude the id info from
              the response.
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      SessionsAllResponse is the response type for the Query/SessionsAll RPC
      method.
  provenance.metadata.v1.SessionsRequest:
    type: object
    properties:
      scope_id:
        type: string
        description: >-
          scope_id can either be a uuid, e.g.
          91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

          scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
      session_id:
        type: string
        description: >-
          session_id can either be a uuid, e.g.
          5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address, e.g.

          session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
          This can only be a uuid if a scope_id is also

          provided.
      record_addr:
        type: string
        description: >-
          record_addr is a bech32 record address, e.g.
          record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
      record_name:
        type: string
        description: >-
          record_name is the name of the record to find the session for in the
          provided scope.
      include_scope:
        type: boolean
        format: boolean
        description: >-
          include_scope is a flag for whether to include the scope containing
          these sessions in the response.
      include_records:
        type: boolean
        format: boolean
        description: >-
          include_records is a flag for whether to include the records of these
          sessions in the response.
      exclude_id_info:
        type: boolean
        format: boolean
        description: >-
          exclude_id_info is a flag for whether to exclude the id info from the
          response.
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
    description: SessionsRequest is the request type for the Query/Sessions RPC method.
  provenance.metadata.v1.SessionsResponse:
    type: object
    properties:
      scope:
        description: scope is the wrapped scope that holds these sessions (if requested).
        type: object
        properties:
          scope:
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                title: >-
                  Unique ID for this scope.  Implements sdk.Address interface
                  for use where addresses are required in Cosmos
              specification_id:
                type: string
                format: byte
                title: >-
                  the scope specification that contains the specifications for
                  data elements allowed within this scope
              owners:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      title: address of the account (on chain)
                    role:
                      title: >-
                        a role for this account within the context of the
                        processes used
                      type: string
                      enum:
                        - PARTY_TYPE_UNSPECIFIED
                        - PARTY_TYPE_ORIGINATOR
                        - PARTY_TYPE_SERVICER
                        - PARTY_TYPE_INVESTOR
                        - PARTY_TYPE_CUSTODIAN
                        - PARTY_TYPE_OWNER
                        - PARTY_TYPE_AFFILIATE
                        - PARTY_TYPE_OMNIBUS
                        - PARTY_TYPE_PROVENANCE
                        - PARTY_TYPE_CONTROLLER
                        - PARTY_TYPE_VALIDATOR
                      default: PARTY_TYPE_UNSPECIFIED
                      description: >-
                        - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                        error condition
                         - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                         - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                         - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                         - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                         - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                         - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                         - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                         - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                         - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                         - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    optional:
                      type: boolean
                      format: boolean
                      title: whether this party's signature is optional
                  title: >-
                    A Party is an address with/in a given role associated with a
                    contract
                description: >-
                  These parties represent top level owners of the records
                  within.  These parties must sign any requests that modify

                  the data within the scope.  These addresses are in union with
                  parties listed on the sessions.
              data_access:
                type: array
                items:
                  type: string
                description: >-
                  Addresses in this list are authorized to receive off-chain
                  data associated with this scope.
              value_owner_address:
                type: string
                description: >-
                  An address that controls the value associated with this
                  scope.  Standard blockchain accounts and marker accounts

                  are supported for this value.  This attribute may only be
                  changed by the entity indicated once it is set.
              require_party_rollup:
                type: boolean
                format: boolean
                description: >-
                  Whether all parties in this scope and its sessions must be
                  present in this scope's owners field.

                  This also enables use of optional=true scope owners and
                  session parties.
            description: >-
              Scope defines a root reference for a collection of records owned
              by one or more parties.
          scope_id_info:
            description: >-
              scope_id_info contains information about the id/address of the
              scope.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
          scope_spec_id_info:
            description: >-
              scope_spec_id_info contains information about the id/address of
              the scope specification.
            type: object
            properties:
              scope_spec_id:
                type: string
                format: byte
                description: >-
                  scope_spec_id is the raw bytes of the scope specification
                  address.
              scope_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  scope_spec_id_prefix is the prefix portion of the
                  scope_spec_id.
              scope_spec_id_scope_spec_uuid:
                type: string
                format: byte
                description: >-
                  scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion
                  of the scope_spec_id.
              scope_spec_addr:
                type: string
                description: >-
                  scope_spec_addr is the bech32 string version of the
                  scope_spec_id.
              scope_spec_uuid:
                type: string
                description: >-
                  scope_spec_uuid is the uuid hex string of the
                  scope_spec_id_scope_spec_uuid.
      sessions:
        type: array
        items:
          type: object
          properties:
            session:
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    unique id of the contract specification that was used to
                    create this session.
                parties:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        title: address of the account (on chain)
                      role:
                        title: >-
                          a role for this account within the context of the
                          processes used
                        type: string
                        enum:
                          - PARTY_TYPE_UNSPECIFIED
                          - PARTY_TYPE_ORIGINATOR
                          - PARTY_TYPE_SERVICER
                          - PARTY_TYPE_INVESTOR
                          - PARTY_TYPE_CUSTODIAN
                          - PARTY_TYPE_OWNER
                          - PARTY_TYPE_AFFILIATE
                          - PARTY_TYPE_OMNIBUS
                          - PARTY_TYPE_PROVENANCE
                          - PARTY_TYPE_CONTROLLER
                          - PARTY_TYPE_VALIDATOR
                        default: PARTY_TYPE_UNSPECIFIED
                        description: >-
                          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                          error condition
                           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                      optional:
                        type: boolean
                        format: boolean
                        title: whether this party's signature is optional
                    title: >-
                      A Party is an address with/in a given role associated with
                      a contract
                  title: parties is the set of identities that signed this contract
                name:
                  type: string
                  title: >-
                    name to associate with this session execution context,
                    typically classname
                context:
                  type: string
                  format: byte
                  description: >-
                    context is a field for storing client specific data
                    associated with a session.
                audit:
                  description: >-
                    Created by, updated by, timestamps, version number, and
                    related info.
                  type: object
                  properties:
                    created_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was created
                    created_by:
                      type: string
                      title: the address of the account that created this record
                    updated_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was last updated
                    updated_by:
                      type: string
                      title: the address of the account that modified this record
                    version:
                      type: integer
                      format: int64
                      title: >-
                        an optional version number that is incremented with each
                        update
                    message:
                      type: string
                      title: >-
                        an optional message associated with the creation/update
                        event
                  title: >-
                    AuditFields capture information about the last account to
                    make modifications and when they were made
              description: >-
                Session defines an execution context against a specific
                specification instance.

                The context will have a specification and set of parties
                involved.


                NOTE: When there are no more Records within a Scope that
                reference a Session, the Session is removed.
            session_id_info:
              description: >-
                session_id_info contains information about the id/address of the
                session.
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                  description: session_id is the raw bytes of the session address.
                session_id_prefix:
                  type: string
                  format: byte
                  description: session_id_prefix is the prefix portion of the session_id.
                session_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_scope_uuid is the scope_uuid portion of the
                    session_id.
                session_id_session_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_session_uuid is the session_uuid portion of the
                    session_id.
                session_addr:
                  type: string
                  description: session_addr is the bech32 string version of the session_id.
                session_uuid:
                  type: string
                  description: >-
                    session_uuid is the uuid hex string of the
                    session_id_session_uuid.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the session_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            contract_spec_id_info:
              description: >-
                contract_spec_id_info contains information about the id/address
                of the contract specification.
              type: object
              properties:
                contract_spec_id:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id is the raw bytes of the contract
                    specification address.
                contract_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_prefix is the prefix portion of the
                    contract_spec_id.
                contract_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_contract_spec_uuid is the
                    contract_spec_uuid portion of the contract_spec_id.
                contract_spec_addr:
                  type: string
                  description: >-
                    contract_spec_addr is the bech32 string version of the
                    contract_spec_id.
                contract_spec_uuid:
                  type: string
                  description: >-
                    contract_spec_uuid is the uuid hex string of the
                    contract_spec_id_contract_spec_uuid.
          description: >-
            SessionWrapper contains a single session and some extra identifiers
            for it.
        description: sessions is any number of wrapped session results.
      records:
        type: array
        items:
          type: object
          properties:
            record:
              type: object
              properties:
                name:
                  type: string
                  title: >-
                    name/identifier for this record.  Value must be unique
                    within the scope.  Also known as a Fact name
                session_id:
                  type: string
                  format: byte
                  title: >-
                    id of the session context that was used to create this
                    record (use with filtered kvprefix iterator)
                process:
                  title: >-
                    process contain information used to uniquely identify an
                    execution on or off chain that generated this record
                  type: object
                  properties:
                    address:
                      type: string
                      title: the address of a smart contract used for this process
                    hash:
                      type: string
                      title: the hash of an off-chain process used
                    name:
                      type: string
                      title: >-
                        a name associated with the process (type_name, classname
                        or smart contract common name)
                    method:
                      type: string
                      title: >-
                        method is a name or reference to a specific operation
                        (method) within a class/contract that was invoked
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: >-
                          Name value included to link back to the definition
                          spec.
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                      type_name:
                        type: string
                        title: from proposed fact structure to unmarshal
                      status:
                        title: >-
                          Indicates if this input was a recorded fact on chain
                          or just a given hashed input
                        type: string
                        enum:
                          - RECORD_INPUT_STATUS_UNSPECIFIED
                          - RECORD_INPUT_STATUS_PROPOSED
                          - RECORD_INPUT_STATUS_RECORD
                        default: RECORD_INPUT_STATUS_UNSPECIFIED
                        description: >-
                          - RECORD_INPUT_STATUS_UNSPECIFIED:
                          RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                          invalid/unknown input type
                           - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                           - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                    title: Tracks the inputs used to establish this record
                  title: >-
                    inputs used with the process to achieve the output on this
                    record
                outputs:
                  type: array
                  items:
                    type: object
                    properties:
                      hash:
                        type: string
                        title: >-
                          Hash of the data output that was output/generated for
                          this record
                      status:
                        title: >-
                          Status of the process execution associated with this
                          output indicating success,failure, or pending
                        type: string
                        enum:
                          - RESULT_STATUS_UNSPECIFIED
                          - RESULT_STATUS_PASS
                          - RESULT_STATUS_SKIP
                          - RESULT_STATUS_FAIL
                        default: RESULT_STATUS_UNSPECIFIED
                        description: >-
                          - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED
                          indicates an unset condition
                           - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successful
                           - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                           - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                    title: >-
                      RecordOutput encapsulates the output of a process recorded
                      on chain
                  title: >-
                    output(s) is the results of executing the process on the
                    given process indicated in this record
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    specification_id is the id of the record specification that
                    was used to create this record.
              title: >-
                A record (of fact) is attached to a session or each
                consideration output from a contract
              description: record is the on-chain record message.
            record_id_info:
              description: >-
                record_id_info contains information about the id/address of the
                record.
              type: object
              properties:
                record_id:
                  type: string
                  format: byte
                  description: record_id is the raw bytes of the record address.
                record_id_prefix:
                  type: string
                  format: byte
                  description: record_id_prefix is the prefix portion of the record_id.
                record_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_id_scope_uuid is the scope_uuid portion of the
                    record_id.
                record_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_id_hashed_name is the hashed name portion of the
                    record_id.
                record_addr:
                  type: string
                  description: record_addr is the bech32 string version of the record_id.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the record_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordWrapper contains a single record and some extra identifiers
            for it.
        description: >-
          records is any number of wrapped records contained in these sessions
          (if requested).
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          scope_id:
            type: string
            description: >-
              scope_id can either be a uuid, e.g.
              91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address,
              e.g.

              scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          session_id:
            type: string
            description: >-
              session_id can either be a uuid, e.g.
              5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
              e.g.

              session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
              This can only be a uuid if a scope_id is also

              provided.
          record_addr:
            type: string
            description: >-
              record_addr is a bech32 record address, e.g.
              record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          record_name:
            type: string
            description: >-
              record_name is the name of the record to find the session for in
              the provided scope.
          include_scope:
            type: boolean
            format: boolean
            description: >-
              include_scope is a flag for whether to include the scope
              containing these sessions in the response.
          include_records:
            type: boolean
            format: boolean
            description: >-
              include_records is a flag for whether to include the records of
              these sessions in the response.
          exclude_id_info:
            type: boolean
            format: boolean
            description: >-
              exclude_id_info is a flag for whether to exclude the id info from
              the response.
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
    description: SessionsResponse is the response type for the Query/Sessions RPC method.
  provenance.metadata.v1.ValueOwnershipRequest:
    type: object
    properties:
      address:
        type: string
      include_request:
        type: boolean
        format: boolean
        description: >-
          include_request is a flag for whether to include this request in your
          result.
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      ValueOwnershipRequest is the request type for the Query/ValueOwnership RPC
      method.
  provenance.metadata.v1.ValueOwnershipResponse:
    type: object
    properties:
      scope_uuids:
        type: array
        items:
          type: string
        description: A list of scope ids (uuid) associated with the given address.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          address:
            type: string
          include_request:
            type: boolean
            format: boolean
            description: >-
              include_request is a flag for whether to include this request in
              your result.
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      ValueOwnershipResponse is the response type for the Query/ValueOwnership
      RPC method.
  provenance.metadata.v1.MsgAddContractSpecToScopeSpecResponse:
    type: object
    description: >-
      MsgAddContractSpecToScopeSpecResponse is the response type for the
      Msg/AddContractSpecToScopeSpec RPC method.
  provenance.metadata.v1.MsgAddScopeDataAccessResponse:
    type: object
    title: >-
      MsgAddScopeDataAccessResponse is the response for adding data access
      AccAddress to scope
  provenance.metadata.v1.MsgAddScopeOwnerResponse:
    type: object
    title: >-
      MsgAddScopeOwnerResponse is the response for adding owner AccAddresses to
      scope
  provenance.metadata.v1.MsgBindOSLocatorResponse:
    type: object
    properties:
      locator:
        type: object
        properties:
          owner:
            type: string
            title: account address the endpoint is owned by
          locator_uri:
            type: string
            title: locator endpoint uri
          encryption_key:
            type: string
            title: owners encryption key address
        description: >-
          Defines an Locator object stored on chain, which represents a owner(
          blockchain address) associated with a endpoint

          uri for it's associated object store.
    description: >-
      MsgBindOSLocatorResponse is the response type for the Msg/BindOSLocator
      RPC method.
  provenance.metadata.v1.MsgDeleteContractSpecFromScopeSpecResponse:
    type: object
    description: >-
      MsgDeleteContractSpecFromScopeSpecResponse is the response type for the
      Msg/DeleteContractSpecFromScopeSpec RPC

      method.
  provenance.metadata.v1.MsgDeleteContractSpecificationResponse:
    type: object
    description: >-
      MsgDeleteContractSpecificationResponse is the response type for the
      Msg/DeleteContractSpecification RPC method.
  provenance.metadata.v1.MsgDeleteOSLocatorResponse:
    type: object
    properties:
      locator:
        type: object
        properties:
          owner:
            type: string
            title: account address the endpoint is owned by
          locator_uri:
            type: string
            title: locator endpoint uri
          encryption_key:
            type: string
            title: owners encryption key address
        description: >-
          Defines an Locator object stored on chain, which represents a owner(
          blockchain address) associated with a endpoint

          uri for it's associated object store.
    description: >-
      MsgDeleteOSLocatorResponse is the response type for the
      Msg/DeleteOSLocator RPC method.
  provenance.metadata.v1.MsgDeleteRecordResponse:
    type: object
    description: >-
      MsgDeleteRecordResponse is the response type for the Msg/DeleteRecord RPC
      method.
  provenance.metadata.v1.MsgDeleteRecordSpecificationResponse:
    type: object
    description: >-
      MsgDeleteRecordSpecificationResponse is the response type for the
      Msg/DeleteRecordSpecification RPC method.
  provenance.metadata.v1.MsgDeleteScopeDataAccessResponse:
    type: object
    title: >-
      MsgDeleteScopeDataAccessResponse is the response from removing data access
      AccAddress to scope
  provenance.metadata.v1.MsgDeleteScopeOwnerResponse:
    type: object
    title: >-
      MsgDeleteScopeOwnerResponse is the response from removing owner AccAddress
      to scope
  provenance.metadata.v1.MsgDeleteScopeResponse:
    type: object
    description: >-
      MsgDeleteScopeResponse is the response type for the Msg/DeleteScope RPC
      method.
  provenance.metadata.v1.MsgDeleteScopeSpecificationResponse:
    type: object
    description: >-
      MsgDeleteScopeSpecificationResponse is the response type for the
      Msg/DeleteScopeSpecification RPC method.
  provenance.metadata.v1.MsgMigrateValueOwnerResponse:
    type: object
    description: >-
      MsgMigrateValueOwnerResponse is the response from migrating a value owner
      address.
  provenance.metadata.v1.MsgModifyOSLocatorResponse:
    type: object
    properties:
      locator:
        type: object
        properties:
          owner:
            type: string
            title: account address the endpoint is owned by
          locator_uri:
            type: string
            title: locator endpoint uri
          encryption_key:
            type: string
            title: owners encryption key address
        description: >-
          Defines an Locator object stored on chain, which represents a owner(
          blockchain address) associated with a endpoint

          uri for it's associated object store.
    description: >-
      MsgModifyOSLocatorResponse is the response type for the
      Msg/ModifyOSLocator RPC method.
  provenance.metadata.v1.MsgSetAccountDataResponse:
    type: object
    description: >-
      MsgSetAccountDataResponse is the response from setting/updating/deleting a
      scope's account data.
  provenance.metadata.v1.MsgUpdateValueOwnersResponse:
    type: object
    description: >-
      MsgUpdateValueOwnersResponse is the response from updating value owner
      addresses in one or more scopes.
  provenance.metadata.v1.MsgWriteContractSpecificationResponse:
    type: object
    properties:
      contract_spec_id_info:
        description: >-
          contract_spec_id_info contains information about the id/address of the
          contract specification that was added or

          updated.
        type: object
        properties:
          contract_spec_id:
            type: string
            format: byte
            description: >-
              contract_spec_id is the raw bytes of the contract specification
              address.
          contract_spec_id_prefix:
            type: string
            format: byte
            description: >-
              contract_spec_id_prefix is the prefix portion of the
              contract_spec_id.
          contract_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              contract_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the contract_spec_id.
          contract_spec_addr:
            type: string
            description: >-
              contract_spec_addr is the bech32 string version of the
              contract_spec_id.
          contract_spec_uuid:
            type: string
            description: >-
              contract_spec_uuid is the uuid hex string of the
              contract_spec_id_contract_spec_uuid.
    description: >-
      MsgWriteContractSpecificationResponse is the response type for the
      Msg/WriteContractSpecification RPC method.
  provenance.metadata.v1.MsgWriteRecordResponse:
    type: object
    properties:
      record_id_info:
        description: >-
          record_id_info contains information about the id/address of the record
          that was added or updated.
        type: object
        properties:
          record_id:
            type: string
            format: byte
            description: record_id is the raw bytes of the record address.
          record_id_prefix:
            type: string
            format: byte
            description: record_id_prefix is the prefix portion of the record_id.
          record_id_scope_uuid:
            type: string
            format: byte
            description: record_id_scope_uuid is the scope_uuid portion of the record_id.
          record_id_hashed_name:
            type: string
            format: byte
            description: record_id_hashed_name is the hashed name portion of the record_id.
          record_addr:
            type: string
            description: record_addr is the bech32 string version of the record_id.
          scope_id_info:
            description: >-
              scope_id_info is information about the scope id referenced in the
              record_id.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
    description: >-
      MsgWriteRecordResponse is the response type for the Msg/WriteRecord RPC
      method.
  provenance.metadata.v1.MsgWriteRecordSpecificationResponse:
    type: object
    properties:
      record_spec_id_info:
        description: >-
          record_spec_id_info contains information about the id/address of the
          record specification that was added or

          updated.
        type: object
        properties:
          record_spec_id:
            type: string
            format: byte
            description: >-
              record_spec_id is the raw bytes of the record specification
              address.
          record_spec_id_prefix:
            type: string
            format: byte
            description: record_spec_id_prefix is the prefix portion of the record_spec_id.
          record_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              record_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the record_spec_id.
          record_spec_id_hashed_name:
            type: string
            format: byte
            description: >-
              record_spec_id_hashed_name is the hashed name portion of the
              record_spec_id.
          record_spec_addr:
            type: string
            description: >-
              record_spec_addr is the bech32 string version of the
              record_spec_id.
          contract_spec_id_info:
            description: >-
              contract_spec_id_info is information about the contract spec id
              referenced in the record_spec_id.
            type: object
            properties:
              contract_spec_id:
                type: string
                format: byte
                description: >-
                  contract_spec_id is the raw bytes of the contract
                  specification address.
              contract_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  contract_spec_id_prefix is the prefix portion of the
                  contract_spec_id.
              contract_spec_id_contract_spec_uuid:
                type: string
                format: byte
                description: >-
                  contract_spec_id_contract_spec_uuid is the contract_spec_uuid
                  portion of the contract_spec_id.
              contract_spec_addr:
                type: string
                description: >-
                  contract_spec_addr is the bech32 string version of the
                  contract_spec_id.
              contract_spec_uuid:
                type: string
                description: >-
                  contract_spec_uuid is the uuid hex string of the
                  contract_spec_id_contract_spec_uuid.
    description: >-
      MsgWriteRecordSpecificationResponse is the response type for the
      Msg/WriteRecordSpecification RPC method.
  provenance.metadata.v1.MsgWriteScopeResponse:
    type: object
    properties:
      scope_id_info:
        description: >-
          scope_id_info contains information about the id/address of the scope
          that was added or updated.
        type: object
        properties:
          scope_id:
            type: string
            format: byte
            description: scope_id is the raw bytes of the scope address.
          scope_id_prefix:
            type: string
            format: byte
            description: scope_id_prefix is the prefix portion of the scope_id.
          scope_id_scope_uuid:
            type: string
            format: byte
            description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
          scope_addr:
            type: string
            description: scope_addr is the bech32 string version of the scope_id.
          scope_uuid:
            type: string
            description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
    description: >-
      MsgWriteScopeResponse is the response type for the Msg/WriteScope RPC
      method.
  provenance.metadata.v1.MsgWriteScopeSpecificationResponse:
    type: object
    properties:
      scope_spec_id_info:
        description: >-
          scope_spec_id_info contains information about the id/address of the
          scope specification that was added or updated.
        type: object
        properties:
          scope_spec_id:
            type: string
            format: byte
            description: scope_spec_id is the raw bytes of the scope specification address.
          scope_spec_id_prefix:
            type: string
            format: byte
            description: scope_spec_id_prefix is the prefix portion of the scope_spec_id.
          scope_spec_id_scope_spec_uuid:
            type: string
            format: byte
            description: >-
              scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion of
              the scope_spec_id.
          scope_spec_addr:
            type: string
            description: scope_spec_addr is the bech32 string version of the scope_spec_id.
          scope_spec_uuid:
            type: string
            description: >-
              scope_spec_uuid is the uuid hex string of the
              scope_spec_id_scope_spec_uuid.
    description: >-
      MsgWriteScopeSpecificationResponse is the response type for the
      Msg/WriteScopeSpecification RPC method.
  provenance.metadata.v1.MsgWriteSessionResponse:
    type: object
    properties:
      session_id_info:
        description: >-
          session_id_info contains information about the id/address of the
          session that was added or updated.
        type: object
        properties:
          session_id:
            type: string
            format: byte
            description: session_id is the raw bytes of the session address.
          session_id_prefix:
            type: string
            format: byte
            description: session_id_prefix is the prefix portion of the session_id.
          session_id_scope_uuid:
            type: string
            format: byte
            description: session_id_scope_uuid is the scope_uuid portion of the session_id.
          session_id_session_uuid:
            type: string
            format: byte
            description: >-
              session_id_session_uuid is the session_uuid portion of the
              session_id.
          session_addr:
            type: string
            description: session_addr is the bech32 string version of the session_id.
          session_uuid:
            type: string
            description: >-
              session_uuid is the uuid hex string of the
              session_id_session_uuid.
          scope_id_info:
            description: >-
              scope_id_info is information about the scope id referenced in the
              session_id.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
    description: >-
      MsgWriteSessionResponse is the response type for the Msg/WriteSession RPC
      method.
  provenance.metadata.v1.SessionIdComponents:
    type: object
    properties:
      scope_uuid:
        type: string
        title: >-
          scope_uuid is the uuid string for the scope, e.g.
          "91978ba2-5f35-459a-86a7-feca1b0512e0"
      scope_addr:
        type: string
        title: >-
          scope_addr is the bech32 address string for the scope, g.g.
          "scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel"
      session_uuid:
        type: string
        title: >-
          session_uuid is a uuid string for identifying this session, e.g.
          "5803f8bc-6067-4eb5-951f-2121671c2ec0"
    description: >-
      SessionIDComponents contains fields for the components that make up a
      session id.
  provenance.name.v1.Params:
    type: object
    properties:
      max_segment_length:
        type: integer
        format: int64
        title: maximum length of name segment to allow
      min_segment_length:
        type: integer
        format: int64
        title: minimum length of name segment to allow
      max_name_levels:
        type: integer
        format: int64
        title: >-
          maximum number of name segments to allow.  Example: `foo.bar.baz`
          would be 3
      allow_unrestricted_names:
        type: boolean
        format: boolean
        title: determines if unrestricted name keys are allowed or not
    description: Params defines the set of params for the name module.
  provenance.name.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          max_segment_length:
            type: integer
            format: int64
            title: maximum length of name segment to allow
          min_segment_length:
            type: integer
            format: int64
            title: minimum length of name segment to allow
          max_name_levels:
            type: integer
            format: int64
            title: >-
              maximum number of name segments to allow.  Example: `foo.bar.baz`
              would be 3
          allow_unrestricted_names:
            type: boolean
            format: boolean
            title: determines if unrestricted name keys are allowed or not
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  provenance.name.v1.QueryResolveResponse:
    type: object
    properties:
      address:
        type: string
        title: a string containing the address the name resolves to
      restricted:
        type: boolean
        format: boolean
        description: Whether owner signature is required to add sub-names.
    description: QueryResolveResponse is the response type for the Query/Resolve method.
  provenance.name.v1.QueryReverseLookupResponse:
    type: object
    properties:
      name:
        type: array
        items:
          type: string
        title: an array of names bound against a given address
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryReverseLookupResponse is the response type for the Query/Resolve
      method.
  provenance.name.v1.MsgBindNameResponse:
    type: object
    description: MsgBindNameResponse defines the Msg/BindName response type.
  provenance.name.v1.MsgCreateRootNameResponse:
    type: object
    description: MsgCreateRootNameResponse defines Msg/CreateRootName response type.
  provenance.name.v1.MsgDeleteNameResponse:
    type: object
    description: MsgDeleteNameResponse defines the Msg/DeleteName response type.
  provenance.name.v1.MsgModifyNameResponse:
    type: object
    description: MsgModifyNameResponse defines the Msg/ModifyName response type.
  provenance.name.v1.NameRecord:
    type: object
    properties:
      name:
        type: string
        title: the bound name
      address:
        type: string
        title: the address the name resolved to
      restricted:
        type: boolean
        format: boolean
        title: whether owner signature is required to add sub-names
    title: >-
      NameRecord is a structure used to bind ownership of a name hierarchy to a
      collection of addresses
  provenance.msgfees.v1.CalculateTxFeesRequest:
    type: object
    properties:
      tx_bytes:
        type: string
        format: byte
        description: tx_bytes is the transaction to simulate.
      default_base_denom:
        type: string
        description: |-
          default_base_denom is used to set the denom used for gas fees
          if not set it will default to nhash.
      gas_adjustment:
        type: number
        format: float
        title: >-
          gas_adjustment is the adjustment factor to be multiplied against the
          estimate returned by the tx simulation
    description: CalculateTxFeesRequest is the request type for the Query RPC method.
  provenance.msgfees.v1.CalculateTxFeesResponse:
    type: object
    properties:
      additional_fees:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: additional_fees are the amount of coins to be for addition msg fees
      total_fees:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: >-
          total_fees are the total amount of fees needed for the transactions
          (msg fees + gas fee)

          note: the gas fee is calculated with the floor gas price module param.
      estimated_gas:
        type: string
        format: uint64
        title: estimated_gas is the amount of gas needed for the transaction
    description: CalculateTxFeesResponse is the response type for the Query RPC method.
  provenance.msgfees.v1.MsgFee:
    type: object
    properties:
      msg_type_url:
        type: string
      additional_fee:
        title: >-
          additional_fee can pay in any Coin( basically a Denom and Amount,
          Amount can be zero)
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      recipient:
        type: string
      recipient_basis_points:
        type: integer
        format: int64
    title: >-
      MsgFee is the core of what gets stored on the blockchain

      it consists of four parts

      1. the msg type url, i.e. /cosmos.bank.v1beta1.MsgSend

      2. minimum additional fees(can be of any denom)

      3. optional recipient of fee based on `recipient_basis_points`

      4. if recipient is declared they will recieve the basis points of the fee
      (0-10,000)
  provenance.msgfees.v1.Params:
    type: object
    properties:
      floor_gas_price:
        title: >-
          constant used to calculate fees when gas fees shares denom with msg
          fee
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      nhash_per_usd_mil:
        type: string
        format: uint64
        title: total nhash per usd mil for converting usd to nhash
      conversion_fee_denom:
        type: string
        title: conversion fee denom is the denom usd is converted to
    description: Params defines the set of params for the msgfees module.
  provenance.msgfees.v1.QueryAllMsgFeesResponse:
    type: object
    properties:
      msg_fees:
        type: array
        items:
          type: object
          properties:
            msg_type_url:
              type: string
            additional_fee:
              title: >-
                additional_fee can pay in any Coin( basically a Denom and
                Amount, Amount can be zero)
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            recipient:
              type: string
            recipient_basis_points:
              type: integer
              format: int64
          title: >-
            MsgFee is the core of what gets stored on the blockchain

            it consists of four parts

            1. the msg type url, i.e. /cosmos.bank.v1beta1.MsgSend

            2. minimum additional fees(can be of any denom)

            3. optional recipient of fee based on `recipient_basis_points`

            4. if recipient is declared they will recieve the basis points of
            the fee (0-10,000)
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: response for querying all msg's with fees associated with them
  provenance.msgfees.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          floor_gas_price:
            title: >-
              constant used to calculate fees when gas fees shares denom with
              msg fee
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
          nhash_per_usd_mil:
            type: string
            format: uint64
            title: total nhash per usd mil for converting usd to nhash
          conversion_fee_denom:
            type: string
            title: conversion fee denom is the denom usd is converted to
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  provenance.reward.v1.ActionDelegate:
    type: object
    properties:
      minimum_actions:
        type: string
        format: uint64
        description: Minimum number of successful delegates.
      maximum_actions:
        type: string
        format: uint64
        description: Maximum number of successful delegates.
      minimum_delegation_amount:
        description: >-
          Minimum amount that the user must have currently delegated on the
          validator.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      maximum_delegation_amount:
        description: >-
          Maximum amount that the user must have currently delegated on the
          validator.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      minimum_active_stake_percentile:
        type: string
        description: Minimum percentile that can be below the validator's power ranking.
      maximum_active_stake_percentile:
        type: string
        description: Maximum percentile that can be below the validator's power ranking.
    description: >-
      ActionDelegate represents the delegate action and its required eligibility
      criteria.
  provenance.reward.v1.ActionTransfer:
    type: object
    properties:
      minimum_actions:
        type: string
        format: uint64
        description: Minimum number of successful transfers.
      maximum_actions:
        type: string
        format: uint64
        description: Maximum number of successful transfers.
      minimum_delegation_amount:
        description: >-
          Minimum delegation amount the account must have across all validators,
          for the transfer action to be counted.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
    description: >-
      ActionTransfer represents the transfer action and its required eligibility
      criteria.
  provenance.reward.v1.ActionVote:
    type: object
    properties:
      minimum_actions:
        type: string
        format: uint64
        description: Minimum number of successful votes.
      maximum_actions:
        type: string
        format: uint64
        description: Maximum number of successful votes.
      minimum_delegation_amount:
        description: >-
          Minimum delegation amount the account must have across all validators,
          for the vote action to be counted.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      validator_multiplier:
        type: string
        format: uint64
        title: >-
          Positive multiplier that is applied to the shares awarded by the vote
          action when conditions

          are met(for now the only condition is the current vote is a validator
          vote). A value of zero will behave the same

          as one
    description: >-
      ActionVote represents the voting action and its required eligibility
      criteria.
  provenance.reward.v1.ClaimedRewardPeriodDetail:
    type: object
    properties:
      claim_period_id:
        type: string
        format: uint64
        title: claim period id
      total_shares:
        type: string
        format: uint64
        title: total shares accumulated for claim period
      claim_period_reward:
        title: total rewards for claim period
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: >-
      ClaimedRewardPeriodDetail is information regarding an addresses' shares
      and reward for a claim period.
  provenance.reward.v1.MsgClaimAllRewardsResponse:
    type: object
    properties:
      total_reward_claim:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: total rewards claimed for all eligible claim periods in all programs.
      claim_details:
        type: array
        items:
          type: object
          properties:
            reward_program_id:
              type: string
              format: uint64
              description: reward program id.
            total_reward_claim:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            claimed_reward_period_details:
              type: array
              items:
                type: object
                properties:
                  claim_period_id:
                    type: string
                    format: uint64
                    title: claim period id
                  total_shares:
                    type: string
                    format: uint64
                    title: total shares accumulated for claim period
                  claim_period_reward:
                    title: total rewards for claim period
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                description: >-
                  ClaimedRewardPeriodDetail is information regarding an
                  addresses' shares and reward for a claim period.
              description: claim period details.
          description: >-
            RewardProgramClaimDetail is the response object regarding an
            address's shares and reward for a reward program.
        description: details about acquired rewards from a reward program.
    title: >-
      MsgClaimRewardsResponse is the response type for claiming rewards from all
      reward programs RPC
  provenance.reward.v1.MsgClaimRewardsResponse:
    type: object
    properties:
      claim_details:
        type: object
        properties:
          reward_program_id:
            type: string
            format: uint64
            description: reward program id.
          total_reward_claim:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
          claimed_reward_period_details:
            type: array
            items:
              type: object
              properties:
                claim_period_id:
                  type: string
                  format: uint64
                  title: claim period id
                total_shares:
                  type: string
                  format: uint64
                  title: total shares accumulated for claim period
                claim_period_reward:
                  title: total rewards for claim period
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
              description: >-
                ClaimedRewardPeriodDetail is information regarding an addresses'
                shares and reward for a claim period.
            description: claim period details.
        description: >-
          RewardProgramClaimDetail is the response object regarding an address's
          shares and reward for a reward program.
    title: >-
      MsgClaimRewardsResponse is the response type for claiming reward from
      reward program RPC
  provenance.reward.v1.MsgCreateRewardProgramResponse:
    type: object
    properties:
      id:
        type: string
        format: uint64
        description: reward program id that is generated on creation.
    title: >-
      MsgCreateRewardProgramResponse is the response type for creating a reward
      program RPC
  provenance.reward.v1.MsgEndRewardProgramResponse:
    type: object
    title: >-
      MsgEndRewardProgramResponse is the response type for ending a reward
      program RPC
  provenance.reward.v1.QualifyingAction:
    type: object
    properties:
      delegate:
        type: object
        properties:
          minimum_actions:
            type: string
            format: uint64
            description: Minimum number of successful delegates.
          maximum_actions:
            type: string
            format: uint64
            description: Maximum number of successful delegates.
          minimum_delegation_amount:
            description: >-
              Minimum amount that the user must have currently delegated on the
              validator.
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
          maximum_delegation_amount:
            description: >-
              Maximum amount that the user must have currently delegated on the
              validator.
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
          minimum_active_stake_percentile:
            type: string
            description: >-
              Minimum percentile that can be below the validator's power
              ranking.
          maximum_active_stake_percentile:
            type: string
            description: >-
              Maximum percentile that can be below the validator's power
              ranking.
        description: >-
          ActionDelegate represents the delegate action and its required
          eligibility criteria.
      transfer:
        type: object
        properties:
          minimum_actions:
            type: string
            format: uint64
            description: Minimum number of successful transfers.
          maximum_actions:
            type: string
            format: uint64
            description: Maximum number of successful transfers.
          minimum_delegation_amount:
            description: >-
              Minimum delegation amount the account must have across all
              validators, for the transfer action to be counted.
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
        description: >-
          ActionTransfer represents the transfer action and its required
          eligibility criteria.
      vote:
        type: object
        properties:
          minimum_actions:
            type: string
            format: uint64
            description: Minimum number of successful votes.
          maximum_actions:
            type: string
            format: uint64
            description: Maximum number of successful votes.
          minimum_delegation_amount:
            description: >-
              Minimum delegation amount the account must have across all
              validators, for the vote action to be counted.
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
          validator_multiplier:
            type: string
            format: uint64
            title: >-
              Positive multiplier that is applied to the shares awarded by the
              vote action when conditions

              are met(for now the only condition is the current vote is a
              validator vote). A value of zero will behave the same

              as one
        description: >-
          ActionVote represents the voting action and its required eligibility
          criteria.
    description: QualifyingAction can be one of many action types.
  provenance.reward.v1.RewardProgramClaimDetail:
    type: object
    properties:
      reward_program_id:
        type: string
        format: uint64
        description: reward program id.
      total_reward_claim:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      claimed_reward_period_details:
        type: array
        items:
          type: object
          properties:
            claim_period_id:
              type: string
              format: uint64
              title: claim period id
            total_shares:
              type: string
              format: uint64
              title: total shares accumulated for claim period
            claim_period_reward:
              title: total rewards for claim period
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          description: >-
            ClaimedRewardPeriodDetail is information regarding an addresses'
            shares and reward for a claim period.
        description: claim period details.
    description: >-
      RewardProgramClaimDetail is the response object regarding an address's
      shares and reward for a reward program.
  provenance.reward.v1.ClaimPeriodRewardDistribution:
    type: object
    properties:
      claim_period_id:
        type: string
        format: uint64
        description: The claim period id.
      reward_program_id:
        type: string
        format: uint64
        description: The id of the reward program that this reward belongs to.
      total_rewards_pool_for_claim_period:
        description: The sum of all the granted rewards for this claim period.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      rewards_pool:
        description: The final allocated rewards for this claim period.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      total_shares:
        type: string
        format: int64
        description: The total number of granted shares for this claim period.
      claim_period_ended:
        type: boolean
        format: boolean
        description: A flag representing if the claim period for this reward has ended.
    description: >-
      ClaimPeriodRewardDistribution, this is updated at the end of every claim
      period.
  provenance.reward.v1.QueryClaimPeriodRewardDistributionsByIDResponse:
    type: object
    properties:
      claim_period_reward_distribution:
        type: object
        properties:
          claim_period_id:
            type: string
            format: uint64
            description: The claim period id.
          reward_program_id:
            type: string
            format: uint64
            description: The id of the reward program that this reward belongs to.
          total_rewards_pool_for_claim_period:
            description: The sum of all the granted rewards for this claim period.
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
          rewards_pool:
            description: The final allocated rewards for this claim period.
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
          total_shares:
            type: string
            format: int64
            description: The total number of granted shares for this claim period.
          claim_period_ended:
            type: boolean
            format: boolean
            description: A flag representing if the claim period for this reward has ended.
        description: >-
          ClaimPeriodRewardDistribution, this is updated at the end of every
          claim period.
    title: >-
      QueryClaimPeriodRewardDistributionsByIDResponse returns the requested
      ClaimPeriodRewardDistribution
  provenance.reward.v1.QueryClaimPeriodRewardDistributionsResponse:
    type: object
    properties:
      claim_period_reward_distributions:
        type: array
        items:
          type: object
          properties:
            claim_period_id:
              type: string
              format: uint64
              description: The claim period id.
            reward_program_id:
              type: string
              format: uint64
              description: The id of the reward program that this reward belongs to.
            total_rewards_pool_for_claim_period:
              description: The sum of all the granted rewards for this claim period.
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
            rewards_pool:
              description: The final allocated rewards for this claim period.
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
            total_shares:
              type: string
              format: int64
              description: The total number of granted shares for this claim period.
            claim_period_ended:
              type: boolean
              format: boolean
              description: >-
                A flag representing if the claim period for this reward has
                ended.
          description: >-
            ClaimPeriodRewardDistribution, this is updated at the end of every
            claim period.
        description: List of all ClaimPeriodRewardDistribution objects queried for.
      pagination:
        description: pagination defines an optional pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: >-
      QueryClaimPeriodRewardDistributionsResponse returns the list of paginated
      ClaimPeriodRewardDistributions
  provenance.reward.v1.QueryRewardDistributionsByAddressResponse:
    type: object
    properties:
      address:
        type: string
        description: The address that the reward account belongs to.
      reward_account_state:
        type: array
        items:
          type: object
          properties:
            reward_program_id:
              type: string
              format: uint64
              description: The id of the reward program that this claim belongs to.
            total_reward_claim:
              description: total rewards claimed for all eligible claim periods in program.
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
            claim_status:
              description: The status of the claim.
              type: string
              enum:
                - CLAIM_STATUS_UNSPECIFIED
                - CLAIM_STATUS_UNCLAIMABLE
                - CLAIM_STATUS_CLAIMABLE
                - CLAIM_STATUS_CLAIMED
                - CLAIM_STATUS_EXPIRED
              default: CLAIM_STATUS_UNSPECIFIED
              title: ClaimStatus is the state a claim is in
            claim_id:
              type: string
              format: uint64
              description: The claim period that the claim belongs to.
          description: >-
            RewardAccountResponse is an address' reward claim for a reward
            program's claim period.
        description: List of RewardAccounts queried for.
      pagination:
        description: pagination defines an optional pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryRewardDistributionsByAddressResponse returns the reward claims for an
      address that match the claim_status.
  provenance.reward.v1.QueryRewardProgramByIDResponse:
    type: object
    properties:
      reward_program:
        type: object
        properties:
          id:
            type: string
            format: uint64
            description: An integer to uniquely identify the reward program.
          title:
            type: string
            title: Name to help identify the Reward Program.(MaxTitleLength=140)
          description:
            type: string
            title: >-
              Short summary describing the Reward
              Program.(MaxDescriptionLength=10000)
          distribute_from_address:
            type: string
            description: address that provides funds for the total reward pool.
          total_reward_pool:
            description: The total amount of funding given to the RewardProgram.
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
          remaining_pool_balance:
            description: >-
              The remaining funds available to distribute after n claim periods
              have passed.
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
          claimed_amount:
            description: >-
              The total amount of all funds claimed by participants for all past
              claim periods.
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
          max_reward_by_address:
            description: Maximum reward per claim period per address.
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
          minimum_rollover_amount:
            description: Minimum amount of coins for a program to rollover.
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
          claim_period_seconds:
            type: string
            format: uint64
            description: Number of seconds that a claim period lasts.
          program_start_time:
            type: string
            format: date-time
            description: >-
              Time that a RewardProgram should start and switch to STARTED
              state.
          expected_program_end_time:
            type: string
            format: date-time
            description: >-
              Time that a RewardProgram is expected to end, based on data when
              it was setup.
          program_end_time_max:
            type: string
            format: date-time
            description: Time that a RewardProgram MUST end.
          claim_period_end_time:
            type: string
            format: date-time
            description: >-
              Used internally to calculate and track the current claim period's
              ending time.
          actual_program_end_time:
            type: string
            format: date-time
            description: >-
              Time the RewardProgram switched to FINISHED state. Initially set
              as empty.
          claim_periods:
            type: string
            format: uint64
            description: Number of claim periods this program will run for.
          current_claim_period:
            type: string
            format: uint64
            description: Current claim period of the RewardProgram. Uses 1-based indexing.
          max_rollover_claim_periods:
            type: string
            format: uint64
            description: maximum number of claim periods a reward program can rollover.
          state:
            description: Current state of the RewardProgram.
            type: string
            enum:
              - STATE_UNSPECIFIED
              - STATE_PENDING
              - STATE_STARTED
              - STATE_FINISHED
              - STATE_EXPIRED
            default: STATE_UNSPECIFIED
            title: State is the state of the reward program
          expiration_offset:
            type: string
            format: uint64
            description: >-
              Grace period after a RewardProgram FINISHED. It is the number of
              seconds until a RewardProgram enters the EXPIRED

              state.
          qualifying_actions:
            type: array
            items:
              type: object
              properties:
                delegate:
                  type: object
                  properties:
                    minimum_actions:
                      type: string
                      format: uint64
                      description: Minimum number of successful delegates.
                    maximum_actions:
                      type: string
                      format: uint64
                      description: Maximum number of successful delegates.
                    minimum_delegation_amount:
                      description: >-
                        Minimum amount that the user must have currently
                        delegated on the validator.
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                    maximum_delegation_amount:
                      description: >-
                        Maximum amount that the user must have currently
                        delegated on the validator.
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                    minimum_active_stake_percentile:
                      type: string
                      description: >-
                        Minimum percentile that can be below the validator's
                        power ranking.
                    maximum_active_stake_percentile:
                      type: string
                      description: >-
                        Maximum percentile that can be below the validator's
                        power ranking.
                  description: >-
                    ActionDelegate represents the delegate action and its
                    required eligibility criteria.
                transfer:
                  type: object
                  properties:
                    minimum_actions:
                      type: string
                      format: uint64
                      description: Minimum number of successful transfers.
                    maximum_actions:
                      type: string
                      format: uint64
                      description: Maximum number of successful transfers.
                    minimum_delegation_amount:
                      description: >-
                        Minimum delegation amount the account must have across
                        all validators, for the transfer action to be counted.
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                  description: >-
                    ActionTransfer represents the transfer action and its
                    required eligibility criteria.
                vote:
                  type: object
                  properties:
                    minimum_actions:
                      type: string
                      format: uint64
                      description: Minimum number of successful votes.
                    maximum_actions:
                      type: string
                      format: uint64
                      description: Maximum number of successful votes.
                    minimum_delegation_amount:
                      description: >-
                        Minimum delegation amount the account must have across
                        all validators, for the vote action to be counted.
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                    validator_multiplier:
                      type: string
                      format: uint64
                      title: >-
                        Positive multiplier that is applied to the shares
                        awarded by the vote action when conditions

                        are met(for now the only condition is the current vote
                        is a validator vote). A value of zero will behave the
                        same

                        as one
                  description: >-
                    ActionVote represents the voting action and its required
                    eligibility criteria.
              description: QualifyingAction can be one of many action types.
            description: Actions that count towards the reward.
        title: RewardProgram
        description: The reward program object that was queried for.
    title: QueryRewardProgramByIDResponse contains the requested RewardProgram
  provenance.reward.v1.QueryRewardProgramsRequest.QueryType:
    type: string
    enum:
      - QUERY_TYPE_UNSPECIFIED
      - QUERY_TYPE_ALL
      - QUERY_TYPE_PENDING
      - QUERY_TYPE_ACTIVE
      - QUERY_TYPE_OUTSTANDING
      - QUERY_TYPE_FINISHED
    default: QUERY_TYPE_UNSPECIFIED
    description: |-
      - QUERY_TYPE_UNSPECIFIED: unspecified type
       - QUERY_TYPE_ALL: all reward programs states
       - QUERY_TYPE_PENDING: pending reward program state=
       - QUERY_TYPE_ACTIVE: active reward program state
       - QUERY_TYPE_OUTSTANDING: pending and active reward program states
       - QUERY_TYPE_FINISHED: finished reward program state
    title: QueryType is the state of reward program to query
  provenance.reward.v1.QueryRewardProgramsResponse:
    type: object
    properties:
      reward_programs:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              description: An integer to uniquely identify the reward program.
            title:
              type: string
              title: Name to help identify the Reward Program.(MaxTitleLength=140)
            description:
              type: string
              title: >-
                Short summary describing the Reward
                Program.(MaxDescriptionLength=10000)
            distribute_from_address:
              type: string
              description: address that provides funds for the total reward pool.
            total_reward_pool:
              description: The total amount of funding given to the RewardProgram.
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
            remaining_pool_balance:
              description: >-
                The remaining funds available to distribute after n claim
                periods have passed.
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
            claimed_amount:
              description: >-
                The total amount of all funds claimed by participants for all
                past claim periods.
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
            max_reward_by_address:
              description: Maximum reward per claim period per address.
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
            minimum_rollover_amount:
              description: Minimum amount of coins for a program to rollover.
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
            claim_period_seconds:
              type: string
              format: uint64
              description: Number of seconds that a claim period lasts.
            program_start_time:
              type: string
              format: date-time
              description: >-
                Time that a RewardProgram should start and switch to STARTED
                state.
            expected_program_end_time:
              type: string
              format: date-time
              description: >-
                Time that a RewardProgram is expected to end, based on data when
                it was setup.
            program_end_time_max:
              type: string
              format: date-time
              description: Time that a RewardProgram MUST end.
            claim_period_end_time:
              type: string
              format: date-time
              description: >-
                Used internally to calculate and track the current claim
                period's ending time.
            actual_program_end_time:
              type: string
              format: date-time
              description: >-
                Time the RewardProgram switched to FINISHED state. Initially set
                as empty.
            claim_periods:
              type: string
              format: uint64
              description: Number of claim periods this program will run for.
            current_claim_period:
              type: string
              format: uint64
              description: >-
                Current claim period of the RewardProgram. Uses 1-based
                indexing.
            max_rollover_claim_periods:
              type: string
              format: uint64
              description: maximum number of claim periods a reward program can rollover.
            state:
              description: Current state of the RewardProgram.
              type: string
              enum:
                - STATE_UNSPECIFIED
                - STATE_PENDING
                - STATE_STARTED
                - STATE_FINISHED
                - STATE_EXPIRED
              default: STATE_UNSPECIFIED
              title: State is the state of the reward program
            expiration_offset:
              type: string
              format: uint64
              description: >-
                Grace period after a RewardProgram FINISHED. It is the number of
                seconds until a RewardProgram enters the EXPIRED

                state.
            qualifying_actions:
              type: array
              items:
                type: object
                properties:
                  delegate:
                    type: object
                    properties:
                      minimum_actions:
                        type: string
                        format: uint64
                        description: Minimum number of successful delegates.
                      maximum_actions:
                        type: string
                        format: uint64
                        description: Maximum number of successful delegates.
                      minimum_delegation_amount:
                        description: >-
                          Minimum amount that the user must have currently
                          delegated on the validator.
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                      maximum_delegation_amount:
                        description: >-
                          Maximum amount that the user must have currently
                          delegated on the validator.
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                      minimum_active_stake_percentile:
                        type: string
                        description: >-
                          Minimum percentile that can be below the validator's
                          power ranking.
                      maximum_active_stake_percentile:
                        type: string
                        description: >-
                          Maximum percentile that can be below the validator's
                          power ranking.
                    description: >-
                      ActionDelegate represents the delegate action and its
                      required eligibility criteria.
                  transfer:
                    type: object
                    properties:
                      minimum_actions:
                        type: string
                        format: uint64
                        description: Minimum number of successful transfers.
                      maximum_actions:
                        type: string
                        format: uint64
                        description: Maximum number of successful transfers.
                      minimum_delegation_amount:
                        description: >-
                          Minimum delegation amount the account must have across
                          all validators, for the transfer action to be counted.
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                    description: >-
                      ActionTransfer represents the transfer action and its
                      required eligibility criteria.
                  vote:
                    type: object
                    properties:
                      minimum_actions:
                        type: string
                        format: uint64
                        description: Minimum number of successful votes.
                      maximum_actions:
                        type: string
                        format: uint64
                        description: Maximum number of successful votes.
                      minimum_delegation_amount:
                        description: >-
                          Minimum delegation amount the account must have across
                          all validators, for the vote action to be counted.
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                      validator_multiplier:
                        type: string
                        format: uint64
                        title: >-
                          Positive multiplier that is applied to the shares
                          awarded by the vote action when conditions

                          are met(for now the only condition is the current vote
                          is a validator vote). A value of zero will behave the
                          same

                          as one
                    description: >-
                      ActionVote represents the voting action and its required
                      eligibility criteria.
                description: QualifyingAction can be one of many action types.
              description: Actions that count towards the reward.
          title: RewardProgram
        description: List of RewardProgram objects matching the query_type.
      pagination:
        description: pagination defines an optional pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: >-
      QueryRewardProgramsResponse contains the list of RewardPrograms matching
      the query
  provenance.reward.v1.RewardAccountResponse:
    type: object
    properties:
      reward_program_id:
        type: string
        format: uint64
        description: The id of the reward program that this claim belongs to.
      total_reward_claim:
        description: total rewards claimed for all eligible claim periods in program.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      claim_status:
        description: The status of the claim.
        type: string
        enum:
          - CLAIM_STATUS_UNSPECIFIED
          - CLAIM_STATUS_UNCLAIMABLE
          - CLAIM_STATUS_CLAIMABLE
          - CLAIM_STATUS_CLAIMED
          - CLAIM_STATUS_EXPIRED
        default: CLAIM_STATUS_UNSPECIFIED
        title: ClaimStatus is the state a claim is in
      claim_id:
        type: string
        format: uint64
        description: The claim period that the claim belongs to.
    description: >-
      RewardAccountResponse is an address' reward claim for a reward program's
      claim period.
  provenance.reward.v1.RewardAccountState.ClaimStatus:
    type: string
    enum:
      - CLAIM_STATUS_UNSPECIFIED
      - CLAIM_STATUS_UNCLAIMABLE
      - CLAIM_STATUS_CLAIMABLE
      - CLAIM_STATUS_CLAIMED
      - CLAIM_STATUS_EXPIRED
    default: CLAIM_STATUS_UNSPECIFIED
    description: |-
      - CLAIM_STATUS_UNSPECIFIED: undefined state
       - CLAIM_STATUS_UNCLAIMABLE: unclaimable status
       - CLAIM_STATUS_CLAIMABLE: unclaimable claimable
       - CLAIM_STATUS_CLAIMED: unclaimable claimed
       - CLAIM_STATUS_EXPIRED: unclaimable expired
    title: ClaimStatus is the state a claim is in
  provenance.reward.v1.RewardProgram:
    type: object
    properties:
      id:
        type: string
        format: uint64
        description: An integer to uniquely identify the reward program.
      title:
        type: string
        title: Name to help identify the Reward Program.(MaxTitleLength=140)
      description:
        type: string
        title: >-
          Short summary describing the Reward
          Program.(MaxDescriptionLength=10000)
      distribute_from_address:
        type: string
        description: address that provides funds for the total reward pool.
      total_reward_pool:
        description: The total amount of funding given to the RewardProgram.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      remaining_pool_balance:
        description: >-
          The remaining funds available to distribute after n claim periods have
          passed.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      claimed_amount:
        description: >-
          The total amount of all funds claimed by participants for all past
          claim periods.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      max_reward_by_address:
        description: Maximum reward per claim period per address.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      minimum_rollover_amount:
        description: Minimum amount of coins for a program to rollover.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      claim_period_seconds:
        type: string
        format: uint64
        description: Number of seconds that a claim period lasts.
      program_start_time:
        type: string
        format: date-time
        description: Time that a RewardProgram should start and switch to STARTED state.
      expected_program_end_time:
        type: string
        format: date-time
        description: >-
          Time that a RewardProgram is expected to end, based on data when it
          was setup.
      program_end_time_max:
        type: string
        format: date-time
        description: Time that a RewardProgram MUST end.
      claim_period_end_time:
        type: string
        format: date-time
        description: >-
          Used internally to calculate and track the current claim period's
          ending time.
      actual_program_end_time:
        type: string
        format: date-time
        description: >-
          Time the RewardProgram switched to FINISHED state. Initially set as
          empty.
      claim_periods:
        type: string
        format: uint64
        description: Number of claim periods this program will run for.
      current_claim_period:
        type: string
        format: uint64
        description: Current claim period of the RewardProgram. Uses 1-based indexing.
      max_rollover_claim_periods:
        type: string
        format: uint64
        description: maximum number of claim periods a reward program can rollover.
      state:
        description: Current state of the RewardProgram.
        type: string
        enum:
          - STATE_UNSPECIFIED
          - STATE_PENDING
          - STATE_STARTED
          - STATE_FINISHED
          - STATE_EXPIRED
        default: STATE_UNSPECIFIED
        title: State is the state of the reward program
      expiration_offset:
        type: string
        format: uint64
        description: >-
          Grace period after a RewardProgram FINISHED. It is the number of
          seconds until a RewardProgram enters the EXPIRED

          state.
      qualifying_actions:
        type: array
        items:
          type: object
          properties:
            delegate:
              type: object
              properties:
                minimum_actions:
                  type: string
                  format: uint64
                  description: Minimum number of successful delegates.
                maximum_actions:
                  type: string
                  format: uint64
                  description: Maximum number of successful delegates.
                minimum_delegation_amount:
                  description: >-
                    Minimum amount that the user must have currently delegated
                    on the validator.
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                maximum_delegation_amount:
                  description: >-
                    Maximum amount that the user must have currently delegated
                    on the validator.
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                minimum_active_stake_percentile:
                  type: string
                  description: >-
                    Minimum percentile that can be below the validator's power
                    ranking.
                maximum_active_stake_percentile:
                  type: string
                  description: >-
                    Maximum percentile that can be below the validator's power
                    ranking.
              description: >-
                ActionDelegate represents the delegate action and its required
                eligibility criteria.
            transfer:
              type: object
              properties:
                minimum_actions:
                  type: string
                  format: uint64
                  description: Minimum number of successful transfers.
                maximum_actions:
                  type: string
                  format: uint64
                  description: Maximum number of successful transfers.
                minimum_delegation_amount:
                  description: >-
                    Minimum delegation amount the account must have across all
                    validators, for the transfer action to be counted.
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
              description: >-
                ActionTransfer represents the transfer action and its required
                eligibility criteria.
            vote:
              type: object
              properties:
                minimum_actions:
                  type: string
                  format: uint64
                  description: Minimum number of successful votes.
                maximum_actions:
                  type: string
                  format: uint64
                  description: Maximum number of successful votes.
                minimum_delegation_amount:
                  description: >-
                    Minimum delegation amount the account must have across all
                    validators, for the vote action to be counted.
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                validator_multiplier:
                  type: string
                  format: uint64
                  title: >-
                    Positive multiplier that is applied to the shares awarded by
                    the vote action when conditions

                    are met(for now the only condition is the current vote is a
                    validator vote). A value of zero will behave the same

                    as one
              description: >-
                ActionVote represents the voting action and its required
                eligibility criteria.
          description: QualifyingAction can be one of many action types.
        description: Actions that count towards the reward.
    title: RewardProgram
  provenance.reward.v1.RewardProgram.State:
    type: string
    enum:
      - STATE_UNSPECIFIED
      - STATE_PENDING
      - STATE_STARTED
      - STATE_FINISHED
      - STATE_EXPIRED
    default: STATE_UNSPECIFIED
    description: |-
      - STATE_UNSPECIFIED: undefined program state
       - STATE_PENDING: pending state of reward program
       - STATE_STARTED: started state of reward program
       - STATE_FINISHED: finished state of reward program
       - STATE_EXPIRED: expired state of reward program
    title: State is the state of the reward program
