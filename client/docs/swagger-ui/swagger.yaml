swagger: '2.0'
info:
  title: Provenance Blockchain
  description: Provenance Blockchain Node Application
  version: 1.3.1
paths:
  '/cosmos/auth/v1beta1/accounts/{address}':
    get:
      summary: Account returns account details based on address.
      operationId: Account
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                description: account defines the account of the corresponding address.
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
            description: >-
              QueryAccountResponse is the response type for the Query/Account
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address defines the address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/auth/v1beta1/params:
    get:
      summary: Params queries all parameters.
      operationId: AuthParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  max_memo_characters:
                    type: string
                    format: uint64
                  tx_sig_limit:
                    type: string
                    format: uint64
                  tx_size_cost_per_byte:
                    type: string
                    format: uint64
                  sig_verify_cost_ed25519:
                    type: string
                    format: uint64
                  sig_verify_cost_secp256k1:
                    type: string
                    format: uint64
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  '/cosmos/bank/v1beta1/balances/{address}':
    get:
      summary: AllBalances queries the balance of all coins for a single account.
      operationId: AllBalances
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balances:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                description: balances is the balances of all the coins.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllBalancesResponse is the response type for the
              Query/AllBalances RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          description: address is the address to query balances for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/bank/v1beta1/balances/{address}/{denom}':
    get:
      summary: Balance queries the balance of a single coin for a single account.
      operationId: Balance
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balance:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            description: >-
              QueryBalanceResponse is the response type for the Query/Balance
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          description: address is the address to query balances for.
          in: path
          required: true
          type: string
        - name: denom
          description: denom is the coin denom to query balances for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/bank/v1beta1/denoms_metadata:
    get:
      summary: >-
        DenomsMetadata queries the client metadata for all registered coin
        denominations.
      operationId: DenomsMetadata
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              metadatas:
                type: array
                items:
                  type: object
                  properties:
                    description:
                      type: string
                    denom_units:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                            description: >-
                              denom represents the string name of the given
                              denom unit (e.g uatom).
                          exponent:
                            type: integer
                            format: int64
                            description: >-
                              exponent represents power of 10 exponent that one
                              must

                              raise the base_denom to in order to equal the
                              given DenomUnit's denom

                              1 denom = 1^exponent base_denom

                              (e.g. with a base_denom of uatom, one can create a
                              DenomUnit of 'atom' with

                              exponent = 6, thus: 1 atom = 10^6 uatom).
                          aliases:
                            type: array
                            items:
                              type: string
                            title: >-
                              aliases is a list of string aliases for the given
                              denom
                        description: |-
                          DenomUnit represents a struct that describes a given
                          denomination unit of the basic token.
                      title: >-
                        denom_units represents the list of DenomUnit's for a
                        given coin
                    base:
                      type: string
                      description: >-
                        base represents the base denom (should be the DenomUnit
                        with exponent = 0).
                    display:
                      type: string
                      description: |-
                        display indicates the suggested denom that should be
                        displayed in clients.
                  description: |-
                    Metadata represents a struct that describes
                    a basic token.
                description: >-
                  metadata provides the client information for all the
                  registered tokens.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryDenomsMetadataResponse is the response type for the
              Query/DenomsMetadata RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/bank/v1beta1/denoms_metadata/{denom}':
    get:
      summary: DenomsMetadata queries the client metadata of a given coin denomination.
      operationId: DenomMetadata
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              metadata:
                type: object
                properties:
                  description:
                    type: string
                  denom_units:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          description: >-
                            denom represents the string name of the given denom
                            unit (e.g uatom).
                        exponent:
                          type: integer
                          format: int64
                          description: >-
                            exponent represents power of 10 exponent that one
                            must

                            raise the base_denom to in order to equal the given
                            DenomUnit's denom

                            1 denom = 1^exponent base_denom

                            (e.g. with a base_denom of uatom, one can create a
                            DenomUnit of 'atom' with

                            exponent = 6, thus: 1 atom = 10^6 uatom).
                        aliases:
                          type: array
                          items:
                            type: string
                          title: >-
                            aliases is a list of string aliases for the given
                            denom
                      description: |-
                        DenomUnit represents a struct that describes a given
                        denomination unit of the basic token.
                    title: >-
                      denom_units represents the list of DenomUnit's for a given
                      coin
                  base:
                    type: string
                    description: >-
                      base represents the base denom (should be the DenomUnit
                      with exponent = 0).
                  display:
                    type: string
                    description: |-
                      display indicates the suggested denom that should be
                      displayed in clients.
                description: |-
                  Metadata represents a struct that describes
                  a basic token.
            description: >-
              QueryDenomMetadataResponse is the response type for the
              Query/DenomMetadata RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          description: denom is the coin denom to query the metadata for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/bank/v1beta1/params:
    get:
      summary: Params queries the parameters of x/bank module.
      operationId: BankParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  send_enabled:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        enabled:
                          type: boolean
                      description: >-
                        SendEnabled maps coin denom to a send_enabled status
                        (whether a denom is

                        sendable).
                  default_send_enabled:
                    type: boolean
                description: Params defines the parameters for the bank module.
            description: >-
              QueryParamsResponse defines the response type for querying x/bank
              parameters.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/bank/v1beta1/supply:
    get:
      summary: TotalSupply queries the total supply of all coins.
      operationId: TotalSupply
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              supply:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: supply is the supply of the coins
            title: >-
              QueryTotalSupplyResponse is the response type for the
              Query/TotalSupply RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/cosmos/bank/v1beta1/supply/{denom}':
    get:
      summary: SupplyOf queries the supply of a single coin.
      operationId: SupplyOf
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            description: >-
              QuerySupplyOfResponse is the response type for the Query/SupplyOf
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          description: denom is the coin denom to query balances for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/base/tendermint/v1beta1/blocks/latest:
    get:
      summary: GetLatestBlock returns the latest block.
      operationId: GetLatestBlock
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              block:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                    description: Header defines the structure of a Tendermint block header.
                  data:
                    type: object
                    properties:
                      txs:
                        type: array
                        items:
                          type: string
                          format: byte
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                    title: >-
                      Data contains the set of transactions included in the
                      block
                  evidence:
                    type: object
                    properties:
                      evidence:
                        type: array
                        items:
                          type: object
                          properties:
                            duplicate_vote_evidence:
                              type: object
                              properties:
                                vote_a:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                vote_b:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                total_voting_power:
                                  type: string
                                  format: int64
                                validator_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                            light_client_attack_evidence:
                              type: object
                              properties:
                                conflicting_block:
                                  type: object
                                  properties:
                                    signed_header:
                                      type: object
                                      properties:
                                        header:
                                          type: object
                                          properties:
                                            version:
                                              title: basic block info
                                              type: object
                                              properties:
                                                block:
                                                  type: string
                                                  format: uint64
                                                app:
                                                  type: string
                                                  format: uint64
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                            chain_id:
                                              type: string
                                            height:
                                              type: string
                                              format: int64
                                            time:
                                              type: string
                                              format: date-time
                                            last_block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            last_commit_hash:
                                              type: string
                                              format: byte
                                              title: hashes of block data
                                            data_hash:
                                              type: string
                                              format: byte
                                            validators_hash:
                                              type: string
                                              format: byte
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                            next_validators_hash:
                                              type: string
                                              format: byte
                                            consensus_hash:
                                              type: string
                                              format: byte
                                            app_hash:
                                              type: string
                                              format: byte
                                            last_results_hash:
                                              type: string
                                              format: byte
                                            evidence_hash:
                                              type: string
                                              format: byte
                                              title: consensus info
                                            proposer_address:
                                              type: string
                                              format: byte
                                          description: >-
                                            Header defines the structure of a
                                            Tendermint block header.
                                        commit:
                                          type: object
                                          properties:
                                            height:
                                              type: string
                                              format: int64
                                            round:
                                              type: integer
                                              format: int32
                                            block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            signatures:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  block_id_flag:
                                                    type: string
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    title: >-
                                                      BlockIdFlag indicates which BlcokID the
                                                      signature is for
                                                  validator_address:
                                                    type: string
                                                    format: byte
                                                  timestamp:
                                                    type: string
                                                    format: date-time
                                                  signature:
                                                    type: string
                                                    format: byte
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                    validator_set:
                                      type: object
                                      properties:
                                        validators:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              address:
                                                type: string
                                                format: byte
                                              pub_key:
                                                type: object
                                                properties:
                                                  ed25519:
                                                    type: string
                                                    format: byte
                                                  secp256k1:
                                                    type: string
                                                    format: byte
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Tendermint Validators
                                              voting_power:
                                                type: string
                                                format: int64
                                              proposer_priority:
                                                type: string
                                                format: int64
                                        proposer:
                                          type: object
                                          properties:
                                            address:
                                              type: string
                                              format: byte
                                            pub_key:
                                              type: object
                                              properties:
                                                ed25519:
                                                  type: string
                                                  format: byte
                                                secp256k1:
                                                  type: string
                                                  format: byte
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Tendermint Validators
                                            voting_power:
                                              type: string
                                              format: int64
                                            proposer_priority:
                                              type: string
                                              format: int64
                                        total_voting_power:
                                          type: string
                                          format: int64
                                common_height:
                                  type: string
                                  format: int64
                                byzantine_validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Tendermint Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                  last_commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
            description: >-
              GetLatestBlockResponse is the response type for the
              Query/GetLatestBlock RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Service
  '/cosmos/base/tendermint/v1beta1/blocks/{height}':
    get:
      summary: GetBlockByHeight queries block for given height.
      operationId: GetBlockByHeight
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              block:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                    description: Header defines the structure of a Tendermint block header.
                  data:
                    type: object
                    properties:
                      txs:
                        type: array
                        items:
                          type: string
                          format: byte
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                    title: >-
                      Data contains the set of transactions included in the
                      block
                  evidence:
                    type: object
                    properties:
                      evidence:
                        type: array
                        items:
                          type: object
                          properties:
                            duplicate_vote_evidence:
                              type: object
                              properties:
                                vote_a:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                vote_b:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                total_voting_power:
                                  type: string
                                  format: int64
                                validator_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                            light_client_attack_evidence:
                              type: object
                              properties:
                                conflicting_block:
                                  type: object
                                  properties:
                                    signed_header:
                                      type: object
                                      properties:
                                        header:
                                          type: object
                                          properties:
                                            version:
                                              title: basic block info
                                              type: object
                                              properties:
                                                block:
                                                  type: string
                                                  format: uint64
                                                app:
                                                  type: string
                                                  format: uint64
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                            chain_id:
                                              type: string
                                            height:
                                              type: string
                                              format: int64
                                            time:
                                              type: string
                                              format: date-time
                                            last_block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            last_commit_hash:
                                              type: string
                                              format: byte
                                              title: hashes of block data
                                            data_hash:
                                              type: string
                                              format: byte
                                            validators_hash:
                                              type: string
                                              format: byte
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                            next_validators_hash:
                                              type: string
                                              format: byte
                                            consensus_hash:
                                              type: string
                                              format: byte
                                            app_hash:
                                              type: string
                                              format: byte
                                            last_results_hash:
                                              type: string
                                              format: byte
                                            evidence_hash:
                                              type: string
                                              format: byte
                                              title: consensus info
                                            proposer_address:
                                              type: string
                                              format: byte
                                          description: >-
                                            Header defines the structure of a
                                            Tendermint block header.
                                        commit:
                                          type: object
                                          properties:
                                            height:
                                              type: string
                                              format: int64
                                            round:
                                              type: integer
                                              format: int32
                                            block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            signatures:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  block_id_flag:
                                                    type: string
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    title: >-
                                                      BlockIdFlag indicates which BlcokID the
                                                      signature is for
                                                  validator_address:
                                                    type: string
                                                    format: byte
                                                  timestamp:
                                                    type: string
                                                    format: date-time
                                                  signature:
                                                    type: string
                                                    format: byte
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                    validator_set:
                                      type: object
                                      properties:
                                        validators:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              address:
                                                type: string
                                                format: byte
                                              pub_key:
                                                type: object
                                                properties:
                                                  ed25519:
                                                    type: string
                                                    format: byte
                                                  secp256k1:
                                                    type: string
                                                    format: byte
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Tendermint Validators
                                              voting_power:
                                                type: string
                                                format: int64
                                              proposer_priority:
                                                type: string
                                                format: int64
                                        proposer:
                                          type: object
                                          properties:
                                            address:
                                              type: string
                                              format: byte
                                            pub_key:
                                              type: object
                                              properties:
                                                ed25519:
                                                  type: string
                                                  format: byte
                                                secp256k1:
                                                  type: string
                                                  format: byte
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Tendermint Validators
                                            voting_power:
                                              type: string
                                              format: int64
                                            proposer_priority:
                                              type: string
                                              format: int64
                                        total_voting_power:
                                          type: string
                                          format: int64
                                common_height:
                                  type: string
                                  format: int64
                                byzantine_validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Tendermint Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                  last_commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
            description: >-
              GetBlockByHeightResponse is the response type for the
              Query/GetBlockByHeight RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: height
          in: path
          required: true
          type: string
          format: int64
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/node_info:
    get:
      summary: GetNodeInfo queries the current node info.
      operationId: GetNodeInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              default_node_info:
                type: object
                properties:
                  protocol_version:
                    type: object
                    properties:
                      p2p:
                        type: string
                        format: uint64
                      block:
                        type: string
                        format: uint64
                      app:
                        type: string
                        format: uint64
                  default_node_id:
                    type: string
                  listen_addr:
                    type: string
                  network:
                    type: string
                  version:
                    type: string
                  channels:
                    type: string
                    format: byte
                  moniker:
                    type: string
                  other:
                    type: object
                    properties:
                      tx_index:
                        type: string
                      rpc_address:
                        type: string
              application_version:
                type: object
                properties:
                  name:
                    type: string
                  app_name:
                    type: string
                  version:
                    type: string
                  git_commit:
                    type: string
                  build_tags:
                    type: string
                  go_version:
                    type: string
                  build_deps:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          title: module path
                        version:
                          type: string
                          title: module version
                        sum:
                          type: string
                          title: checksum
                      title: Module is the type for VersionInfo
                description: VersionInfo is the type for the GetNodeInfoResponse message.
            description: >-
              GetNodeInfoResponse is the request type for the Query/GetNodeInfo
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/syncing:
    get:
      summary: GetSyncing queries node syncing.
      operationId: GetSyncing
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              syncing:
                type: boolean
            description: >-
              GetSyncingResponse is the response type for the Query/GetSyncing
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/validatorsets/latest:
    get:
      summary: GetLatestValidatorSet queries latest validator-set.
      operationId: GetLatestValidatorSet
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_height:
                type: string
                format: int64
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    pub_key:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    voting_power:
                      type: string
                      format: int64
                    proposer_priority:
                      type: string
                      format: int64
                  description: Validator is the type for the validator-set.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              GetLatestValidatorSetResponse is the response type for the
              Query/GetValidatorSetByHeight RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Service
  '/cosmos/base/tendermint/v1beta1/validatorsets/{height}':
    get:
      summary: GetValidatorSetByHeight queries validator-set at a given height.
      operationId: GetValidatorSetByHeight
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_height:
                type: string
                format: int64
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    pub_key:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    voting_power:
                      type: string
                      format: int64
                    proposer_priority:
                      type: string
                      format: int64
                  description: Validator is the type for the validator-set.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              GetValidatorSetByHeightResponse is the response type for the
              Query/GetValidatorSetByHeight RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: height
          in: path
          required: true
          type: string
          format: int64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Service
  /cosmos/distribution/v1beta1/community_pool:
    get:
      summary: CommunityPool queries the community pool coins.
      operationId: CommunityPool
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                description: pool defines community pool's coins.
            description: >-
              QueryCommunityPoolResponse is the response type for the
              Query/CommunityPool

              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards':
    get:
      summary: |-
        DelegationTotalRewards queries the total rewards accrued by a each
        validator.
      operationId: DelegationTotalRewards
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              rewards:
                type: array
                items:
                  type: object
                  properties:
                    validator_address:
                      type: string
                    reward:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          DecCoin defines a token with a denomination and a
                          decimal amount.


                          NOTE: The amount field is an Dec which implements the
                          custom method

                          signatures required by gogoproto.
                  description: |-
                    DelegationDelegatorReward represents the properties
                    of a delegator's delegation reward.
                description: rewards defines all the rewards accrued by a delegator.
              total:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                description: total defines the sum of all the rewards.
            description: |-
              QueryDelegationTotalRewardsResponse is the response type for the
              Query/DelegationTotalRewards RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: delegator_address
          description: delegator_address defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}':
    get:
      summary: DelegationRewards queries the total rewards accrued by a delegation.
      operationId: DelegationRewards
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              rewards:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                description: rewards defines the rewards accrued by a delegation.
            description: |-
              QueryDelegationRewardsResponse is the response type for the
              Query/DelegationRewards RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: delegator_address
          description: delegator_address defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: validator_address
          description: validator_address defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/distribution/v1beta1/delegators/{delegator_address}/validators':
    get:
      summary: DelegatorValidators queries the validators of a delegator.
      operationId: DelegatorValidators
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: string
                description: >-
                  validators defines the validators a delegator is delegating
                  for.
            description: |-
              QueryDelegatorValidatorsResponse is the response type for the
              Query/DelegatorValidators RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: delegator_address
          description: delegator_address defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address':
    get:
      summary: DelegatorWithdrawAddress queries withdraw address of a delegator.
      operationId: DelegatorWithdrawAddress
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              withdraw_address:
                type: string
                description: withdraw_address defines the delegator address to query for.
            description: |-
              QueryDelegatorWithdrawAddressResponse is the response type for the
              Query/DelegatorWithdrawAddress RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: delegator_address
          description: delegator_address defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/distribution/v1beta1/params:
    get:
      summary: Params queries params of the distribution module.
      operationId: DistributionParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  community_tax:
                    type: string
                  base_proposer_reward:
                    type: string
                  bonus_proposer_reward:
                    type: string
                  withdraw_addr_enabled:
                    type: boolean
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/cosmos/distribution/v1beta1/validators/{validator_address}/commission':
    get:
      summary: ValidatorCommission queries accumulated commission for a validator.
      operationId: ValidatorCommission
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              commission:
                description: commission defines the commision the validator received.
                type: object
                properties:
                  commission:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        DecCoin defines a token with a denomination and a
                        decimal amount.


                        NOTE: The amount field is an Dec which implements the
                        custom method

                        signatures required by gogoproto.
            title: |-
              QueryValidatorCommissionResponse is the response type for the
              Query/ValidatorCommission RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: validator_address
          description: validator_address defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards':
    get:
      summary: ValidatorOutstandingRewards queries rewards of a validator address.
      operationId: ValidatorOutstandingRewards
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              rewards:
                type: object
                properties:
                  rewards:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        DecCoin defines a token with a denomination and a
                        decimal amount.


                        NOTE: The amount field is an Dec which implements the
                        custom method

                        signatures required by gogoproto.
                description: >-
                  ValidatorOutstandingRewards represents outstanding
                  (un-withdrawn) rewards

                  for a validator inexpensive to track, allows simple sanity
                  checks.
            description: >-
              QueryValidatorOutstandingRewardsResponse is the response type for
              the

              Query/ValidatorOutstandingRewards RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: validator_address
          description: validator_address defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/distribution/v1beta1/validators/{validator_address}/slashes':
    get:
      summary: ValidatorSlashes queries slash events of a validator.
      operationId: ValidatorSlashes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              slashes:
                type: array
                items:
                  type: object
                  properties:
                    validator_period:
                      type: string
                      format: uint64
                    fraction:
                      type: string
                  description: >-
                    ValidatorSlashEvent represents a validator slash event.

                    Height is implicit within the store key.

                    This is needed to calculate appropriate amount of staking
                    tokens

                    for delegations which are withdrawn after a slash has
                    occurred.
                description: slashes defines the slashes the validator received.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: |-
              QueryValidatorSlashesResponse is the response type for the
              Query/ValidatorSlashes RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: validator_address
          description: validator_address defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: starting_height
          description: >-
            starting_height defines the optional starting height to query the
            slashes.
          in: query
          required: false
          type: string
          format: uint64
        - name: ending_height
          description: >-
            starting_height defines the optional ending height to query the
            slashes.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/evidence/v1beta1/evidence:
    get:
      summary: AllEvidence queries all evidence.
      operationId: AllEvidence
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                description: evidence returns all evidences.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllEvidenceResponse is the response type for the
              Query/AllEvidence RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/evidence/v1beta1/evidence/{evidence_hash}':
    get:
      summary: Evidence queries evidence based on evidence hash.
      operationId: Evidence
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              evidence:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: >-
              QueryEvidenceResponse is the response type for the Query/Evidence
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: evidence_hash
          description: evidence_hash defines the hash of the requested evidence.
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/cosmos/gov/v1beta1/params/{params_type}':
    get:
      summary: Params queries all parameters of the gov module.
      operationId: GovParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              voting_params:
                description: voting_params defines the parameters related to voting.
                type: object
                properties:
                  voting_period:
                    type: string
                    description: Length of the voting period.
              deposit_params:
                description: deposit_params defines the parameters related to deposit.
                type: object
                properties:
                  min_deposit:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: Minimum deposit for a proposal to enter voting period.
                  max_deposit_period:
                    type: string
                    description: >-
                      Maximum period for Atom holders to deposit on a proposal.
                      Initial value: 2
                       months.
              tally_params:
                description: tally_params defines the parameters related to tally.
                type: object
                properties:
                  quorum:
                    type: string
                    format: byte
                    description: >-
                      Minimum percentage of total stake needed to vote for a
                      result to be
                       considered valid.
                  threshold:
                    type: string
                    format: byte
                    description: >-
                      Minimum proportion of Yes votes for proposal to pass.
                      Default value: 0.5.
                  veto_threshold:
                    type: string
                    format: byte
                    description: >-
                      Minimum value of Veto votes to Total votes ratio for
                      proposal to be
                       vetoed. Default value: 1/3.
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: params_type
          description: >-
            params_type defines which parameters to query for, can be one of
            "voting",

            "tallying" or "deposit".
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals:
    get:
      summary: Proposals queries all proposals based on given status.
      operationId: Proposals
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposals:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                    content:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    status:
                      type: string
                      enum:
                        - PROPOSAL_STATUS_UNSPECIFIED
                        - PROPOSAL_STATUS_DEPOSIT_PERIOD
                        - PROPOSAL_STATUS_VOTING_PERIOD
                        - PROPOSAL_STATUS_PASSED
                        - PROPOSAL_STATUS_REJECTED
                        - PROPOSAL_STATUS_FAILED
                      default: PROPOSAL_STATUS_UNSPECIFIED
                      description: >-
                        ProposalStatus enumerates the valid statuses of a
                        proposal.

                         - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                         - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                        period.
                         - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                        period.
                         - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                        passed.
                         - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                        been rejected.
                         - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                        failed.
                    final_tally_result:
                      type: object
                      properties:
                        'yes':
                          type: string
                        abstain:
                          type: string
                        'no':
                          type: string
                        no_with_veto:
                          type: string
                      description: >-
                        TallyResult defines a standard tally for a governance
                        proposal.
                    submit_time:
                      type: string
                      format: date-time
                    deposit_end_time:
                      type: string
                      format: date-time
                    total_deposit:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                    voting_start_time:
                      type: string
                      format: date-time
                    voting_end_time:
                      type: string
                      format: date-time
                  description: >-
                    Proposal defines the core field members of a governance
                    proposal.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryProposalsResponse is the response type for the
              Query/Proposals RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_status
          description: |-
            proposal_status defines the status of the proposals.

             - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
             - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
            period.
             - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
            period.
             - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
            passed.
             - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
            been rejected.
             - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
            failed.
          in: query
          required: false
          type: string
          enum:
            - PROPOSAL_STATUS_UNSPECIFIED
            - PROPOSAL_STATUS_DEPOSIT_PERIOD
            - PROPOSAL_STATUS_VOTING_PERIOD
            - PROPOSAL_STATUS_PASSED
            - PROPOSAL_STATUS_REJECTED
            - PROPOSAL_STATUS_FAILED
          default: PROPOSAL_STATUS_UNSPECIFIED
        - name: voter
          description: voter defines the voter address for the proposals.
          in: query
          required: false
          type: string
        - name: depositor
          description: depositor defines the deposit addresses from the proposals.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/gov/v1beta1/proposals/{proposal_id}':
    get:
      summary: Proposal queries proposal details based on ProposalID.
      operationId: Proposal
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposal:
                type: object
                properties:
                  proposal_id:
                    type: string
                    format: uint64
                  content:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  status:
                    type: string
                    enum:
                      - PROPOSAL_STATUS_UNSPECIFIED
                      - PROPOSAL_STATUS_DEPOSIT_PERIOD
                      - PROPOSAL_STATUS_VOTING_PERIOD
                      - PROPOSAL_STATUS_PASSED
                      - PROPOSAL_STATUS_REJECTED
                      - PROPOSAL_STATUS_FAILED
                    default: PROPOSAL_STATUS_UNSPECIFIED
                    description: >-
                      ProposalStatus enumerates the valid statuses of a
                      proposal.

                       - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                       - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                      period.
                       - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                      period.
                       - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                      passed.
                       - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                      been rejected.
                       - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                      failed.
                  final_tally_result:
                    type: object
                    properties:
                      'yes':
                        type: string
                      abstain:
                        type: string
                      'no':
                        type: string
                      no_with_veto:
                        type: string
                    description: >-
                      TallyResult defines a standard tally for a governance
                      proposal.
                  submit_time:
                    type: string
                    format: date-time
                  deposit_end_time:
                    type: string
                    format: date-time
                  total_deposit:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  voting_start_time:
                    type: string
                    format: date-time
                  voting_end_time:
                    type: string
                    format: date-time
                description: >-
                  Proposal defines the core field members of a governance
                  proposal.
            description: >-
              QueryProposalResponse is the response type for the Query/Proposal
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits':
    get:
      summary: Deposits queries all deposits of a single proposal.
      operationId: Deposits
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              deposits:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                    depositor:
                      type: string
                    amount:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                  description: >-
                    Deposit defines an amount deposited by an account address to
                    an active

                    proposal.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryDepositsResponse is the response type for the Query/Deposits
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}':
    get:
      summary: >-
        Deposit queries single deposit information based proposalID,
        depositAddr.
      operationId: Deposit
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              deposit:
                type: object
                properties:
                  proposal_id:
                    type: string
                    format: uint64
                  depositor:
                    type: string
                  amount:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                description: >-
                  Deposit defines an amount deposited by an account address to
                  an active

                  proposal.
            description: >-
              QueryDepositResponse is the response type for the Query/Deposit
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: depositor
          description: depositor defines the deposit addresses from the proposals.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/gov/v1beta1/proposals/{proposal_id}/tally':
    get:
      summary: TallyResult queries the tally of a proposal vote.
      operationId: TallyResult
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              tally:
                type: object
                properties:
                  'yes':
                    type: string
                  abstain:
                    type: string
                  'no':
                    type: string
                  no_with_veto:
                    type: string
                description: >-
                  TallyResult defines a standard tally for a governance
                  proposal.
            description: >-
              QueryTallyResultResponse is the response type for the Query/Tally
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/cosmos/gov/v1beta1/proposals/{proposal_id}/votes':
    get:
      summary: Votes queries votes of a given proposal.
      operationId: Votes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              votes:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                    voter:
                      type: string
                    option:
                      type: string
                      enum:
                        - VOTE_OPTION_UNSPECIFIED
                        - VOTE_OPTION_YES
                        - VOTE_OPTION_ABSTAIN
                        - VOTE_OPTION_NO
                        - VOTE_OPTION_NO_WITH_VETO
                      default: VOTE_OPTION_UNSPECIFIED
                      description: >-
                        VoteOption enumerates the valid vote options for a given
                        governance proposal.

                         - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                         - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                         - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                         - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                         - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                  description: >-
                    Vote defines a vote on a governance proposal.

                    A Vote consists of a proposal ID, the voter, and the vote
                    option.
                description: votes defined the queried votes.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryVotesResponse is the response type for the Query/Votes RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}':
    get:
      summary: 'Vote queries voted information based on proposalID, voterAddr.'
      operationId: Vote
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              vote:
                type: object
                properties:
                  proposal_id:
                    type: string
                    format: uint64
                  voter:
                    type: string
                  option:
                    type: string
                    enum:
                      - VOTE_OPTION_UNSPECIFIED
                      - VOTE_OPTION_YES
                      - VOTE_OPTION_ABSTAIN
                      - VOTE_OPTION_NO
                      - VOTE_OPTION_NO_WITH_VETO
                    default: VOTE_OPTION_UNSPECIFIED
                    description: >-
                      VoteOption enumerates the valid vote options for a given
                      governance proposal.

                       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                description: >-
                  Vote defines a vote on a governance proposal.

                  A Vote consists of a proposal ID, the voter, and the vote
                  option.
            description: >-
              QueryVoteResponse is the response type for the Query/Vote RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: voter
          description: voter defines the oter address for the proposals.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/mint/v1beta1/annual_provisions:
    get:
      summary: AnnualProvisions current minting annual provisions value.
      operationId: AnnualProvisions
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              annual_provisions:
                type: string
                format: byte
                description: >-
                  annual_provisions is the current minting annual provisions
                  value.
            description: |-
              QueryAnnualProvisionsResponse is the response type for the
              Query/AnnualProvisions RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/mint/v1beta1/inflation:
    get:
      summary: Inflation returns the current minting inflation value.
      operationId: Inflation
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              inflation:
                type: string
                format: byte
                description: inflation is the current minting inflation value.
            description: >-
              QueryInflationResponse is the response type for the
              Query/Inflation RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/mint/v1beta1/params:
    get:
      summary: Params returns the total set of minting parameters.
      operationId: MintParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  mint_denom:
                    type: string
                    title: type of coin to mint
                  inflation_rate_change:
                    type: string
                    title: maximum annual change in inflation rate
                  inflation_max:
                    type: string
                    title: maximum inflation rate
                  inflation_min:
                    type: string
                    title: minimum inflation rate
                  goal_bonded:
                    type: string
                    title: goal of percent bonded atoms
                  blocks_per_year:
                    type: string
                    format: uint64
                    title: expected blocks per year
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/params/v1beta1/params:
    get:
      summary: |-
        Params queries a specific parameter of a module, given its subspace and
        key.
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              param:
                description: param defines the queried parameter.
                type: object
                properties:
                  subspace:
                    type: string
                  key:
                    type: string
                  value:
                    type: string
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: subspace
          description: subspace defines the module to query the parameter for.
          in: query
          required: false
          type: string
        - name: key
          description: key defines the key of the parameter in the subspace.
          in: query
          required: false
          type: string
      tags:
        - Query
  /cosmos/slashing/v1beta1/params:
    get:
      summary: Params queries the parameters of slashing module
      operationId: SlashingParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  signed_blocks_window:
                    type: string
                    format: int64
                  min_signed_per_window:
                    type: string
                    format: byte
                  downtime_jail_duration:
                    type: string
                  slash_fraction_double_sign:
                    type: string
                    format: byte
                  slash_fraction_downtime:
                    type: string
                    format: byte
                description: >-
                  Params represents the parameters used for by the slashing
                  module.
            title: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/slashing/v1beta1/signing_infos:
    get:
      summary: SigningInfos queries signing info of all validators
      operationId: SigningInfos
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              info:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    start_height:
                      type: string
                      format: int64
                      title: >-
                        height at which validator was first a candidate OR was
                        unjailed
                    index_offset:
                      type: string
                      format: int64
                      title: index offset into signed block bit array
                    jailed_until:
                      type: string
                      format: date-time
                      title: timestamp validator cannot be unjailed until
                    tombstoned:
                      type: boolean
                      title: >-
                        whether or not a validator has been tombstoned (killed
                        out of validator

                        set)
                    missed_blocks_counter:
                      type: string
                      format: int64
                      title: >-
                        missed blocks counter (to avoid scanning the array every
                        time)
                  description: >-
                    ValidatorSigningInfo defines a validator's signing info for
                    monitoring their

                    liveness activity.
                title: info is the signing info of all validators
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QuerySigningInfosResponse is the response type for the
              Query/SigningInfos RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/slashing/v1beta1/signing_infos/{cons_address}':
    get:
      summary: SigningInfo queries the signing info of given cons address
      operationId: SigningInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              val_signing_info:
                type: object
                properties:
                  address:
                    type: string
                  start_height:
                    type: string
                    format: int64
                    title: >-
                      height at which validator was first a candidate OR was
                      unjailed
                  index_offset:
                    type: string
                    format: int64
                    title: index offset into signed block bit array
                  jailed_until:
                    type: string
                    format: date-time
                    title: timestamp validator cannot be unjailed until
                  tombstoned:
                    type: boolean
                    title: >-
                      whether or not a validator has been tombstoned (killed out
                      of validator

                      set)
                  missed_blocks_counter:
                    type: string
                    format: int64
                    title: >-
                      missed blocks counter (to avoid scanning the array every
                      time)
                description: >-
                  ValidatorSigningInfo defines a validator's signing info for
                  monitoring their

                  liveness activity.
                title: >-
                  val_signing_info is the signing info of requested val cons
                  address
            title: >-
              QuerySigningInfoResponse is the response type for the
              Query/SigningInfo RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: cons_address
          description: cons_address is the address to query signing info of
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/staking/v1beta1/delegations/{delegator_addr}':
    get:
      summary: >-
        DelegatorDelegations queries all delegations of a given delegator
        address.
      operationId: DelegatorDelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              delegation_responses:
                type: array
                items:
                  type: object
                  properties:
                    delegation:
                      type: object
                      properties:
                        delegator_address:
                          type: string
                          description: >-
                            delegator_address is the bech32-encoded address of
                            the delegator.
                        validator_address:
                          type: string
                          description: >-
                            validator_address is the bech32-encoded address of
                            the validator.
                        shares:
                          type: string
                          description: shares define the delegation shares received.
                      description: >-
                        Delegation represents the bond with tokens held by an
                        account. It is

                        owned by one delegator, and is associated with the
                        voting power of one

                        validator.
                    balance:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  description: >-
                    DelegationResponse is equivalent to Delegation except that
                    it contains a

                    balance in addition to shares which is more suitable for
                    client responses.
                description: >-
                  delegation_responses defines all the delegations' info of a
                  delegator.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: |-
              QueryDelegatorDelegationsResponse is response type for the
              Query/DelegatorDelegations RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations':
    get:
      summary: Redelegations queries redelegations of given address.
      operationId: Redelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              redelegation_responses:
                type: array
                items:
                  type: object
                  properties:
                    redelegation:
                      type: object
                      properties:
                        delegator_address:
                          type: string
                          description: >-
                            delegator_address is the bech32-encoded address of
                            the delegator.
                        validator_src_address:
                          type: string
                          description: >-
                            validator_src_address is the validator redelegation
                            source operator address.
                        validator_dst_address:
                          type: string
                          description: >-
                            validator_dst_address is the validator redelegation
                            destination operator address.
                        entries:
                          type: array
                          items:
                            type: object
                            properties:
                              creation_height:
                                type: string
                                format: int64
                                description: >-
                                  creation_height  defines the height which the
                                  redelegation took place.
                              completion_time:
                                type: string
                                format: date-time
                                description: >-
                                  completion_time defines the unix time for
                                  redelegation completion.
                              initial_balance:
                                type: string
                                description: >-
                                  initial_balance defines the initial balance
                                  when redelegation started.
                              shares_dst:
                                type: string
                                description: >-
                                  shares_dst is the amount of
                                  destination-validator shares created by
                                  redelegation.
                            description: >-
                              RedelegationEntry defines a redelegation object
                              with relevant metadata.
                          description: entries are the redelegation entries.
                      description: >-
                        Redelegation contains the list of a particular
                        delegator's redelegating bonds

                        from a particular source validator to a particular
                        destination validator.
                    entries:
                      type: array
                      items:
                        type: object
                        properties:
                          redelegation_entry:
                            type: object
                            properties:
                              creation_height:
                                type: string
                                format: int64
                                description: >-
                                  creation_height  defines the height which the
                                  redelegation took place.
                              completion_time:
                                type: string
                                format: date-time
                                description: >-
                                  completion_time defines the unix time for
                                  redelegation completion.
                              initial_balance:
                                type: string
                                description: >-
                                  initial_balance defines the initial balance
                                  when redelegation started.
                              shares_dst:
                                type: string
                                description: >-
                                  shares_dst is the amount of
                                  destination-validator shares created by
                                  redelegation.
                            description: >-
                              RedelegationEntry defines a redelegation object
                              with relevant metadata.
                          balance:
                            type: string
                        description: >-
                          RedelegationEntryResponse is equivalent to a
                          RedelegationEntry except that it

                          contains a balance in addition to shares which is more
                          suitable for client

                          responses.
                  description: >-
                    RedelegationResponse is equivalent to a Redelegation except
                    that its entries

                    contain a balance in addition to shares which is more
                    suitable for client

                    responses.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryRedelegationsResponse is response type for the
              Query/Redelegations RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: src_validator_addr
          description: src_validator_addr defines the validator address to redelegate from.
          in: query
          required: false
          type: string
        - name: dst_validator_addr
          description: dst_validator_addr defines the validator address to redelegate to.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations':
    get:
      summary: >-
        DelegatorUnbondingDelegations queries all unbonding delegations of a
        given

        delegator address.
      operationId: DelegatorUnbondingDelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              unbonding_responses:
                type: array
                items:
                  type: object
                  properties:
                    delegator_address:
                      type: string
                      description: >-
                        delegator_address is the bech32-encoded address of the
                        delegator.
                    validator_address:
                      type: string
                      description: >-
                        validator_address is the bech32-encoded address of the
                        validator.
                    entries:
                      type: array
                      items:
                        type: object
                        properties:
                          creation_height:
                            type: string
                            format: int64
                            description: >-
                              creation_height is the height which the unbonding
                              took place.
                          completion_time:
                            type: string
                            format: date-time
                            description: >-
                              completion_time is the unix time for unbonding
                              completion.
                          initial_balance:
                            type: string
                            description: >-
                              initial_balance defines the tokens initially
                              scheduled to receive at completion.
                          balance:
                            type: string
                            description: >-
                              balance defines the tokens to receive at
                              completion.
                        description: >-
                          UnbondingDelegationEntry defines an unbonding object
                          with relevant metadata.
                      description: entries are the unbonding delegation entries.
                  description: >-
                    UnbondingDelegation stores all of a single delegator's
                    unbonding bonds

                    for a single validator in an time-ordered list.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryUnbondingDelegatorDelegationsResponse is response type for
              the

              Query/UnbondingDelegatorDelegations RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators':
    get:
      summary: |-
        DelegatorValidators queries all validators info for given delegator
        address.
      operationId: StakingDelegatorValidators
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: object
                  properties:
                    operator_address:
                      type: string
                      description: >-
                        operator_address defines the address of the validator's
                        operator; bech encoded in JSON.
                    consensus_pubkey:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    jailed:
                      type: boolean
                      description: >-
                        jailed defined whether the validator has been jailed
                        from bonded status or not.
                    status:
                      description: >-
                        status is the validator status
                        (bonded/unbonding/unbonded).
                      type: string
                      enum:
                        - BOND_STATUS_UNSPECIFIED
                        - BOND_STATUS_UNBONDED
                        - BOND_STATUS_UNBONDING
                        - BOND_STATUS_BONDED
                      default: BOND_STATUS_UNSPECIFIED
                    tokens:
                      type: string
                      description: >-
                        tokens define the delegated tokens (incl.
                        self-delegation).
                    delegator_shares:
                      type: string
                      description: >-
                        delegator_shares defines total shares issued to a
                        validator's delegators.
                    description:
                      description: >-
                        description defines the description terms for the
                        validator.
                      type: object
                      properties:
                        moniker:
                          type: string
                          description: >-
                            moniker defines a human-readable name for the
                            validator.
                        identity:
                          type: string
                          description: >-
                            identity defines an optional identity signature (ex.
                            UPort or Keybase).
                        website:
                          type: string
                          description: website defines an optional website link.
                        security_contact:
                          type: string
                          description: >-
                            security_contact defines an optional email for
                            security contact.
                        details:
                          type: string
                          description: details define other optional details.
                    unbonding_height:
                      type: string
                      format: int64
                      description: >-
                        unbonding_height defines, if unbonding, the height at
                        which this validator has begun unbonding.
                    unbonding_time:
                      type: string
                      format: date-time
                      description: >-
                        unbonding_time defines, if unbonding, the min time for
                        the validator to complete unbonding.
                    commission:
                      description: commission defines the commission parameters.
                      type: object
                      properties:
                        commission_rates:
                          description: >-
                            commission_rates defines the initial commission
                            rates to be used for creating a validator.
                          type: object
                          properties:
                            rate:
                              type: string
                              description: >-
                                rate is the commission rate charged to
                                delegators, as a fraction.
                            max_rate:
                              type: string
                              description: >-
                                max_rate defines the maximum commission rate
                                which validator can ever charge, as a fraction.
                            max_change_rate:
                              type: string
                              description: >-
                                max_change_rate defines the maximum daily
                                increase of the validator commission, as a
                                fraction.
                        update_time:
                          type: string
                          format: date-time
                          description: >-
                            update_time is the last time the commission rate was
                            changed.
                    min_self_delegation:
                      type: string
                      description: >-
                        min_self_delegation is the validator's self declared
                        minimum self delegation.
                  description: >-
                    Validator defines a validator, together with the total
                    amount of the

                    Validator's bond shares and their exchange rate to coins.
                    Slashing results in

                    a decrease in the exchange rate, allowing correct
                    calculation of future

                    undelegations without iterating over delegators. When coins
                    are delegated to

                    this validator, the validator is credited with a delegation
                    whose number of

                    bond shares is based on the amount of coins delegated
                    divided by the current

                    exchange rate. Voting power can be calculated as total
                    bonded shares

                    multiplied by exchange rate.
                description: validators defines the the validators' info of a delegator.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: |-
              QueryDelegatorValidatorsResponse is response type for the
              Query/DelegatorValidators RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}':
    get:
      summary: |-
        DelegatorValidator queries validator info for given delegator validator
        pair.
      operationId: DelegatorValidator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validator:
                type: object
                properties:
                  operator_address:
                    type: string
                    description: >-
                      operator_address defines the address of the validator's
                      operator; bech encoded in JSON.
                  consensus_pubkey:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  jailed:
                    type: boolean
                    description: >-
                      jailed defined whether the validator has been jailed from
                      bonded status or not.
                  status:
                    description: >-
                      status is the validator status
                      (bonded/unbonding/unbonded).
                    type: string
                    enum:
                      - BOND_STATUS_UNSPECIFIED
                      - BOND_STATUS_UNBONDED
                      - BOND_STATUS_UNBONDING
                      - BOND_STATUS_BONDED
                    default: BOND_STATUS_UNSPECIFIED
                  tokens:
                    type: string
                    description: >-
                      tokens define the delegated tokens (incl.
                      self-delegation).
                  delegator_shares:
                    type: string
                    description: >-
                      delegator_shares defines total shares issued to a
                      validator's delegators.
                  description:
                    description: >-
                      description defines the description terms for the
                      validator.
                    type: object
                    properties:
                      moniker:
                        type: string
                        description: >-
                          moniker defines a human-readable name for the
                          validator.
                      identity:
                        type: string
                        description: >-
                          identity defines an optional identity signature (ex.
                          UPort or Keybase).
                      website:
                        type: string
                        description: website defines an optional website link.
                      security_contact:
                        type: string
                        description: >-
                          security_contact defines an optional email for
                          security contact.
                      details:
                        type: string
                        description: details define other optional details.
                  unbonding_height:
                    type: string
                    format: int64
                    description: >-
                      unbonding_height defines, if unbonding, the height at
                      which this validator has begun unbonding.
                  unbonding_time:
                    type: string
                    format: date-time
                    description: >-
                      unbonding_time defines, if unbonding, the min time for the
                      validator to complete unbonding.
                  commission:
                    description: commission defines the commission parameters.
                    type: object
                    properties:
                      commission_rates:
                        description: >-
                          commission_rates defines the initial commission rates
                          to be used for creating a validator.
                        type: object
                        properties:
                          rate:
                            type: string
                            description: >-
                              rate is the commission rate charged to delegators,
                              as a fraction.
                          max_rate:
                            type: string
                            description: >-
                              max_rate defines the maximum commission rate which
                              validator can ever charge, as a fraction.
                          max_change_rate:
                            type: string
                            description: >-
                              max_change_rate defines the maximum daily increase
                              of the validator commission, as a fraction.
                      update_time:
                        type: string
                        format: date-time
                        description: >-
                          update_time is the last time the commission rate was
                          changed.
                  min_self_delegation:
                    type: string
                    description: >-
                      min_self_delegation is the validator's self declared
                      minimum self delegation.
                description: >-
                  Validator defines a validator, together with the total amount
                  of the

                  Validator's bond shares and their exchange rate to coins.
                  Slashing results in

                  a decrease in the exchange rate, allowing correct calculation
                  of future

                  undelegations without iterating over delegators. When coins
                  are delegated to

                  this validator, the validator is credited with a delegation
                  whose number of

                  bond shares is based on the amount of coins delegated divided
                  by the current

                  exchange rate. Voting power can be calculated as total bonded
                  shares

                  multiplied by exchange rate.
            description: |-
              QueryDelegatorValidatorResponse response type for the
              Query/DelegatorValidator RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/staking/v1beta1/historical_info/{height}':
    get:
      summary: HistoricalInfo queries the historical info for given height.
      operationId: HistoricalInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              hist:
                description: hist defines the historical info at the given height.
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        title: prev block info
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                    description: Header defines the structure of a Tendermint block header.
                  valset:
                    type: array
                    items:
                      type: object
                      properties:
                        operator_address:
                          type: string
                          description: >-
                            operator_address defines the address of the
                            validator's operator; bech encoded in JSON.
                        consensus_pubkey:
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                            value:
                              type: string
                              format: byte
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := ptypes.MarshalAny(foo)
                                 ...
                                 foo := &pb.Foo{}
                                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                        jailed:
                          type: boolean
                          description: >-
                            jailed defined whether the validator has been jailed
                            from bonded status or not.
                        status:
                          description: >-
                            status is the validator status
                            (bonded/unbonding/unbonded).
                          type: string
                          enum:
                            - BOND_STATUS_UNSPECIFIED
                            - BOND_STATUS_UNBONDED
                            - BOND_STATUS_UNBONDING
                            - BOND_STATUS_BONDED
                          default: BOND_STATUS_UNSPECIFIED
                        tokens:
                          type: string
                          description: >-
                            tokens define the delegated tokens (incl.
                            self-delegation).
                        delegator_shares:
                          type: string
                          description: >-
                            delegator_shares defines total shares issued to a
                            validator's delegators.
                        description:
                          description: >-
                            description defines the description terms for the
                            validator.
                          type: object
                          properties:
                            moniker:
                              type: string
                              description: >-
                                moniker defines a human-readable name for the
                                validator.
                            identity:
                              type: string
                              description: >-
                                identity defines an optional identity signature
                                (ex. UPort or Keybase).
                            website:
                              type: string
                              description: website defines an optional website link.
                            security_contact:
                              type: string
                              description: >-
                                security_contact defines an optional email for
                                security contact.
                            details:
                              type: string
                              description: details define other optional details.
                        unbonding_height:
                          type: string
                          format: int64
                          description: >-
                            unbonding_height defines, if unbonding, the height
                            at which this validator has begun unbonding.
                        unbonding_time:
                          type: string
                          format: date-time
                          description: >-
                            unbonding_time defines, if unbonding, the min time
                            for the validator to complete unbonding.
                        commission:
                          description: commission defines the commission parameters.
                          type: object
                          properties:
                            commission_rates:
                              description: >-
                                commission_rates defines the initial commission
                                rates to be used for creating a validator.
                              type: object
                              properties:
                                rate:
                                  type: string
                                  description: >-
                                    rate is the commission rate charged to
                                    delegators, as a fraction.
                                max_rate:
                                  type: string
                                  description: >-
                                    max_rate defines the maximum commission rate
                                    which validator can ever charge, as a
                                    fraction.
                                max_change_rate:
                                  type: string
                                  description: >-
                                    max_change_rate defines the maximum daily
                                    increase of the validator commission, as a
                                    fraction.
                            update_time:
                              type: string
                              format: date-time
                              description: >-
                                update_time is the last time the commission rate
                                was changed.
                        min_self_delegation:
                          type: string
                          description: >-
                            min_self_delegation is the validator's self declared
                            minimum self delegation.
                      description: >-
                        Validator defines a validator, together with the total
                        amount of the

                        Validator's bond shares and their exchange rate to
                        coins. Slashing results in

                        a decrease in the exchange rate, allowing correct
                        calculation of future

                        undelegations without iterating over delegators. When
                        coins are delegated to

                        this validator, the validator is credited with a
                        delegation whose number of

                        bond shares is based on the amount of coins delegated
                        divided by the current

                        exchange rate. Voting power can be calculated as total
                        bonded shares

                        multiplied by exchange rate.
            description: >-
              QueryHistoricalInfoResponse is response type for the
              Query/HistoricalInfo RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: height
          description: height defines at which height to query the historical info.
          in: path
          required: true
          type: string
          format: int64
      tags:
        - Query
  /cosmos/staking/v1beta1/params:
    get:
      summary: Parameters queries the staking parameters.
      operationId: StakingParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params holds all the parameters of this module.
                type: object
                properties:
                  unbonding_time:
                    type: string
                    description: unbonding_time is the time duration of unbonding.
                  max_validators:
                    type: integer
                    format: int64
                    description: max_validators is the maximum number of validators.
                  max_entries:
                    type: integer
                    format: int64
                    description: >-
                      max_entries is the max entries for either unbonding
                      delegation or redelegation (per pair/trio).
                  historical_entries:
                    type: integer
                    format: int64
                    description: >-
                      historical_entries is the number of historical entries to
                      persist.
                  bond_denom:
                    type: string
                    description: bond_denom defines the bondable coin denomination.
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmos/staking/v1beta1/pool:
    get:
      summary: Pool queries the pool info.
      operationId: Pool
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool:
                description: pool defines the pool info.
                type: object
                properties:
                  not_bonded_tokens:
                    type: string
                  bonded_tokens:
                    type: string
            description: QueryPoolResponse is response type for the Query/Pool RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmos/staking/v1beta1/validators:
    get:
      summary: Validators queries all validators that match the given status.
      operationId: Validators
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: object
                  properties:
                    operator_address:
                      type: string
                      description: >-
                        operator_address defines the address of the validator's
                        operator; bech encoded in JSON.
                    consensus_pubkey:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    jailed:
                      type: boolean
                      description: >-
                        jailed defined whether the validator has been jailed
                        from bonded status or not.
                    status:
                      description: >-
                        status is the validator status
                        (bonded/unbonding/unbonded).
                      type: string
                      enum:
                        - BOND_STATUS_UNSPECIFIED
                        - BOND_STATUS_UNBONDED
                        - BOND_STATUS_UNBONDING
                        - BOND_STATUS_BONDED
                      default: BOND_STATUS_UNSPECIFIED
                    tokens:
                      type: string
                      description: >-
                        tokens define the delegated tokens (incl.
                        self-delegation).
                    delegator_shares:
                      type: string
                      description: >-
                        delegator_shares defines total shares issued to a
                        validator's delegators.
                    description:
                      description: >-
                        description defines the description terms for the
                        validator.
                      type: object
                      properties:
                        moniker:
                          type: string
                          description: >-
                            moniker defines a human-readable name for the
                            validator.
                        identity:
                          type: string
                          description: >-
                            identity defines an optional identity signature (ex.
                            UPort or Keybase).
                        website:
                          type: string
                          description: website defines an optional website link.
                        security_contact:
                          type: string
                          description: >-
                            security_contact defines an optional email for
                            security contact.
                        details:
                          type: string
                          description: details define other optional details.
                    unbonding_height:
                      type: string
                      format: int64
                      description: >-
                        unbonding_height defines, if unbonding, the height at
                        which this validator has begun unbonding.
                    unbonding_time:
                      type: string
                      format: date-time
                      description: >-
                        unbonding_time defines, if unbonding, the min time for
                        the validator to complete unbonding.
                    commission:
                      description: commission defines the commission parameters.
                      type: object
                      properties:
                        commission_rates:
                          description: >-
                            commission_rates defines the initial commission
                            rates to be used for creating a validator.
                          type: object
                          properties:
                            rate:
                              type: string
                              description: >-
                                rate is the commission rate charged to
                                delegators, as a fraction.
                            max_rate:
                              type: string
                              description: >-
                                max_rate defines the maximum commission rate
                                which validator can ever charge, as a fraction.
                            max_change_rate:
                              type: string
                              description: >-
                                max_change_rate defines the maximum daily
                                increase of the validator commission, as a
                                fraction.
                        update_time:
                          type: string
                          format: date-time
                          description: >-
                            update_time is the last time the commission rate was
                            changed.
                    min_self_delegation:
                      type: string
                      description: >-
                        min_self_delegation is the validator's self declared
                        minimum self delegation.
                  description: >-
                    Validator defines a validator, together with the total
                    amount of the

                    Validator's bond shares and their exchange rate to coins.
                    Slashing results in

                    a decrease in the exchange rate, allowing correct
                    calculation of future

                    undelegations without iterating over delegators. When coins
                    are delegated to

                    this validator, the validator is credited with a delegation
                    whose number of

                    bond shares is based on the amount of coins delegated
                    divided by the current

                    exchange rate. Voting power can be calculated as total
                    bonded shares

                    multiplied by exchange rate.
                description: validators contains all the queried validators.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: >-
              QueryValidatorsResponse is response type for the Query/Validators
              RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: status
          description: status enables to query for validators matching a given status.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/staking/v1beta1/validators/{validator_addr}':
    get:
      summary: Validator queries validator info for given validator address.
      operationId: Validator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validator:
                type: object
                properties:
                  operator_address:
                    type: string
                    description: >-
                      operator_address defines the address of the validator's
                      operator; bech encoded in JSON.
                  consensus_pubkey:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  jailed:
                    type: boolean
                    description: >-
                      jailed defined whether the validator has been jailed from
                      bonded status or not.
                  status:
                    description: >-
                      status is the validator status
                      (bonded/unbonding/unbonded).
                    type: string
                    enum:
                      - BOND_STATUS_UNSPECIFIED
                      - BOND_STATUS_UNBONDED
                      - BOND_STATUS_UNBONDING
                      - BOND_STATUS_BONDED
                    default: BOND_STATUS_UNSPECIFIED
                  tokens:
                    type: string
                    description: >-
                      tokens define the delegated tokens (incl.
                      self-delegation).
                  delegator_shares:
                    type: string
                    description: >-
                      delegator_shares defines total shares issued to a
                      validator's delegators.
                  description:
                    description: >-
                      description defines the description terms for the
                      validator.
                    type: object
                    properties:
                      moniker:
                        type: string
                        description: >-
                          moniker defines a human-readable name for the
                          validator.
                      identity:
                        type: string
                        description: >-
                          identity defines an optional identity signature (ex.
                          UPort or Keybase).
                      website:
                        type: string
                        description: website defines an optional website link.
                      security_contact:
                        type: string
                        description: >-
                          security_contact defines an optional email for
                          security contact.
                      details:
                        type: string
                        description: details define other optional details.
                  unbonding_height:
                    type: string
                    format: int64
                    description: >-
                      unbonding_height defines, if unbonding, the height at
                      which this validator has begun unbonding.
                  unbonding_time:
                    type: string
                    format: date-time
                    description: >-
                      unbonding_time defines, if unbonding, the min time for the
                      validator to complete unbonding.
                  commission:
                    description: commission defines the commission parameters.
                    type: object
                    properties:
                      commission_rates:
                        description: >-
                          commission_rates defines the initial commission rates
                          to be used for creating a validator.
                        type: object
                        properties:
                          rate:
                            type: string
                            description: >-
                              rate is the commission rate charged to delegators,
                              as a fraction.
                          max_rate:
                            type: string
                            description: >-
                              max_rate defines the maximum commission rate which
                              validator can ever charge, as a fraction.
                          max_change_rate:
                            type: string
                            description: >-
                              max_change_rate defines the maximum daily increase
                              of the validator commission, as a fraction.
                      update_time:
                        type: string
                        format: date-time
                        description: >-
                          update_time is the last time the commission rate was
                          changed.
                  min_self_delegation:
                    type: string
                    description: >-
                      min_self_delegation is the validator's self declared
                      minimum self delegation.
                description: >-
                  Validator defines a validator, together with the total amount
                  of the

                  Validator's bond shares and their exchange rate to coins.
                  Slashing results in

                  a decrease in the exchange rate, allowing correct calculation
                  of future

                  undelegations without iterating over delegators. When coins
                  are delegated to

                  this validator, the validator is credited with a delegation
                  whose number of

                  bond shares is based on the amount of coins delegated divided
                  by the current

                  exchange rate. Voting power can be calculated as total bonded
                  shares

                  multiplied by exchange rate.
            title: >-
              QueryValidatorResponse is response type for the Query/Validator
              RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/staking/v1beta1/validators/{validator_addr}/delegations':
    get:
      summary: ValidatorDelegations queries delegate info for given validator.
      operationId: ValidatorDelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              delegation_responses:
                type: array
                items:
                  type: object
                  properties:
                    delegation:
                      type: object
                      properties:
                        delegator_address:
                          type: string
                          description: >-
                            delegator_address is the bech32-encoded address of
                            the delegator.
                        validator_address:
                          type: string
                          description: >-
                            validator_address is the bech32-encoded address of
                            the validator.
                        shares:
                          type: string
                          description: shares define the delegation shares received.
                      description: >-
                        Delegation represents the bond with tokens held by an
                        account. It is

                        owned by one delegator, and is associated with the
                        voting power of one

                        validator.
                    balance:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  description: >-
                    DelegationResponse is equivalent to Delegation except that
                    it contains a

                    balance in addition to shares which is more suitable for
                    client responses.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: |-
              QueryValidatorDelegationsResponse is response type for the
              Query/ValidatorDelegations RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}':
    get:
      summary: Delegation queries delegate info for given validator delegator pair.
      operationId: Delegation
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              delegation_response:
                type: object
                properties:
                  delegation:
                    type: object
                    properties:
                      delegator_address:
                        type: string
                        description: >-
                          delegator_address is the bech32-encoded address of the
                          delegator.
                      validator_address:
                        type: string
                        description: >-
                          validator_address is the bech32-encoded address of the
                          validator.
                      shares:
                        type: string
                        description: shares define the delegation shares received.
                    description: >-
                      Delegation represents the bond with tokens held by an
                      account. It is

                      owned by one delegator, and is associated with the voting
                      power of one

                      validator.
                  balance:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                description: >-
                  DelegationResponse is equivalent to Delegation except that it
                  contains a

                  balance in addition to shares which is more suitable for
                  client responses.
            description: >-
              QueryDelegationResponse is response type for the Query/Delegation
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation':
    get:
      summary: |-
        UnbondingDelegation queries unbonding info for given validator delegator
        pair.
      operationId: UnbondingDelegation
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              unbond:
                type: object
                properties:
                  delegator_address:
                    type: string
                    description: >-
                      delegator_address is the bech32-encoded address of the
                      delegator.
                  validator_address:
                    type: string
                    description: >-
                      validator_address is the bech32-encoded address of the
                      validator.
                  entries:
                    type: array
                    items:
                      type: object
                      properties:
                        creation_height:
                          type: string
                          format: int64
                          description: >-
                            creation_height is the height which the unbonding
                            took place.
                        completion_time:
                          type: string
                          format: date-time
                          description: >-
                            completion_time is the unix time for unbonding
                            completion.
                        initial_balance:
                          type: string
                          description: >-
                            initial_balance defines the tokens initially
                            scheduled to receive at completion.
                        balance:
                          type: string
                          description: balance defines the tokens to receive at completion.
                      description: >-
                        UnbondingDelegationEntry defines an unbonding object
                        with relevant metadata.
                    description: entries are the unbonding delegation entries.
                description: >-
                  UnbondingDelegation stores all of a single delegator's
                  unbonding bonds

                  for a single validator in an time-ordered list.
            description: >-
              QueryDelegationResponse is response type for the
              Query/UnbondingDelegation

              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations':
    get:
      summary: >-
        ValidatorUnbondingDelegations queries unbonding delegations of a
        validator.
      operationId: ValidatorUnbondingDelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              unbonding_responses:
                type: array
                items:
                  type: object
                  properties:
                    delegator_address:
                      type: string
                      description: >-
                        delegator_address is the bech32-encoded address of the
                        delegator.
                    validator_address:
                      type: string
                      description: >-
                        validator_address is the bech32-encoded address of the
                        validator.
                    entries:
                      type: array
                      items:
                        type: object
                        properties:
                          creation_height:
                            type: string
                            format: int64
                            description: >-
                              creation_height is the height which the unbonding
                              took place.
                          completion_time:
                            type: string
                            format: date-time
                            description: >-
                              completion_time is the unix time for unbonding
                              completion.
                          initial_balance:
                            type: string
                            description: >-
                              initial_balance defines the tokens initially
                              scheduled to receive at completion.
                          balance:
                            type: string
                            description: >-
                              balance defines the tokens to receive at
                              completion.
                        description: >-
                          UnbondingDelegationEntry defines an unbonding object
                          with relevant metadata.
                      description: entries are the unbonding delegation entries.
                  description: >-
                    UnbondingDelegation stores all of a single delegator's
                    unbonding bonds

                    for a single validator in an time-ordered list.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryValidatorUnbondingDelegationsResponse is response type for
              the

              Query/ValidatorUnbondingDelegations RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/tx/v1beta1/simulate:
    post:
      summary: Simulate simulates executing a transaction for estimating gas usage.
      operationId: Simulate
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              gas_info:
                description: gas_info is the information about gas used in the simulation.
                type: object
                properties:
                  gas_wanted:
                    type: string
                    format: uint64
                    description: >-
                      GasWanted is the maximum units of work we allow this tx to
                      perform.
                  gas_used:
                    type: string
                    format: uint64
                    description: GasUsed is the amount of gas actually consumed.
              result:
                description: result is the result of the simulation.
                type: object
                properties:
                  data:
                    type: string
                    format: byte
                    description: >-
                      Data is any data returned from message or handler
                      execution. It MUST be

                      length prefixed in order to separate data from multiple
                      message executions.
                  log:
                    type: string
                    description: >-
                      Log contains the log information from message or handler
                      execution.
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                                format: byte
                              value:
                                type: string
                                format: byte
                              index:
                                type: boolean
                            description: >-
                              EventAttribute is a single key-value pair,
                              associated with an event.
                      description: >-
                        Event allows application developers to attach additional
                        information to

                        ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx
                        and ResponseDeliverTx.

                        Later, transactions may be queried using these events.
                    description: >-
                      Events contains a slice of Event objects that were emitted
                      during message

                      or handler execution.
            description: |-
              SimulateResponse is the response type for the
              Service.SimulateRPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.SimulateRequest'
      tags:
        - Service
  /cosmos/tx/v1beta1/txs:
    get:
      summary: GetTxsEvent fetches txs by event.
      operationId: GetTxsEvent
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.GetTxsEventResponse'
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: events
          description: events is the list of transaction event type.
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: order_by
          description: |2-
             - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.
             - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order
             - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
          in: query
          required: false
          type: string
          enum:
            - ORDER_BY_UNSPECIFIED
            - ORDER_BY_ASC
            - ORDER_BY_DESC
          default: ORDER_BY_UNSPECIFIED
      tags:
        - Service
    post:
      summary: BroadcastTx broadcast transaction.
      operationId: BroadcastTx
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              tx_response:
                type: object
                properties:
                  height:
                    type: string
                    format: int64
                    title: The block height
                  txhash:
                    type: string
                    description: The transaction hash.
                  codespace:
                    type: string
                    title: Namespace for the Code
                  code:
                    type: integer
                    format: int64
                    description: Response code.
                  data:
                    type: string
                    description: 'Result bytes, if any.'
                  raw_log:
                    type: string
                    description: >-
                      The output of the application's logger (raw string). May
                      be

                      non-deterministic.
                  logs:
                    type: array
                    items:
                      type: object
                      properties:
                        msg_index:
                          type: integer
                          format: int64
                        log:
                          type: string
                        events:
                          type: array
                          items:
                            type: object
                            properties:
                              type:
                                type: string
                              attributes:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    key:
                                      type: string
                                    value:
                                      type: string
                                  description: >-
                                    Attribute defines an attribute wrapper where
                                    the key and value are

                                    strings instead of raw bytes.
                            description: >-
                              StringEvent defines en Event object wrapper where
                              all the attributes

                              contain key/value pairs that are strings instead
                              of raw bytes.
                          description: >-
                            Events contains a slice of Event objects that were
                            emitted during some

                            execution.
                      description: >-
                        ABCIMessageLog defines a structure containing an indexed
                        tx ABCI message log.
                    description: >-
                      The output of the application's logger (typed). May be
                      non-deterministic.
                  info:
                    type: string
                    description: Additional information. May be non-deterministic.
                  gas_wanted:
                    type: string
                    format: int64
                    description: Amount of gas requested for transaction.
                  gas_used:
                    type: string
                    format: int64
                    description: Amount of gas consumed by transaction.
                  tx:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  timestamp:
                    type: string
                    description: >-
                      Time of the previous block. For heights > 1, it's the
                      weighted median of

                      the timestamps of the valid votes in the block.LastCommit.
                      For height == 1,

                      it's genesis time.
                description: >-
                  TxResponse defines a structure containing relevant tx data and
                  metadata. The

                  tags are stringified and the log is JSON decoded.
            description: |-
              BroadcastTxResponse is the response type for the
              Service.BroadcastTx method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              tx_bytes:
                type: string
                format: byte
                description: tx_bytes is the raw transaction.
              mode:
                type: string
                enum:
                  - BROADCAST_MODE_UNSPECIFIED
                  - BROADCAST_MODE_BLOCK
                  - BROADCAST_MODE_SYNC
                  - BROADCAST_MODE_ASYNC
                default: BROADCAST_MODE_UNSPECIFIED
                description: >-
                  BroadcastMode specifies the broadcast mode for the
                  TxService.Broadcast RPC method.

                   - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
                   - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
                  the tx to be committed in a block.
                   - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
                  a CheckTx execution response only.
                   - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
                  immediately.
            description: >-
              BroadcastTxRequest is the request type for the
              Service.BroadcastTxRequest

              RPC method.
      tags:
        - Service
  '/cosmos/tx/v1beta1/txs/{hash}':
    get:
      summary: GetTx fetches a tx by hash.
      operationId: GetTx
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.GetTxResponse'
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: hash
          description: 'hash is the tx hash to query, encoded as a hex string.'
          in: path
          required: true
          type: string
      tags:
        - Service
  '/cosmos/upgrade/v1beta1/applied_plan/{name}':
    get:
      summary: AppliedPlan queries a previously applied upgrade plan by its name.
      operationId: AppliedPlan
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              height:
                type: string
                format: int64
                description: height is the block height at which the plan was applied.
            description: >-
              QueryAppliedPlanResponse is the response type for the
              Query/AppliedPlan RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: name
          description: name is the name of the applied plan to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/upgrade/v1beta1/current_plan:
    get:
      summary: CurrentPlan queries the current upgrade plan.
      operationId: CurrentPlan
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              plan:
                description: plan is the current upgrade plan.
                type: object
                properties:
                  name:
                    type: string
                    description: >-
                      Sets the name for the upgrade. This name will be used by
                      the upgraded

                      version of the software to apply any special "on-upgrade"
                      commands during

                      the first BeginBlock method after the upgrade is applied.
                      It is also used

                      to detect whether a software version can handle a given
                      upgrade. If no

                      upgrade handler with this name has been set in the
                      software, it will be

                      assumed that the software is out-of-date when the upgrade
                      Time or Height is

                      reached and the software will exit.
                  time:
                    type: string
                    format: date-time
                    description: >-
                      The time after which the upgrade must be performed.

                      Leave set to its zero value to use a pre-defined Height
                      instead.
                  height:
                    type: string
                    format: int64
                    description: |-
                      The height at which the upgrade must be performed.
                      Only used if Time is not set.
                  info:
                    type: string
                    title: >-
                      Any application specific upgrade info to be included
                      on-chain

                      such as a git commit that validators could automatically
                      upgrade to
                  upgraded_client_state:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    title: >-
                      IBC-enabled chains can opt-in to including the upgraded
                      client state in its upgrade plan

                      This will make the chain commit to the correct upgraded
                      (self) client state before the upgrade occurs,

                      so that connecting chains can verify that the new upgraded
                      client is valid by verifying a proof on the

                      previous version of the chain.

                      This will allow IBC connections to persist smoothly across
                      planned chain upgrades
            description: >-
              QueryCurrentPlanResponse is the response type for the
              Query/CurrentPlan RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  '/cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}':
    get:
      summary: |-
        UpgradedConsensusState queries the consensus state that will serve
        as a trusted kernel for the next version of this chain. It will only be
        stored at the last height of this chain.
        UpgradedConsensusState RPC not supported with legacy querier
      operationId: UpgradedConsensusState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              upgraded_consensus_state:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: >-
              QueryUpgradedConsensusStateResponse is the response type for the
              Query/UpgradedConsensusState

              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: last_height
          description: |-
            last height of the current chain must be sent in request
            as this is the height under which next consensus state is stored
          in: path
          required: true
          type: string
          format: int64
      tags:
        - Query
  /wasm/v1beta1/code:
    get:
      summary: Codes gets the metadata for all stored wasm codes
      operationId: Codes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              code_infos:
                type: array
                items:
                  type: object
                  properties:
                    code_id:
                      type: string
                      format: uint64
                    creator:
                      type: string
                    data_hash:
                      type: string
                      format: byte
                    source:
                      type: string
                    builder:
                      type: string
                  title: CodeInfoResponse contains code meta data from CodeInfo
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: >-
              QueryCodesResponse is the response type for the Query/Codes RPC
              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/wasm/v1beta1/code/{code_id}':
    get:
      summary: Code gets the binary code and metadata for a singe wasm code
      operationId: Code
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              code_info:
                type: object
                properties:
                  code_id:
                    type: string
                    format: uint64
                  creator:
                    type: string
                  data_hash:
                    type: string
                    format: byte
                  source:
                    type: string
                  builder:
                    type: string
                title: CodeInfoResponse contains code meta data from CodeInfo
              data:
                type: string
                format: byte
            title: >-
              QueryCodeResponse is the response type for the Query/Code RPC
              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: code_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/wasm/v1beta1/code/{code_id}/contracts':
    get:
      summary: ContractsByCode lists all smart contracts for a code id
      operationId: ContractsByCode
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              contracts:
                type: array
                items:
                  type: string
                title: contracts are a set of contract addresses
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: |-
              QueryContractsByCodeResponse is the response type for the
              Query/ContractsByCode RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: code_id
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/wasm/v1beta1/contract/{address}':
    get:
      summary: ContractInfo gets the contract meta data
      operationId: ContractInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              address:
                type: string
                title: address is the address of the contract
              contract_info:
                type: object
                properties:
                  code_id:
                    type: string
                    format: uint64
                    title: CodeID is the reference to the stored Wasm code
                  creator:
                    type: string
                    title: Creator address who initially instantiated the contract
                  admin:
                    type: string
                    title: Admin is an optional address that can execute migrations
                  label:
                    type: string
                    description: >-
                      Label is optional metadata to be stored with a contract
                      instance.
                  created:
                    title: >-
                      Created Tx position when the contract was instantiated.

                      This data should kept internal and not be exposed via
                      query results. Just

                      use for sorting
                    type: object
                    properties:
                      block_height:
                        type: string
                        format: uint64
                        title: BlockHeight is the block the contract was created at
                      tx_index:
                        type: string
                        format: uint64
                        title: >-
                          TxIndex is a monotonic counter within the block
                          (actual transaction index,

                          or gas consumed)
                    description: >-
                      AbsoluteTxPosition is a unique transaction position that
                      allows for global

                      ordering of transactions.
                  ibc_port_id:
                    type: string
                  extension:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                title: ContractInfo stores a WASM contract instance
            title: >-
              QueryContractInfoResponse is the response type for the
              Query/ContractInfo RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the address of the contract to query
          in: path
          required: true
          type: string
      tags:
        - Query
  '/wasm/v1beta1/contract/{address}/history':
    get:
      summary: ContractHistory gets the contract code history
      operationId: ContractHistory
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              entries:
                type: array
                items:
                  type: object
                  properties:
                    operation:
                      type: string
                      enum:
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
                      default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
                      description: >-
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
                        ContractCodeHistoryOperationTypeUnspecified placeholder
                        for empty value
                         - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
                         - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
                         - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
                      title: >-
                        ContractCodeHistoryOperationType actions that caused a
                        code change
                    code_id:
                      type: string
                      format: uint64
                      title: CodeID is the reference to the stored WASM code
                    updated:
                      description: Updated Tx position when the operation was executed.
                      type: object
                      properties:
                        block_height:
                          type: string
                          format: uint64
                          title: BlockHeight is the block the contract was created at
                        tx_index:
                          type: string
                          format: uint64
                          title: >-
                            TxIndex is a monotonic counter within the block
                            (actual transaction index,

                            or gas consumed)
                    msg:
                      type: string
                      format: byte
                  description: ContractCodeHistoryEntry metadata to a contract.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: |-
              QueryContractHistoryResponse is the response type for the
              Query/ContractHistory RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the address of the contract to query
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/wasm/v1beta1/contract/{address}/raw/{query_data}':
    get:
      summary: RawContractState gets single key from the raw store data of a contract
      operationId: RawContractState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              data:
                type: string
                format: byte
                title: Data contains the raw store data
            title: |-
              QueryRawContractStateResponse is the response type for the
              Query/RawContractState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the address of the contract
          in: path
          required: true
          type: string
        - name: query_data
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/wasm/v1beta1/contract/{address}/smart/{query_data}':
    get:
      summary: SmartContractState get smart query result from the contract
      operationId: SmartContractState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              data:
                type: string
                format: byte
                title: Data contains the json data returned from the smart contract
            title: |-
              QuerySmartContractStateResponse is the response type for the
              Query/SmartContractState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the address of the contract
          in: path
          required: true
          type: string
        - name: query_data
          description: QueryData contains the query data passed to the contract
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/wasm/v1beta1/contract/{address}/state':
    get:
      summary: AllContractState gets all raw store data for a single contract
      operationId: AllContractState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              models:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                      format: byte
                      title: hex-encode key to read it better (this is often ascii)
                    value:
                      type: string
                      format: byte
                      title: base64-encode raw value
                  title: Model is a struct that holds a KV pair
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: |-
              QueryAllContractStateResponse is the response type for the
              Query/AllContractState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the address of the contract
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /ibc/applications/transfer/v1beta1/denom_traces:
    get:
      summary: DenomTraces queries all denomination traces.
      operationId: DenomTraces
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              denom_traces:
                type: array
                items:
                  type: object
                  properties:
                    path:
                      type: string
                      description: >-
                        path defines the chain of port/channel identifiers used
                        for tracing the

                        source of the fungible token.
                    base_denom:
                      type: string
                      description: base denomination of the relayed fungible token.
                  description: >-
                    DenomTrace contains the base denomination for ICS20 fungible
                    tokens and the

                    source tracing information path.
                description: denom_traces returns all denominations trace information.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryConnectionsResponse is the response type for the
              Query/DenomTraces RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/ibc/applications/transfer/v1beta1/denom_traces/{hash}':
    get:
      summary: DenomTrace queries a denomination trace information.
      operationId: DenomTrace
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              denom_trace:
                type: object
                properties:
                  path:
                    type: string
                    description: >-
                      path defines the chain of port/channel identifiers used
                      for tracing the

                      source of the fungible token.
                  base_denom:
                    type: string
                    description: base denomination of the relayed fungible token.
                description: >-
                  DenomTrace contains the base denomination for ICS20 fungible
                  tokens and the

                  source tracing information path.
            description: >-
              QueryDenomTraceResponse is the response type for the
              Query/DenomTrace RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: hash
          description: hash (in hex format) of the denomination trace information.
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/applications/transfer/v1beta1/params:
    get:
      summary: Params queries all parameters of the ibc-transfer module.
      operationId: IbcTransferParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  send_enabled:
                    type: boolean
                    description: >-
                      send_enabled enables or disables all cross-chain token
                      transfers from this

                      chain.
                  receive_enabled:
                    type: boolean
                    description: >-
                      receive_enabled enables or disables all cross-chain token
                      transfers to this

                      chain.
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /ibc/core/channel/v1beta1/channels:
    get:
      summary: Channels queries all the IBC channels of a chain.
      operationId: Channels
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              channels:
                type: array
                items:
                  type: object
                  properties:
                    state:
                      title: current state of the channel end
                      type: string
                      enum:
                        - STATE_UNINITIALIZED_UNSPECIFIED
                        - STATE_INIT
                        - STATE_TRYOPEN
                        - STATE_OPEN
                        - STATE_CLOSED
                      default: STATE_UNINITIALIZED_UNSPECIFIED
                      description: >-
                        State defines if a channel is in one of the following
                        states:

                        CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                         - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                         - STATE_INIT: A channel has just started the opening handshake.
                         - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                         - STATE_OPEN: A channel has completed the handshake. Open channels are
                        ready to send and receive packets.
                         - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                        packets.
                    ordering:
                      title: whether the channel is ordered or unordered
                      type: string
                      enum:
                        - ORDER_NONE_UNSPECIFIED
                        - ORDER_UNORDERED
                        - ORDER_ORDERED
                      default: ORDER_NONE_UNSPECIFIED
                      description: >-
                        - ORDER_NONE_UNSPECIFIED: zero-value for channel
                        ordering
                         - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                        which they were sent.
                         - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                    counterparty:
                      title: counterparty channel end
                      type: object
                      properties:
                        port_id:
                          type: string
                          description: >-
                            port on the counterparty chain which owns the other
                            end of the channel.
                        channel_id:
                          type: string
                          title: channel end on the counterparty chain
                    connection_hops:
                      type: array
                      items:
                        type: string
                      title: >-
                        list of connection identifiers, in order, along which
                        packets sent on

                        this channel will travel
                    version:
                      type: string
                      title: >-
                        opaque channel version, which is agreed upon during the
                        handshake
                    port_id:
                      type: string
                      title: port identifier
                    channel_id:
                      type: string
                      title: channel identifier
                  description: >-
                    IdentifiedChannel defines a channel with additional port and
                    channel

                    identifier fields.
                description: list of stored channels of the chain.
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            description: >-
              QueryChannelsResponse is the response type for the Query/Channels
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}':
    get:
      summary: Channel queries an IBC Channel.
      operationId: Channel
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              channel:
                title: channel associated with the request identifiers
                type: object
                properties:
                  state:
                    title: current state of the channel end
                    type: string
                    enum:
                      - STATE_UNINITIALIZED_UNSPECIFIED
                      - STATE_INIT
                      - STATE_TRYOPEN
                      - STATE_OPEN
                      - STATE_CLOSED
                    default: STATE_UNINITIALIZED_UNSPECIFIED
                    description: >-
                      State defines if a channel is in one of the following
                      states:

                      CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                       - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                       - STATE_INIT: A channel has just started the opening handshake.
                       - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                       - STATE_OPEN: A channel has completed the handshake. Open channels are
                      ready to send and receive packets.
                       - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                      packets.
                  ordering:
                    title: whether the channel is ordered or unordered
                    type: string
                    enum:
                      - ORDER_NONE_UNSPECIFIED
                      - ORDER_UNORDERED
                      - ORDER_ORDERED
                    default: ORDER_NONE_UNSPECIFIED
                    description: |-
                      - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                       - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                      which they were sent.
                       - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                  counterparty:
                    title: counterparty channel end
                    type: object
                    properties:
                      port_id:
                        type: string
                        description: >-
                          port on the counterparty chain which owns the other
                          end of the channel.
                      channel_id:
                        type: string
                        title: channel end on the counterparty chain
                  connection_hops:
                    type: array
                    items:
                      type: string
                    title: >-
                      list of connection identifiers, in order, along which
                      packets sent on

                      this channel will travel
                  version:
                    type: string
                    title: >-
                      opaque channel version, which is agreed upon during the
                      handshake
                description: >-
                  Channel defines pipeline for exactly-once packet delivery
                  between specific

                  modules on separate blockchains, which has at least one end
                  capable of

                  sending packets and one end capable of receiving packets.
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            description: >-
              QueryChannelResponse is the response type for the Query/Channel
              RPC method.

              Besides the Channel end, it includes a proof and the height from
              which the

              proof was retrieved.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  '/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/client_state':
    get:
      summary: >-
        ChannelClientState queries for the client state for the channel
        associated

        with the provided channel identifiers.
      operationId: ChannelClientState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              identified_client_state:
                title: client state associated with the channel
                type: object
                properties:
                  client_id:
                    type: string
                    title: client identifier
                  client_state:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    title: client state
                description: >-
                  IdentifiedClientState defines a client state with an
                  additional client

                  identifier field.
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: |-
              QueryChannelClientStateResponse is the Response type for the
              Query/QueryChannelClientState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  '/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/consensus_state/revision/{revision_number}/height/{revision_height}':
    get:
      summary: |-
        ChannelConsensusState queries for the consensus state for the channel
        associated with the provided channel identifiers.
      operationId: ChannelConsensusState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              consensus_state:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                title: consensus state associated with the channel
              client_id:
                type: string
                title: client ID associated with the consensus state
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: |-
              QueryChannelClientStateResponse is the Response type for the
              Query/QueryChannelClientState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: revision_number
          description: revision number of the consensus state
          in: path
          required: true
          type: string
          format: uint64
        - name: revision_height
          description: revision height of the consensus state
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/next_sequence':
    get:
      summary: >-
        NextSequenceReceive returns the next receive sequence for a given
        channel.
      operationId: NextSequenceReceive
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              next_sequence_receive:
                type: string
                format: uint64
                title: next sequence receive number
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: |-
              QuerySequenceResponse is the request type for the
              Query/QueryNextSequenceReceiveResponse RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  '/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_acknowledgements':
    get:
      summary: >-
        PacketAcknowledgements returns all the packet acknowledgements
        associated

        with a channel.
      operationId: PacketAcknowledgements
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              acknowledgements:
                type: array
                items:
                  type: object
                  properties:
                    port_id:
                      type: string
                      description: channel port identifier.
                    channel_id:
                      type: string
                      description: channel unique identifier.
                    sequence:
                      type: string
                      format: uint64
                      description: packet sequence.
                    data:
                      type: string
                      format: byte
                      description: embedded data that represents packet state.
                  description: >-
                    PacketState defines the generic type necessary to retrieve
                    and store

                    packet commitments, acknowledgements, and receipts.

                    Caller is responsible for knowing the context necessary to
                    interpret this

                    state as a commitment, acknowledgement, or a receipt.
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: |-
              QueryPacketAcknowledgemetsResponse is the request type for the
              Query/QueryPacketAcknowledgements RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_acks/{sequence}':
    get:
      summary: PacketAcknowledgement queries a stored packet acknowledgement hash.
      operationId: PacketAcknowledgement
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              acknowledgement:
                type: string
                format: byte
                title: packet associated with the request fields
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: >-
              QueryPacketAcknowledgementResponse defines the client query
              response for a

              packet which also includes a proof and the height from which the

              proof was retrieved
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: sequence
          description: packet sequence
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_commitments':
    get:
      summary: |-
        PacketCommitments returns all the packet commitments hashes associated
        with a channel.
      operationId: PacketCommitments
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              commitments:
                type: array
                items:
                  type: object
                  properties:
                    port_id:
                      type: string
                      description: channel port identifier.
                    channel_id:
                      type: string
                      description: channel unique identifier.
                    sequence:
                      type: string
                      format: uint64
                      description: packet sequence.
                    data:
                      type: string
                      format: byte
                      description: embedded data that represents packet state.
                  description: >-
                    PacketState defines the generic type necessary to retrieve
                    and store

                    packet commitments, acknowledgements, and receipts.

                    Caller is responsible for knowing the context necessary to
                    interpret this

                    state as a commitment, acknowledgement, or a receipt.
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: |-
              QueryPacketCommitmentsResponse is the request type for the
              Query/QueryPacketCommitments RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_ack_sequences}/unreceived_acks':
    get:
      summary: >-
        UnreceivedAcks returns all the unreceived IBC acknowledgements
        associated with a

        channel and sequences.
      operationId: UnreceivedAcks
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              sequences:
                type: array
                items:
                  type: string
                  format: uint64
                title: list of unreceived acknowledgement sequences
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: |-
              QueryUnreceivedAcksResponse is the response type for the
              Query/UnreceivedAcks RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: packet_ack_sequences
          description: list of acknowledgement sequences
          in: path
          required: true
          type: array
          items:
            type: string
            format: uint64
          collectionFormat: csv
          minItems: 1
      tags:
        - Query
  '/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_commitment_sequences}/unreceived_packets':
    get:
      summary: >-
        UnreceivedPackets returns all the unreceived IBC packets associated with
        a

        channel and sequences.
      operationId: UnreceivedPackets
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              sequences:
                type: array
                items:
                  type: string
                  format: uint64
                title: list of unreceived packet sequences
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: |-
              QueryUnreceivedPacketsResponse is the response type for the
              Query/UnreceivedPacketCommitments RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: packet_commitment_sequences
          description: list of packet sequences
          in: path
          required: true
          type: array
          items:
            type: string
            format: uint64
          collectionFormat: csv
          minItems: 1
      tags:
        - Query
  '/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_commitments/{sequence}':
    get:
      summary: PacketCommitment queries a stored packet commitment hash.
      operationId: PacketCommitment
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              commitment:
                type: string
                format: byte
                title: packet associated with the request fields
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: >-
              QueryPacketCommitmentResponse defines the client query response
              for a packet

              which also includes a proof and the height from which the proof
              was

              retrieved
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: sequence
          description: packet sequence
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_receipts/{sequence}':
    get:
      summary: >-
        PacketReceipt queries if a given packet sequence has been received on
        the queried chain
      operationId: PacketReceipt
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              received:
                type: boolean
                title: success flag for if receipt exists
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: >-
              QueryPacketReceiptResponse defines the client query response for a
              packet receipt

              which also includes a proof, and the height from which the proof
              was

              retrieved
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: sequence
          description: packet sequence
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/ibc/core/channel/v1beta1/connections/{connection}/channels':
    get:
      summary: |-
        ConnectionChannels queries all the channels associated with a connection
        end.
      operationId: ConnectionChannels
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              channels:
                type: array
                items:
                  type: object
                  properties:
                    state:
                      title: current state of the channel end
                      type: string
                      enum:
                        - STATE_UNINITIALIZED_UNSPECIFIED
                        - STATE_INIT
                        - STATE_TRYOPEN
                        - STATE_OPEN
                        - STATE_CLOSED
                      default: STATE_UNINITIALIZED_UNSPECIFIED
                      description: >-
                        State defines if a channel is in one of the following
                        states:

                        CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                         - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                         - STATE_INIT: A channel has just started the opening handshake.
                         - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                         - STATE_OPEN: A channel has completed the handshake. Open channels are
                        ready to send and receive packets.
                         - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                        packets.
                    ordering:
                      title: whether the channel is ordered or unordered
                      type: string
                      enum:
                        - ORDER_NONE_UNSPECIFIED
                        - ORDER_UNORDERED
                        - ORDER_ORDERED
                      default: ORDER_NONE_UNSPECIFIED
                      description: >-
                        - ORDER_NONE_UNSPECIFIED: zero-value for channel
                        ordering
                         - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                        which they were sent.
                         - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                    counterparty:
                      title: counterparty channel end
                      type: object
                      properties:
                        port_id:
                          type: string
                          description: >-
                            port on the counterparty chain which owns the other
                            end of the channel.
                        channel_id:
                          type: string
                          title: channel end on the counterparty chain
                    connection_hops:
                      type: array
                      items:
                        type: string
                      title: >-
                        list of connection identifiers, in order, along which
                        packets sent on

                        this channel will travel
                    version:
                      type: string
                      title: >-
                        opaque channel version, which is agreed upon during the
                        handshake
                    port_id:
                      type: string
                      title: port identifier
                    channel_id:
                      type: string
                      title: channel identifier
                  description: >-
                    IdentifiedChannel defines a channel with additional port and
                    channel

                    identifier fields.
                description: list of channels associated with a connection.
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: |-
              QueryConnectionChannelsResponse is the Response type for the
              Query/QueryConnectionChannels RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: connection
          description: connection unique identifier
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /ibc/client/v1beta1/params:
    get:
      summary: ClientParams queries all parameters of the ibc client.
      operationId: ClientParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  allowed_clients:
                    type: array
                    items:
                      type: string
                    description: >-
                      allowed_clients defines the list of allowed client state
                      types.
            description: >-
              QueryClientParamsResponse is the response type for the
              Query/ClientParams RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /ibc/core/client/v1beta1/client_states:
    get:
      summary: ClientStates queries all the IBC light clients of a chain.
      operationId: ClientStates
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              client_states:
                type: array
                items:
                  type: object
                  properties:
                    client_id:
                      type: string
                      title: client identifier
                    client_state:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      title: client state
                  description: >-
                    IdentifiedClientState defines a client state with an
                    additional client

                    identifier field.
                description: list of stored ClientStates of the chain.
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            description: >-
              QueryClientStatesResponse is the response type for the
              Query/ClientStates RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/ibc/core/client/v1beta1/client_states/{client_id}':
    get:
      summary: ClientState queries an IBC light client.
      operationId: ClientState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              client_state:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                title: client state associated with the request identifier
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            description: >-
              QueryClientStateResponse is the response type for the
              Query/ClientState RPC

              method. Besides the client state, it includes a proof and the
              height from

              which the proof was retrieved.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: client_id
          description: client state unique identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  '/ibc/core/client/v1beta1/consensus_states/{client_id}':
    get:
      summary: |-
        ConsensusStates queries all the consensus state associated with a given
        client.
      operationId: ConsensusStates
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              consensus_states:
                type: array
                items:
                  type: object
                  properties:
                    height:
                      title: consensus state height
                      type: object
                      properties:
                        revision_number:
                          type: string
                          format: uint64
                          title: the revision that the client is currently on
                        revision_height:
                          type: string
                          format: uint64
                          title: the height within the given revision
                      description: >-
                        Normally the RevisionHeight is incremented at each
                        height while keeping RevisionNumber

                        the same. However some consensus algorithms may choose
                        to reset the

                        height in certain conditions e.g. hard forks,
                        state-machine breaking changes

                        In these cases, the RevisionNumber is incremented so
                        that height continues to

                        be monitonically increasing even as the RevisionHeight
                        gets reset
                    consensus_state:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      title: consensus state
                  description: >-
                    ConsensusStateWithHeight defines a consensus state with an
                    additional height field.
                title: consensus states associated with the identifier
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: |-
              QueryConsensusStatesResponse is the response type for the
              Query/ConsensusStates RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: client_id
          description: client identifier
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/ibc/core/client/v1beta1/consensus_states/{client_id}/revision/{revision_number}/height/{revision_height}':
    get:
      summary: >-
        ConsensusState queries a consensus state associated with a client state
        at

        a given height.
      operationId: ConsensusState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              consensus_state:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                title: >-
                  consensus state associated with the client identifier at the
                  given height
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: >-
              QueryConsensusStateResponse is the response type for the
              Query/ConsensusState

              RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: client_id
          description: client identifier
          in: path
          required: true
          type: string
        - name: revision_number
          description: consensus state revision number
          in: path
          required: true
          type: string
          format: uint64
        - name: revision_height
          description: consensus state revision height
          in: path
          required: true
          type: string
          format: uint64
        - name: latest_height
          description: >-
            latest_height overrrides the height field and queries the latest
            stored

            ConsensusState.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/ibc/core/connection/v1beta1/client_connections/{client_id}':
    get:
      summary: |-
        ClientConnections queries the connection paths associated with a client
        state.
      operationId: ClientConnections
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              connection_paths:
                type: array
                items:
                  type: string
                description: slice of all the connection paths associated with a client.
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was generated
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: |-
              QueryClientConnectionsResponse is the response type for the
              Query/ClientConnections RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: client_id
          description: client identifier associated with a connection
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/core/connection/v1beta1/connections:
    get:
      summary: Connections queries all the IBC connections of a chain.
      operationId: Connections
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              connections:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: connection identifier.
                    client_id:
                      type: string
                      description: client associated with this connection.
                    versions:
                      type: array
                      items:
                        type: object
                        properties:
                          identifier:
                            type: string
                            title: unique version identifier
                          features:
                            type: array
                            items:
                              type: string
                            title: >-
                              list of features compatible with the specified
                              identifier
                        description: >-
                          Version defines the versioning scheme used to
                          negotiate the IBC verison in

                          the connection handshake.
                      title: >-
                        IBC version which can be utilised to determine encodings
                        or protocols for

                        channels or packets utilising this connection
                    state:
                      description: current state of the connection end.
                      type: string
                      enum:
                        - STATE_UNINITIALIZED_UNSPECIFIED
                        - STATE_INIT
                        - STATE_TRYOPEN
                        - STATE_OPEN
                      default: STATE_UNINITIALIZED_UNSPECIFIED
                    counterparty:
                      description: counterparty chain associated with this connection.
                      type: object
                      properties:
                        client_id:
                          type: string
                          description: >-
                            identifies the client on the counterparty chain
                            associated with a given

                            connection.
                        connection_id:
                          type: string
                          description: >-
                            identifies the connection end on the counterparty
                            chain associated with a

                            given connection.
                        prefix:
                          description: commitment merkle prefix of the counterparty chain.
                          type: object
                          properties:
                            key_prefix:
                              type: string
                              format: byte
                          title: >-
                            MerklePrefix is merkle path prefixed to the key.

                            The constructed key from the Path and the key will
                            be append(Path.KeyPath,

                            append(Path.KeyPrefix, key...))
                    delay_period:
                      type: string
                      format: uint64
                      description: delay period associated with this connection.
                  description: >-
                    IdentifiedConnection defines a connection with additional
                    connection

                    identifier field.
                description: list of stored connections of the chain.
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            description: >-
              QueryConnectionsResponse is the response type for the
              Query/Connections RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/ibc/core/connection/v1beta1/connections/{connection_id}':
    get:
      summary: Connection queries an IBC connection end.
      operationId: Connection
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              connection:
                title: connection associated with the request identifier
                type: object
                properties:
                  client_id:
                    type: string
                    description: client associated with this connection.
                  versions:
                    type: array
                    items:
                      type: object
                      properties:
                        identifier:
                          type: string
                          title: unique version identifier
                        features:
                          type: array
                          items:
                            type: string
                          title: >-
                            list of features compatible with the specified
                            identifier
                      description: >-
                        Version defines the versioning scheme used to negotiate
                        the IBC verison in

                        the connection handshake.
                    description: >-
                      IBC version which can be utilised to determine encodings
                      or protocols for

                      channels or packets utilising this connection.
                  state:
                    description: current state of the connection end.
                    type: string
                    enum:
                      - STATE_UNINITIALIZED_UNSPECIFIED
                      - STATE_INIT
                      - STATE_TRYOPEN
                      - STATE_OPEN
                    default: STATE_UNINITIALIZED_UNSPECIFIED
                  counterparty:
                    description: counterparty chain associated with this connection.
                    type: object
                    properties:
                      client_id:
                        type: string
                        description: >-
                          identifies the client on the counterparty chain
                          associated with a given

                          connection.
                      connection_id:
                        type: string
                        description: >-
                          identifies the connection end on the counterparty
                          chain associated with a

                          given connection.
                      prefix:
                        description: commitment merkle prefix of the counterparty chain.
                        type: object
                        properties:
                          key_prefix:
                            type: string
                            format: byte
                        title: >-
                          MerklePrefix is merkle path prefixed to the key.

                          The constructed key from the Path and the key will be
                          append(Path.KeyPath,

                          append(Path.KeyPrefix, key...))
                  delay_period:
                    type: string
                    format: uint64
                    description: >-
                      delay period that must pass before a consensus state can
                      be used for packet-verification

                      NOTE: delay period logic is only implemented by some
                      clients.
                description: >-
                  ConnectionEnd defines a stateful object on a chain connected
                  to another

                  separate one.

                  NOTE: there must only be 2 defined ConnectionEnds to establish

                  a connection between two chains.
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            description: >-
              QueryConnectionResponse is the response type for the
              Query/Connection RPC

              method. Besides the connection end, it includes a proof and the
              height from

              which the proof was retrieved.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: connection_id
          description: connection unique identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  '/ibc/core/connection/v1beta1/connections/{connection_id}/client_state':
    get:
      summary: |-
        ConnectionClientState queries the client state associated with the
        connection.
      operationId: ConnectionClientState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              identified_client_state:
                title: client state associated with the channel
                type: object
                properties:
                  client_id:
                    type: string
                    title: client identifier
                  client_state:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    title: client state
                description: >-
                  IdentifiedClientState defines a client state with an
                  additional client

                  identifier field.
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: |-
              QueryConnectionClientStateResponse is the response type for the
              Query/ConnectionClientState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: connection_id
          description: connection identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  '/ibc/core/connection/v1beta1/connections/{connection_id}/consensus_state/revision/{revision_number}/height/{revision_height}':
    get:
      summary: |-
        ConnectionConsensusState queries the consensus state associated with the
        connection.
      operationId: ConnectionConsensusState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              consensus_state:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                title: consensus state associated with the channel
              client_id:
                type: string
                title: client ID associated with the consensus state
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping RevisionNumber

                  the same. However some consensus algorithms may choose to
                  reset the

                  height in certain conditions e.g. hard forks, state-machine
                  breaking changes

                  In these cases, the RevisionNumber is incremented so that
                  height continues to

                  be monitonically increasing even as the RevisionHeight gets
                  reset
            title: |-
              QueryConnectionConsensusStateResponse is the response type for the
              Query/ConnectionConsensusState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: connection_id
          description: connection identifier
          in: path
          required: true
          type: string
        - name: revision_number
          in: path
          required: true
          type: string
          format: uint64
        - name: revision_height
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/provenance/attribute/v1/attribute/{account}/scan/{suffix}':
    get:
      summary: >-
        Scan queries attributes on a given account (address) for any that match
        the provided suffix
      operationId: Scan
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                type: string
                title: >-
                  a string containing the address of the account the attributes
                  are assigned to=
              attributes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The attribute name.
                    value:
                      type: string
                      format: byte
                      description: The attribute value.
                    attribute_type:
                      description: The attribute value type.
                      type: string
                      enum:
                        - ATTRIBUTE_TYPE_UNSPECIFIED
                        - ATTRIBUTE_TYPE_UUID
                        - ATTRIBUTE_TYPE_JSON
                        - ATTRIBUTE_TYPE_STRING
                        - ATTRIBUTE_TYPE_URI
                        - ATTRIBUTE_TYPE_INT
                        - ATTRIBUTE_TYPE_FLOAT
                        - ATTRIBUTE_TYPE_PROTO
                        - ATTRIBUTE_TYPE_BYTES
                      default: ATTRIBUTE_TYPE_UNSPECIFIED
                      title: >-
                        AttributeType defines the type of the data stored in the
                        attribute value
                    address:
                      type: string
                      title: The address the attribute is bound to
                  title: >-
                    Attribute holds a typed key/value structure for data
                    associated with an account
                title: a list of attribute values
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryScanResponse is the response type for the Query/Attribute
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: account
          description: account defines the address to query for.
          in: path
          required: true
          type: string
        - name: suffix
          description: >-
            name defines the partial attribute name to search for base on names
            being in RDNS format.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/attribute/v1/attribute/{account}/{name}':
    get:
      summary: >-
        Attribute queries attributes on a given account (address) for one (or
        more) with the given name
      operationId: Attribute
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                type: string
                description: >-
                  a string containing the address of the account the attributes
                  are assigned to.
              attributes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The attribute name.
                    value:
                      type: string
                      format: byte
                      description: The attribute value.
                    attribute_type:
                      description: The attribute value type.
                      type: string
                      enum:
                        - ATTRIBUTE_TYPE_UNSPECIFIED
                        - ATTRIBUTE_TYPE_UUID
                        - ATTRIBUTE_TYPE_JSON
                        - ATTRIBUTE_TYPE_STRING
                        - ATTRIBUTE_TYPE_URI
                        - ATTRIBUTE_TYPE_INT
                        - ATTRIBUTE_TYPE_FLOAT
                        - ATTRIBUTE_TYPE_PROTO
                        - ATTRIBUTE_TYPE_BYTES
                      default: ATTRIBUTE_TYPE_UNSPECIFIED
                      title: >-
                        AttributeType defines the type of the data stored in the
                        attribute value
                    address:
                      type: string
                      title: The address the attribute is bound to
                  title: >-
                    Attribute holds a typed key/value structure for data
                    associated with an account
                title: a list of attribute values
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAttributeResponse is the response type for the
              Query/Attribute method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: account
          description: account defines the address to query for.
          in: path
          required: true
          type: string
        - name: name
          description: name is the attribute name to query for
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/attribute/v1/attributes/{account}':
    get:
      summary: >-
        Attributes queries attributes on a given account (address) for any
        defined attributes
      operationId: Attributes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                type: string
                title: >-
                  a string containing the address of the account the attributes
                  are assigned to=
              attributes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The attribute name.
                    value:
                      type: string
                      format: byte
                      description: The attribute value.
                    attribute_type:
                      description: The attribute value type.
                      type: string
                      enum:
                        - ATTRIBUTE_TYPE_UNSPECIFIED
                        - ATTRIBUTE_TYPE_UUID
                        - ATTRIBUTE_TYPE_JSON
                        - ATTRIBUTE_TYPE_STRING
                        - ATTRIBUTE_TYPE_URI
                        - ATTRIBUTE_TYPE_INT
                        - ATTRIBUTE_TYPE_FLOAT
                        - ATTRIBUTE_TYPE_PROTO
                        - ATTRIBUTE_TYPE_BYTES
                      default: ATTRIBUTE_TYPE_UNSPECIFIED
                      title: >-
                        AttributeType defines the type of the data stored in the
                        attribute value
                    address:
                      type: string
                      title: The address the attribute is bound to
                  title: >-
                    Attribute holds a typed key/value structure for data
                    associated with an account
                title: a list of attribute values
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAttributesResponse is the response type for the
              Query/Attribute method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: account
          description: account defines the address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/attribute/v1/params:
    get:
      summary: Params queries params of the attribute module.
      operationId: AttributeParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  max_value_length:
                    type: integer
                    format: int64
                    title: maximum length of data to allow in an attribute value
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/provenance/marker/v1/accesscontrol/{id}':
    get:
      summary: query for access records on an account
      operationId: Access
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              accounts:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    permissions:
                      type: array
                      items:
                        type: string
                        enum:
                          - ACCESS_UNSPECIFIED
                          - ACCESS_MINT
                          - ACCESS_BURN
                          - ACCESS_DEPOSIT
                          - ACCESS_WITHDRAW
                          - ACCESS_DELETE
                          - ACCESS_ADMIN
                          - ACCESS_TRANSFER
                        default: ACCESS_UNSPECIFIED
                        description: >-
                          Access defines the different types of permissions that
                          a marker supports granting to an address.

                           - ACCESS_UNSPECIFIED: ACCESS_UNSPECIFIED defines a no-op vote option.
                           - ACCESS_MINT: ACCESS_MINT is the ability to increase the supply of a marker
                           - ACCESS_BURN: ACCESS_BURN is the ability to decrease the supply of the marker using coin held by the marker.
                           - ACCESS_DEPOSIT: ACCESS_DEPOSIT is the ability to set a marker reference to this marker in the metadata/scopes module
                           - ACCESS_WITHDRAW: ACCESS_WITHDRAW is the ability to remove marker references to this marker in from metadata/scopes or
                          transfer coin from this marker account to another
                          account.
                           - ACCESS_DELETE: ACCESS_DELETE is the ability to move a proposed, finalized or active marker into the cancelled state. This
                          access also allows cancelled markers to be marked for
                          deletion
                           - ACCESS_ADMIN: ACCESS_ADMIN is the ability to add access grants for accounts to the list of marker permissions.
                           - ACCESS_TRANSFER: ACCESS_TRANSFER is the ability to invoke a send operation using the marker module to facilitate exchange.
                          This access right is only supported on RESTRICTED
                          markers.
                  description: >-
                    AccessGrant associates a colelction of permisssions with an
                    address for delegated marker account control.
            description: >-
              QueryAccessResponse is the response type for the
              Query/MarkerAccess method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: id
          description: address or denom for the marker
          in: path
          required: true
          type: string
      tags:
        - Query
  /provenance/marker/v1/all:
    get:
      summary: Returns a list of all markers on the blockchain
      operationId: AllMarkers
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              markers:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllMarkersResponse is the response type for the
              Query/AllMarkers method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: status
          description: |-
            Optional status to filter request.

             - MARKER_STATUS_UNSPECIFIED: MARKER_STATUS_UNSPECIFIED - Unknown/Invalid Marker Status
             - MARKER_STATUS_PROPOSED: MARKER_STATUS_PROPOSED - Initial configuration period, updates allowed, token supply not created.
             - MARKER_STATUS_FINALIZED: MARKER_STATUS_FINALIZED - Configuration finalized, ready for supply creation
             - MARKER_STATUS_ACTIVE: MARKER_STATUS_ACTIVE - Supply is created, rules are in force.
             - MARKER_STATUS_CANCELLED: MARKER_STATUS_CANCELLED - Marker has been cancelled, pending destroy
             - MARKER_STATUS_DESTROYED: MARKER_STATUS_DESTROYED - Marker supply has all been recalled, marker is considered destroyed and no further
            actions allowed.
          in: query
          required: false
          type: string
          enum:
            - MARKER_STATUS_UNSPECIFIED
            - MARKER_STATUS_PROPOSED
            - MARKER_STATUS_FINALIZED
            - MARKER_STATUS_ACTIVE
            - MARKER_STATUS_CANCELLED
            - MARKER_STATUS_DESTROYED
          default: MARKER_STATUS_UNSPECIFIED
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/marker/v1/detail/{id}':
    get:
      summary: query for a single marker by denom or address
      operationId: Marker
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              marker:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: >-
              QueryMarkerResponse is the response type for the Query/Marker
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: id
          description: the address or denom of the marker
          in: path
          required: true
          type: string
      tags:
        - Query
  '/provenance/marker/v1/escrow/{id}':
    get:
      summary: query for coins on a marker account
      operationId: Escrow
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              escrow:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
            description: >-
              QueryEscrowResponse is the response type for the
              Query/MarkerEscrow method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: id
          description: address or denom for the marker
          in: path
          required: true
          type: string
      tags:
        - Query
  '/provenance/marker/v1/getdenommetadata/{denom}':
    get:
      summary: query for access records on an account
      operationId: MarkerDenomMetadata
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              metadata:
                type: object
                properties:
                  description:
                    type: string
                  denom_units:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          description: >-
                            denom represents the string name of the given denom
                            unit (e.g uatom).
                        exponent:
                          type: integer
                          format: int64
                          description: >-
                            exponent represents power of 10 exponent that one
                            must

                            raise the base_denom to in order to equal the given
                            DenomUnit's denom

                            1 denom = 1^exponent base_denom

                            (e.g. with a base_denom of uatom, one can create a
                            DenomUnit of 'atom' with

                            exponent = 6, thus: 1 atom = 10^6 uatom).
                        aliases:
                          type: array
                          items:
                            type: string
                          title: >-
                            aliases is a list of string aliases for the given
                            denom
                      description: |-
                        DenomUnit represents a struct that describes a given
                        denomination unit of the basic token.
                    title: >-
                      denom_units represents the list of DenomUnit's for a given
                      coin
                  base:
                    type: string
                    description: >-
                      base represents the base denom (should be the DenomUnit
                      with exponent = 0).
                  display:
                    type: string
                    description: |-
                      display indicates the suggested denom that should be
                      displayed in clients.
                  name:
                    type: string
                    description: 'Since: cosmos-sdk 0.43'
                    title: 'name defines the name of the token (eg: Cosmos Atom)'
                  symbol:
                    type: string
                    description: >-
                      symbol is the token symbol usually shown on exchanges (eg:
                      ATOM). This can

                      be the same as the display.


                      Since: cosmos-sdk 0.43
                description: |-
                  Metadata represents a struct that describes
                  a basic token.
            title: >-
              QueryDenomMetadataResponse is the response type for the
              Query/DenomMetadata
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: denom
          in: path
          required: true
          type: string
      tags:
        - Query
  '/provenance/marker/v1/holding/{id}':
    get:
      summary: query for all accounts holding the given marker coins
      operationId: Holding
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balances:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      description: address is the address of the balance holder.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: coins defines the different coins this balance holds.
                  title: >-
                    Balance defines an account address and balance pair used in
                    queries for accounts holding a marker
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryHoldingResponse is the response type for the
              Query/MarkerHolders method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: id
          description: the address or denom of the marker
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/marker/v1/params:
    get:
      summary: Params queries the parameters of x/bank module.
      operationId: MarkerParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  max_total_supply:
                    type: string
                    format: uint64
                    title: >-
                      maximum amount of supply to allow a marker to be created
                      with
                  enable_governance:
                    type: boolean
                    format: boolean
                    description: >-
                      indicates if governance based controls of markers is
                      allowed.
                  unrestricted_denom_regex:
                    type: string
                    title: >-
                      a regular expression used to validate marker denom values
                      from normal create requests (governance

                      requests are only subject to platform coin validation
                      denom expression)
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  '/provenance/marker/v1/supply/{id}':
    get:
      summary: query for supply of coin on a marker account
      operationId: Supply
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            description: >-
              QuerySupplyResponse is the response type for the
              Query/MarkerSupply method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: id
          description: address or denom for the marker
          in: path
          required: true
          type: string
      tags:
        - Query
  '/provenance/metadata/v1/contractspec/{specification_id}':
    get:
      summary: >-
        ContractSpecification returns a contract specification for the given
        specification id.
      description: >-
        The specification_id can either be a uuid, e.g.
        def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract

        specification address, e.g.
        contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record
        specification

        address, e.g.
        recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If
        it is a record specification

        address, then the contract specification that contains that record
        specification is looked up.


        By default, the record specifications for this contract specification
        are not included.

        Set include_record_specs to true to include them in the result.
      operationId: ContractSpecification
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              contract_specification:
                description: contract_specification is the wrapped contract specification.
                type: object
                properties:
                  specification:
                    description: >-
                      specification is the on-chain contract specification
                      message.
                    type: object
                    properties:
                      specification_id:
                        type: string
                        format: byte
                        title: unique identifier for this specification on chain
                      description:
                        title: >-
                          Description information for this contract
                          specification
                        type: object
                        properties:
                          name:
                            type: string
                            description: A Name for this thing.
                          description:
                            type: string
                            description: A description of this thing.
                          website_url:
                            type: string
                            description: URL to find even more info.
                          icon_url:
                            type: string
                            description: URL of an icon.
                        description: >-
                          Description holds general information that is handy to
                          associate with a structure.
                      owner_addresses:
                        type: array
                        items:
                          type: string
                        title: Address of the account that owns this specificaiton
                      parties_involved:
                        type: array
                        items:
                          type: string
                          enum:
                            - PARTY_TYPE_UNSPECIFIED
                            - PARTY_TYPE_ORIGINATOR
                            - PARTY_TYPE_SERVICER
                            - PARTY_TYPE_INVESTOR
                            - PARTY_TYPE_CUSTODIAN
                            - PARTY_TYPE_OWNER
                            - PARTY_TYPE_AFFILIATE
                            - PARTY_TYPE_OMNIBUS
                            - PARTY_TYPE_PROVENANCE
                            - PARTY_TYPE_CONTROLLER
                            - PARTY_TYPE_VALIDATOR
                          default: PARTY_TYPE_UNSPECIFIED
                          description: >-
                            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is
                            an error condition
                             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                          title: >-
                            PartyType are the different roles parties on a
                            contract may use
                        title: >-
                          a list of party roles that must be fullfilled when
                          signing a transaction for this contract specification
                      resource_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain that represents this
                          contract
                      hash:
                        type: string
                        title: the hash of contract binary (off-chain instance)
                      class_name:
                        type: string
                        title: name of the class/type of this contract executable
                    title: >-
                      ContractSpecification defines the required parties,
                      resources, conditions, and consideration outputs for a
                      contract
                  contract_spec_id_info:
                    description: >-
                      contract_spec_id_info contains information about the
                      id/address of the contract specification.
                    type: object
                    properties:
                      contract_spec_id:
                        type: string
                        format: byte
                        description: >-
                          contract_spec_id is the raw bytes of the contract
                          specification address.
                      contract_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          contract_spec_id_prefix is the prefix portion of the
                          contract_spec_id.
                      contract_spec_id_contract_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          contract_spec_id_contract_spec_uuid is the
                          contract_spec_uuid portion of the contract_spec_id.
                      contract_spec_addr:
                        type: string
                        description: >-
                          contract_spec_addr is the bech32 string version of the
                          contract_spec_id.
                      contract_spec_uuid:
                        type: string
                        description: >-
                          contract_spec_uuid is the uuid hex string of the
                          contract_spec_id_contract_spec_uuid.
              record_specifications:
                type: array
                items:
                  type: object
                  properties:
                    specification:
                      description: >-
                        specification is the on-chain record specification
                        message.
                      type: object
                      properties:
                        specification_id:
                          type: string
                          format: byte
                          title: unique identifier for this specification on chain
                        name:
                          type: string
                          title: >-
                            Name of Record that will be created when this
                            specification is used
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                title: name for this input
                              type_name:
                                type: string
                                title: >-
                                  a type_name (typically a proto name or
                                  class_name)
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                            title: >-
                              InputSpecification defines a name, type_name, and
                              source reference (either on or off chain) to
                              define an input

                              parameter
                          title: >-
                            A set of inputs that must be satisified to apply
                            this RecordSpecification and create a Record
                        type_name:
                          type: string
                          title: >-
                            A type name for data associated with this record
                            (typically a class or proto name)
                        result_type:
                          title: >-
                            Type of result for this record specification (must
                            be RECORD or RECORD_LIST)
                          type: string
                          enum:
                            - DEFINITION_TYPE_UNSPECIFIED
                            - DEFINITION_TYPE_PROPOSED
                            - DEFINITION_TYPE_RECORD
                            - DEFINITION_TYPE_RECORD_LIST
                          default: DEFINITION_TYPE_UNSPECIFIED
                          description: >-
                            - DEFINITION_TYPE_UNSPECIFIED:
                            DEFINITION_TYPE_UNSPECIFIED indicates an
                            unknown/invalid value
                             - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                             - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                             - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                            the same name
                        responsible_parties:
                          type: array
                          items:
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            title: >-
                              PartyType are the different roles parties on a
                              contract may use
                          title: Type of party responsible for this record
                      title: >-
                        RecordSpecification defines the specification for a
                        Record including allowed/required inputs/outputs
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordSpecificationWrapper contains a single record
                    specification and some extra identifiers for it.
                description: >-
                  record_specifications is any number or wrapped record
                  specifications associated with this contract_specification

                  (if requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  specification_id:
                    type: string
                    description: >-
                      specification_id can either be a uuid, e.g.
                      def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
                      specification

                      address, e.g.
                      contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

                      It can also be a record specification address, e.g.

                      recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
                  include_record_specs:
                    type: boolean
                    format: boolean
                    description: >-
                      include_record_specs is a flag for whether or not the
                      record specifications in this contract specification
                      should

                      be included in the result.
            description: >-
              ContractSpecificationResponse is the response type for the
              Query/ContractSpecification RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: specification_id
          description: >-
            specification_id can either be a uuid, e.g.
            def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
            specification

            address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

            It can also be a record specification address, e.g.

            recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
          in: path
          required: true
          type: string
        - name: include_record_specs
          description: >-
            include_record_specs is a flag for whether or not the record
            specifications in this contract specification should

            be included in the result.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/contractspec/{specification_id}/recordspec/{name}':
    get:
      summary: RecordSpecification returns a record specification for the given input.
      operationId: RecordSpecification2
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              record_specification:
                type: object
                properties:
                  specification:
                    description: >-
                      specification is the on-chain record specification
                      message.
                    type: object
                    properties:
                      specification_id:
                        type: string
                        format: byte
                        title: unique identifier for this specification on chain
                      name:
                        type: string
                        title: >-
                          Name of Record that will be created when this
                          specification is used
                      inputs:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              title: name for this input
                            type_name:
                              type: string
                              title: >-
                                a type_name (typically a proto name or
                                class_name)
                            record_id:
                              type: string
                              format: byte
                              title: >-
                                the address of a record on chain (For
                                Established Records)
                            hash:
                              type: string
                              title: >-
                                the hash of an off-chain piece of information
                                (For Proposed Records)
                          title: >-
                            InputSpecification defines a name, type_name, and
                            source reference (either on or off chain) to define
                            an input

                            parameter
                        title: >-
                          A set of inputs that must be satisified to apply this
                          RecordSpecification and create a Record
                      type_name:
                        type: string
                        title: >-
                          A type name for data associated with this record
                          (typically a class or proto name)
                      result_type:
                        title: >-
                          Type of result for this record specification (must be
                          RECORD or RECORD_LIST)
                        type: string
                        enum:
                          - DEFINITION_TYPE_UNSPECIFIED
                          - DEFINITION_TYPE_PROPOSED
                          - DEFINITION_TYPE_RECORD
                          - DEFINITION_TYPE_RECORD_LIST
                        default: DEFINITION_TYPE_UNSPECIFIED
                        description: >-
                          - DEFINITION_TYPE_UNSPECIFIED:
                          DEFINITION_TYPE_UNSPECIFIED indicates an
                          unknown/invalid value
                           - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                           - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                           - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                          the same name
                      responsible_parties:
                        type: array
                        items:
                          type: string
                          enum:
                            - PARTY_TYPE_UNSPECIFIED
                            - PARTY_TYPE_ORIGINATOR
                            - PARTY_TYPE_SERVICER
                            - PARTY_TYPE_INVESTOR
                            - PARTY_TYPE_CUSTODIAN
                            - PARTY_TYPE_OWNER
                            - PARTY_TYPE_AFFILIATE
                            - PARTY_TYPE_OMNIBUS
                            - PARTY_TYPE_PROVENANCE
                            - PARTY_TYPE_CONTROLLER
                            - PARTY_TYPE_VALIDATOR
                          default: PARTY_TYPE_UNSPECIFIED
                          description: >-
                            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is
                            an error condition
                             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                          title: >-
                            PartyType are the different roles parties on a
                            contract may use
                        title: Type of party responsible for this record
                    title: >-
                      RecordSpecification defines the specification for a Record
                      including allowed/required inputs/outputs
                  record_spec_id_info:
                    description: >-
                      record_spec_id_info contains information about the
                      id/address of the record specification.
                    type: object
                    properties:
                      record_spec_id:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id is the raw bytes of the record
                          specification address.
                      record_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id_prefix is the prefix portion of the
                          record_spec_id.
                      record_spec_id_contract_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id_contract_spec_uuid is the
                          contract_spec_uuid portion of the record_spec_id.
                      record_spec_id_hashed_name:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id_hashed_name is the hashed name portion
                          of the record_spec_id.
                      record_spec_addr:
                        type: string
                        description: >-
                          record_spec_addr is the bech32 string version of the
                          record_spec_id.
                      contract_spec_id_info:
                        description: >-
                          contract_spec_id_info is information about the
                          contract spec id referenced in the record_spec_id.
                        type: object
                        properties:
                          contract_spec_id:
                            type: string
                            format: byte
                            description: >-
                              contract_spec_id is the raw bytes of the contract
                              specification address.
                          contract_spec_id_prefix:
                            type: string
                            format: byte
                            description: >-
                              contract_spec_id_prefix is the prefix portion of
                              the contract_spec_id.
                          contract_spec_id_contract_spec_uuid:
                            type: string
                            format: byte
                            description: >-
                              contract_spec_id_contract_spec_uuid is the
                              contract_spec_uuid portion of the
                              contract_spec_id.
                          contract_spec_addr:
                            type: string
                            description: >-
                              contract_spec_addr is the bech32 string version of
                              the contract_spec_id.
                          contract_spec_uuid:
                            type: string
                            description: >-
                              contract_spec_uuid is the uuid hex string of the
                              contract_spec_id_contract_spec_uuid.
                description: >-
                  RecordSpecificationWrapper contains a single record
                  specification and some extra identifiers for it.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  specification_id:
                    type: string
                    description: >-
                      specification_id can either be a uuid, e.g.
                      def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
                      specification

                      address, e.g.
                      contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

                      It can also be a record specification address, e.g.

                      recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
                  name:
                    type: string
                    description: >-
                      name is the name of the record to look up.

                      It is required if the specification_id is a uuid or
                      contract specification address.

                      It is ignored if the specification_id is a record
                      specification address.
            description: >-
              RecordSpecificationResponse is the response type for the
              Query/RecordSpecification RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: specification_id
          description: >-
            specification_id can either be a uuid, e.g.
            def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
            specification

            address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

            It can also be a record specification address, e.g.

            recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
          in: path
          required: true
          type: string
        - name: name
          description: >-
            name is the name of the record to look up.

            It is required if the specification_id is a uuid or contract
            specification address.

            It is ignored if the specification_id is a record specification
            address.
          in: path
          required: true
          type: string
      tags:
        - Query
  '/provenance/metadata/v1/contractspec/{specification_id}/recordspecs':
    get:
      summary: >-
        RecordSpecificationsForContractSpecification returns the record
        specifications for the given input.
      description: >-
        The specification_id can either be a uuid, e.g.
        def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract

        specification address, e.g.
        contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record
        specification

        address, e.g.
        recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If
        it is a record specification

        address, then the contract specification that contains that record
        specification is used.
      operationId: RecordSpecificationsForContractSpecification
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              record_specifications:
                type: array
                items:
                  type: object
                  properties:
                    specification:
                      description: >-
                        specification is the on-chain record specification
                        message.
                      type: object
                      properties:
                        specification_id:
                          type: string
                          format: byte
                          title: unique identifier for this specification on chain
                        name:
                          type: string
                          title: >-
                            Name of Record that will be created when this
                            specification is used
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                title: name for this input
                              type_name:
                                type: string
                                title: >-
                                  a type_name (typically a proto name or
                                  class_name)
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                            title: >-
                              InputSpecification defines a name, type_name, and
                              source reference (either on or off chain) to
                              define an input

                              parameter
                          title: >-
                            A set of inputs that must be satisified to apply
                            this RecordSpecification and create a Record
                        type_name:
                          type: string
                          title: >-
                            A type name for data associated with this record
                            (typically a class or proto name)
                        result_type:
                          title: >-
                            Type of result for this record specification (must
                            be RECORD or RECORD_LIST)
                          type: string
                          enum:
                            - DEFINITION_TYPE_UNSPECIFIED
                            - DEFINITION_TYPE_PROPOSED
                            - DEFINITION_TYPE_RECORD
                            - DEFINITION_TYPE_RECORD_LIST
                          default: DEFINITION_TYPE_UNSPECIFIED
                          description: >-
                            - DEFINITION_TYPE_UNSPECIFIED:
                            DEFINITION_TYPE_UNSPECIFIED indicates an
                            unknown/invalid value
                             - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                             - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                             - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                            the same name
                        responsible_parties:
                          type: array
                          items:
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            title: >-
                              PartyType are the different roles parties on a
                              contract may use
                          title: Type of party responsible for this record
                      title: >-
                        RecordSpecification defines the specification for a
                        Record including allowed/required inputs/outputs
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordSpecificationWrapper contains a single record
                    specification and some extra identifiers for it.
                description: >-
                  record_specifications is any number of wrapped record
                  specifications associated with this contract_specification.
              contract_specification_uuid:
                type: string
                description: >-
                  contract_specification_uuid is the uuid of this contract
                  specification.
              contract_specification_addr:
                type: string
                description: >-
                  contract_specification_addr is the contract specification
                  address as a bech32 encoded string.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  specification_id:
                    type: string
                    description: >-
                      specification_id can either be a uuid, e.g.
                      def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
                      specification

                      address, e.g.
                      contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

                      It can also be a record specification address, e.g.

                      recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
            description: >-
              RecordSpecificationsForContractSpecificationResponse is the
              response type for the

              Query/RecordSpecificationsForContractSpecification RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: specification_id
          description: >-
            specification_id can either be a uuid, e.g.
            def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
            specification

            address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

            It can also be a record specification address, e.g.

            recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
          in: path
          required: true
          type: string
      tags:
        - Query
  /provenance/metadata/v1/contractspecs/all:
    get:
      summary: ContractSpecificationsAll retrieves all contract specifications.
      operationId: ContractSpecificationsAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              contract_specifications:
                type: array
                items:
                  type: object
                  properties:
                    specification:
                      description: >-
                        specification is the on-chain contract specification
                        message.
                      type: object
                      properties:
                        specification_id:
                          type: string
                          format: byte
                          title: unique identifier for this specification on chain
                        description:
                          title: >-
                            Description information for this contract
                            specification
                          type: object
                          properties:
                            name:
                              type: string
                              description: A Name for this thing.
                            description:
                              type: string
                              description: A description of this thing.
                            website_url:
                              type: string
                              description: URL to find even more info.
                            icon_url:
                              type: string
                              description: URL of an icon.
                          description: >-
                            Description holds general information that is handy
                            to associate with a structure.
                        owner_addresses:
                          type: array
                          items:
                            type: string
                          title: Address of the account that owns this specificaiton
                        parties_involved:
                          type: array
                          items:
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            title: >-
                              PartyType are the different roles parties on a
                              contract may use
                          title: >-
                            a list of party roles that must be fullfilled when
                            signing a transaction for this contract
                            specification
                        resource_id:
                          type: string
                          format: byte
                          title: >-
                            the address of a record on chain that represents
                            this contract
                        hash:
                          type: string
                          title: the hash of contract binary (off-chain instance)
                        class_name:
                          type: string
                          title: name of the class/type of this contract executable
                      title: >-
                        ContractSpecification defines the required parties,
                        resources, conditions, and consideration outputs for a
                        contract
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    ContractSpecificationWrapper contains a single contract
                    specification and some extra identifiers for it.
                description: >-
                  contract_specifications are the wrapped contract
                  specifications.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              ContractSpecificationsAllResponse is the response type for the
              Query/ContractSpecificationsAll RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/locator/params:
    get:
      summary: >-
        OSLocatorParams returns all parameters for the object store locator sub
        module.
      operationId: OSLocatorParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  max_uri_length:
                    type: integer
                    format: int64
              request:
                description: request is a copy of the request that generated these results.
                type: object
            description: >-
              OSLocatorParamsResponse is the response type for the
              Query/OSLocatorParams RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/provenance/metadata/v1/locator/scope/{scope_id}':
    get:
      summary: >-
        OSLocatorsByScope returns all ObjectStoreLocator entries for a for all
        signer's present in the specified scope.
      operationId: OSLocatorsByScope
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locators:
                type: array
                items:
                  type: object
                  properties:
                    owner:
                      type: string
                      title: account address the endpoint is owned by
                    locator_uri:
                      type: string
                      title: locator endpoint uri
                    encryption_key:
                      type: string
                      title: owners encryption key address
                  description: >-
                    Defines an Locator object stored on chain, which represents
                    a owner( blockchain address) associated with a endpoint

                    uri for it's associated object store.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
            description: >-
              OSLocatorsByScopeResponse is the response type for the
              Query/OSLocatorsByScope RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          in: path
          required: true
          type: string
      tags:
        - Query
  '/provenance/metadata/v1/locator/uri/{uri}':
    get:
      summary: >-
        OSLocatorsByURI returns all ObjectStoreLocator entries for a locator
        uri.
      operationId: OSLocatorsByURI
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locators:
                type: array
                items:
                  type: object
                  properties:
                    owner:
                      type: string
                      title: account address the endpoint is owned by
                    locator_uri:
                      type: string
                      title: locator endpoint uri
                    encryption_key:
                      type: string
                      title: owners encryption key address
                  description: >-
                    Defines an Locator object stored on chain, which represents
                    a owner( blockchain address) associated with a endpoint

                    uri for it's associated object store.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  uri:
                    type: string
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              OSLocatorsByURIResponse is the response type for the
              Query/OSLocatorsByURI RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: uri
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/locator/{owner}':
    get:
      summary: OSLocator returns an ObjectStoreLocator by its owner's address.
      operationId: OSLocator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locator:
                type: object
                properties:
                  owner:
                    type: string
                    title: account address the endpoint is owned by
                  locator_uri:
                    type: string
                    title: locator endpoint uri
                  encryption_key:
                    type: string
                    title: owners encryption key address
                description: >-
                  Defines an Locator object stored on chain, which represents a
                  owner( blockchain address) associated with a endpoint

                  uri for it's associated object store.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  owner:
                    type: string
            description: >-
              OSLocatorResponse is the response type for the Query/OSLocator RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
      tags:
        - Query
  /provenance/metadata/v1/locators/all:
    get:
      summary: OSAllLocators returns all ObjectStoreLocator entries.
      operationId: OSAllLocators
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locators:
                type: array
                items:
                  type: object
                  properties:
                    owner:
                      type: string
                      title: account address the endpoint is owned by
                    locator_uri:
                      type: string
                      title: locator endpoint uri
                    encryption_key:
                      type: string
                      title: owners encryption key address
                  description: >-
                    Defines an Locator object stored on chain, which represents
                    a owner( blockchain address) associated with a endpoint

                    uri for it's associated object store.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              OSAllLocatorsResponse is the response type for the
              Query/OSAllLocators RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/ownership/{address}':
    get:
      summary: >-
        Ownership returns the scope identifiers that list the given address as
        either a data or value owner.
      operationId: Ownership
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope_uuids:
                type: array
                items:
                  type: string
                description: A list of scope ids (uuid) associated with the given address.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  address:
                    type: string
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              OwnershipResponse is the response type for the Query/Ownership RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/params:
    get:
      summary: Params queries the parameters of x/metadata module.
      operationId: MetadataParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
              request:
                description: request is a copy of the request that generated these results.
                type: object
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/provenance/metadata/v1/record/{record_addr}':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether or not the scope
                      containing these records should be included.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether or not the sessions
                      containing these records should be included.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: path
          required: true
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: query
          required: false
          type: string
        - name: name
          description: name is the name of the record to look for.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether or not the scope containing
            these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether or not the sessions
            containing these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/record/{record_addr}/scope':
    get:
      summary: Scope searches for a scope.
      description: >-
        The scope id, if provided, must either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,

        e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if
        provided, must be a bech32 session address,

        e.g.
        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, that scope is returned.

        * If only a session_addr is provided, the scope containing that session
        is returned.

        * If only a record_addr is provided, the scope containing that record is
        returned.

        * If more than one of scope_id, session_addr, and record_addr are
        provided, and they don't refer to the same scope,

        a bad request is returned.


        Providing a session addr or record addr does not limit the sessions and
        records returned (if requested).

        Those parameters are only used to find the scope.


        By default, sessions and records are not included.

        Set include_sessions and/or include_records to true to include sessions
        and/or records.
      operationId: Scope3
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: scope is the wrapped scope result.
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions in this scope (if
                  requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records in this scope (if
                  requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_addr:
                    type: string
                    description: >-
                      session_addr is a bech32 session address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether or not the sessions
                      in the scope should be included.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether or not the records
                      in the scope should be included.
            description: ScopeResponse is the response type for the Query/Scope RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: path
          required: true
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: session_addr
          description: |-
            session_addr is a bech32 session address, e.g.
            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
          in: query
          required: false
          type: string
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether or not the sessions in the
            scope should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether or not the records in the
            scope should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/record/{record_addr}/session':
    get:
      summary: Sessions searches for sessions.
      description: >-
        The scope_id can either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.

        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can
        either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, all sessions in that scope are
        returned.

        * If only a session_id is provided, it must be an address, and that
        single session is returned.

        * If the session_id is a uuid, then either a scope_id or record_addr
        must also be provided, and that single session

        is returned.

        * If only a record_addr is provided, the session containing that record
        will be returned.

        * If a record_name is provided then either a scope_id, session_id as an
        address, or record_addr must also be

        provided, and the session containing that record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and is provided without a scope_id or
        record_addr.

        * A record_name is provided without any way to identify the scope (e.g.
        a scope_id, a session_id as an address, or

        a record_addr).

        * Two or more of scope_id, session_id as an address, and record_addr are
        provided and don't all refer to the same

        scope.

        * A record_addr (or scope_id and record_name) is provided with a
        session_id and that session does not contain such

        a record.

        * A record_addr and record_name are both provided, but reference
        different records.


        By default, the scope and records are not included.

        Set include_scope and/or include_records to true to include the scope
        and/or records.
      operationId: Sessions4
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these sessions (if
                  requested).
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: sessions is any number of wrapped session results.
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records contained in these
                  sessions (if requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  record_name:
                    type: string
                    description: >-
                      record_name is the name of the record to find the session
                      for in the provided scope.
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether or not the scope
                      containing these sessions should be included.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether or not the records
                      in these sessions should be included.
            description: >-
              SessionsResponse is the response type for the Query/Sessions RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: path
          required: true
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: query
          required: false
          type: string
        - name: record_name
          description: >-
            record_name is the name of the record to find the session for in the
            provided scope.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether or not the scope containing
            these sessions should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether or not the records in these
            sessions should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/records/all:
    get:
      summary: RecordsAll retrieves all records.
      operationId: RecordsAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records are the wrapped records.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              RecordsAllResponse is the response type for the Query/RecordsAll
              RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/recordspec/{specification_id}':
    get:
      summary: RecordSpecification returns a record specification for the given input.
      operationId: RecordSpecification
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              record_specification:
                type: object
                properties:
                  specification:
                    description: >-
                      specification is the on-chain record specification
                      message.
                    type: object
                    properties:
                      specification_id:
                        type: string
                        format: byte
                        title: unique identifier for this specification on chain
                      name:
                        type: string
                        title: >-
                          Name of Record that will be created when this
                          specification is used
                      inputs:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              title: name for this input
                            type_name:
                              type: string
                              title: >-
                                a type_name (typically a proto name or
                                class_name)
                            record_id:
                              type: string
                              format: byte
                              title: >-
                                the address of a record on chain (For
                                Established Records)
                            hash:
                              type: string
                              title: >-
                                the hash of an off-chain piece of information
                                (For Proposed Records)
                          title: >-
                            InputSpecification defines a name, type_name, and
                            source reference (either on or off chain) to define
                            an input

                            parameter
                        title: >-
                          A set of inputs that must be satisified to apply this
                          RecordSpecification and create a Record
                      type_name:
                        type: string
                        title: >-
                          A type name for data associated with this record
                          (typically a class or proto name)
                      result_type:
                        title: >-
                          Type of result for this record specification (must be
                          RECORD or RECORD_LIST)
                        type: string
                        enum:
                          - DEFINITION_TYPE_UNSPECIFIED
                          - DEFINITION_TYPE_PROPOSED
                          - DEFINITION_TYPE_RECORD
                          - DEFINITION_TYPE_RECORD_LIST
                        default: DEFINITION_TYPE_UNSPECIFIED
                        description: >-
                          - DEFINITION_TYPE_UNSPECIFIED:
                          DEFINITION_TYPE_UNSPECIFIED indicates an
                          unknown/invalid value
                           - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                           - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                           - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                          the same name
                      responsible_parties:
                        type: array
                        items:
                          type: string
                          enum:
                            - PARTY_TYPE_UNSPECIFIED
                            - PARTY_TYPE_ORIGINATOR
                            - PARTY_TYPE_SERVICER
                            - PARTY_TYPE_INVESTOR
                            - PARTY_TYPE_CUSTODIAN
                            - PARTY_TYPE_OWNER
                            - PARTY_TYPE_AFFILIATE
                            - PARTY_TYPE_OMNIBUS
                            - PARTY_TYPE_PROVENANCE
                            - PARTY_TYPE_CONTROLLER
                            - PARTY_TYPE_VALIDATOR
                          default: PARTY_TYPE_UNSPECIFIED
                          description: >-
                            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is
                            an error condition
                             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                          title: >-
                            PartyType are the different roles parties on a
                            contract may use
                        title: Type of party responsible for this record
                    title: >-
                      RecordSpecification defines the specification for a Record
                      including allowed/required inputs/outputs
                  record_spec_id_info:
                    description: >-
                      record_spec_id_info contains information about the
                      id/address of the record specification.
                    type: object
                    properties:
                      record_spec_id:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id is the raw bytes of the record
                          specification address.
                      record_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id_prefix is the prefix portion of the
                          record_spec_id.
                      record_spec_id_contract_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id_contract_spec_uuid is the
                          contract_spec_uuid portion of the record_spec_id.
                      record_spec_id_hashed_name:
                        type: string
                        format: byte
                        description: >-
                          record_spec_id_hashed_name is the hashed name portion
                          of the record_spec_id.
                      record_spec_addr:
                        type: string
                        description: >-
                          record_spec_addr is the bech32 string version of the
                          record_spec_id.
                      contract_spec_id_info:
                        description: >-
                          contract_spec_id_info is information about the
                          contract spec id referenced in the record_spec_id.
                        type: object
                        properties:
                          contract_spec_id:
                            type: string
                            format: byte
                            description: >-
                              contract_spec_id is the raw bytes of the contract
                              specification address.
                          contract_spec_id_prefix:
                            type: string
                            format: byte
                            description: >-
                              contract_spec_id_prefix is the prefix portion of
                              the contract_spec_id.
                          contract_spec_id_contract_spec_uuid:
                            type: string
                            format: byte
                            description: >-
                              contract_spec_id_contract_spec_uuid is the
                              contract_spec_uuid portion of the
                              contract_spec_id.
                          contract_spec_addr:
                            type: string
                            description: >-
                              contract_spec_addr is the bech32 string version of
                              the contract_spec_id.
                          contract_spec_uuid:
                            type: string
                            description: >-
                              contract_spec_uuid is the uuid hex string of the
                              contract_spec_id_contract_spec_uuid.
                description: >-
                  RecordSpecificationWrapper contains a single record
                  specification and some extra identifiers for it.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  specification_id:
                    type: string
                    description: >-
                      specification_id can either be a uuid, e.g.
                      def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
                      specification

                      address, e.g.
                      contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

                      It can also be a record specification address, e.g.

                      recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
                  name:
                    type: string
                    description: >-
                      name is the name of the record to look up.

                      It is required if the specification_id is a uuid or
                      contract specification address.

                      It is ignored if the specification_id is a record
                      specification address.
            description: >-
              RecordSpecificationResponse is the response type for the
              Query/RecordSpecification RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: specification_id
          description: >-
            specification_id can either be a uuid, e.g.
            def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
            specification

            address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

            It can also be a record specification address, e.g.

            recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
          in: path
          required: true
          type: string
        - name: name
          description: >-
            name is the name of the record to look up.

            It is required if the specification_id is a uuid or contract
            specification address.

            It is ignored if the specification_id is a record specification
            address.
          in: query
          required: false
          type: string
      tags:
        - Query
  /provenance/metadata/v1/recordspecs/all:
    get:
      summary: RecordSpecificationsAll retrieves all record specifications.
      operationId: RecordSpecificationsAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              record_specifications:
                type: array
                items:
                  type: object
                  properties:
                    specification:
                      description: >-
                        specification is the on-chain record specification
                        message.
                      type: object
                      properties:
                        specification_id:
                          type: string
                          format: byte
                          title: unique identifier for this specification on chain
                        name:
                          type: string
                          title: >-
                            Name of Record that will be created when this
                            specification is used
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                title: name for this input
                              type_name:
                                type: string
                                title: >-
                                  a type_name (typically a proto name or
                                  class_name)
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                            title: >-
                              InputSpecification defines a name, type_name, and
                              source reference (either on or off chain) to
                              define an input

                              parameter
                          title: >-
                            A set of inputs that must be satisified to apply
                            this RecordSpecification and create a Record
                        type_name:
                          type: string
                          title: >-
                            A type name for data associated with this record
                            (typically a class or proto name)
                        result_type:
                          title: >-
                            Type of result for this record specification (must
                            be RECORD or RECORD_LIST)
                          type: string
                          enum:
                            - DEFINITION_TYPE_UNSPECIFIED
                            - DEFINITION_TYPE_PROPOSED
                            - DEFINITION_TYPE_RECORD
                            - DEFINITION_TYPE_RECORD_LIST
                          default: DEFINITION_TYPE_UNSPECIFIED
                          description: >-
                            - DEFINITION_TYPE_UNSPECIFIED:
                            DEFINITION_TYPE_UNSPECIFIED indicates an
                            unknown/invalid value
                             - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                             - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                             - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                            the same name
                        responsible_parties:
                          type: array
                          items:
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            title: >-
                              PartyType are the different roles parties on a
                              contract may use
                          title: Type of party responsible for this record
                      title: >-
                        RecordSpecification defines the specification for a
                        Record including allowed/required inputs/outputs
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordSpecificationWrapper contains a single record
                    specification and some extra identifiers for it.
                description: record_specifications are the wrapped record specifications.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              RecordSpecificationsAllResponse is the response type for the
              Query/RecordSpecificationsAll RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}':
    get:
      summary: Scope searches for a scope.
      description: >-
        The scope id, if provided, must either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,

        e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if
        provided, must be a bech32 session address,

        e.g.
        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, that scope is returned.

        * If only a session_addr is provided, the scope containing that session
        is returned.

        * If only a record_addr is provided, the scope containing that record is
        returned.

        * If more than one of scope_id, session_addr, and record_addr are
        provided, and they don't refer to the same scope,

        a bad request is returned.


        Providing a session addr or record addr does not limit the sessions and
        records returned (if requested).

        Those parameters are only used to find the scope.


        By default, sessions and records are not included.

        Set include_sessions and/or include_records to true to include sessions
        and/or records.
      operationId: Scope
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: scope is the wrapped scope result.
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions in this scope (if
                  requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records in this scope (if
                  requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_addr:
                    type: string
                    description: >-
                      session_addr is a bech32 session address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether or not the sessions
                      in the scope should be included.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether or not the records
                      in the scope should be included.
            description: ScopeResponse is the response type for the Query/Scope RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: session_addr
          description: |-
            session_addr is a bech32 session address, e.g.
            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
          in: query
          required: false
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether or not the sessions in the
            scope should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether or not the records in the
            scope should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/record/{name}':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records3
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether or not the scope
                      containing these records should be included.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether or not the sessions
                      containing these records should be included.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: name
          description: name is the name of the record to look for
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether or not the scope containing
            these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether or not the sessions
            containing these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/record/{record_name}/session':
    get:
      summary: Sessions searches for sessions.
      description: >-
        The scope_id can either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.

        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can
        either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, all sessions in that scope are
        returned.

        * If only a session_id is provided, it must be an address, and that
        single session is returned.

        * If the session_id is a uuid, then either a scope_id or record_addr
        must also be provided, and that single session

        is returned.

        * If only a record_addr is provided, the session containing that record
        will be returned.

        * If a record_name is provided then either a scope_id, session_id as an
        address, or record_addr must also be

        provided, and the session containing that record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and is provided without a scope_id or
        record_addr.

        * A record_name is provided without any way to identify the scope (e.g.
        a scope_id, a session_id as an address, or

        a record_addr).

        * Two or more of scope_id, session_id as an address, and record_addr are
        provided and don't all refer to the same

        scope.

        * A record_addr (or scope_id and record_name) is provided with a
        session_id and that session does not contain such

        a record.

        * A record_addr and record_name are both provided, but reference
        different records.


        By default, the scope and records are not included.

        Set include_scope and/or include_records to true to include the scope
        and/or records.
      operationId: Sessions5
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these sessions (if
                  requested).
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: sessions is any number of wrapped session results.
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records contained in these
                  sessions (if requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  record_name:
                    type: string
                    description: >-
                      record_name is the name of the record to find the session
                      for in the provided scope.
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether or not the scope
                      containing these sessions should be included.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether or not the records
                      in these sessions should be included.
            description: >-
              SessionsResponse is the response type for the Query/Sessions RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: record_name
          description: >-
            record_name is the name of the record to find the session for in the
            provided scope.
          in: path
          required: true
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: query
          required: false
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether or not the scope containing
            these sessions should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether or not the records in these
            sessions should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/records':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records2
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether or not the scope
                      containing these records should be included.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether or not the sessions
                      containing these records should be included.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: query
          required: false
          type: string
        - name: name
          description: name is the name of the record to look for.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether or not the scope containing
            these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether or not the sessions
            containing these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/session/{session_id}':
    get:
      summary: Sessions searches for sessions.
      description: >-
        The scope_id can either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.

        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can
        either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, all sessions in that scope are
        returned.

        * If only a session_id is provided, it must be an address, and that
        single session is returned.

        * If the session_id is a uuid, then either a scope_id or record_addr
        must also be provided, and that single session

        is returned.

        * If only a record_addr is provided, the session containing that record
        will be returned.

        * If a record_name is provided then either a scope_id, session_id as an
        address, or record_addr must also be

        provided, and the session containing that record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and is provided without a scope_id or
        record_addr.

        * A record_name is provided without any way to identify the scope (e.g.
        a scope_id, a session_id as an address, or

        a record_addr).

        * Two or more of scope_id, session_id as an address, and record_addr are
        provided and don't all refer to the same

        scope.

        * A record_addr (or scope_id and record_name) is provided with a
        session_id and that session does not contain such

        a record.

        * A record_addr and record_name are both provided, but reference
        different records.


        By default, the scope and records are not included.

        Set include_scope and/or include_records to true to include the scope
        and/or records.
      operationId: Sessions3
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these sessions (if
                  requested).
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: sessions is any number of wrapped session results.
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records contained in these
                  sessions (if requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  record_name:
                    type: string
                    description: >-
                      record_name is the name of the record to find the session
                      for in the provided scope.
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether or not the scope
                      containing these sessions should be included.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether or not the records
                      in these sessions should be included.
            description: >-
              SessionsResponse is the response type for the Query/Sessions RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: record_name
          description: >-
            record_name is the name of the record to find the session for in the
            provided scope.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether or not the scope containing
            these sessions should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether or not the records in these
            sessions should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/session/{session_id}/record/{name}':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records5
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether or not the scope
                      containing these records should be included.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether or not the sessions
                      containing these records should be included.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: path
          required: true
          type: string
        - name: name
          description: name is the name of the record to look for
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether or not the scope containing
            these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether or not the sessions
            containing these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/session/{session_id}/records':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records4
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether or not the scope
                      containing these records should be included.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether or not the sessions
                      containing these records should be included.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: name
          description: name is the name of the record to look for.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether or not the scope containing
            these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether or not the sessions
            containing these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scope/{scope_id}/sessions':
    get:
      summary: Sessions searches for sessions.
      description: >-
        The scope_id can either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.

        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can
        either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, all sessions in that scope are
        returned.

        * If only a session_id is provided, it must be an address, and that
        single session is returned.

        * If the session_id is a uuid, then either a scope_id or record_addr
        must also be provided, and that single session

        is returned.

        * If only a record_addr is provided, the session containing that record
        will be returned.

        * If a record_name is provided then either a scope_id, session_id as an
        address, or record_addr must also be

        provided, and the session containing that record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and is provided without a scope_id or
        record_addr.

        * A record_name is provided without any way to identify the scope (e.g.
        a scope_id, a session_id as an address, or

        a record_addr).

        * Two or more of scope_id, session_id as an address, and record_addr are
        provided and don't all refer to the same

        scope.

        * A record_addr (or scope_id and record_name) is provided with a
        session_id and that session does not contain such

        a record.

        * A record_addr and record_name are both provided, but reference
        different records.


        By default, the scope and records are not included.

        Set include_scope and/or include_records to true to include the scope
        and/or records.
      operationId: Sessions2
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these sessions (if
                  requested).
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: sessions is any number of wrapped session results.
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records contained in these
                  sessions (if requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  record_name:
                    type: string
                    description: >-
                      record_name is the name of the record to find the session
                      for in the provided scope.
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether or not the scope
                      containing these sessions should be included.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether or not the records
                      in these sessions should be included.
            description: >-
              SessionsResponse is the response type for the Query/Sessions RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: path
          required: true
          type: string
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: query
          required: false
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: record_name
          description: >-
            record_name is the name of the record to find the session for in the
            provided scope.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether or not the scope containing
            these sessions should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether or not the records in these
            sessions should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/scopes/all:
    get:
      summary: ScopesAll retrieves all scopes.
      operationId: ScopesAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scopes:
                type: array
                items:
                  type: object
                  properties:
                    scope:
                      description: scope is the on-chain scope message.
                      type: object
                      properties:
                        scope_id:
                          type: string
                          format: byte
                          title: >-
                            Unique ID for this scope.  Implements sdk.Address
                            interface for use where addresses are required in
                            Cosmos
                        specification_id:
                          type: string
                          format: byte
                          title: >-
                            the scope specification that contains the
                            specifications for data elements allowed within this
                            scope
                        owners:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          description: >-
                            These parties represent top level owners of the
                            records within.  These parties must sign any
                            requests that modify

                            the data within the scope.  These addresses are in
                            union with parties listed on the sessions.
                        data_access:
                          type: array
                          items:
                            type: string
                          description: >-
                            Addessses in this list are authorized to recieve
                            off-chain data associated with this scope.
                        value_owner_address:
                          type: string
                          description: >-
                            An address that controls the value associated with
                            this scope.  Standard blockchain accounts and marker
                            accounts

                            are supported for this value.  This attribute may
                            only be changed by the entity indicated once it is
                            set.
                    scope_id_info:
                      description: >-
                        scope_id_info contains information about the id/address
                        of the scope.
                      type: object
                      properties:
                        scope_id:
                          type: string
                          format: byte
                          description: scope_id is the raw bytes of the scope address.
                        scope_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            scope_id_prefix is the prefix portion of the
                            scope_id.
                        scope_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            scope_id_scope_uuid is the scope_uuid portion of the
                            scope_id.
                        scope_addr:
                          type: string
                          description: >-
                            scope_addr is the bech32 string version of the
                            scope_id.
                        scope_uuid:
                          type: string
                          description: >-
                            scope_uuid is the uuid hex string of the
                            scope_id_scope_uuid.
                    scope_spec_id_info:
                      description: >-
                        scope_spec_id_info contains information about the
                        id/address of the scope specification.
                      type: object
                      properties:
                        scope_spec_id:
                          type: string
                          format: byte
                          description: >-
                            scope_spec_id is the raw bytes of the scope
                            specification address.
                        scope_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            scope_spec_id_prefix is the prefix portion of the
                            scope_spec_id.
                        scope_spec_id_scope_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                            portion of the scope_spec_id.
                        scope_spec_addr:
                          type: string
                          description: >-
                            scope_spec_addr is the bech32 string version of the
                            scope_spec_id.
                        scope_spec_uuid:
                          type: string
                          description: >-
                            scope_spec_uuid is the uuid hex string of the
                            scope_spec_id_scope_spec_uuid.
                  description: SessionWrapper contains a single scope and its uuid.
                description: scopes are the wrapped scopes.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              ScopesAllResponse is the response type for the Query/ScopesAll RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/scopespec/{specification_id}':
    get:
      summary: >-
        ScopeSpecification returns a scope specification for the given
        specification id.
      description: >-
        The specification_id can either be a uuid, e.g.
        dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope

        specification address, e.g.
        scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
      operationId: ScopeSpecification
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope_specification:
                description: scope_specification is the wrapped scope specification.
                type: object
                properties:
                  specification:
                    description: specification is the on-chain scope specification message.
                    type: object
                    properties:
                      specification_id:
                        type: string
                        format: byte
                        title: unique identifier for this specification on chain
                      description:
                        description: General information about this scope specification.
                        type: object
                        properties:
                          name:
                            type: string
                            description: A Name for this thing.
                          description:
                            type: string
                            description: A description of this thing.
                          website_url:
                            type: string
                            description: URL to find even more info.
                          icon_url:
                            type: string
                            description: URL of an icon.
                      owner_addresses:
                        type: array
                        items:
                          type: string
                        description: Addresses of the owners of this scope specification.
                      parties_involved:
                        type: array
                        items:
                          type: string
                          enum:
                            - PARTY_TYPE_UNSPECIFIED
                            - PARTY_TYPE_ORIGINATOR
                            - PARTY_TYPE_SERVICER
                            - PARTY_TYPE_INVESTOR
                            - PARTY_TYPE_CUSTODIAN
                            - PARTY_TYPE_OWNER
                            - PARTY_TYPE_AFFILIATE
                            - PARTY_TYPE_OMNIBUS
                            - PARTY_TYPE_PROVENANCE
                            - PARTY_TYPE_CONTROLLER
                            - PARTY_TYPE_VALIDATOR
                          default: PARTY_TYPE_UNSPECIFIED
                          description: >-
                            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is
                            an error condition
                             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                          title: >-
                            PartyType are the different roles parties on a
                            contract may use
                        title: >-
                          A list of parties that must be present on a scope (and
                          their associated roles)
                      contract_spec_ids:
                        type: array
                        items:
                          type: string
                          format: byte
                        description: >-
                          A list of contract specification ids allowed for a
                          scope based on this specification.
                    title: >-
                      ScopeSpecification defines the required parties,
                      resources, conditions, and consideration outputs for a
                      contract
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  specification_id:
                    type: string
                    description: >-
                      specification_id can either be a uuid, e.g.
                      dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope
                      specification

                      address, e.g.
                      scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
            description: >-
              ScopeSpecificationResponse is the response type for the
              Query/ScopeSpecification RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: specification_id
          description: >-
            specification_id can either be a uuid, e.g.
            dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope specification

            address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
          in: path
          required: true
          type: string
      tags:
        - Query
  /provenance/metadata/v1/scopespecs/all:
    get:
      summary: ScopeSpecificationsAll retrieves all scope specifications.
      operationId: ScopeSpecificationsAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope_specifications:
                type: array
                items:
                  type: object
                  properties:
                    specification:
                      description: >-
                        specification is the on-chain scope specification
                        message.
                      type: object
                      properties:
                        specification_id:
                          type: string
                          format: byte
                          title: unique identifier for this specification on chain
                        description:
                          description: General information about this scope specification.
                          type: object
                          properties:
                            name:
                              type: string
                              description: A Name for this thing.
                            description:
                              type: string
                              description: A description of this thing.
                            website_url:
                              type: string
                              description: URL to find even more info.
                            icon_url:
                              type: string
                              description: URL of an icon.
                        owner_addresses:
                          type: array
                          items:
                            type: string
                          description: Addresses of the owners of this scope specification.
                        parties_involved:
                          type: array
                          items:
                            type: string
                            enum:
                              - PARTY_TYPE_UNSPECIFIED
                              - PARTY_TYPE_ORIGINATOR
                              - PARTY_TYPE_SERVICER
                              - PARTY_TYPE_INVESTOR
                              - PARTY_TYPE_CUSTODIAN
                              - PARTY_TYPE_OWNER
                              - PARTY_TYPE_AFFILIATE
                              - PARTY_TYPE_OMNIBUS
                              - PARTY_TYPE_PROVENANCE
                              - PARTY_TYPE_CONTROLLER
                              - PARTY_TYPE_VALIDATOR
                            default: PARTY_TYPE_UNSPECIFIED
                            description: >-
                              - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                              is an error condition
                               - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                               - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                               - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                               - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                               - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                               - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                               - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                               - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                               - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                               - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                            title: >-
                              PartyType are the different roles parties on a
                              contract may use
                          title: >-
                            A list of parties that must be present on a scope
                            (and their associated roles)
                        contract_spec_ids:
                          type: array
                          items:
                            type: string
                            format: byte
                          description: >-
                            A list of contract specification ids allowed for a
                            scope based on this specification.
                      title: >-
                        ScopeSpecification defines the required parties,
                        resources, conditions, and consideration outputs for a
                        contract
                    scope_spec_id_info:
                      description: >-
                        scope_spec_id_info contains information about the
                        id/address of the scope specification.
                      type: object
                      properties:
                        scope_spec_id:
                          type: string
                          format: byte
                          description: >-
                            scope_spec_id is the raw bytes of the scope
                            specification address.
                        scope_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            scope_spec_id_prefix is the prefix portion of the
                            scope_spec_id.
                        scope_spec_id_scope_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                            portion of the scope_spec_id.
                        scope_spec_addr:
                          type: string
                          description: >-
                            scope_spec_addr is the bech32 string version of the
                            scope_spec_id.
                        scope_spec_uuid:
                          type: string
                          description: >-
                            scope_spec_uuid is the uuid hex string of the
                            scope_spec_id_scope_spec_uuid.
                  description: >-
                    ScopeSpecificationWrapper contains a single scope
                    specification and some extra identifiers for it.
                description: scope_specifications are the wrapped scope specifications.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              ScopeSpecificationsAllResponse is the response type for the
              Query/ScopeSpecificationsAll RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/session/{session_addr}/scope':
    get:
      summary: Scope searches for a scope.
      description: >-
        The scope id, if provided, must either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,

        e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if
        provided, must be a bech32 session address,

        e.g.
        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, that scope is returned.

        * If only a session_addr is provided, the scope containing that session
        is returned.

        * If only a record_addr is provided, the scope containing that record is
        returned.

        * If more than one of scope_id, session_addr, and record_addr are
        provided, and they don't refer to the same scope,

        a bad request is returned.


        Providing a session addr or record addr does not limit the sessions and
        records returned (if requested).

        Those parameters are only used to find the scope.


        By default, sessions and records are not included.

        Set include_sessions and/or include_records to true to include sessions
        and/or records.
      operationId: Scope2
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: scope is the wrapped scope result.
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions in this scope (if
                  requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records in this scope (if
                  requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_addr:
                    type: string
                    description: >-
                      session_addr is a bech32 session address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether or not the sessions
                      in the scope should be included.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether or not the records
                      in the scope should be included.
            description: ScopeResponse is the response type for the Query/Scope RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: session_addr
          description: |-
            session_addr is a bech32 session address, e.g.
            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
          in: path
          required: true
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether or not the sessions in the
            scope should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether or not the records in the
            scope should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/session/{session_id}':
    get:
      summary: Sessions searches for sessions.
      description: >-
        The scope_id can either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.

        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can
        either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        record_addr, if provided, must be a

        bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.


        * If only a scope_id is provided, all sessions in that scope are
        returned.

        * If only a session_id is provided, it must be an address, and that
        single session is returned.

        * If the session_id is a uuid, then either a scope_id or record_addr
        must also be provided, and that single session

        is returned.

        * If only a record_addr is provided, the session containing that record
        will be returned.

        * If a record_name is provided then either a scope_id, session_id as an
        address, or record_addr must also be

        provided, and the session containing that record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and is provided without a scope_id or
        record_addr.

        * A record_name is provided without any way to identify the scope (e.g.
        a scope_id, a session_id as an address, or

        a record_addr).

        * Two or more of scope_id, session_id as an address, and record_addr are
        provided and don't all refer to the same

        scope.

        * A record_addr (or scope_id and record_name) is provided with a
        session_id and that session does not contain such

        a record.

        * A record_addr and record_name are both provided, but reference
        different records.


        By default, the scope and records are not included.

        Set include_scope and/or include_records to true to include the scope
        and/or records.
      operationId: Sessions
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these sessions (if
                  requested).
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: sessions is any number of wrapped session results.
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: >-
                  records is any number of wrapped records contained in these
                  sessions (if requested).
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  record_name:
                    type: string
                    description: >-
                      record_name is the name of the record to find the session
                      for in the provided scope.
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether or not the scope
                      containing these sessions should be included.
                  include_records:
                    type: boolean
                    format: boolean
                    description: >-
                      include_records is a flag for whether or not the records
                      in these sessions should be included.
            description: >-
              SessionsResponse is the response type for the Query/Sessions RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: path
          required: true
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: record_name
          description: >-
            record_name is the name of the record to find the session for in the
            provided scope.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether or not the scope containing
            these sessions should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_records
          description: >-
            include_records is a flag for whether or not the records in these
            sessions should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/session/{session_id}/record/{name}':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records7
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether or not the scope
                      containing these records should be included.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether or not the sessions
                      containing these records should be included.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: path
          required: true
          type: string
        - name: name
          description: name is the name of the record to look for
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether or not the scope containing
            these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether or not the sessions
            containing these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/session/{session_id}/records':
    get:
      summary: Records searches for records.
      description: >-
        The record_addr, if provided, must be a bech32 record address, e.g.

        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The
        scope-id can either be scope uuid, e.g.

        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,

        the session_id can either be a uuid or session address, e.g.

        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The
        name is the name of the record you're

        interested in.


        * If only a record_addr is provided, that single record will be
        returned.

        * If only a scope_id is provided, all records in that scope will be
        returned.

        * If only a session_id (or scope_id/session_id), all records in that
        session will be returned.

        * If a name is provided with a scope_id and/or session_id, that single
        record will be returned.


        A bad request is returned if:

        * The session_id is a uuid and no scope_id is provided.

        * There are two or more of record_addr, session_id, and scope_id, and
        they don't all refer to the same scope.

        * A name is provided, but not a scope_id and/or a session_id.

        * A name and record_addr are provided and the name doesn't match the
        record_addr.


        By default, the scope and sessions are not included.

        Set include_scope and/or include_sessions to true to include the scope
        and/or sessions.
      operationId: Records6
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope:
                description: >-
                  scope is the wrapped scope that holds these records (if
                  requested).
                type: object
                properties:
                  scope:
                    description: scope is the on-chain scope message.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        title: >-
                          Unique ID for this scope.  Implements sdk.Address
                          interface for use where addresses are required in
                          Cosmos
                      specification_id:
                        type: string
                        format: byte
                        title: >-
                          the scope specification that contains the
                          specifications for data elements allowed within this
                          scope
                      owners:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                              title: address of the account (on chain)
                            role:
                              type: string
                              enum:
                                - PARTY_TYPE_UNSPECIFIED
                                - PARTY_TYPE_ORIGINATOR
                                - PARTY_TYPE_SERVICER
                                - PARTY_TYPE_INVESTOR
                                - PARTY_TYPE_CUSTODIAN
                                - PARTY_TYPE_OWNER
                                - PARTY_TYPE_AFFILIATE
                                - PARTY_TYPE_OMNIBUS
                                - PARTY_TYPE_PROVENANCE
                                - PARTY_TYPE_CONTROLLER
                                - PARTY_TYPE_VALIDATOR
                              default: PARTY_TYPE_UNSPECIFIED
                              description: >-
                                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED
                                is an error condition
                                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                              title: >-
                                PartyType are the different roles parties on a
                                contract may use
                          title: >-
                            A Party is an address with/in a given role
                            associated with a contract
                        description: >-
                          These parties represent top level owners of the
                          records within.  These parties must sign any requests
                          that modify

                          the data within the scope.  These addresses are in
                          union with parties listed on the sessions.
                      data_access:
                        type: array
                        items:
                          type: string
                        description: >-
                          Addessses in this list are authorized to recieve
                          off-chain data associated with this scope.
                      value_owner_address:
                        type: string
                        description: >-
                          An address that controls the value associated with
                          this scope.  Standard blockchain accounts and marker
                          accounts

                          are supported for this value.  This attribute may only
                          be changed by the entity indicated once it is set.
                  scope_id_info:
                    description: >-
                      scope_id_info contains information about the id/address of
                      the scope.
                    type: object
                    properties:
                      scope_id:
                        type: string
                        format: byte
                        description: scope_id is the raw bytes of the scope address.
                      scope_id_prefix:
                        type: string
                        format: byte
                        description: scope_id_prefix is the prefix portion of the scope_id.
                      scope_id_scope_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_id_scope_uuid is the scope_uuid portion of the
                          scope_id.
                      scope_addr:
                        type: string
                        description: >-
                          scope_addr is the bech32 string version of the
                          scope_id.
                      scope_uuid:
                        type: string
                        description: >-
                          scope_uuid is the uuid hex string of the
                          scope_id_scope_uuid.
                  scope_spec_id_info:
                    description: >-
                      scope_spec_id_info contains information about the
                      id/address of the scope specification.
                    type: object
                    properties:
                      scope_spec_id:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id is the raw bytes of the scope
                          specification address.
                      scope_spec_id_prefix:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_prefix is the prefix portion of the
                          scope_spec_id.
                      scope_spec_id_scope_spec_uuid:
                        type: string
                        format: byte
                        description: >-
                          scope_spec_id_scope_spec_uuid is the scope_spec_uuid
                          portion of the scope_spec_id.
                      scope_spec_addr:
                        type: string
                        description: >-
                          scope_spec_addr is the bech32 string version of the
                          scope_spec_id.
                      scope_spec_uuid:
                        type: string
                        description: >-
                          scope_spec_uuid is the uuid hex string of the
                          scope_spec_id_scope_spec_uuid.
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: >-
                  sessions is any number of wrapped sessions that hold these
                  records (if requested).
              records:
                type: array
                items:
                  type: object
                  properties:
                    record:
                      description: record is the on-chain record message.
                      type: object
                      properties:
                        name:
                          type: string
                          title: >-
                            name/identifier for this record.  Value must be
                            unique within the scope.  Also known as a Fact name
                        session_id:
                          type: string
                          format: byte
                          title: >-
                            id of the session context that was used to create
                            this record (use with filtered kvprefix iterator)
                        process:
                          title: >-
                            process contain information used to uniquely
                            identify an execution on or off chain that generated
                            this record
                          type: object
                          properties:
                            address:
                              type: string
                              title: >-
                                the address of a smart contract used for this
                                process
                            hash:
                              type: string
                              title: the hash of an off-chain process used
                            name:
                              type: string
                              title: >-
                                a name associated with the process (type_name,
                                classname or smart contract common name)
                            method:
                              type: string
                              title: >-
                                method is a name or reference to a specific
                                operation (method) within a class/contract that
                                was invoked
                        inputs:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: >-
                                  Name value included to link back to the
                                  definition spec.
                              record_id:
                                type: string
                                format: byte
                                title: >-
                                  the address of a record on chain (For
                                  Established Records)
                              hash:
                                type: string
                                title: >-
                                  the hash of an off-chain piece of information
                                  (For Proposed Records)
                              type_name:
                                type: string
                                title: from proposed fact structure to unmarshal
                              status:
                                title: >-
                                  Indicates if this input was a recorded fact on
                                  chain or just a given hashed input
                                type: string
                                enum:
                                  - RECORD_INPUT_STATUS_UNSPECIFIED
                                  - RECORD_INPUT_STATUS_PROPOSED
                                  - RECORD_INPUT_STATUS_RECORD
                                default: RECORD_INPUT_STATUS_UNSPECIFIED
                                description: >-
                                  - RECORD_INPUT_STATUS_UNSPECIFIED:
                                  RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                                  invalid/unknown input type
                                   - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                                   - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                            title: Tracks the inputs used to establish this record
                          title: >-
                            inputs used with the process to achieve the output
                            on this record
                        outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              hash:
                                type: string
                                title: >-
                                  Hash of the data output that was
                                  output/generated for this record
                              status:
                                title: >-
                                  Status of the process execution associated
                                  with this output indicating success,failure,
                                  or pending
                                type: string
                                enum:
                                  - RESULT_STATUS_UNSPECIFIED
                                  - RESULT_STATUS_PASS
                                  - RESULT_STATUS_SKIP
                                  - RESULT_STATUS_FAIL
                                default: RESULT_STATUS_UNSPECIFIED
                                description: >-
                                  - RESULT_STATUS_UNSPECIFIED:
                                  RESULT_STATUS_UNSPECIFIED indicates an unset
                                  condition
                                   - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                                   - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                                   - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                            title: >-
                              RecordOutput encapsulates the output of a process
                              recorded on chain
                          title: >-
                            output(s) is the results of executing the process on
                            the given process indicated in this record
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            specification_id is the id of the record
                            specification that was used to create this record.
                      title: >-
                        A record (of fact) is attached to a session or each
                        consideration output from a contract
                    record_id_info:
                      description: >-
                        record_id_info contains information about the id/address
                        of the record.
                      type: object
                      properties:
                        record_id:
                          type: string
                          format: byte
                          description: record_id is the raw bytes of the record address.
                        record_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_id_prefix is the prefix portion of the
                            record_id.
                        record_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_id_scope_uuid is the scope_uuid portion of
                            the record_id.
                        record_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_id_hashed_name is the hashed name portion of
                            the record_id.
                        record_addr:
                          type: string
                          description: >-
                            record_addr is the bech32 string version of the
                            record_id.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the record_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    record_spec_id_info:
                      description: >-
                        record_spec_id_info contains information about the
                        id/address of the record specification.
                      type: object
                      properties:
                        record_spec_id:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id is the raw bytes of the record
                            specification address.
                        record_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_prefix is the prefix portion of the
                            record_spec_id.
                        record_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the record_spec_id.
                        record_spec_id_hashed_name:
                          type: string
                          format: byte
                          description: >-
                            record_spec_id_hashed_name is the hashed name
                            portion of the record_spec_id.
                        record_spec_addr:
                          type: string
                          description: >-
                            record_spec_addr is the bech32 string version of the
                            record_spec_id.
                        contract_spec_id_info:
                          description: >-
                            contract_spec_id_info is information about the
                            contract spec id referenced in the record_spec_id.
                          type: object
                          properties:
                            contract_spec_id:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id is the raw bytes of the
                                contract specification address.
                            contract_spec_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_prefix is the prefix portion of
                                the contract_spec_id.
                            contract_spec_id_contract_spec_uuid:
                              type: string
                              format: byte
                              description: >-
                                contract_spec_id_contract_spec_uuid is the
                                contract_spec_uuid portion of the
                                contract_spec_id.
                            contract_spec_addr:
                              type: string
                              description: >-
                                contract_spec_addr is the bech32 string version
                                of the contract_spec_id.
                            contract_spec_uuid:
                              type: string
                              description: >-
                                contract_spec_uuid is the uuid hex string of the
                                contract_spec_id_contract_spec_uuid.
                  description: >-
                    RecordWrapper contains a single record and some extra
                    identifiers for it.
                description: records is any number of wrapped record results.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  record_addr:
                    type: string
                    description: >-
                      record_addr is a bech32 record address, e.g.
                      record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
                  scope_id:
                    type: string
                    description: >-
                      scope_id can either be a uuid, e.g.
                      91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope
                      address, e.g.

                      scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
                  session_id:
                    type: string
                    description: >-
                      session_id can either be a uuid, e.g.
                      5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session
                      address, e.g.

                      session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
                      This can only be a uuid if a scope_id is also

                      provided.
                  name:
                    type: string
                    title: name is the name of the record to look for
                  include_scope:
                    type: boolean
                    format: boolean
                    description: >-
                      include_scope is a flag for whether or not the scope
                      containing these records should be included.
                  include_sessions:
                    type: boolean
                    format: boolean
                    description: >-
                      include_sessions is a flag for whether or not the sessions
                      containing these records should be included.
            description: >-
              RecordsResponse is the response type for the Query/Records RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: session_id
          description: >-
            session_id can either be a uuid, e.g.
            5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
            e.g.

            session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
            This can only be a uuid if a scope_id is also

            provided.
          in: path
          required: true
          type: string
        - name: record_addr
          description: >-
            record_addr is a bech32 record address, e.g.
            record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          in: query
          required: false
          type: string
        - name: scope_id
          description: >-
            scope_id can either be a uuid, e.g.
            91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

            scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          in: query
          required: false
          type: string
        - name: name
          description: name is the name of the record to look for.
          in: query
          required: false
          type: string
        - name: include_scope
          description: >-
            include_scope is a flag for whether or not the scope containing
            these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: include_sessions
          description: >-
            include_sessions is a flag for whether or not the sessions
            containing these records should be included.
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/metadata/v1/sessions/all:
    get:
      summary: SessionsAll retrieves all sessions.
      operationId: SessionsAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              sessions:
                type: array
                items:
                  type: object
                  properties:
                    session:
                      description: session is the on-chain session message.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                        specification_id:
                          type: string
                          format: byte
                          description: >-
                            unique id of the contract specification that was
                            used to create this session.
                        parties:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                title: address of the account (on chain)
                              role:
                                type: string
                                enum:
                                  - PARTY_TYPE_UNSPECIFIED
                                  - PARTY_TYPE_ORIGINATOR
                                  - PARTY_TYPE_SERVICER
                                  - PARTY_TYPE_INVESTOR
                                  - PARTY_TYPE_CUSTODIAN
                                  - PARTY_TYPE_OWNER
                                  - PARTY_TYPE_AFFILIATE
                                  - PARTY_TYPE_OMNIBUS
                                  - PARTY_TYPE_PROVENANCE
                                  - PARTY_TYPE_CONTROLLER
                                  - PARTY_TYPE_VALIDATOR
                                default: PARTY_TYPE_UNSPECIFIED
                                description: >-
                                  - PARTY_TYPE_UNSPECIFIED:
                                  PARTY_TYPE_UNSPECIFIED is an error condition
                                   - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                                   - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                                   - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                                   - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                                   - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                                   - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                                   - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                                   - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                                   - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                                   - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                                title: >-
                                  PartyType are the different roles parties on a
                                  contract may use
                            title: >-
                              A Party is an address with/in a given role
                              associated with a contract
                          title: >-
                            parties is the set of identities that signed this
                            contract
                        name:
                          type: string
                          title: >-
                            name to associate with this session execution
                            context, typically classname
                        context:
                          type: string
                          format: byte
                          description: >-
                            context is a field for storing client specific data
                            associated with a session.
                        audit:
                          description: >-
                            Created by, updated by, timestamps, version number,
                            and related info.
                          type: object
                          properties:
                            created_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was created
                            created_by:
                              type: string
                              title: >-
                                the address of the account that created this
                                record
                            updated_date:
                              type: string
                              format: date-time
                              title: the date/time when this entry was last updated
                            updated_by:
                              type: string
                              title: >-
                                the address of the account that modified this
                                record
                            version:
                              type: integer
                              format: int64
                              title: >-
                                an optional version number that is incremented
                                with each update
                            message:
                              type: string
                              title: >-
                                an optional message associated with the
                                creation/update event
                          title: >-
                            AuditFields capture information about the last
                            account to make modifications and when they were
                            made
                      title: >-
                        A Session is created for an execution context against a
                        specific specification instance
                    session_id_info:
                      description: >-
                        session_id_info contains information about the
                        id/address of the session.
                      type: object
                      properties:
                        session_id:
                          type: string
                          format: byte
                          description: session_id is the raw bytes of the session address.
                        session_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            session_id_prefix is the prefix portion of the
                            session_id.
                        session_id_scope_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_scope_uuid is the scope_uuid portion of
                            the session_id.
                        session_id_session_uuid:
                          type: string
                          format: byte
                          description: >-
                            session_id_session_uuid is the session_uuid portion
                            of the session_id.
                        session_addr:
                          type: string
                          description: >-
                            session_addr is the bech32 string version of the
                            session_id.
                        session_uuid:
                          type: string
                          description: >-
                            session_uuid is the uuid hex string of the
                            session_id_session_uuid.
                        scope_id_info:
                          description: >-
                            scope_id_info is information about the scope id
                            referenced in the session_id.
                          type: object
                          properties:
                            scope_id:
                              type: string
                              format: byte
                              description: scope_id is the raw bytes of the scope address.
                            scope_id_prefix:
                              type: string
                              format: byte
                              description: >-
                                scope_id_prefix is the prefix portion of the
                                scope_id.
                            scope_id_scope_uuid:
                              type: string
                              format: byte
                              description: >-
                                scope_id_scope_uuid is the scope_uuid portion of
                                the scope_id.
                            scope_addr:
                              type: string
                              description: >-
                                scope_addr is the bech32 string version of the
                                scope_id.
                            scope_uuid:
                              type: string
                              description: >-
                                scope_uuid is the uuid hex string of the
                                scope_id_scope_uuid.
                    contract_spec_id_info:
                      description: >-
                        contract_spec_id_info contains information about the
                        id/address of the contract specification.
                      type: object
                      properties:
                        contract_spec_id:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id is the raw bytes of the contract
                            specification address.
                        contract_spec_id_prefix:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_prefix is the prefix portion of the
                            contract_spec_id.
                        contract_spec_id_contract_spec_uuid:
                          type: string
                          format: byte
                          description: >-
                            contract_spec_id_contract_spec_uuid is the
                            contract_spec_uuid portion of the contract_spec_id.
                        contract_spec_addr:
                          type: string
                          description: >-
                            contract_spec_addr is the bech32 string version of
                            the contract_spec_id.
                        contract_spec_uuid:
                          type: string
                          description: >-
                            contract_spec_uuid is the uuid hex string of the
                            contract_spec_id_contract_spec_uuid.
                  description: >-
                    SessionWrapper contains a single session and some extra
                    identifiers for it.
                description: sessions are the wrapped sessions.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              SessionsAllResponse is the response type for the Query/SessionsAll
              RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/metadata/v1/valueownership/{address}':
    get:
      summary: >-
        ValueOwnership returns the scope identifiers that list the given address
        as the value owner.
      operationId: ValueOwnership
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              scope_uuids:
                type: array
                items:
                  type: string
                description: A list of scope ids (uuid) associated with the given address.
              request:
                description: request is a copy of the request that generated these results.
                type: object
                properties:
                  address:
                    type: string
                  pagination:
                    description: >-
                      pagination defines optional pagination parameters for the
                      request.
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                        description: >-
                          key is a value returned in PageResponse.next_key to
                          begin

                          querying the next page most efficiently. Only one of
                          offset or key

                          should be set.
                      offset:
                        type: string
                        format: uint64
                        description: >-
                          offset is a numeric offset that can be used when key
                          is unavailable.

                          It is less efficient than using key. Only one of
                          offset or key should

                          be set.
                      limit:
                        type: string
                        format: uint64
                        description: >-
                          limit is the total number of results to be returned in
                          the result page.

                          If left empty it will default to a value to be set by
                          each app.
                      count_total:
                        type: boolean
                        format: boolean
                        description: >-
                          count_total is set to true  to indicate that the
                          result set should include

                          a count of the total number of items available for
                          pagination in UIs.

                          count_total is only respected when offset is used. It
                          is ignored when key

                          is set.
                      reverse:
                        type: boolean
                        format: boolean
                        description: >-
                          reverse is set to true if results are to be returned
                          in the descending order.


                          Since: cosmos-sdk 0.43
                    title: >-
                      PageRequest is to be embedded in gRPC request messages for
                      efficient

                      pagination. Ex:
              pagination:
                description: >-
                  pagination provides the pagination information of this
                  response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              ValueOwnershipResponse is the response type for the
              Query/ValueOwnership RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/provenance/name/v1/lookup/{address}':
    get:
      summary: ReverseLookup queries for all names bound against a given address
      operationId: ReverseLookup
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              name:
                type: array
                items:
                  type: string
                title: an array of names bound against a given address
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryReverseLookupResponse is the response type for the
              Query/Resolve method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          description: address to find name records for
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/name/v1/params:
    get:
      summary: Params queries params of the name module.
      operationId: NameParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  max_segment_length:
                    type: integer
                    format: int64
                    title: maximum length of name segment to allow
                  min_segment_length:
                    type: integer
                    format: int64
                    title: minimum length of name segment to allow
                  max_name_levels:
                    type: integer
                    format: int64
                    title: >-
                      maximum number of name segments to allow.  Example:
                      `foo.bar.baz` would be 3
                  allow_unrestricted_names:
                    type: boolean
                    format: boolean
                    title: determines if unrestricted name keys are allowed or not
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/provenance/name/v1/resolve/{name}':
    get:
      summary: Resolve queries for the address associated with a given name
      operationId: Resolve
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              address:
                type: string
                title: a string containing the address the name resolves to
              restricted:
                type: boolean
                format: boolean
                description: Whether owner signature is required to add sub-names.
            description: >-
              QueryResolveResponse is the response type for the Query/Resolve
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: name
          description: name to resolve the address for
          in: path
          required: true
          type: string
      tags:
        - Query
  /provenance/msgfees/v1/all:
    get:
      summary: Query all Msgs which have fees associated with them.
      operationId: QueryAllMsgFees
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              msg_fees:
                type: array
                items:
                  type: object
                  properties:
                    msg_type_url:
                      type: string
                    additional_fee:
                      title: >-
                        additional_fee can pay in any Coin( basically a Denom
                        and Amount, Amount can be zero)
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  title: |-
                    MsgFee is the core of what gets stored on the blockchain
                    it consists of two parts
                    1. the msg type url, i.e. /cosmos.bank.v1beta1.MsgSend
                    2. minimum additional fees(can be of any denom)
              pagination:
                description: pagination defines an optional pagination for the request.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: response for querying all msg's with fees associated with them
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /provenance/msgfees/v1/params:
    get:
      summary: Params queries the parameters for x/msgfees
      operationId: MsgFeeParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  floor_gas_price:
                    title: >-
                      constant used to calculate fees when gas fees shares denom
                      with msg fee
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /provenance/tx/v1/calculate_msg_based_fee:
    post:
      summary: >-
        CalculateTxFees simulates executing a transaction for estimating gas
        usage and additional fees.
      operationId: CalculateTxFees
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              additional_fees:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: >-
                  additional_fees are the amount of coins to be for addition msg
                  fees
              total_fees:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                description: >-
                  total_fees are the total amount of fees needed for the
                  transactions (msg fees + gas fee)

                  note: the gas fee is calculated with the floor gas price
                  module param.
              estimated_gas:
                type: string
                format: uint64
                title: estimated_gas is the amount of gas needed for the transaction
            description: >-
              CalculateTxFeesResponse is the response type for the Query RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              tx_bytes:
                type: string
                format: byte
                description: tx_bytes is the transaction to simulate.
              default_base_denom:
                type: string
                description: |-
                  default_base_denom is used to set the denom used for gas fees
                  if not set it will default to nhash.
              gas_adjustment:
                type: number
                format: float
                title: >-
                  gas_adjustment is the adjustment factor to be multiplied
                  against the estimate returned by the tx simulation
            description: >-
              CalculateTxFeesRequest is the request type for the Query RPC
              method.
      tags:
        - Query
definitions:
  CheckTxResult:
    type: object
    properties:
      code:
        type: integer
      data:
        type: string
      gas_used:
        type: integer
      gas_wanted:
        type: integer
      info:
        type: string
      log:
        type: string
      tags:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
    example:
      code: 0
      data: data
      log: log
      gas_used: 5000
      gas_wanted: 10000
      info: info
      tags:
        - ''
        - ''
  DeliverTxResult:
    type: object
    properties:
      code:
        type: integer
      data:
        type: string
      gas_used:
        type: integer
      gas_wanted:
        type: integer
      info:
        type: string
      log:
        type: string
      tags:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
    example:
      code: 5
      data: data
      log: log
      gas_used: 5000
      gas_wanted: 10000
      info: info
      tags:
        - ''
        - ''
  BroadcastTxCommitResult:
    type: object
    properties:
      check_tx:
        type: object
        properties:
          code:
            type: integer
          data:
            type: string
          gas_used:
            type: integer
          gas_wanted:
            type: integer
          info:
            type: string
          log:
            type: string
          tags:
            type: array
            items:
              type: object
              properties:
                key:
                  type: string
                value:
                  type: string
        example:
          code: 0
          data: data
          log: log
          gas_used: 5000
          gas_wanted: 10000
          info: info
          tags:
            - ''
            - ''
      deliver_tx:
        type: object
        properties:
          code:
            type: integer
          data:
            type: string
          gas_used:
            type: integer
          gas_wanted:
            type: integer
          info:
            type: string
          log:
            type: string
          tags:
            type: array
            items:
              type: object
              properties:
                key:
                  type: string
                value:
                  type: string
        example:
          code: 5
          data: data
          log: log
          gas_used: 5000
          gas_wanted: 10000
          info: info
          tags:
            - ''
            - ''
      hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      height:
        type: integer
  KVPair:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
  Msg:
    type: object
  Address:
    type: string
    description: bech32 encoded address
    example: pb1depk54cuajgkzea6zpgkq36tnjwdzv4afc3d27
  ValidatorAddress:
    type: string
    description: bech32 encoded address
    example: pbvaloper16xyempempp92x9hyzz9wrgf94r6j9h5f2w4n2l
  Coin:
    type: object
    properties:
      denom:
        type: string
        example: vspn
      amount:
        type: string
        example: '5000'
  Hash:
    type: string
    example: EE5F3404034C524501629B56E0DDC38FAD651F04
  TxQuery:
    type: object
    properties:
      hash:
        type: string
        example: D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656
      height:
        type: number
        example: 368
      tx:
        type: object
        properties:
          msg:
            type: array
            items:
              type: object
          fee:
            type: object
            properties:
              gas:
                type: string
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                      example: vspn
                    amount:
                      type: string
                      example: '5000'
          memo:
            type: string
          signature:
            type: object
            properties:
              signature:
                type: string
                example: >-
                  MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
              pub_key:
                type: object
                properties:
                  type:
                    type: string
                    example: tendermint/PubKeySecp256k1
                  value:
                    type: string
                    example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
              account_number:
                type: string
                example: '0'
              sequence:
                type: string
                example: '0'
      result:
        type: object
        properties:
          log:
            type: string
          gas_wanted:
            type: string
            example: '200000'
          gas_used:
            type: string
            example: '26354'
          tags:
            type: array
            items:
              type: object
              properties:
                key:
                  type: string
                value:
                  type: string
  PaginatedQueryTxs:
    type: object
    properties:
      total_count:
        type: number
        example: 1
      count:
        type: number
        example: 1
      page_number:
        type: number
        example: 1
      page_total:
        type: number
        example: 1
      limit:
        type: number
        example: 30
      txs:
        type: array
        items:
          type: object
          properties:
            hash:
              type: string
              example: D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656
            height:
              type: number
              example: 368
            tx:
              type: object
              properties:
                msg:
                  type: array
                  items:
                    type: object
                fee:
                  type: object
                  properties:
                    gas:
                      type: string
                    amount:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                            example: vspn
                          amount:
                            type: string
                            example: '5000'
                memo:
                  type: string
                signature:
                  type: object
                  properties:
                    signature:
                      type: string
                      example: >-
                        MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
                    pub_key:
                      type: object
                      properties:
                        type:
                          type: string
                          example: tendermint/PubKeySecp256k1
                        value:
                          type: string
                          example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
                    account_number:
                      type: string
                      example: '0'
                    sequence:
                      type: string
                      example: '0'
            result:
              type: object
              properties:
                log:
                  type: string
                gas_wanted:
                  type: string
                  example: '200000'
                gas_used:
                  type: string
                  example: '26354'
                tags:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      value:
                        type: string
  StdTx:
    type: object
    properties:
      msg:
        type: array
        items:
          type: object
      fee:
        type: object
        properties:
          gas:
            type: string
          amount:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                  example: vspn
                amount:
                  type: string
                  example: '5000'
      memo:
        type: string
      signature:
        type: object
        properties:
          signature:
            type: string
            example: >-
              MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
          pub_key:
            type: object
            properties:
              type:
                type: string
                example: tendermint/PubKeySecp256k1
              value:
                type: string
                example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
          account_number:
            type: string
            example: '0'
          sequence:
            type: string
            example: '0'
  BlockID:
    type: object
    properties:
      hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      parts:
        type: object
        properties:
          total:
            type: number
            example: 0
          hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
  BlockHeader:
    type: object
    properties:
      chain_id:
        type: string
        example: provenance-test-chain
      height:
        type: number
        example: 1
      time:
        type: string
        example: '2017-12-30T05:53:09.287+01:00'
      num_txs:
        type: number
        example: 0
      last_block_id:
        type: object
        properties:
          hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          parts:
            type: object
            properties:
              total:
                type: number
                example: 0
              hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
      total_txs:
        type: number
        example: 35
      last_commit_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      data_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      validators_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      next_validators_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      consensus_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      app_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      last_results_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      evidence_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      proposer_address:
        type: string
        description: bech32 encoded address
        example: pb1depk54cuajgkzea6zpgkq36tnjwdzv4afc3d27
      version:
        type: object
        properties:
          block:
            type: string
            example: 10
          app:
            type: string
            example: 0
  Block:
    type: object
    properties:
      header:
        type: object
        properties:
          chain_id:
            type: string
            example: provenance-test-chain
          height:
            type: number
            example: 1
          time:
            type: string
            example: '2017-12-30T05:53:09.287+01:00'
          num_txs:
            type: number
            example: 0
          last_block_id:
            type: object
            properties:
              hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              parts:
                type: object
                properties:
                  total:
                    type: number
                    example: 0
                  hash:
                    type: string
                    example: EE5F3404034C524501629B56E0DDC38FAD651F04
          total_txs:
            type: number
            example: 35
          last_commit_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          data_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          validators_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          next_validators_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          consensus_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          app_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          last_results_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          evidence_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          proposer_address:
            type: string
            description: bech32 encoded address
            example: pb1depk54cuajgkzea6zpgkq36tnjwdzv4afc3d27
          version:
            type: object
            properties:
              block:
                type: string
                example: 10
              app:
                type: string
                example: 0
      txs:
        type: array
        items:
          type: string
      evidence:
        type: array
        items:
          type: string
      last_commit:
        type: object
        properties:
          block_id:
            type: object
            properties:
              hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              parts:
                type: object
                properties:
                  total:
                    type: number
                    example: 0
                  hash:
                    type: string
                    example: EE5F3404034C524501629B56E0DDC38FAD651F04
          precommits:
            type: array
            items:
              type: object
              properties:
                validator_address:
                  type: string
                validator_index:
                  type: string
                  example: '0'
                height:
                  type: string
                  example: '0'
                round:
                  type: string
                  example: '0'
                timestamp:
                  type: string
                  example: '2017-12-30T05:53:09.287+01:00'
                type:
                  type: number
                  example: 2
                block_id:
                  type: object
                  properties:
                    hash:
                      type: string
                      example: EE5F3404034C524501629B56E0DDC38FAD651F04
                    parts:
                      type: object
                      properties:
                        total:
                          type: number
                          example: 0
                        hash:
                          type: string
                          example: EE5F3404034C524501629B56E0DDC38FAD651F04
                signature:
                  type: string
                  example: >-
                    7uTC74QlknqYWEwg7Vn6M8Om7FuZ0EO4bjvuj6rwH1mTUJrRuMMZvAAqT9VjNgP0RA/TDp6u/92AqrZfXJSpBQ==
  BlockQuery:
    type: object
    properties:
      block_meta:
        type: object
        properties:
          header:
            type: object
            properties:
              chain_id:
                type: string
                example: provenance-test-chain
              height:
                type: number
                example: 1
              time:
                type: string
                example: '2017-12-30T05:53:09.287+01:00'
              num_txs:
                type: number
                example: 0
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    example: EE5F3404034C524501629B56E0DDC38FAD651F04
                  parts:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 0
                      hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
              total_txs:
                type: number
                example: 35
              last_commit_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              data_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              validators_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              next_validators_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              consensus_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              app_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              last_results_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              evidence_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              proposer_address:
                type: string
                description: bech32 encoded address
                example: pb1depk54cuajgkzea6zpgkq36tnjwdzv4afc3d27
              version:
                type: object
                properties:
                  block:
                    type: string
                    example: 10
                  app:
                    type: string
                    example: 0
          block_id:
            type: object
            properties:
              hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              parts:
                type: object
                properties:
                  total:
                    type: number
                    example: 0
                  hash:
                    type: string
                    example: EE5F3404034C524501629B56E0DDC38FAD651F04
      block:
        type: object
        properties:
          header:
            type: object
            properties:
              chain_id:
                type: string
                example: provenance-test-chain
              height:
                type: number
                example: 1
              time:
                type: string
                example: '2017-12-30T05:53:09.287+01:00'
              num_txs:
                type: number
                example: 0
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    example: EE5F3404034C524501629B56E0DDC38FAD651F04
                  parts:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 0
                      hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
              total_txs:
                type: number
                example: 35
              last_commit_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              data_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              validators_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              next_validators_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              consensus_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              app_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              last_results_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              evidence_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              proposer_address:
                type: string
                description: bech32 encoded address
                example: pb1depk54cuajgkzea6zpgkq36tnjwdzv4afc3d27
              version:
                type: object
                properties:
                  block:
                    type: string
                    example: 10
                  app:
                    type: string
                    example: 0
          txs:
            type: array
            items:
              type: string
          evidence:
            type: array
            items:
              type: string
          last_commit:
            type: object
            properties:
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    example: EE5F3404034C524501629B56E0DDC38FAD651F04
                  parts:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 0
                      hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
              precommits:
                type: array
                items:
                  type: object
                  properties:
                    validator_address:
                      type: string
                    validator_index:
                      type: string
                      example: '0'
                    height:
                      type: string
                      example: '0'
                    round:
                      type: string
                      example: '0'
                    timestamp:
                      type: string
                      example: '2017-12-30T05:53:09.287+01:00'
                    type:
                      type: number
                      example: 2
                    block_id:
                      type: object
                      properties:
                        hash:
                          type: string
                          example: EE5F3404034C524501629B56E0DDC38FAD651F04
                        parts:
                          type: object
                          properties:
                            total:
                              type: number
                              example: 0
                            hash:
                              type: string
                              example: EE5F3404034C524501629B56E0DDC38FAD651F04
                    signature:
                      type: string
                      example: >-
                        7uTC74QlknqYWEwg7Vn6M8Om7FuZ0EO4bjvuj6rwH1mTUJrRuMMZvAAqT9VjNgP0RA/TDp6u/92AqrZfXJSpBQ==
  DelegationDelegatorReward:
    type: object
    properties:
      validator_address:
        type: string
        description: bech32 encoded address
        example: pbvaloper16xyempempp92x9hyzz9wrgf94r6j9h5f2w4n2l
      reward:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: vspn
            amount:
              type: string
              example: '5000'
  DelegatorTotalRewards:
    type: object
    properties:
      rewards:
        type: array
        items:
          type: object
          properties:
            validator_address:
              type: string
              description: bech32 encoded address
              example: pbvaloper16xyempempp92x9hyzz9wrgf94r6j9h5f2w4n2l
            reward:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                    example: vspn
                  amount:
                    type: string
                    example: '5000'
      total:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: vspn
            amount:
              type: string
              example: '5000'
  BaseReq:
    type: object
    properties:
      from:
        type: string
        example: pb1ytyfcdj0nymx9afx34mvwj6gyrped0hmfd9qyq
        description: Sender address or Keybase name to generate a transaction
      memo:
        type: string
        example: Sent via Provenance API
      chain_id:
        type: string
        example: provenance-test-chain
      account_number:
        type: string
        example: '0'
      sequence:
        type: string
        example: '1'
      gas:
        type: string
        example: '200000'
      gas_adjustment:
        type: string
        example: '1.2'
      fees:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: vspn
            amount:
              type: string
              example: '5000'
      simulate:
        type: boolean
        example: false
        description: >-
          Estimate gas for a transaction (cannot be used in conjunction with
          generate_only)
  TendermintValidator:
    type: object
    properties:
      address:
        type: string
        description: bech32 encoded address
        example: pbvaloper16xyempempp92x9hyzz9wrgf94r6j9h5f2w4n2l
      pub_key:
        type: string
        example: >-
          pbvalconspub1zcjduepq0vu2zgkgk49efa0nqwzndanq5m4c7pa3u4apz4g2r9gspqg6g9cs3k9cuf
      voting_power:
        type: string
        example: '1000'
      proposer_priority:
        type: string
        example: '1000'
  TextProposal:
    type: object
    properties:
      proposal_id:
        type: integer
      title:
        type: string
      description:
        type: string
      proposal_type:
        type: string
      proposal_status:
        type: string
      final_tally_result:
        type: object
        properties:
          'yes':
            type: string
            example: '0.0000000000'
          abstain:
            type: string
            example: '0.0000000000'
          'no':
            type: string
            example: '0.0000000000'
          no_with_veto:
            type: string
            example: '0.0000000000'
      submit_time:
        type: string
      total_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: vspn
            amount:
              type: string
              example: '5000'
      voting_start_time:
        type: string
  Proposer:
    type: object
    properties:
      proposal_id:
        type: string
      proposer:
        type: string
  Deposit:
    type: object
    properties:
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: vspn
            amount:
              type: string
              example: '5000'
      proposal_id:
        type: string
      depositor:
        type: string
        description: bech32 encoded address
        example: pb1depk54cuajgkzea6zpgkq36tnjwdzv4afc3d27
  TallyResult:
    type: object
    properties:
      'yes':
        type: string
        example: '0.0000000000'
      abstain:
        type: string
        example: '0.0000000000'
      'no':
        type: string
        example: '0.0000000000'
      no_with_veto:
        type: string
        example: '0.0000000000'
  Vote:
    type: object
    properties:
      voter:
        type: string
      proposal_id:
        type: string
      option:
        type: string
  Validator:
    type: object
    properties:
      operator_address:
        type: string
        description: bech32 encoded address
        example: pbvaloper16xyempempp92x9hyzz9wrgf94r6j9h5f2w4n2l
      consensus_pubkey:
        type: string
        example: >-
          pbvalconspub1zcjduepq0vu2zgkgk49efa0nqwzndanq5m4c7pa3u4apz4g2r9gspqg6g9cs3k9cuf
      jailed:
        type: boolean
      status:
        type: integer
      tokens:
        type: string
      delegator_shares:
        type: string
      description:
        type: object
        properties:
          moniker:
            type: string
          identity:
            type: string
          website:
            type: string
          security_contact:
            type: string
          details:
            type: string
      bond_height:
        type: string
        example: '0'
      bond_intra_tx_counter:
        type: integer
        example: 0
      unbonding_height:
        type: string
        example: '0'
      unbonding_time:
        type: string
        example: '1970-01-01T00:00:00Z'
      commission:
        type: object
        properties:
          rate:
            type: string
            example: '0'
          max_rate:
            type: string
            example: '0'
          max_change_rate:
            type: string
            example: '0'
          update_time:
            type: string
            example: '1970-01-01T00:00:00Z'
  Delegation:
    type: object
    properties:
      delegator_address:
        type: string
      validator_address:
        type: string
      shares:
        type: string
      balance:
        type: object
        properties:
          denom:
            type: string
            example: vspn
          amount:
            type: string
            example: '5000'
  UnbondingDelegationPair:
    type: object
    properties:
      delegator_address:
        type: string
      validator_address:
        type: string
      entries:
        type: array
        items:
          type: object
          properties:
            initial_balance:
              type: string
            balance:
              type: string
            creation_height:
              type: string
            min_time:
              type: string
  UnbondingEntries:
    type: object
    properties:
      initial_balance:
        type: string
      balance:
        type: string
      creation_height:
        type: string
      min_time:
        type: string
  UnbondingDelegation:
    type: object
    properties:
      delegator_address:
        type: string
      validator_address:
        type: string
      initial_balance:
        type: string
      balance:
        type: string
      creation_height:
        type: integer
      min_time:
        type: integer
  Redelegation:
    type: object
    properties:
      delegator_address:
        type: string
      validator_src_address:
        type: string
      validator_dst_address:
        type: string
      entries:
        type: array
        items:
          $ref: '#/definitions/Redelegation'
  RedelegationEntry:
    type: object
    properties:
      creation_height:
        type: integer
      completion_time:
        type: integer
      initial_balance:
        type: string
      balance:
        type: string
      shares_dst:
        type: string
  ValidatorDistInfo:
    type: object
    properties:
      operator_address:
        type: string
        description: bech32 encoded address
        example: pbvaloper16xyempempp92x9hyzz9wrgf94r6j9h5f2w4n2l
      self_bond_rewards:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: vspn
            amount:
              type: string
              example: '5000'
      val_commission:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: vspn
            amount:
              type: string
              example: '5000'
  PublicKey:
    type: object
    properties:
      type:
        type: string
      value:
        type: string
  SigningInfo:
    type: object
    properties:
      start_height:
        type: string
      index_offset:
        type: string
      jailed_until:
        type: string
      missed_blocks_counter:
        type: string
  ParamChange:
    type: object
    properties:
      subspace:
        type: string
        example: staking
      key:
        type: string
        example: MaxValidators
      subkey:
        type: string
        example: ''
      value:
        type: object
  Supply:
    type: object
    properties:
      total:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: vspn
            amount:
              type: string
              example: '5000'
  cosmos.auth.v1beta1.Params:
    type: object
    properties:
      max_memo_characters:
        type: string
        format: uint64
      tx_sig_limit:
        type: string
        format: uint64
      tx_size_cost_per_byte:
        type: string
        format: uint64
      sig_verify_cost_ed25519:
        type: string
        format: uint64
      sig_verify_cost_secp256k1:
        type: string
        format: uint64
    description: Params defines the parameters for the auth module.
  cosmos.auth.v1beta1.QueryAccountResponse:
    type: object
    properties:
      account:
        description: account defines the account of the corresponding address.
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
    description: >-
      QueryAccountResponse is the response type for the Query/Account RPC
      method.
  cosmos.auth.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          max_memo_characters:
            type: string
            format: uint64
          tx_sig_limit:
            type: string
            format: uint64
          tx_size_cost_per_byte:
            type: string
            format: uint64
          sig_verify_cost_ed25519:
            type: string
            format: uint64
          sig_verify_cost_secp256k1:
            type: string
            format: uint64
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  google.protobuf.Any:
    type: object
    properties:
      type_url:
        type: string
        description: >-
          A URL/resource name that uniquely identifies the type of the
          serialized

          protocol buffer message. This string must contain at least

          one "/" character. The last segment of the URL's path must represent

          the fully qualified name of the type (as in

          `path/google.protobuf.Duration`). The name should be in a canonical
          form

          (e.g., leading "." is not accepted).


          In practice, teams usually precompile into the binary all types that
          they

          expect it to use in the context of Any. However, for URLs which use
          the

          scheme `http`, `https`, or no scheme, one can optionally set up a type

          server that maps type URLs to message definitions as follows:


          * If no scheme is provided, `https` is assumed.

          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official

          protobuf release, and it is not used for type URLs beginning with

          type.googleapis.com.


          Schemes other than `http`, `https` (or the empty scheme) might be

          used with implementation specific semantics.
      value:
        type: string
        format: byte
        description: >-
          Must be a valid serialized protocol buffer of the above specified
          type.
    description: >-
      `Any` contains an arbitrary serialized protocol buffer message along with
      a

      URL that describes the type of the serialized message.


      Protobuf library provides support to pack/unpack Any values in the form

      of utility functions or additional generated methods of the Any type.


      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := ptypes.MarshalAny(foo)
           ...
           foo := &pb.Foo{}
           if err := ptypes.UnmarshalAny(any, foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use

      'type.googleapis.com/full.type.name' as the type URL and the unpack

      methods only use the fully qualified type name after the last '/'

      in the type URL, for example "foo.bar.com/x/y.z" will yield type

      name "y.z".



      JSON

      ====

      The JSON representation of an `Any` value uses the regular

      representation of the deserialized, embedded message, with an

      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON

      representation, that representation will be embedded adding a field

      `value` which holds the custom JSON in addition to the `@type`

      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  grpc.gateway.runtime.Error:
    type: object
    properties:
      error:
        type: string
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
  cosmos.bank.v1beta1.DenomUnit:
    type: object
    properties:
      denom:
        type: string
        description: denom represents the string name of the given denom unit (e.g uatom).
      exponent:
        type: integer
        format: int64
        description: >-
          exponent represents power of 10 exponent that one must

          raise the base_denom to in order to equal the given DenomUnit's denom

          1 denom = 1^exponent base_denom

          (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom'
          with

          exponent = 6, thus: 1 atom = 10^6 uatom).
      aliases:
        type: array
        items:
          type: string
        title: aliases is a list of string aliases for the given denom
    description: |-
      DenomUnit represents a struct that describes a given
      denomination unit of the basic token.
  cosmos.bank.v1beta1.Metadata:
    type: object
    properties:
      description:
        type: string
      denom_units:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              description: >-
                denom represents the string name of the given denom unit (e.g
                uatom).
            exponent:
              type: integer
              format: int64
              description: >-
                exponent represents power of 10 exponent that one must

                raise the base_denom to in order to equal the given DenomUnit's
                denom

                1 denom = 1^exponent base_denom

                (e.g. with a base_denom of uatom, one can create a DenomUnit of
                'atom' with

                exponent = 6, thus: 1 atom = 10^6 uatom).
            aliases:
              type: array
              items:
                type: string
              title: aliases is a list of string aliases for the given denom
          description: |-
            DenomUnit represents a struct that describes a given
            denomination unit of the basic token.
        title: denom_units represents the list of DenomUnit's for a given coin
      base:
        type: string
        description: >-
          base represents the base denom (should be the DenomUnit with exponent
          = 0).
      display:
        type: string
        description: |-
          display indicates the suggested denom that should be
          displayed in clients.
      name:
        type: string
        description: 'Since: cosmos-sdk 0.43'
        title: 'name defines the name of the token (eg: Cosmos Atom)'
      symbol:
        type: string
        description: >-
          symbol is the token symbol usually shown on exchanges (eg: ATOM). This
          can

          be the same as the display.


          Since: cosmos-sdk 0.43
    description: |-
      Metadata represents a struct that describes
      a basic token.
  cosmos.bank.v1beta1.Params:
    type: object
    properties:
      send_enabled:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            enabled:
              type: boolean
          description: >-
            SendEnabled maps coin denom to a send_enabled status (whether a
            denom is

            sendable).
      default_send_enabled:
        type: boolean
    description: Params defines the parameters for the bank module.
  cosmos.bank.v1beta1.QueryAllBalancesResponse:
    type: object
    properties:
      balances:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: balances is the balances of all the coins.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllBalancesResponse is the response type for the Query/AllBalances
      RPC

      method.
  cosmos.bank.v1beta1.QueryBalanceResponse:
    type: object
    properties:
      balance:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: >-
      QueryBalanceResponse is the response type for the Query/Balance RPC
      method.
  cosmos.bank.v1beta1.QueryDenomMetadataResponse:
    type: object
    properties:
      metadata:
        type: object
        properties:
          description:
            type: string
          denom_units:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                  description: >-
                    denom represents the string name of the given denom unit
                    (e.g uatom).
                exponent:
                  type: integer
                  format: int64
                  description: >-
                    exponent represents power of 10 exponent that one must

                    raise the base_denom to in order to equal the given
                    DenomUnit's denom

                    1 denom = 1^exponent base_denom

                    (e.g. with a base_denom of uatom, one can create a DenomUnit
                    of 'atom' with

                    exponent = 6, thus: 1 atom = 10^6 uatom).
                aliases:
                  type: array
                  items:
                    type: string
                  title: aliases is a list of string aliases for the given denom
              description: |-
                DenomUnit represents a struct that describes a given
                denomination unit of the basic token.
            title: denom_units represents the list of DenomUnit's for a given coin
          base:
            type: string
            description: >-
              base represents the base denom (should be the DenomUnit with
              exponent = 0).
          display:
            type: string
            description: |-
              display indicates the suggested denom that should be
              displayed in clients.
        description: |-
          Metadata represents a struct that describes
          a basic token.
    description: >-
      QueryDenomMetadataResponse is the response type for the
      Query/DenomMetadata RPC

      method.
  cosmos.bank.v1beta1.QueryDenomsMetadataResponse:
    type: object
    properties:
      metadatas:
        type: array
        items:
          type: object
          properties:
            description:
              type: string
            denom_units:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                    description: >-
                      denom represents the string name of the given denom unit
                      (e.g uatom).
                  exponent:
                    type: integer
                    format: int64
                    description: >-
                      exponent represents power of 10 exponent that one must

                      raise the base_denom to in order to equal the given
                      DenomUnit's denom

                      1 denom = 1^exponent base_denom

                      (e.g. with a base_denom of uatom, one can create a
                      DenomUnit of 'atom' with

                      exponent = 6, thus: 1 atom = 10^6 uatom).
                  aliases:
                    type: array
                    items:
                      type: string
                    title: aliases is a list of string aliases for the given denom
                description: |-
                  DenomUnit represents a struct that describes a given
                  denomination unit of the basic token.
              title: denom_units represents the list of DenomUnit's for a given coin
            base:
              type: string
              description: >-
                base represents the base denom (should be the DenomUnit with
                exponent = 0).
            display:
              type: string
              description: |-
                display indicates the suggested denom that should be
                displayed in clients.
          description: |-
            Metadata represents a struct that describes
            a basic token.
        description: >-
          metadata provides the client information for all the registered
          tokens.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryDenomsMetadataResponse is the response type for the
      Query/DenomsMetadata RPC

      method.
  cosmos.bank.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          send_enabled:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                enabled:
                  type: boolean
              description: >-
                SendEnabled maps coin denom to a send_enabled status (whether a
                denom is

                sendable).
          default_send_enabled:
            type: boolean
        description: Params defines the parameters for the bank module.
    description: >-
      QueryParamsResponse defines the response type for querying x/bank
      parameters.
  cosmos.bank.v1beta1.QuerySupplyOfResponse:
    type: object
    properties:
      amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: >-
      QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC
      method.
  cosmos.bank.v1beta1.QueryTotalSupplyResponse:
    type: object
    properties:
      supply:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: supply is the supply of the coins
    title: >-
      QueryTotalSupplyResponse is the response type for the Query/TotalSupply
      RPC

      method
  cosmos.bank.v1beta1.SendEnabled:
    type: object
    properties:
      denom:
        type: string
      enabled:
        type: boolean
    description: |-
      SendEnabled maps coin denom to a send_enabled status (whether a denom is
      sendable).
  cosmos.base.query.v1beta1.PageRequest:
    type: object
    properties:
      key:
        type: string
        format: byte
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
      offset:
        type: string
        format: uint64
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
      limit:
        type: string
        format: uint64
        description: >-
          limit is the total number of results to be returned in the result
          page.

          If left empty it will default to a value to be set by each app.
      count_total:
        type: boolean
        description: >-
          count_total is set to true  to indicate that the result set should
          include

          a count of the total number of items available for pagination in UIs.

          count_total is only respected when offset is used. It is ignored when
          key

          is set.
        format: boolean
      reverse:
        type: boolean
        format: boolean
        description: >-
          reverse is set to true if results are to be returned in the descending
          order.


          Since: cosmos-sdk 0.43
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest pagination = 2;
       }
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
  cosmos.base.query.v1beta1.PageResponse:
    type: object
    properties:
      next_key:
        type: string
        format: byte
        title: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently
      total:
        type: string
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
    description: |-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding request message has used PageRequest.

       message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
  cosmos.base.v1beta1.Coin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
  cosmos.bank.v1beta1.Input:
    type: object
    properties:
      address:
        type: string
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: Input models transaction input.
  cosmos.bank.v1beta1.MsgMultiSendResponse:
    type: object
    description: MsgMultiSendResponse defines the Msg/MultiSend response type.
  cosmos.bank.v1beta1.MsgSendResponse:
    type: object
    description: MsgSendResponse defines the Msg/Send response type.
  cosmos.bank.v1beta1.Output:
    type: object
    properties:
      address:
        type: string
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: Output models transaction outputs.
  cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse:
    type: object
    properties:
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      block:
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                format: byte
            description: Header defines the structure of a Tendermint block header.
          data:
            type: object
            properties:
              txs:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
            title: Data contains the set of transactions included in the block
          evidence:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    duplicate_vote_evidence:
                      type: object
                      properties:
                        vote_a:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        vote_b:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        total_voting_power:
                          type: string
                          format: int64
                        validator_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                    light_client_attack_evidence:
                      type: object
                      properties:
                        conflicting_block:
                          type: object
                          properties:
                            signed_header:
                              type: object
                              properties:
                                header:
                                  type: object
                                  properties:
                                    version:
                                      title: basic block info
                                      type: object
                                      properties:
                                        block:
                                          type: string
                                          format: uint64
                                        app:
                                          type: string
                                          format: uint64
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                    chain_id:
                                      type: string
                                    height:
                                      type: string
                                      format: int64
                                    time:
                                      type: string
                                      format: date-time
                                    last_block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    last_commit_hash:
                                      type: string
                                      format: byte
                                      title: hashes of block data
                                    data_hash:
                                      type: string
                                      format: byte
                                    validators_hash:
                                      type: string
                                      format: byte
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                    next_validators_hash:
                                      type: string
                                      format: byte
                                    consensus_hash:
                                      type: string
                                      format: byte
                                    app_hash:
                                      type: string
                                      format: byte
                                    last_results_hash:
                                      type: string
                                      format: byte
                                    evidence_hash:
                                      type: string
                                      format: byte
                                      title: consensus info
                                    proposer_address:
                                      type: string
                                      format: byte
                                  description: >-
                                    Header defines the structure of a Tendermint
                                    block header.
                                commit:
                                  type: object
                                  properties:
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    signatures:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          block_id_flag:
                                            type: string
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            title: >-
                                              BlockIdFlag indicates which BlcokID the
                                              signature is for
                                          validator_address:
                                            type: string
                                            format: byte
                                          timestamp:
                                            type: string
                                            format: date-time
                                          signature:
                                            type: string
                                            format: byte
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                            validator_set:
                              type: object
                              properties:
                                validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Tendermint Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                proposer:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                      format: byte
                                    pub_key:
                                      type: object
                                      properties:
                                        ed25519:
                                          type: string
                                          format: byte
                                        secp256k1:
                                          type: string
                                          format: byte
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Tendermint Validators
                                    voting_power:
                                      type: string
                                      format: int64
                                    proposer_priority:
                                      type: string
                                      format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                        common_height:
                          type: string
                          format: int64
                        byzantine_validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Tendermint Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        total_voting_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
          last_commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
    description: >-
      GetBlockByHeightResponse is the response type for the
      Query/GetBlockByHeight RPC method.
  cosmos.base.tendermint.v1beta1.GetLatestBlockResponse:
    type: object
    properties:
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      block:
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                format: byte
            description: Header defines the structure of a Tendermint block header.
          data:
            type: object
            properties:
              txs:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
            title: Data contains the set of transactions included in the block
          evidence:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    duplicate_vote_evidence:
                      type: object
                      properties:
                        vote_a:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        vote_b:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        total_voting_power:
                          type: string
                          format: int64
                        validator_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                    light_client_attack_evidence:
                      type: object
                      properties:
                        conflicting_block:
                          type: object
                          properties:
                            signed_header:
                              type: object
                              properties:
                                header:
                                  type: object
                                  properties:
                                    version:
                                      title: basic block info
                                      type: object
                                      properties:
                                        block:
                                          type: string
                                          format: uint64
                                        app:
                                          type: string
                                          format: uint64
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                    chain_id:
                                      type: string
                                    height:
                                      type: string
                                      format: int64
                                    time:
                                      type: string
                                      format: date-time
                                    last_block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    last_commit_hash:
                                      type: string
                                      format: byte
                                      title: hashes of block data
                                    data_hash:
                                      type: string
                                      format: byte
                                    validators_hash:
                                      type: string
                                      format: byte
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                    next_validators_hash:
                                      type: string
                                      format: byte
                                    consensus_hash:
                                      type: string
                                      format: byte
                                    app_hash:
                                      type: string
                                      format: byte
                                    last_results_hash:
                                      type: string
                                      format: byte
                                    evidence_hash:
                                      type: string
                                      format: byte
                                      title: consensus info
                                    proposer_address:
                                      type: string
                                      format: byte
                                  description: >-
                                    Header defines the structure of a Tendermint
                                    block header.
                                commit:
                                  type: object
                                  properties:
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    signatures:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          block_id_flag:
                                            type: string
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            title: >-
                                              BlockIdFlag indicates which BlcokID the
                                              signature is for
                                          validator_address:
                                            type: string
                                            format: byte
                                          timestamp:
                                            type: string
                                            format: date-time
                                          signature:
                                            type: string
                                            format: byte
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                            validator_set:
                              type: object
                              properties:
                                validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Tendermint Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                proposer:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                      format: byte
                                    pub_key:
                                      type: object
                                      properties:
                                        ed25519:
                                          type: string
                                          format: byte
                                        secp256k1:
                                          type: string
                                          format: byte
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Tendermint Validators
                                    voting_power:
                                      type: string
                                      format: int64
                                    proposer_priority:
                                      type: string
                                      format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                        common_height:
                          type: string
                          format: int64
                        byzantine_validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Tendermint Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        total_voting_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
          last_commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
    description: >-
      GetLatestBlockResponse is the response type for the Query/GetLatestBlock
      RPC method.
  cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse:
    type: object
    properties:
      block_height:
        type: string
        format: int64
      validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            pub_key:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
          description: Validator is the type for the validator-set.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      GetLatestValidatorSetResponse is the response type for the
      Query/GetValidatorSetByHeight RPC method.
  cosmos.base.tendermint.v1beta1.GetNodeInfoResponse:
    type: object
    properties:
      default_node_info:
        type: object
        properties:
          protocol_version:
            type: object
            properties:
              p2p:
                type: string
                format: uint64
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
          default_node_id:
            type: string
          listen_addr:
            type: string
          network:
            type: string
          version:
            type: string
          channels:
            type: string
            format: byte
          moniker:
            type: string
          other:
            type: object
            properties:
              tx_index:
                type: string
              rpc_address:
                type: string
      application_version:
        type: object
        properties:
          name:
            type: string
          app_name:
            type: string
          version:
            type: string
          git_commit:
            type: string
          build_tags:
            type: string
          go_version:
            type: string
          build_deps:
            type: array
            items:
              type: object
              properties:
                path:
                  type: string
                  title: module path
                version:
                  type: string
                  title: module version
                sum:
                  type: string
                  title: checksum
              title: Module is the type for VersionInfo
        description: VersionInfo is the type for the GetNodeInfoResponse message.
    description: >-
      GetNodeInfoResponse is the request type for the Query/GetNodeInfo RPC
      method.
  cosmos.base.tendermint.v1beta1.GetSyncingResponse:
    type: object
    properties:
      syncing:
        type: boolean
    description: >-
      GetSyncingResponse is the response type for the Query/GetSyncing RPC
      method.
  cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse:
    type: object
    properties:
      block_height:
        type: string
        format: int64
      validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            pub_key:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
          description: Validator is the type for the validator-set.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      GetValidatorSetByHeightResponse is the response type for the
      Query/GetValidatorSetByHeight RPC method.
  cosmos.base.tendermint.v1beta1.Module:
    type: object
    properties:
      path:
        type: string
        title: module path
      version:
        type: string
        title: module version
      sum:
        type: string
        title: checksum
    title: Module is the type for VersionInfo
  cosmos.base.tendermint.v1beta1.Validator:
    type: object
    properties:
      address:
        type: string
      pub_key:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      voting_power:
        type: string
        format: int64
      proposer_priority:
        type: string
        format: int64
    description: Validator is the type for the validator-set.
  cosmos.base.tendermint.v1beta1.VersionInfo:
    type: object
    properties:
      name:
        type: string
      app_name:
        type: string
      version:
        type: string
      git_commit:
        type: string
      build_tags:
        type: string
      go_version:
        type: string
      build_deps:
        type: array
        items:
          type: object
          properties:
            path:
              type: string
              title: module path
            version:
              type: string
              title: module version
            sum:
              type: string
              title: checksum
          title: Module is the type for VersionInfo
    description: VersionInfo is the type for the GetNodeInfoResponse message.
  tendermint.crypto.PublicKey:
    type: object
    properties:
      ed25519:
        type: string
        format: byte
      secp256k1:
        type: string
        format: byte
    title: PublicKey defines the keys available for use with Tendermint Validators
  tendermint.p2p.DefaultNodeInfo:
    type: object
    properties:
      protocol_version:
        type: object
        properties:
          p2p:
            type: string
            format: uint64
          block:
            type: string
            format: uint64
          app:
            type: string
            format: uint64
      default_node_id:
        type: string
      listen_addr:
        type: string
      network:
        type: string
      version:
        type: string
      channels:
        type: string
        format: byte
      moniker:
        type: string
      other:
        type: object
        properties:
          tx_index:
            type: string
          rpc_address:
            type: string
  tendermint.p2p.DefaultNodeInfoOther:
    type: object
    properties:
      tx_index:
        type: string
      rpc_address:
        type: string
  tendermint.p2p.ProtocolVersion:
    type: object
    properties:
      p2p:
        type: string
        format: uint64
      block:
        type: string
        format: uint64
      app:
        type: string
        format: uint64
  tendermint.types.Block:
    type: object
    properties:
      header:
        type: object
        properties:
          version:
            title: basic block info
            type: object
            properties:
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
          chain_id:
            type: string
          height:
            type: string
            format: int64
          time:
            type: string
            format: date-time
          last_block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          last_commit_hash:
            type: string
            format: byte
            title: hashes of block data
          data_hash:
            type: string
            format: byte
          validators_hash:
            type: string
            format: byte
            title: hashes from the app output from the prev block
          next_validators_hash:
            type: string
            format: byte
          consensus_hash:
            type: string
            format: byte
          app_hash:
            type: string
            format: byte
          last_results_hash:
            type: string
            format: byte
          evidence_hash:
            type: string
            format: byte
            title: consensus info
          proposer_address:
            type: string
            format: byte
        description: Header defines the structure of a Tendermint block header.
      data:
        type: object
        properties:
          txs:
            type: array
            items:
              type: string
              format: byte
            description: >-
              Txs that will be applied by state @ block.Height+1.

              NOTE: not all txs here are valid.  We're just agreeing on the
              order first.

              This means that block.AppHash does not include these txs.
        title: Data contains the set of transactions included in the block
      evidence:
        type: object
        properties:
          evidence:
            type: array
            items:
              type: object
              properties:
                duplicate_vote_evidence:
                  type: object
                  properties:
                    vote_a:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                        height:
                          type: string
                          format: int64
                        round:
                          type: integer
                          format: int32
                        block_id:
                          type: object
                          properties:
                            hash:
                              type: string
                              format: byte
                            part_set_header:
                              type: object
                              properties:
                                total:
                                  type: integer
                                  format: int64
                                hash:
                                  type: string
                                  format: byte
                              title: PartsetHeader
                          title: BlockID
                        timestamp:
                          type: string
                          format: date-time
                        validator_address:
                          type: string
                          format: byte
                        validator_index:
                          type: integer
                          format: int32
                        signature:
                          type: string
                          format: byte
                      description: >-
                        Vote represents a prevote, precommit, or commit vote
                        from validators for

                        consensus.
                    vote_b:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                        height:
                          type: string
                          format: int64
                        round:
                          type: integer
                          format: int32
                        block_id:
                          type: object
                          properties:
                            hash:
                              type: string
                              format: byte
                            part_set_header:
                              type: object
                              properties:
                                total:
                                  type: integer
                                  format: int64
                                hash:
                                  type: string
                                  format: byte
                              title: PartsetHeader
                          title: BlockID
                        timestamp:
                          type: string
                          format: date-time
                        validator_address:
                          type: string
                          format: byte
                        validator_index:
                          type: integer
                          format: int32
                        signature:
                          type: string
                          format: byte
                      description: >-
                        Vote represents a prevote, precommit, or commit vote
                        from validators for

                        consensus.
                    total_voting_power:
                      type: string
                      format: int64
                    validator_power:
                      type: string
                      format: int64
                    timestamp:
                      type: string
                      format: date-time
                  description: >-
                    DuplicateVoteEvidence contains evidence of a validator
                    signed two conflicting votes.
                light_client_attack_evidence:
                  type: object
                  properties:
                    conflicting_block:
                      type: object
                      properties:
                        signed_header:
                          type: object
                          properties:
                            header:
                              type: object
                              properties:
                                version:
                                  title: basic block info
                                  type: object
                                  properties:
                                    block:
                                      type: string
                                      format: uint64
                                    app:
                                      type: string
                                      format: uint64
                                  description: >-
                                    Consensus captures the consensus rules for
                                    processing a block in the blockchain,

                                    including all blockchain data structures and
                                    the rules of the application's

                                    state transition machine.
                                chain_id:
                                  type: string
                                height:
                                  type: string
                                  format: int64
                                time:
                                  type: string
                                  format: date-time
                                last_block_id:
                                  type: object
                                  properties:
                                    hash:
                                      type: string
                                      format: byte
                                    part_set_header:
                                      type: object
                                      properties:
                                        total:
                                          type: integer
                                          format: int64
                                        hash:
                                          type: string
                                          format: byte
                                      title: PartsetHeader
                                  title: BlockID
                                last_commit_hash:
                                  type: string
                                  format: byte
                                  title: hashes of block data
                                data_hash:
                                  type: string
                                  format: byte
                                validators_hash:
                                  type: string
                                  format: byte
                                  title: >-
                                    hashes from the app output from the prev
                                    block
                                next_validators_hash:
                                  type: string
                                  format: byte
                                consensus_hash:
                                  type: string
                                  format: byte
                                app_hash:
                                  type: string
                                  format: byte
                                last_results_hash:
                                  type: string
                                  format: byte
                                evidence_hash:
                                  type: string
                                  format: byte
                                  title: consensus info
                                proposer_address:
                                  type: string
                                  format: byte
                              description: >-
                                Header defines the structure of a Tendermint
                                block header.
                            commit:
                              type: object
                              properties:
                                height:
                                  type: string
                                  format: int64
                                round:
                                  type: integer
                                  format: int32
                                block_id:
                                  type: object
                                  properties:
                                    hash:
                                      type: string
                                      format: byte
                                    part_set_header:
                                      type: object
                                      properties:
                                        total:
                                          type: integer
                                          format: int64
                                        hash:
                                          type: string
                                          format: byte
                                      title: PartsetHeader
                                  title: BlockID
                                signatures:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      block_id_flag:
                                        type: string
                                        enum:
                                          - BLOCK_ID_FLAG_UNKNOWN
                                          - BLOCK_ID_FLAG_ABSENT
                                          - BLOCK_ID_FLAG_COMMIT
                                          - BLOCK_ID_FLAG_NIL
                                        default: BLOCK_ID_FLAG_UNKNOWN
                                        title: >-
                                          BlockIdFlag indicates which BlcokID the
                                          signature is for
                                      validator_address:
                                        type: string
                                        format: byte
                                      timestamp:
                                        type: string
                                        format: date-time
                                      signature:
                                        type: string
                                        format: byte
                                    description: >-
                                      CommitSig is a part of the Vote included
                                      in a Commit.
                              description: >-
                                Commit contains the evidence that a block was
                                committed by a set of validators.
                        validator_set:
                          type: object
                          properties:
                            validators:
                              type: array
                              items:
                                type: object
                                properties:
                                  address:
                                    type: string
                                    format: byte
                                  pub_key:
                                    type: object
                                    properties:
                                      ed25519:
                                        type: string
                                        format: byte
                                      secp256k1:
                                        type: string
                                        format: byte
                                    title: >-
                                      PublicKey defines the keys available for
                                      use with Tendermint Validators
                                  voting_power:
                                    type: string
                                    format: int64
                                  proposer_priority:
                                    type: string
                                    format: int64
                            proposer:
                              type: object
                              properties:
                                address:
                                  type: string
                                  format: byte
                                pub_key:
                                  type: object
                                  properties:
                                    ed25519:
                                      type: string
                                      format: byte
                                    secp256k1:
                                      type: string
                                      format: byte
                                  title: >-
                                    PublicKey defines the keys available for use
                                    with Tendermint Validators
                                voting_power:
                                  type: string
                                  format: int64
                                proposer_priority:
                                  type: string
                                  format: int64
                            total_voting_power:
                              type: string
                              format: int64
                    common_height:
                      type: string
                      format: int64
                    byzantine_validators:
                      type: array
                      items:
                        type: object
                        properties:
                          address:
                            type: string
                            format: byte
                          pub_key:
                            type: object
                            properties:
                              ed25519:
                                type: string
                                format: byte
                              secp256k1:
                                type: string
                                format: byte
                            title: >-
                              PublicKey defines the keys available for use with
                              Tendermint Validators
                          voting_power:
                            type: string
                            format: int64
                          proposer_priority:
                            type: string
                            format: int64
                    total_voting_power:
                      type: string
                      format: int64
                    timestamp:
                      type: string
                      format: date-time
                  description: >-
                    LightClientAttackEvidence contains evidence of a set of
                    validators attempting to mislead a light client.
      last_commit:
        type: object
        properties:
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          signatures:
            type: array
            items:
              type: object
              properties:
                block_id_flag:
                  type: string
                  enum:
                    - BLOCK_ID_FLAG_UNKNOWN
                    - BLOCK_ID_FLAG_ABSENT
                    - BLOCK_ID_FLAG_COMMIT
                    - BLOCK_ID_FLAG_NIL
                  default: BLOCK_ID_FLAG_UNKNOWN
                  title: BlockIdFlag indicates which BlcokID the signature is for
                validator_address:
                  type: string
                  format: byte
                timestamp:
                  type: string
                  format: date-time
                signature:
                  type: string
                  format: byte
              description: CommitSig is a part of the Vote included in a Commit.
        description: >-
          Commit contains the evidence that a block was committed by a set of
          validators.
  tendermint.types.BlockID:
    type: object
    properties:
      hash:
        type: string
        format: byte
      part_set_header:
        type: object
        properties:
          total:
            type: integer
            format: int64
          hash:
            type: string
            format: byte
        title: PartsetHeader
    title: BlockID
  tendermint.types.BlockIDFlag:
    type: string
    enum:
      - BLOCK_ID_FLAG_UNKNOWN
      - BLOCK_ID_FLAG_ABSENT
      - BLOCK_ID_FLAG_COMMIT
      - BLOCK_ID_FLAG_NIL
    default: BLOCK_ID_FLAG_UNKNOWN
    title: BlockIdFlag indicates which BlcokID the signature is for
  tendermint.types.Commit:
    type: object
    properties:
      height:
        type: string
        format: int64
      round:
        type: integer
        format: int32
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      signatures:
        type: array
        items:
          type: object
          properties:
            block_id_flag:
              type: string
              enum:
                - BLOCK_ID_FLAG_UNKNOWN
                - BLOCK_ID_FLAG_ABSENT
                - BLOCK_ID_FLAG_COMMIT
                - BLOCK_ID_FLAG_NIL
              default: BLOCK_ID_FLAG_UNKNOWN
              title: BlockIdFlag indicates which BlcokID the signature is for
            validator_address:
              type: string
              format: byte
            timestamp:
              type: string
              format: date-time
            signature:
              type: string
              format: byte
          description: CommitSig is a part of the Vote included in a Commit.
    description: >-
      Commit contains the evidence that a block was committed by a set of
      validators.
  tendermint.types.CommitSig:
    type: object
    properties:
      block_id_flag:
        type: string
        enum:
          - BLOCK_ID_FLAG_UNKNOWN
          - BLOCK_ID_FLAG_ABSENT
          - BLOCK_ID_FLAG_COMMIT
          - BLOCK_ID_FLAG_NIL
        default: BLOCK_ID_FLAG_UNKNOWN
        title: BlockIdFlag indicates which BlcokID the signature is for
      validator_address:
        type: string
        format: byte
      timestamp:
        type: string
        format: date-time
      signature:
        type: string
        format: byte
    description: CommitSig is a part of the Vote included in a Commit.
  tendermint.types.Data:
    type: object
    properties:
      txs:
        type: array
        items:
          type: string
          format: byte
        description: >-
          Txs that will be applied by state @ block.Height+1.

          NOTE: not all txs here are valid.  We're just agreeing on the order
          first.

          This means that block.AppHash does not include these txs.
    title: Data contains the set of transactions included in the block
  tendermint.types.DuplicateVoteEvidence:
    type: object
    properties:
      vote_a:
        type: object
        properties:
          type:
            type: string
            enum:
              - SIGNED_MSG_TYPE_UNKNOWN
              - SIGNED_MSG_TYPE_PREVOTE
              - SIGNED_MSG_TYPE_PRECOMMIT
              - SIGNED_MSG_TYPE_PROPOSAL
            default: SIGNED_MSG_TYPE_UNKNOWN
            description: |-
              SignedMsgType is a type of signed message in the consensus.

               - SIGNED_MSG_TYPE_PREVOTE: Votes
               - SIGNED_MSG_TYPE_PROPOSAL: Proposals
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          timestamp:
            type: string
            format: date-time
          validator_address:
            type: string
            format: byte
          validator_index:
            type: integer
            format: int32
          signature:
            type: string
            format: byte
        description: >-
          Vote represents a prevote, precommit, or commit vote from validators
          for

          consensus.
      vote_b:
        type: object
        properties:
          type:
            type: string
            enum:
              - SIGNED_MSG_TYPE_UNKNOWN
              - SIGNED_MSG_TYPE_PREVOTE
              - SIGNED_MSG_TYPE_PRECOMMIT
              - SIGNED_MSG_TYPE_PROPOSAL
            default: SIGNED_MSG_TYPE_UNKNOWN
            description: |-
              SignedMsgType is a type of signed message in the consensus.

               - SIGNED_MSG_TYPE_PREVOTE: Votes
               - SIGNED_MSG_TYPE_PROPOSAL: Proposals
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          timestamp:
            type: string
            format: date-time
          validator_address:
            type: string
            format: byte
          validator_index:
            type: integer
            format: int32
          signature:
            type: string
            format: byte
        description: >-
          Vote represents a prevote, precommit, or commit vote from validators
          for

          consensus.
      total_voting_power:
        type: string
        format: int64
      validator_power:
        type: string
        format: int64
      timestamp:
        type: string
        format: date-time
    description: >-
      DuplicateVoteEvidence contains evidence of a validator signed two
      conflicting votes.
  tendermint.types.Evidence:
    type: object
    properties:
      duplicate_vote_evidence:
        type: object
        properties:
          vote_a:
            type: object
            properties:
              type:
                type: string
                enum:
                  - SIGNED_MSG_TYPE_UNKNOWN
                  - SIGNED_MSG_TYPE_PREVOTE
                  - SIGNED_MSG_TYPE_PRECOMMIT
                  - SIGNED_MSG_TYPE_PROPOSAL
                default: SIGNED_MSG_TYPE_UNKNOWN
                description: |-
                  SignedMsgType is a type of signed message in the consensus.

                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              timestamp:
                type: string
                format: date-time
              validator_address:
                type: string
                format: byte
              validator_index:
                type: integer
                format: int32
              signature:
                type: string
                format: byte
            description: >-
              Vote represents a prevote, precommit, or commit vote from
              validators for

              consensus.
          vote_b:
            type: object
            properties:
              type:
                type: string
                enum:
                  - SIGNED_MSG_TYPE_UNKNOWN
                  - SIGNED_MSG_TYPE_PREVOTE
                  - SIGNED_MSG_TYPE_PRECOMMIT
                  - SIGNED_MSG_TYPE_PROPOSAL
                default: SIGNED_MSG_TYPE_UNKNOWN
                description: |-
                  SignedMsgType is a type of signed message in the consensus.

                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              timestamp:
                type: string
                format: date-time
              validator_address:
                type: string
                format: byte
              validator_index:
                type: integer
                format: int32
              signature:
                type: string
                format: byte
            description: >-
              Vote represents a prevote, precommit, or commit vote from
              validators for

              consensus.
          total_voting_power:
            type: string
            format: int64
          validator_power:
            type: string
            format: int64
          timestamp:
            type: string
            format: date-time
        description: >-
          DuplicateVoteEvidence contains evidence of a validator signed two
          conflicting votes.
      light_client_attack_evidence:
        type: object
        properties:
          conflicting_block:
            type: object
            properties:
              signed_header:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                    description: Header defines the structure of a Tendermint block header.
                  commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
              validator_set:
                type: object
                properties:
                  validators:
                    type: array
                    items:
                      type: object
                      properties:
                        address:
                          type: string
                          format: byte
                        pub_key:
                          type: object
                          properties:
                            ed25519:
                              type: string
                              format: byte
                            secp256k1:
                              type: string
                              format: byte
                          title: >-
                            PublicKey defines the keys available for use with
                            Tendermint Validators
                        voting_power:
                          type: string
                          format: int64
                        proposer_priority:
                          type: string
                          format: int64
                  proposer:
                    type: object
                    properties:
                      address:
                        type: string
                        format: byte
                      pub_key:
                        type: object
                        properties:
                          ed25519:
                            type: string
                            format: byte
                          secp256k1:
                            type: string
                            format: byte
                        title: >-
                          PublicKey defines the keys available for use with
                          Tendermint Validators
                      voting_power:
                        type: string
                        format: int64
                      proposer_priority:
                        type: string
                        format: int64
                  total_voting_power:
                    type: string
                    format: int64
          common_height:
            type: string
            format: int64
          byzantine_validators:
            type: array
            items:
              type: object
              properties:
                address:
                  type: string
                  format: byte
                pub_key:
                  type: object
                  properties:
                    ed25519:
                      type: string
                      format: byte
                    secp256k1:
                      type: string
                      format: byte
                  title: >-
                    PublicKey defines the keys available for use with Tendermint
                    Validators
                voting_power:
                  type: string
                  format: int64
                proposer_priority:
                  type: string
                  format: int64
          total_voting_power:
            type: string
            format: int64
          timestamp:
            type: string
            format: date-time
        description: >-
          LightClientAttackEvidence contains evidence of a set of validators
          attempting to mislead a light client.
  tendermint.types.EvidenceList:
    type: object
    properties:
      evidence:
        type: array
        items:
          type: object
          properties:
            duplicate_vote_evidence:
              type: object
              properties:
                vote_a:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - SIGNED_MSG_TYPE_UNKNOWN
                        - SIGNED_MSG_TYPE_PREVOTE
                        - SIGNED_MSG_TYPE_PRECOMMIT
                        - SIGNED_MSG_TYPE_PROPOSAL
                      default: SIGNED_MSG_TYPE_UNKNOWN
                      description: >-
                        SignedMsgType is a type of signed message in the
                        consensus.

                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                    height:
                      type: string
                      format: int64
                    round:
                      type: integer
                      format: int32
                    block_id:
                      type: object
                      properties:
                        hash:
                          type: string
                          format: byte
                        part_set_header:
                          type: object
                          properties:
                            total:
                              type: integer
                              format: int64
                            hash:
                              type: string
                              format: byte
                          title: PartsetHeader
                      title: BlockID
                    timestamp:
                      type: string
                      format: date-time
                    validator_address:
                      type: string
                      format: byte
                    validator_index:
                      type: integer
                      format: int32
                    signature:
                      type: string
                      format: byte
                  description: >-
                    Vote represents a prevote, precommit, or commit vote from
                    validators for

                    consensus.
                vote_b:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - SIGNED_MSG_TYPE_UNKNOWN
                        - SIGNED_MSG_TYPE_PREVOTE
                        - SIGNED_MSG_TYPE_PRECOMMIT
                        - SIGNED_MSG_TYPE_PROPOSAL
                      default: SIGNED_MSG_TYPE_UNKNOWN
                      description: >-
                        SignedMsgType is a type of signed message in the
                        consensus.

                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                    height:
                      type: string
                      format: int64
                    round:
                      type: integer
                      format: int32
                    block_id:
                      type: object
                      properties:
                        hash:
                          type: string
                          format: byte
                        part_set_header:
                          type: object
                          properties:
                            total:
                              type: integer
                              format: int64
                            hash:
                              type: string
                              format: byte
                          title: PartsetHeader
                      title: BlockID
                    timestamp:
                      type: string
                      format: date-time
                    validator_address:
                      type: string
                      format: byte
                    validator_index:
                      type: integer
                      format: int32
                    signature:
                      type: string
                      format: byte
                  description: >-
                    Vote represents a prevote, precommit, or commit vote from
                    validators for

                    consensus.
                total_voting_power:
                  type: string
                  format: int64
                validator_power:
                  type: string
                  format: int64
                timestamp:
                  type: string
                  format: date-time
              description: >-
                DuplicateVoteEvidence contains evidence of a validator signed
                two conflicting votes.
            light_client_attack_evidence:
              type: object
              properties:
                conflicting_block:
                  type: object
                  properties:
                    signed_header:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            version:
                              title: basic block info
                              type: object
                              properties:
                                block:
                                  type: string
                                  format: uint64
                                app:
                                  type: string
                                  format: uint64
                              description: >-
                                Consensus captures the consensus rules for
                                processing a block in the blockchain,

                                including all blockchain data structures and the
                                rules of the application's

                                state transition machine.
                            chain_id:
                              type: string
                            height:
                              type: string
                              format: int64
                            time:
                              type: string
                              format: date-time
                            last_block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            last_commit_hash:
                              type: string
                              format: byte
                              title: hashes of block data
                            data_hash:
                              type: string
                              format: byte
                            validators_hash:
                              type: string
                              format: byte
                              title: hashes from the app output from the prev block
                            next_validators_hash:
                              type: string
                              format: byte
                            consensus_hash:
                              type: string
                              format: byte
                            app_hash:
                              type: string
                              format: byte
                            last_results_hash:
                              type: string
                              format: byte
                            evidence_hash:
                              type: string
                              format: byte
                              title: consensus info
                            proposer_address:
                              type: string
                              format: byte
                          description: >-
                            Header defines the structure of a Tendermint block
                            header.
                        commit:
                          type: object
                          properties:
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            signatures:
                              type: array
                              items:
                                type: object
                                properties:
                                  block_id_flag:
                                    type: string
                                    enum:
                                      - BLOCK_ID_FLAG_UNKNOWN
                                      - BLOCK_ID_FLAG_ABSENT
                                      - BLOCK_ID_FLAG_COMMIT
                                      - BLOCK_ID_FLAG_NIL
                                    default: BLOCK_ID_FLAG_UNKNOWN
                                    title: >-
                                      BlockIdFlag indicates which BlcokID the
                                      signature is for
                                  validator_address:
                                    type: string
                                    format: byte
                                  timestamp:
                                    type: string
                                    format: date-time
                                  signature:
                                    type: string
                                    format: byte
                                description: >-
                                  CommitSig is a part of the Vote included in a
                                  Commit.
                          description: >-
                            Commit contains the evidence that a block was
                            committed by a set of validators.
                    validator_set:
                      type: object
                      properties:
                        validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Tendermint Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        proposer:
                          type: object
                          properties:
                            address:
                              type: string
                              format: byte
                            pub_key:
                              type: object
                              properties:
                                ed25519:
                                  type: string
                                  format: byte
                                secp256k1:
                                  type: string
                                  format: byte
                              title: >-
                                PublicKey defines the keys available for use
                                with Tendermint Validators
                            voting_power:
                              type: string
                              format: int64
                            proposer_priority:
                              type: string
                              format: int64
                        total_voting_power:
                          type: string
                          format: int64
                common_height:
                  type: string
                  format: int64
                byzantine_validators:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        format: byte
                      pub_key:
                        type: object
                        properties:
                          ed25519:
                            type: string
                            format: byte
                          secp256k1:
                            type: string
                            format: byte
                        title: >-
                          PublicKey defines the keys available for use with
                          Tendermint Validators
                      voting_power:
                        type: string
                        format: int64
                      proposer_priority:
                        type: string
                        format: int64
                total_voting_power:
                  type: string
                  format: int64
                timestamp:
                  type: string
                  format: date-time
              description: >-
                LightClientAttackEvidence contains evidence of a set of
                validators attempting to mislead a light client.
  tendermint.types.Header:
    type: object
    properties:
      version:
        title: basic block info
        type: object
        properties:
          block:
            type: string
            format: uint64
          app:
            type: string
            format: uint64
        description: >-
          Consensus captures the consensus rules for processing a block in the
          blockchain,

          including all blockchain data structures and the rules of the
          application's

          state transition machine.
      chain_id:
        type: string
      height:
        type: string
        format: int64
      time:
        type: string
        format: date-time
      last_block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      last_commit_hash:
        type: string
        format: byte
        title: hashes of block data
      data_hash:
        type: string
        format: byte
      validators_hash:
        type: string
        format: byte
        title: hashes from the app output from the prev block
      next_validators_hash:
        type: string
        format: byte
      consensus_hash:
        type: string
        format: byte
      app_hash:
        type: string
        format: byte
      last_results_hash:
        type: string
        format: byte
      evidence_hash:
        type: string
        format: byte
        title: consensus info
      proposer_address:
        type: string
        format: byte
    description: Header defines the structure of a Tendermint block header.
  tendermint.types.LightBlock:
    type: object
    properties:
      signed_header:
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                format: byte
            description: Header defines the structure of a Tendermint block header.
          commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
      validator_set:
        type: object
        properties:
          validators:
            type: array
            items:
              type: object
              properties:
                address:
                  type: string
                  format: byte
                pub_key:
                  type: object
                  properties:
                    ed25519:
                      type: string
                      format: byte
                    secp256k1:
                      type: string
                      format: byte
                  title: >-
                    PublicKey defines the keys available for use with Tendermint
                    Validators
                voting_power:
                  type: string
                  format: int64
                proposer_priority:
                  type: string
                  format: int64
          proposer:
            type: object
            properties:
              address:
                type: string
                format: byte
              pub_key:
                type: object
                properties:
                  ed25519:
                    type: string
                    format: byte
                  secp256k1:
                    type: string
                    format: byte
                title: >-
                  PublicKey defines the keys available for use with Tendermint
                  Validators
              voting_power:
                type: string
                format: int64
              proposer_priority:
                type: string
                format: int64
          total_voting_power:
            type: string
            format: int64
  tendermint.types.LightClientAttackEvidence:
    type: object
    properties:
      conflicting_block:
        type: object
        properties:
          signed_header:
            type: object
            properties:
              header:
                type: object
                properties:
                  version:
                    title: basic block info
                    type: object
                    properties:
                      block:
                        type: string
                        format: uint64
                      app:
                        type: string
                        format: uint64
                    description: >-
                      Consensus captures the consensus rules for processing a
                      block in the blockchain,

                      including all blockchain data structures and the rules of
                      the application's

                      state transition machine.
                  chain_id:
                    type: string
                  height:
                    type: string
                    format: int64
                  time:
                    type: string
                    format: date-time
                  last_block_id:
                    type: object
                    properties:
                      hash:
                        type: string
                        format: byte
                      part_set_header:
                        type: object
                        properties:
                          total:
                            type: integer
                            format: int64
                          hash:
                            type: string
                            format: byte
                        title: PartsetHeader
                    title: BlockID
                  last_commit_hash:
                    type: string
                    format: byte
                    title: hashes of block data
                  data_hash:
                    type: string
                    format: byte
                  validators_hash:
                    type: string
                    format: byte
                    title: hashes from the app output from the prev block
                  next_validators_hash:
                    type: string
                    format: byte
                  consensus_hash:
                    type: string
                    format: byte
                  app_hash:
                    type: string
                    format: byte
                  last_results_hash:
                    type: string
                    format: byte
                  evidence_hash:
                    type: string
                    format: byte
                    title: consensus info
                  proposer_address:
                    type: string
                    format: byte
                description: Header defines the structure of a Tendermint block header.
              commit:
                type: object
                properties:
                  height:
                    type: string
                    format: int64
                  round:
                    type: integer
                    format: int32
                  block_id:
                    type: object
                    properties:
                      hash:
                        type: string
                        format: byte
                      part_set_header:
                        type: object
                        properties:
                          total:
                            type: integer
                            format: int64
                          hash:
                            type: string
                            format: byte
                        title: PartsetHeader
                    title: BlockID
                  signatures:
                    type: array
                    items:
                      type: object
                      properties:
                        block_id_flag:
                          type: string
                          enum:
                            - BLOCK_ID_FLAG_UNKNOWN
                            - BLOCK_ID_FLAG_ABSENT
                            - BLOCK_ID_FLAG_COMMIT
                            - BLOCK_ID_FLAG_NIL
                          default: BLOCK_ID_FLAG_UNKNOWN
                          title: >-
                            BlockIdFlag indicates which BlcokID the signature is
                            for
                        validator_address:
                          type: string
                          format: byte
                        timestamp:
                          type: string
                          format: date-time
                        signature:
                          type: string
                          format: byte
                      description: CommitSig is a part of the Vote included in a Commit.
                description: >-
                  Commit contains the evidence that a block was committed by a
                  set of validators.
          validator_set:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      format: byte
                    pub_key:
                      type: object
                      properties:
                        ed25519:
                          type: string
                          format: byte
                        secp256k1:
                          type: string
                          format: byte
                      title: >-
                        PublicKey defines the keys available for use with
                        Tendermint Validators
                    voting_power:
                      type: string
                      format: int64
                    proposer_priority:
                      type: string
                      format: int64
              proposer:
                type: object
                properties:
                  address:
                    type: string
                    format: byte
                  pub_key:
                    type: object
                    properties:
                      ed25519:
                        type: string
                        format: byte
                      secp256k1:
                        type: string
                        format: byte
                    title: >-
                      PublicKey defines the keys available for use with
                      Tendermint Validators
                  voting_power:
                    type: string
                    format: int64
                  proposer_priority:
                    type: string
                    format: int64
              total_voting_power:
                type: string
                format: int64
      common_height:
        type: string
        format: int64
      byzantine_validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              format: byte
            pub_key:
              type: object
              properties:
                ed25519:
                  type: string
                  format: byte
                secp256k1:
                  type: string
                  format: byte
              title: >-
                PublicKey defines the keys available for use with Tendermint
                Validators
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
      total_voting_power:
        type: string
        format: int64
      timestamp:
        type: string
        format: date-time
    description: >-
      LightClientAttackEvidence contains evidence of a set of validators
      attempting to mislead a light client.
  tendermint.types.PartSetHeader:
    type: object
    properties:
      total:
        type: integer
        format: int64
      hash:
        type: string
        format: byte
    title: PartsetHeader
  tendermint.types.SignedHeader:
    type: object
    properties:
      header:
        type: object
        properties:
          version:
            title: basic block info
            type: object
            properties:
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
          chain_id:
            type: string
          height:
            type: string
            format: int64
          time:
            type: string
            format: date-time
          last_block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          last_commit_hash:
            type: string
            format: byte
            title: hashes of block data
          data_hash:
            type: string
            format: byte
          validators_hash:
            type: string
            format: byte
            title: hashes from the app output from the prev block
          next_validators_hash:
            type: string
            format: byte
          consensus_hash:
            type: string
            format: byte
          app_hash:
            type: string
            format: byte
          last_results_hash:
            type: string
            format: byte
          evidence_hash:
            type: string
            format: byte
            title: consensus info
          proposer_address:
            type: string
            format: byte
        description: Header defines the structure of a Tendermint block header.
      commit:
        type: object
        properties:
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          signatures:
            type: array
            items:
              type: object
              properties:
                block_id_flag:
                  type: string
                  enum:
                    - BLOCK_ID_FLAG_UNKNOWN
                    - BLOCK_ID_FLAG_ABSENT
                    - BLOCK_ID_FLAG_COMMIT
                    - BLOCK_ID_FLAG_NIL
                  default: BLOCK_ID_FLAG_UNKNOWN
                  title: BlockIdFlag indicates which BlcokID the signature is for
                validator_address:
                  type: string
                  format: byte
                timestamp:
                  type: string
                  format: date-time
                signature:
                  type: string
                  format: byte
              description: CommitSig is a part of the Vote included in a Commit.
        description: >-
          Commit contains the evidence that a block was committed by a set of
          validators.
  tendermint.types.SignedMsgType:
    type: string
    enum:
      - SIGNED_MSG_TYPE_UNKNOWN
      - SIGNED_MSG_TYPE_PREVOTE
      - SIGNED_MSG_TYPE_PRECOMMIT
      - SIGNED_MSG_TYPE_PROPOSAL
    default: SIGNED_MSG_TYPE_UNKNOWN
    description: |-
      SignedMsgType is a type of signed message in the consensus.

       - SIGNED_MSG_TYPE_PREVOTE: Votes
       - SIGNED_MSG_TYPE_PROPOSAL: Proposals
  tendermint.types.Validator:
    type: object
    properties:
      address:
        type: string
        format: byte
      pub_key:
        type: object
        properties:
          ed25519:
            type: string
            format: byte
          secp256k1:
            type: string
            format: byte
        title: >-
          PublicKey defines the keys available for use with Tendermint
          Validators
      voting_power:
        type: string
        format: int64
      proposer_priority:
        type: string
        format: int64
  tendermint.types.ValidatorSet:
    type: object
    properties:
      validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              format: byte
            pub_key:
              type: object
              properties:
                ed25519:
                  type: string
                  format: byte
                secp256k1:
                  type: string
                  format: byte
              title: >-
                PublicKey defines the keys available for use with Tendermint
                Validators
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
      proposer:
        type: object
        properties:
          address:
            type: string
            format: byte
          pub_key:
            type: object
            properties:
              ed25519:
                type: string
                format: byte
              secp256k1:
                type: string
                format: byte
            title: >-
              PublicKey defines the keys available for use with Tendermint
              Validators
          voting_power:
            type: string
            format: int64
          proposer_priority:
            type: string
            format: int64
      total_voting_power:
        type: string
        format: int64
  tendermint.types.Vote:
    type: object
    properties:
      type:
        type: string
        enum:
          - SIGNED_MSG_TYPE_UNKNOWN
          - SIGNED_MSG_TYPE_PREVOTE
          - SIGNED_MSG_TYPE_PRECOMMIT
          - SIGNED_MSG_TYPE_PROPOSAL
        default: SIGNED_MSG_TYPE_UNKNOWN
        description: |-
          SignedMsgType is a type of signed message in the consensus.

           - SIGNED_MSG_TYPE_PREVOTE: Votes
           - SIGNED_MSG_TYPE_PROPOSAL: Proposals
      height:
        type: string
        format: int64
      round:
        type: integer
        format: int32
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      timestamp:
        type: string
        format: date-time
      validator_address:
        type: string
        format: byte
      validator_index:
        type: integer
        format: int32
      signature:
        type: string
        format: byte
    description: |-
      Vote represents a prevote, precommit, or commit vote from validators for
      consensus.
  tendermint.version.Consensus:
    type: object
    properties:
      block:
        type: string
        format: uint64
      app:
        type: string
        format: uint64
    description: >-
      Consensus captures the consensus rules for processing a block in the
      blockchain,

      including all blockchain data structures and the rules of the
      application's

      state transition machine.
  cosmos.crisis.v1beta1.MsgVerifyInvariantResponse:
    type: object
    description: MsgVerifyInvariantResponse defines the Msg/VerifyInvariant response type.
  cosmos.base.v1beta1.DecCoin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      DecCoin defines a token with a denomination and a decimal amount.

      NOTE: The amount field is an Dec which implements the custom method
      signatures required by gogoproto.
  cosmos.distribution.v1beta1.DelegationDelegatorReward:
    type: object
    properties:
      validator_address:
        type: string
      reward:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
    description: |-
      DelegationDelegatorReward represents the properties
      of a delegator's delegation reward.
  cosmos.distribution.v1beta1.Params:
    type: object
    properties:
      community_tax:
        type: string
      base_proposer_reward:
        type: string
      bonus_proposer_reward:
        type: string
      withdraw_addr_enabled:
        type: boolean
    description: Params defines the set of params for the distribution module.
  cosmos.distribution.v1beta1.QueryCommunityPoolResponse:
    type: object
    properties:
      pool:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
        description: pool defines community pool's coins.
    description: >-
      QueryCommunityPoolResponse is the response type for the
      Query/CommunityPool

      RPC method.
  cosmos.distribution.v1beta1.QueryDelegationRewardsResponse:
    type: object
    properties:
      rewards:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
        description: rewards defines the rewards accrued by a delegation.
    description: |-
      QueryDelegationRewardsResponse is the response type for the
      Query/DelegationRewards RPC method.
  cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse:
    type: object
    properties:
      rewards:
        type: array
        items:
          type: object
          properties:
            validator_address:
              type: string
            reward:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  DecCoin defines a token with a denomination and a decimal
                  amount.


                  NOTE: The amount field is an Dec which implements the custom
                  method

                  signatures required by gogoproto.
          description: |-
            DelegationDelegatorReward represents the properties
            of a delegator's delegation reward.
        description: rewards defines all the rewards accrued by a delegator.
      total:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
        description: total defines the sum of all the rewards.
    description: |-
      QueryDelegationTotalRewardsResponse is the response type for the
      Query/DelegationTotalRewards RPC method.
  cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse:
    type: object
    properties:
      validators:
        type: array
        items:
          type: string
        description: validators defines the validators a delegator is delegating for.
    description: |-
      QueryDelegatorValidatorsResponse is the response type for the
      Query/DelegatorValidators RPC method.
  cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse:
    type: object
    properties:
      withdraw_address:
        type: string
        description: withdraw_address defines the delegator address to query for.
    description: |-
      QueryDelegatorWithdrawAddressResponse is the response type for the
      Query/DelegatorWithdrawAddress RPC method.
  cosmos.distribution.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          community_tax:
            type: string
          base_proposer_reward:
            type: string
          bonus_proposer_reward:
            type: string
          withdraw_addr_enabled:
            type: boolean
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmos.distribution.v1beta1.QueryValidatorCommissionResponse:
    type: object
    properties:
      commission:
        description: commission defines the commision the validator received.
        type: object
        properties:
          commission:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                DecCoin defines a token with a denomination and a decimal
                amount.


                NOTE: The amount field is an Dec which implements the custom
                method

                signatures required by gogoproto.
    title: |-
      QueryValidatorCommissionResponse is the response type for the
      Query/ValidatorCommission RPC method
  cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse:
    type: object
    properties:
      rewards:
        type: object
        properties:
          rewards:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                DecCoin defines a token with a denomination and a decimal
                amount.


                NOTE: The amount field is an Dec which implements the custom
                method

                signatures required by gogoproto.
        description: >-
          ValidatorOutstandingRewards represents outstanding (un-withdrawn)
          rewards

          for a validator inexpensive to track, allows simple sanity checks.
    description: |-
      QueryValidatorOutstandingRewardsResponse is the response type for the
      Query/ValidatorOutstandingRewards RPC method.
  cosmos.distribution.v1beta1.QueryValidatorSlashesResponse:
    type: object
    properties:
      slashes:
        type: array
        items:
          type: object
          properties:
            validator_period:
              type: string
              format: uint64
            fraction:
              type: string
          description: |-
            ValidatorSlashEvent represents a validator slash event.
            Height is implicit within the store key.
            This is needed to calculate appropriate amount of staking tokens
            for delegations which are withdrawn after a slash has occurred.
        description: slashes defines the slashes the validator received.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryValidatorSlashesResponse is the response type for the
      Query/ValidatorSlashes RPC method.
  cosmos.distribution.v1beta1.ValidatorAccumulatedCommission:
    type: object
    properties:
      commission:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
    description: |-
      ValidatorAccumulatedCommission represents accumulated commission
      for a validator kept as a running counter, can be withdrawn at any time.
  cosmos.distribution.v1beta1.ValidatorOutstandingRewards:
    type: object
    properties:
      rewards:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
    description: |-
      ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
      for a validator inexpensive to track, allows simple sanity checks.
  cosmos.distribution.v1beta1.ValidatorSlashEvent:
    type: object
    properties:
      validator_period:
        type: string
        format: uint64
      fraction:
        type: string
    description: |-
      ValidatorSlashEvent represents a validator slash event.
      Height is implicit within the store key.
      This is needed to calculate appropriate amount of staking tokens
      for delegations which are withdrawn after a slash has occurred.
  cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse:
    type: object
    description: >-
      MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response
      type.
  cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse:
    type: object
    description: >-
      MsgSetWithdrawAddressResponse defines the Msg/SetWithdrawAddress response
      type.
  cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse:
    type: object
    description: >-
      MsgWithdrawDelegatorRewardResponse defines the Msg/WithdrawDelegatorReward
      response type.
  cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse:
    type: object
    description: >-
      MsgWithdrawValidatorCommissionResponse defines the
      Msg/WithdrawValidatorCommission response type.
  cosmos.evidence.v1beta1.QueryAllEvidenceResponse:
    type: object
    properties:
      evidence:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: evidence returns all evidences.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllEvidenceResponse is the response type for the Query/AllEvidence
      RPC

      method.
  cosmos.evidence.v1beta1.QueryEvidenceResponse:
    type: object
    properties:
      evidence:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: >-
      QueryEvidenceResponse is the response type for the Query/Evidence RPC
      method.
  cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse:
    type: object
    properties:
      hash:
        type: string
        format: byte
        description: hash defines the hash of the evidence.
    description: MsgSubmitEvidenceResponse defines the Msg/SubmitEvidence response type.
  cosmos.gov.v1beta1.Deposit:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
      depositor:
        type: string
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: |-
      Deposit defines an amount deposited by an account address to an active
      proposal.
  cosmos.gov.v1beta1.DepositParams:
    type: object
    properties:
      min_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: Minimum deposit for a proposal to enter voting period.
      max_deposit_period:
        type: string
        description: >-
          Maximum period for Atom holders to deposit on a proposal. Initial
          value: 2
           months.
    description: DepositParams defines the params for deposits on governance proposals.
  cosmos.gov.v1beta1.Proposal:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
      content:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      status:
        type: string
        enum:
          - PROPOSAL_STATUS_UNSPECIFIED
          - PROPOSAL_STATUS_DEPOSIT_PERIOD
          - PROPOSAL_STATUS_VOTING_PERIOD
          - PROPOSAL_STATUS_PASSED
          - PROPOSAL_STATUS_REJECTED
          - PROPOSAL_STATUS_FAILED
        default: PROPOSAL_STATUS_UNSPECIFIED
        description: |-
          ProposalStatus enumerates the valid statuses of a proposal.

           - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
           - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
          period.
           - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
          period.
           - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
          passed.
           - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
          been rejected.
           - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
          failed.
      final_tally_result:
        type: object
        properties:
          'yes':
            type: string
          abstain:
            type: string
          'no':
            type: string
          no_with_veto:
            type: string
        description: TallyResult defines a standard tally for a governance proposal.
      submit_time:
        type: string
        format: date-time
      deposit_end_time:
        type: string
        format: date-time
      total_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      voting_start_time:
        type: string
        format: date-time
      voting_end_time:
        type: string
        format: date-time
    description: Proposal defines the core field members of a governance proposal.
  cosmos.gov.v1beta1.ProposalStatus:
    type: string
    enum:
      - PROPOSAL_STATUS_UNSPECIFIED
      - PROPOSAL_STATUS_DEPOSIT_PERIOD
      - PROPOSAL_STATUS_VOTING_PERIOD
      - PROPOSAL_STATUS_PASSED
      - PROPOSAL_STATUS_REJECTED
      - PROPOSAL_STATUS_FAILED
    default: PROPOSAL_STATUS_UNSPECIFIED
    description: |-
      ProposalStatus enumerates the valid statuses of a proposal.

       - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
       - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
      period.
       - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
      period.
       - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
      passed.
       - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
      been rejected.
       - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
      failed.
  cosmos.gov.v1beta1.QueryDepositResponse:
    type: object
    properties:
      deposit:
        type: object
        properties:
          proposal_id:
            type: string
            format: uint64
          depositor:
            type: string
          amount:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
        description: |-
          Deposit defines an amount deposited by an account address to an active
          proposal.
    description: >-
      QueryDepositResponse is the response type for the Query/Deposit RPC
      method.
  cosmos.gov.v1beta1.QueryDepositsResponse:
    type: object
    properties:
      deposits:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            depositor:
              type: string
            amount:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
          description: >-
            Deposit defines an amount deposited by an account address to an
            active

            proposal.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryDepositsResponse is the response type for the Query/Deposits RPC
      method.
  cosmos.gov.v1beta1.QueryParamsResponse:
    type: object
    properties:
      voting_params:
        description: voting_params defines the parameters related to voting.
        type: object
        properties:
          voting_period:
            type: string
            description: Length of the voting period.
      deposit_params:
        description: deposit_params defines the parameters related to deposit.
        type: object
        properties:
          min_deposit:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: Minimum deposit for a proposal to enter voting period.
          max_deposit_period:
            type: string
            description: >-
              Maximum period for Atom holders to deposit on a proposal. Initial
              value: 2
               months.
      tally_params:
        description: tally_params defines the parameters related to tally.
        type: object
        properties:
          quorum:
            type: string
            format: byte
            description: >-
              Minimum percentage of total stake needed to vote for a result to
              be
               considered valid.
          threshold:
            type: string
            format: byte
            description: >-
              Minimum proportion of Yes votes for proposal to pass. Default
              value: 0.5.
          veto_threshold:
            type: string
            format: byte
            description: >-
              Minimum value of Veto votes to Total votes ratio for proposal to
              be
               vetoed. Default value: 1/3.
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmos.gov.v1beta1.QueryProposalResponse:
    type: object
    properties:
      proposal:
        type: object
        properties:
          proposal_id:
            type: string
            format: uint64
          content:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          status:
            type: string
            enum:
              - PROPOSAL_STATUS_UNSPECIFIED
              - PROPOSAL_STATUS_DEPOSIT_PERIOD
              - PROPOSAL_STATUS_VOTING_PERIOD
              - PROPOSAL_STATUS_PASSED
              - PROPOSAL_STATUS_REJECTED
              - PROPOSAL_STATUS_FAILED
            default: PROPOSAL_STATUS_UNSPECIFIED
            description: |-
              ProposalStatus enumerates the valid statuses of a proposal.

               - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
               - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
              period.
               - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
              period.
               - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
              passed.
               - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
              been rejected.
               - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
              failed.
          final_tally_result:
            type: object
            properties:
              'yes':
                type: string
              abstain:
                type: string
              'no':
                type: string
              no_with_veto:
                type: string
            description: TallyResult defines a standard tally for a governance proposal.
          submit_time:
            type: string
            format: date-time
          deposit_end_time:
            type: string
            format: date-time
          total_deposit:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          voting_start_time:
            type: string
            format: date-time
          voting_end_time:
            type: string
            format: date-time
        description: Proposal defines the core field members of a governance proposal.
    description: >-
      QueryProposalResponse is the response type for the Query/Proposal RPC
      method.
  cosmos.gov.v1beta1.QueryProposalsResponse:
    type: object
    properties:
      proposals:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            content:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            status:
              type: string
              enum:
                - PROPOSAL_STATUS_UNSPECIFIED
                - PROPOSAL_STATUS_DEPOSIT_PERIOD
                - PROPOSAL_STATUS_VOTING_PERIOD
                - PROPOSAL_STATUS_PASSED
                - PROPOSAL_STATUS_REJECTED
                - PROPOSAL_STATUS_FAILED
              default: PROPOSAL_STATUS_UNSPECIFIED
              description: |-
                ProposalStatus enumerates the valid statuses of a proposal.

                 - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                 - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                period.
                 - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                period.
                 - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                passed.
                 - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                been rejected.
                 - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                failed.
            final_tally_result:
              type: object
              properties:
                'yes':
                  type: string
                abstain:
                  type: string
                'no':
                  type: string
                no_with_veto:
                  type: string
              description: TallyResult defines a standard tally for a governance proposal.
            submit_time:
              type: string
              format: date-time
            deposit_end_time:
              type: string
              format: date-time
            total_deposit:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            voting_start_time:
              type: string
              format: date-time
            voting_end_time:
              type: string
              format: date-time
          description: Proposal defines the core field members of a governance proposal.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryProposalsResponse is the response type for the Query/Proposals RPC
      method.
  cosmos.gov.v1beta1.QueryTallyResultResponse:
    type: object
    properties:
      tally:
        type: object
        properties:
          'yes':
            type: string
          abstain:
            type: string
          'no':
            type: string
          no_with_veto:
            type: string
        description: TallyResult defines a standard tally for a governance proposal.
    description: >-
      QueryTallyResultResponse is the response type for the Query/Tally RPC
      method.
  cosmos.gov.v1beta1.QueryVoteResponse:
    type: object
    properties:
      vote:
        type: object
        properties:
          proposal_id:
            type: string
            format: uint64
          voter:
            type: string
          option:
            type: string
            enum:
              - VOTE_OPTION_UNSPECIFIED
              - VOTE_OPTION_YES
              - VOTE_OPTION_ABSTAIN
              - VOTE_OPTION_NO
              - VOTE_OPTION_NO_WITH_VETO
            default: VOTE_OPTION_UNSPECIFIED
            description: >-
              VoteOption enumerates the valid vote options for a given
              governance proposal.

               - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
               - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
               - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
               - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
               - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
        description: |-
          Vote defines a vote on a governance proposal.
          A Vote consists of a proposal ID, the voter, and the vote option.
    description: QueryVoteResponse is the response type for the Query/Vote RPC method.
  cosmos.gov.v1beta1.QueryVotesResponse:
    type: object
    properties:
      votes:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            voter:
              type: string
            option:
              type: string
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              default: VOTE_OPTION_UNSPECIFIED
              description: >-
                VoteOption enumerates the valid vote options for a given
                governance proposal.

                 - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                 - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                 - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                 - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                 - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
          description: |-
            Vote defines a vote on a governance proposal.
            A Vote consists of a proposal ID, the voter, and the vote option.
        description: votes defined the queried votes.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: QueryVotesResponse is the response type for the Query/Votes RPC method.
  cosmos.gov.v1beta1.TallyParams:
    type: object
    properties:
      quorum:
        type: string
        format: byte
        description: |-
          Minimum percentage of total stake needed to vote for a result to be
           considered valid.
      threshold:
        type: string
        format: byte
        description: >-
          Minimum proportion of Yes votes for proposal to pass. Default value:
          0.5.
      veto_threshold:
        type: string
        format: byte
        description: |-
          Minimum value of Veto votes to Total votes ratio for proposal to be
           vetoed. Default value: 1/3.
    description: TallyParams defines the params for tallying votes on governance proposals.
  cosmos.gov.v1beta1.TallyResult:
    type: object
    properties:
      'yes':
        type: string
      abstain:
        type: string
      'no':
        type: string
      no_with_veto:
        type: string
    description: TallyResult defines a standard tally for a governance proposal.
  cosmos.gov.v1beta1.Vote:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
      voter:
        type: string
      option:
        type: string
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        default: VOTE_OPTION_UNSPECIFIED
        description: >-
          VoteOption enumerates the valid vote options for a given governance
          proposal.

           - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
           - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
           - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
           - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
           - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
    description: |-
      Vote defines a vote on a governance proposal.
      A Vote consists of a proposal ID, the voter, and the vote option.
  cosmos.gov.v1beta1.VoteOption:
    type: string
    enum:
      - VOTE_OPTION_UNSPECIFIED
      - VOTE_OPTION_YES
      - VOTE_OPTION_ABSTAIN
      - VOTE_OPTION_NO
      - VOTE_OPTION_NO_WITH_VETO
    default: VOTE_OPTION_UNSPECIFIED
    description: >-
      VoteOption enumerates the valid vote options for a given governance
      proposal.

       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
  cosmos.gov.v1beta1.VotingParams:
    type: object
    properties:
      voting_period:
        type: string
        description: Length of the voting period.
    description: VotingParams defines the params for voting on governance proposals.
  cosmos.gov.v1beta1.MsgDepositResponse:
    type: object
    description: MsgDepositResponse defines the Msg/Deposit response type.
  cosmos.gov.v1beta1.MsgSubmitProposalResponse:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
    description: MsgSubmitProposalResponse defines the Msg/SubmitProposal response type.
  cosmos.gov.v1beta1.MsgVoteResponse:
    type: object
    description: MsgVoteResponse defines the Msg/Vote response type.
  cosmos.mint.v1beta1.Params:
    type: object
    properties:
      mint_denom:
        type: string
        title: type of coin to mint
      inflation_rate_change:
        type: string
        title: maximum annual change in inflation rate
      inflation_max:
        type: string
        title: maximum inflation rate
      inflation_min:
        type: string
        title: minimum inflation rate
      goal_bonded:
        type: string
        title: goal of percent bonded atoms
      blocks_per_year:
        type: string
        format: uint64
        title: expected blocks per year
    description: Params holds parameters for the mint module.
  cosmos.mint.v1beta1.QueryAnnualProvisionsResponse:
    type: object
    properties:
      annual_provisions:
        type: string
        format: byte
        description: annual_provisions is the current minting annual provisions value.
    description: |-
      QueryAnnualProvisionsResponse is the response type for the
      Query/AnnualProvisions RPC method.
  cosmos.mint.v1beta1.QueryInflationResponse:
    type: object
    properties:
      inflation:
        type: string
        format: byte
        description: inflation is the current minting inflation value.
    description: |-
      QueryInflationResponse is the response type for the Query/Inflation RPC
      method.
  cosmos.mint.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          mint_denom:
            type: string
            title: type of coin to mint
          inflation_rate_change:
            type: string
            title: maximum annual change in inflation rate
          inflation_max:
            type: string
            title: maximum inflation rate
          inflation_min:
            type: string
            title: minimum inflation rate
          goal_bonded:
            type: string
            title: goal of percent bonded atoms
          blocks_per_year:
            type: string
            format: uint64
            title: expected blocks per year
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmos.params.v1beta1.ParamChange:
    type: object
    properties:
      subspace:
        type: string
      key:
        type: string
      value:
        type: string
    description: |-
      ParamChange defines an individual parameter change, for use in
      ParameterChangeProposal.
  cosmos.params.v1beta1.QueryParamsResponse:
    type: object
    properties:
      param:
        description: param defines the queried parameter.
        type: object
        properties:
          subspace:
            type: string
          key:
            type: string
          value:
            type: string
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  cosmos.slashing.v1beta1.Params:
    type: object
    properties:
      signed_blocks_window:
        type: string
        format: int64
      min_signed_per_window:
        type: string
        format: byte
      downtime_jail_duration:
        type: string
      slash_fraction_double_sign:
        type: string
        format: byte
      slash_fraction_downtime:
        type: string
        format: byte
    description: Params represents the parameters used for by the slashing module.
  cosmos.slashing.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          signed_blocks_window:
            type: string
            format: int64
          min_signed_per_window:
            type: string
            format: byte
          downtime_jail_duration:
            type: string
          slash_fraction_double_sign:
            type: string
            format: byte
          slash_fraction_downtime:
            type: string
            format: byte
        description: Params represents the parameters used for by the slashing module.
    title: QueryParamsResponse is the response type for the Query/Params RPC method
  cosmos.slashing.v1beta1.QuerySigningInfoResponse:
    type: object
    properties:
      val_signing_info:
        type: object
        properties:
          address:
            type: string
          start_height:
            type: string
            format: int64
            title: height at which validator was first a candidate OR was unjailed
          index_offset:
            type: string
            format: int64
            title: index offset into signed block bit array
          jailed_until:
            type: string
            format: date-time
            title: timestamp validator cannot be unjailed until
          tombstoned:
            type: boolean
            title: >-
              whether or not a validator has been tombstoned (killed out of
              validator

              set)
          missed_blocks_counter:
            type: string
            format: int64
            title: missed blocks counter (to avoid scanning the array every time)
        description: >-
          ValidatorSigningInfo defines a validator's signing info for monitoring
          their

          liveness activity.
        title: val_signing_info is the signing info of requested val cons address
    title: >-
      QuerySigningInfoResponse is the response type for the Query/SigningInfo
      RPC

      method
  cosmos.slashing.v1beta1.QuerySigningInfosResponse:
    type: object
    properties:
      info:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            start_height:
              type: string
              format: int64
              title: height at which validator was first a candidate OR was unjailed
            index_offset:
              type: string
              format: int64
              title: index offset into signed block bit array
            jailed_until:
              type: string
              format: date-time
              title: timestamp validator cannot be unjailed until
            tombstoned:
              type: boolean
              title: >-
                whether or not a validator has been tombstoned (killed out of
                validator

                set)
            missed_blocks_counter:
              type: string
              format: int64
              title: missed blocks counter (to avoid scanning the array every time)
          description: >-
            ValidatorSigningInfo defines a validator's signing info for
            monitoring their

            liveness activity.
        title: info is the signing info of all validators
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: >-
      QuerySigningInfosResponse is the response type for the Query/SigningInfos
      RPC

      method
  cosmos.slashing.v1beta1.ValidatorSigningInfo:
    type: object
    properties:
      address:
        type: string
      start_height:
        type: string
        format: int64
        title: height at which validator was first a candidate OR was unjailed
      index_offset:
        type: string
        format: int64
        title: index offset into signed block bit array
      jailed_until:
        type: string
        format: date-time
        title: timestamp validator cannot be unjailed until
      tombstoned:
        type: boolean
        title: >-
          whether or not a validator has been tombstoned (killed out of
          validator

          set)
      missed_blocks_counter:
        type: string
        format: int64
        title: missed blocks counter (to avoid scanning the array every time)
    description: >-
      ValidatorSigningInfo defines a validator's signing info for monitoring
      their

      liveness activity.
  cosmos.slashing.v1beta1.MsgUnjailResponse:
    type: object
    title: MsgUnjailResponse defines the Msg/Unjail response type
  cosmos.staking.v1beta1.BondStatus:
    type: string
    enum:
      - BOND_STATUS_UNSPECIFIED
      - BOND_STATUS_UNBONDED
      - BOND_STATUS_UNBONDING
      - BOND_STATUS_BONDED
    default: BOND_STATUS_UNSPECIFIED
    description: |-
      BondStatus is the status of a validator.

       - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.
       - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.
       - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.
       - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
  cosmos.staking.v1beta1.Commission:
    type: object
    properties:
      commission_rates:
        description: >-
          commission_rates defines the initial commission rates to be used for
          creating a validator.
        type: object
        properties:
          rate:
            type: string
            description: 'rate is the commission rate charged to delegators, as a fraction.'
          max_rate:
            type: string
            description: >-
              max_rate defines the maximum commission rate which validator can
              ever charge, as a fraction.
          max_change_rate:
            type: string
            description: >-
              max_change_rate defines the maximum daily increase of the
              validator commission, as a fraction.
      update_time:
        type: string
        format: date-time
        description: update_time is the last time the commission rate was changed.
    description: Commission defines commission parameters for a given validator.
  cosmos.staking.v1beta1.CommissionRates:
    type: object
    properties:
      rate:
        type: string
        description: 'rate is the commission rate charged to delegators, as a fraction.'
      max_rate:
        type: string
        description: >-
          max_rate defines the maximum commission rate which validator can ever
          charge, as a fraction.
      max_change_rate:
        type: string
        description: >-
          max_change_rate defines the maximum daily increase of the validator
          commission, as a fraction.
    description: >-
      CommissionRates defines the initial commission rates to be used for
      creating

      a validator.
  cosmos.staking.v1beta1.Delegation:
    type: object
    properties:
      delegator_address:
        type: string
        description: delegator_address is the bech32-encoded address of the delegator.
      validator_address:
        type: string
        description: validator_address is the bech32-encoded address of the validator.
      shares:
        type: string
        description: shares define the delegation shares received.
    description: |-
      Delegation represents the bond with tokens held by an account. It is
      owned by one delegator, and is associated with the voting power of one
      validator.
  cosmos.staking.v1beta1.DelegationResponse:
    type: object
    properties:
      delegation:
        type: object
        properties:
          delegator_address:
            type: string
            description: delegator_address is the bech32-encoded address of the delegator.
          validator_address:
            type: string
            description: validator_address is the bech32-encoded address of the validator.
          shares:
            type: string
            description: shares define the delegation shares received.
        description: |-
          Delegation represents the bond with tokens held by an account. It is
          owned by one delegator, and is associated with the voting power of one
          validator.
      balance:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: |-
      DelegationResponse is equivalent to Delegation except that it contains a
      balance in addition to shares which is more suitable for client responses.
  cosmos.staking.v1beta1.Description:
    type: object
    properties:
      moniker:
        type: string
        description: moniker defines a human-readable name for the validator.
      identity:
        type: string
        description: >-
          identity defines an optional identity signature (ex. UPort or
          Keybase).
      website:
        type: string
        description: website defines an optional website link.
      security_contact:
        type: string
        description: security_contact defines an optional email for security contact.
      details:
        type: string
        description: details define other optional details.
    description: Description defines a validator description.
  cosmos.staking.v1beta1.HistoricalInfo:
    type: object
    properties:
      header:
        type: object
        properties:
          version:
            title: basic block info
            type: object
            properties:
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
          chain_id:
            type: string
          height:
            type: string
            format: int64
          time:
            type: string
            format: date-time
          last_block_id:
            title: prev block info
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
          last_commit_hash:
            type: string
            format: byte
            title: hashes of block data
          data_hash:
            type: string
            format: byte
          validators_hash:
            type: string
            format: byte
            title: hashes from the app output from the prev block
          next_validators_hash:
            type: string
            format: byte
          consensus_hash:
            type: string
            format: byte
          app_hash:
            type: string
            format: byte
          last_results_hash:
            type: string
            format: byte
          evidence_hash:
            type: string
            format: byte
            title: consensus info
          proposer_address:
            type: string
            format: byte
        description: Header defines the structure of a Tendermint block header.
      valset:
        type: array
        items:
          type: object
          properties:
            operator_address:
              type: string
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
            consensus_pubkey:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            jailed:
              type: boolean
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
            status:
              description: status is the validator status (bonded/unbonding/unbonded).
              type: string
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              default: BOND_STATUS_UNSPECIFIED
            tokens:
              type: string
              description: tokens define the delegated tokens (incl. self-delegation).
            delegator_shares:
              type: string
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
            description:
              description: description defines the description terms for the validator.
              type: object
              properties:
                moniker:
                  type: string
                  description: moniker defines a human-readable name for the validator.
                identity:
                  type: string
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                website:
                  type: string
                  description: website defines an optional website link.
                security_contact:
                  type: string
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                details:
                  type: string
                  description: details define other optional details.
            unbonding_height:
              type: string
              format: int64
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
            unbonding_time:
              type: string
              format: date-time
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
            commission:
              description: commission defines the commission parameters.
              type: object
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  type: object
                  properties:
                    rate:
                      type: string
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                    max_rate:
                      type: string
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                    max_change_rate:
                      type: string
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                update_time:
                  type: string
                  format: date-time
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
            min_self_delegation:
              type: string
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
    description: >-
      HistoricalInfo contains header and validator information for a given
      block.

      It is stored as part of staking module's state, which persists the `n`
      most

      recent HistoricalInfo

      (`n` is set by the staking module's `historical_entries` parameter).
  cosmos.staking.v1beta1.Params:
    type: object
    properties:
      unbonding_time:
        type: string
        description: unbonding_time is the time duration of unbonding.
      max_validators:
        type: integer
        format: int64
        description: max_validators is the maximum number of validators.
      max_entries:
        type: integer
        format: int64
        description: >-
          max_entries is the max entries for either unbonding delegation or
          redelegation (per pair/trio).
      historical_entries:
        type: integer
        format: int64
        description: historical_entries is the number of historical entries to persist.
      bond_denom:
        type: string
        description: bond_denom defines the bondable coin denomination.
    description: Params defines the parameters for the staking module.
  cosmos.staking.v1beta1.Pool:
    type: object
    properties:
      not_bonded_tokens:
        type: string
      bonded_tokens:
        type: string
    description: |-
      Pool is used for tracking bonded and not-bonded token supply of the bond
      denomination.
  cosmos.staking.v1beta1.QueryDelegationResponse:
    type: object
    properties:
      delegation_response:
        type: object
        properties:
          delegation:
            type: object
            properties:
              delegator_address:
                type: string
                description: >-
                  delegator_address is the bech32-encoded address of the
                  delegator.
              validator_address:
                type: string
                description: >-
                  validator_address is the bech32-encoded address of the
                  validator.
              shares:
                type: string
                description: shares define the delegation shares received.
            description: >-
              Delegation represents the bond with tokens held by an account. It
              is

              owned by one delegator, and is associated with the voting power of
              one

              validator.
          balance:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
        description: >-
          DelegationResponse is equivalent to Delegation except that it contains
          a

          balance in addition to shares which is more suitable for client
          responses.
    description: >-
      QueryDelegationResponse is response type for the Query/Delegation RPC
      method.
  cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse:
    type: object
    properties:
      delegation_responses:
        type: array
        items:
          type: object
          properties:
            delegation:
              type: object
              properties:
                delegator_address:
                  type: string
                  description: >-
                    delegator_address is the bech32-encoded address of the
                    delegator.
                validator_address:
                  type: string
                  description: >-
                    validator_address is the bech32-encoded address of the
                    validator.
                shares:
                  type: string
                  description: shares define the delegation shares received.
              description: >-
                Delegation represents the bond with tokens held by an account.
                It is

                owned by one delegator, and is associated with the voting power
                of one

                validator.
            balance:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          description: >-
            DelegationResponse is equivalent to Delegation except that it
            contains a

            balance in addition to shares which is more suitable for client
            responses.
        description: delegation_responses defines all the delegations' info of a delegator.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryDelegatorDelegationsResponse is response type for the
      Query/DelegatorDelegations RPC method.
  cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse:
    type: object
    properties:
      unbonding_responses:
        type: array
        items:
          type: object
          properties:
            delegator_address:
              type: string
              description: >-
                delegator_address is the bech32-encoded address of the
                delegator.
            validator_address:
              type: string
              description: >-
                validator_address is the bech32-encoded address of the
                validator.
            entries:
              type: array
              items:
                type: object
                properties:
                  creation_height:
                    type: string
                    format: int64
                    description: >-
                      creation_height is the height which the unbonding took
                      place.
                  completion_time:
                    type: string
                    format: date-time
                    description: completion_time is the unix time for unbonding completion.
                  initial_balance:
                    type: string
                    description: >-
                      initial_balance defines the tokens initially scheduled to
                      receive at completion.
                  balance:
                    type: string
                    description: balance defines the tokens to receive at completion.
                description: >-
                  UnbondingDelegationEntry defines an unbonding object with
                  relevant metadata.
              description: entries are the unbonding delegation entries.
          description: >-
            UnbondingDelegation stores all of a single delegator's unbonding
            bonds

            for a single validator in an time-ordered list.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryUnbondingDelegatorDelegationsResponse is response type for the
      Query/UnbondingDelegatorDelegations RPC method.
  cosmos.staking.v1beta1.QueryDelegatorValidatorResponse:
    type: object
    properties:
      validator:
        type: object
        properties:
          operator_address:
            type: string
            description: >-
              operator_address defines the address of the validator's operator;
              bech encoded in JSON.
          consensus_pubkey:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          jailed:
            type: boolean
            description: >-
              jailed defined whether the validator has been jailed from bonded
              status or not.
          status:
            description: status is the validator status (bonded/unbonding/unbonded).
            type: string
            enum:
              - BOND_STATUS_UNSPECIFIED
              - BOND_STATUS_UNBONDED
              - BOND_STATUS_UNBONDING
              - BOND_STATUS_BONDED
            default: BOND_STATUS_UNSPECIFIED
          tokens:
            type: string
            description: tokens define the delegated tokens (incl. self-delegation).
          delegator_shares:
            type: string
            description: >-
              delegator_shares defines total shares issued to a validator's
              delegators.
          description:
            description: description defines the description terms for the validator.
            type: object
            properties:
              moniker:
                type: string
                description: moniker defines a human-readable name for the validator.
              identity:
                type: string
                description: >-
                  identity defines an optional identity signature (ex. UPort or
                  Keybase).
              website:
                type: string
                description: website defines an optional website link.
              security_contact:
                type: string
                description: >-
                  security_contact defines an optional email for security
                  contact.
              details:
                type: string
                description: details define other optional details.
          unbonding_height:
            type: string
            format: int64
            description: >-
              unbonding_height defines, if unbonding, the height at which this
              validator has begun unbonding.
          unbonding_time:
            type: string
            format: date-time
            description: >-
              unbonding_time defines, if unbonding, the min time for the
              validator to complete unbonding.
          commission:
            description: commission defines the commission parameters.
            type: object
            properties:
              commission_rates:
                description: >-
                  commission_rates defines the initial commission rates to be
                  used for creating a validator.
                type: object
                properties:
                  rate:
                    type: string
                    description: >-
                      rate is the commission rate charged to delegators, as a
                      fraction.
                  max_rate:
                    type: string
                    description: >-
                      max_rate defines the maximum commission rate which
                      validator can ever charge, as a fraction.
                  max_change_rate:
                    type: string
                    description: >-
                      max_change_rate defines the maximum daily increase of the
                      validator commission, as a fraction.
              update_time:
                type: string
                format: date-time
                description: update_time is the last time the commission rate was changed.
          min_self_delegation:
            type: string
            description: >-
              min_self_delegation is the validator's self declared minimum self
              delegation.
        description: >-
          Validator defines a validator, together with the total amount of the

          Validator's bond shares and their exchange rate to coins. Slashing
          results in

          a decrease in the exchange rate, allowing correct calculation of
          future

          undelegations without iterating over delegators. When coins are
          delegated to

          this validator, the validator is credited with a delegation whose
          number of

          bond shares is based on the amount of coins delegated divided by the
          current

          exchange rate. Voting power can be calculated as total bonded shares

          multiplied by exchange rate.
    description: |-
      QueryDelegatorValidatorResponse response type for the
      Query/DelegatorValidator RPC method.
  cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse:
    type: object
    properties:
      validators:
        type: array
        items:
          type: object
          properties:
            operator_address:
              type: string
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
            consensus_pubkey:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            jailed:
              type: boolean
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
            status:
              description: status is the validator status (bonded/unbonding/unbonded).
              type: string
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              default: BOND_STATUS_UNSPECIFIED
            tokens:
              type: string
              description: tokens define the delegated tokens (incl. self-delegation).
            delegator_shares:
              type: string
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
            description:
              description: description defines the description terms for the validator.
              type: object
              properties:
                moniker:
                  type: string
                  description: moniker defines a human-readable name for the validator.
                identity:
                  type: string
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                website:
                  type: string
                  description: website defines an optional website link.
                security_contact:
                  type: string
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                details:
                  type: string
                  description: details define other optional details.
            unbonding_height:
              type: string
              format: int64
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
            unbonding_time:
              type: string
              format: date-time
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
            commission:
              description: commission defines the commission parameters.
              type: object
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  type: object
                  properties:
                    rate:
                      type: string
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                    max_rate:
                      type: string
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                    max_change_rate:
                      type: string
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                update_time:
                  type: string
                  format: date-time
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
            min_self_delegation:
              type: string
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
        description: validators defines the the validators' info of a delegator.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryDelegatorValidatorsResponse is response type for the
      Query/DelegatorValidators RPC method.
  cosmos.staking.v1beta1.QueryHistoricalInfoResponse:
    type: object
    properties:
      hist:
        description: hist defines the historical info at the given height.
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                title: prev block info
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                format: byte
            description: Header defines the structure of a Tendermint block header.
          valset:
            type: array
            items:
              type: object
              properties:
                operator_address:
                  type: string
                  description: >-
                    operator_address defines the address of the validator's
                    operator; bech encoded in JSON.
                consensus_pubkey:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                jailed:
                  type: boolean
                  description: >-
                    jailed defined whether the validator has been jailed from
                    bonded status or not.
                status:
                  description: status is the validator status (bonded/unbonding/unbonded).
                  type: string
                  enum:
                    - BOND_STATUS_UNSPECIFIED
                    - BOND_STATUS_UNBONDED
                    - BOND_STATUS_UNBONDING
                    - BOND_STATUS_BONDED
                  default: BOND_STATUS_UNSPECIFIED
                tokens:
                  type: string
                  description: tokens define the delegated tokens (incl. self-delegation).
                delegator_shares:
                  type: string
                  description: >-
                    delegator_shares defines total shares issued to a
                    validator's delegators.
                description:
                  description: description defines the description terms for the validator.
                  type: object
                  properties:
                    moniker:
                      type: string
                      description: moniker defines a human-readable name for the validator.
                    identity:
                      type: string
                      description: >-
                        identity defines an optional identity signature (ex.
                        UPort or Keybase).
                    website:
                      type: string
                      description: website defines an optional website link.
                    security_contact:
                      type: string
                      description: >-
                        security_contact defines an optional email for security
                        contact.
                    details:
                      type: string
                      description: details define other optional details.
                unbonding_height:
                  type: string
                  format: int64
                  description: >-
                    unbonding_height defines, if unbonding, the height at which
                    this validator has begun unbonding.
                unbonding_time:
                  type: string
                  format: date-time
                  description: >-
                    unbonding_time defines, if unbonding, the min time for the
                    validator to complete unbonding.
                commission:
                  description: commission defines the commission parameters.
                  type: object
                  properties:
                    commission_rates:
                      description: >-
                        commission_rates defines the initial commission rates to
                        be used for creating a validator.
                      type: object
                      properties:
                        rate:
                          type: string
                          description: >-
                            rate is the commission rate charged to delegators,
                            as a fraction.
                        max_rate:
                          type: string
                          description: >-
                            max_rate defines the maximum commission rate which
                            validator can ever charge, as a fraction.
                        max_change_rate:
                          type: string
                          description: >-
                            max_change_rate defines the maximum daily increase
                            of the validator commission, as a fraction.
                    update_time:
                      type: string
                      format: date-time
                      description: >-
                        update_time is the last time the commission rate was
                        changed.
                min_self_delegation:
                  type: string
                  description: >-
                    min_self_delegation is the validator's self declared minimum
                    self delegation.
              description: >-
                Validator defines a validator, together with the total amount of
                the

                Validator's bond shares and their exchange rate to coins.
                Slashing results in

                a decrease in the exchange rate, allowing correct calculation of
                future

                undelegations without iterating over delegators. When coins are
                delegated to

                this validator, the validator is credited with a delegation
                whose number of

                bond shares is based on the amount of coins delegated divided by
                the current

                exchange rate. Voting power can be calculated as total bonded
                shares

                multiplied by exchange rate.
    description: >-
      QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo
      RPC

      method.
  cosmos.staking.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params holds all the parameters of this module.
        type: object
        properties:
          unbonding_time:
            type: string
            description: unbonding_time is the time duration of unbonding.
          max_validators:
            type: integer
            format: int64
            description: max_validators is the maximum number of validators.
          max_entries:
            type: integer
            format: int64
            description: >-
              max_entries is the max entries for either unbonding delegation or
              redelegation (per pair/trio).
          historical_entries:
            type: integer
            format: int64
            description: historical_entries is the number of historical entries to persist.
          bond_denom:
            type: string
            description: bond_denom defines the bondable coin denomination.
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  cosmos.staking.v1beta1.QueryPoolResponse:
    type: object
    properties:
      pool:
        description: pool defines the pool info.
        type: object
        properties:
          not_bonded_tokens:
            type: string
          bonded_tokens:
            type: string
    description: QueryPoolResponse is response type for the Query/Pool RPC method.
  cosmos.staking.v1beta1.QueryRedelegationsResponse:
    type: object
    properties:
      redelegation_responses:
        type: array
        items:
          type: object
          properties:
            redelegation:
              type: object
              properties:
                delegator_address:
                  type: string
                  description: >-
                    delegator_address is the bech32-encoded address of the
                    delegator.
                validator_src_address:
                  type: string
                  description: >-
                    validator_src_address is the validator redelegation source
                    operator address.
                validator_dst_address:
                  type: string
                  description: >-
                    validator_dst_address is the validator redelegation
                    destination operator address.
                entries:
                  type: array
                  items:
                    type: object
                    properties:
                      creation_height:
                        type: string
                        format: int64
                        description: >-
                          creation_height  defines the height which the
                          redelegation took place.
                      completion_time:
                        type: string
                        format: date-time
                        description: >-
                          completion_time defines the unix time for redelegation
                          completion.
                      initial_balance:
                        type: string
                        description: >-
                          initial_balance defines the initial balance when
                          redelegation started.
                      shares_dst:
                        type: string
                        description: >-
                          shares_dst is the amount of destination-validator
                          shares created by redelegation.
                    description: >-
                      RedelegationEntry defines a redelegation object with
                      relevant metadata.
                  description: entries are the redelegation entries.
              description: >-
                Redelegation contains the list of a particular delegator's
                redelegating bonds

                from a particular source validator to a particular destination
                validator.
            entries:
              type: array
              items:
                type: object
                properties:
                  redelegation_entry:
                    type: object
                    properties:
                      creation_height:
                        type: string
                        format: int64
                        description: >-
                          creation_height  defines the height which the
                          redelegation took place.
                      completion_time:
                        type: string
                        format: date-time
                        description: >-
                          completion_time defines the unix time for redelegation
                          completion.
                      initial_balance:
                        type: string
                        description: >-
                          initial_balance defines the initial balance when
                          redelegation started.
                      shares_dst:
                        type: string
                        description: >-
                          shares_dst is the amount of destination-validator
                          shares created by redelegation.
                    description: >-
                      RedelegationEntry defines a redelegation object with
                      relevant metadata.
                  balance:
                    type: string
                description: >-
                  RedelegationEntryResponse is equivalent to a RedelegationEntry
                  except that it

                  contains a balance in addition to shares which is more
                  suitable for client

                  responses.
          description: >-
            RedelegationResponse is equivalent to a Redelegation except that its
            entries

            contain a balance in addition to shares which is more suitable for
            client

            responses.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryRedelegationsResponse is response type for the Query/Redelegations
      RPC

      method.
  cosmos.staking.v1beta1.QueryUnbondingDelegationResponse:
    type: object
    properties:
      unbond:
        type: object
        properties:
          delegator_address:
            type: string
            description: delegator_address is the bech32-encoded address of the delegator.
          validator_address:
            type: string
            description: validator_address is the bech32-encoded address of the validator.
          entries:
            type: array
            items:
              type: object
              properties:
                creation_height:
                  type: string
                  format: int64
                  description: >-
                    creation_height is the height which the unbonding took
                    place.
                completion_time:
                  type: string
                  format: date-time
                  description: completion_time is the unix time for unbonding completion.
                initial_balance:
                  type: string
                  description: >-
                    initial_balance defines the tokens initially scheduled to
                    receive at completion.
                balance:
                  type: string
                  description: balance defines the tokens to receive at completion.
              description: >-
                UnbondingDelegationEntry defines an unbonding object with
                relevant metadata.
            description: entries are the unbonding delegation entries.
        description: |-
          UnbondingDelegation stores all of a single delegator's unbonding bonds
          for a single validator in an time-ordered list.
    description: |-
      QueryDelegationResponse is response type for the Query/UnbondingDelegation
      RPC method.
  cosmos.staking.v1beta1.QueryValidatorDelegationsResponse:
    type: object
    properties:
      delegation_responses:
        type: array
        items:
          type: object
          properties:
            delegation:
              type: object
              properties:
                delegator_address:
                  type: string
                  description: >-
                    delegator_address is the bech32-encoded address of the
                    delegator.
                validator_address:
                  type: string
                  description: >-
                    validator_address is the bech32-encoded address of the
                    validator.
                shares:
                  type: string
                  description: shares define the delegation shares received.
              description: >-
                Delegation represents the bond with tokens held by an account.
                It is

                owned by one delegator, and is associated with the voting power
                of one

                validator.
            balance:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          description: >-
            DelegationResponse is equivalent to Delegation except that it
            contains a

            balance in addition to shares which is more suitable for client
            responses.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: |-
      QueryValidatorDelegationsResponse is response type for the
      Query/ValidatorDelegations RPC method
  cosmos.staking.v1beta1.QueryValidatorResponse:
    type: object
    properties:
      validator:
        type: object
        properties:
          operator_address:
            type: string
            description: >-
              operator_address defines the address of the validator's operator;
              bech encoded in JSON.
          consensus_pubkey:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          jailed:
            type: boolean
            description: >-
              jailed defined whether the validator has been jailed from bonded
              status or not.
          status:
            description: status is the validator status (bonded/unbonding/unbonded).
            type: string
            enum:
              - BOND_STATUS_UNSPECIFIED
              - BOND_STATUS_UNBONDED
              - BOND_STATUS_UNBONDING
              - BOND_STATUS_BONDED
            default: BOND_STATUS_UNSPECIFIED
          tokens:
            type: string
            description: tokens define the delegated tokens (incl. self-delegation).
          delegator_shares:
            type: string
            description: >-
              delegator_shares defines total shares issued to a validator's
              delegators.
          description:
            description: description defines the description terms for the validator.
            type: object
            properties:
              moniker:
                type: string
                description: moniker defines a human-readable name for the validator.
              identity:
                type: string
                description: >-
                  identity defines an optional identity signature (ex. UPort or
                  Keybase).
              website:
                type: string
                description: website defines an optional website link.
              security_contact:
                type: string
                description: >-
                  security_contact defines an optional email for security
                  contact.
              details:
                type: string
                description: details define other optional details.
          unbonding_height:
            type: string
            format: int64
            description: >-
              unbonding_height defines, if unbonding, the height at which this
              validator has begun unbonding.
          unbonding_time:
            type: string
            format: date-time
            description: >-
              unbonding_time defines, if unbonding, the min time for the
              validator to complete unbonding.
          commission:
            description: commission defines the commission parameters.
            type: object
            properties:
              commission_rates:
                description: >-
                  commission_rates defines the initial commission rates to be
                  used for creating a validator.
                type: object
                properties:
                  rate:
                    type: string
                    description: >-
                      rate is the commission rate charged to delegators, as a
                      fraction.
                  max_rate:
                    type: string
                    description: >-
                      max_rate defines the maximum commission rate which
                      validator can ever charge, as a fraction.
                  max_change_rate:
                    type: string
                    description: >-
                      max_change_rate defines the maximum daily increase of the
                      validator commission, as a fraction.
              update_time:
                type: string
                format: date-time
                description: update_time is the last time the commission rate was changed.
          min_self_delegation:
            type: string
            description: >-
              min_self_delegation is the validator's self declared minimum self
              delegation.
        description: >-
          Validator defines a validator, together with the total amount of the

          Validator's bond shares and their exchange rate to coins. Slashing
          results in

          a decrease in the exchange rate, allowing correct calculation of
          future

          undelegations without iterating over delegators. When coins are
          delegated to

          this validator, the validator is credited with a delegation whose
          number of

          bond shares is based on the amount of coins delegated divided by the
          current

          exchange rate. Voting power can be calculated as total bonded shares

          multiplied by exchange rate.
    title: QueryValidatorResponse is response type for the Query/Validator RPC method
  cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse:
    type: object
    properties:
      unbonding_responses:
        type: array
        items:
          type: object
          properties:
            delegator_address:
              type: string
              description: >-
                delegator_address is the bech32-encoded address of the
                delegator.
            validator_address:
              type: string
              description: >-
                validator_address is the bech32-encoded address of the
                validator.
            entries:
              type: array
              items:
                type: object
                properties:
                  creation_height:
                    type: string
                    format: int64
                    description: >-
                      creation_height is the height which the unbonding took
                      place.
                  completion_time:
                    type: string
                    format: date-time
                    description: completion_time is the unix time for unbonding completion.
                  initial_balance:
                    type: string
                    description: >-
                      initial_balance defines the tokens initially scheduled to
                      receive at completion.
                  balance:
                    type: string
                    description: balance defines the tokens to receive at completion.
                description: >-
                  UnbondingDelegationEntry defines an unbonding object with
                  relevant metadata.
              description: entries are the unbonding delegation entries.
          description: >-
            UnbondingDelegation stores all of a single delegator's unbonding
            bonds

            for a single validator in an time-ordered list.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryValidatorUnbondingDelegationsResponse is response type for the
      Query/ValidatorUnbondingDelegations RPC method.
  cosmos.staking.v1beta1.QueryValidatorsResponse:
    type: object
    properties:
      validators:
        type: array
        items:
          type: object
          properties:
            operator_address:
              type: string
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
            consensus_pubkey:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            jailed:
              type: boolean
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
            status:
              description: status is the validator status (bonded/unbonding/unbonded).
              type: string
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              default: BOND_STATUS_UNSPECIFIED
            tokens:
              type: string
              description: tokens define the delegated tokens (incl. self-delegation).
            delegator_shares:
              type: string
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
            description:
              description: description defines the description terms for the validator.
              type: object
              properties:
                moniker:
                  type: string
                  description: moniker defines a human-readable name for the validator.
                identity:
                  type: string
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                website:
                  type: string
                  description: website defines an optional website link.
                security_contact:
                  type: string
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                details:
                  type: string
                  description: details define other optional details.
            unbonding_height:
              type: string
              format: int64
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
            unbonding_time:
              type: string
              format: date-time
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
            commission:
              description: commission defines the commission parameters.
              type: object
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  type: object
                  properties:
                    rate:
                      type: string
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                    max_rate:
                      type: string
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                    max_change_rate:
                      type: string
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                update_time:
                  type: string
                  format: date-time
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
            min_self_delegation:
              type: string
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
        description: validators contains all the queried validators.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: >-
      QueryValidatorsResponse is response type for the Query/Validators RPC
      method
  cosmos.staking.v1beta1.Redelegation:
    type: object
    properties:
      delegator_address:
        type: string
        description: delegator_address is the bech32-encoded address of the delegator.
      validator_src_address:
        type: string
        description: >-
          validator_src_address is the validator redelegation source operator
          address.
      validator_dst_address:
        type: string
        description: >-
          validator_dst_address is the validator redelegation destination
          operator address.
      entries:
        type: array
        items:
          type: object
          properties:
            creation_height:
              type: string
              format: int64
              description: >-
                creation_height  defines the height which the redelegation took
                place.
            completion_time:
              type: string
              format: date-time
              description: >-
                completion_time defines the unix time for redelegation
                completion.
            initial_balance:
              type: string
              description: >-
                initial_balance defines the initial balance when redelegation
                started.
            shares_dst:
              type: string
              description: >-
                shares_dst is the amount of destination-validator shares created
                by redelegation.
          description: >-
            RedelegationEntry defines a redelegation object with relevant
            metadata.
        description: entries are the redelegation entries.
    description: >-
      Redelegation contains the list of a particular delegator's redelegating
      bonds

      from a particular source validator to a particular destination validator.
  cosmos.staking.v1beta1.RedelegationEntry:
    type: object
    properties:
      creation_height:
        type: string
        format: int64
        description: creation_height  defines the height which the redelegation took place.
      completion_time:
        type: string
        format: date-time
        description: completion_time defines the unix time for redelegation completion.
      initial_balance:
        type: string
        description: initial_balance defines the initial balance when redelegation started.
      shares_dst:
        type: string
        description: >-
          shares_dst is the amount of destination-validator shares created by
          redelegation.
    description: RedelegationEntry defines a redelegation object with relevant metadata.
  cosmos.staking.v1beta1.RedelegationEntryResponse:
    type: object
    properties:
      redelegation_entry:
        type: object
        properties:
          creation_height:
            type: string
            format: int64
            description: >-
              creation_height  defines the height which the redelegation took
              place.
          completion_time:
            type: string
            format: date-time
            description: completion_time defines the unix time for redelegation completion.
          initial_balance:
            type: string
            description: >-
              initial_balance defines the initial balance when redelegation
              started.
          shares_dst:
            type: string
            description: >-
              shares_dst is the amount of destination-validator shares created
              by redelegation.
        description: >-
          RedelegationEntry defines a redelegation object with relevant
          metadata.
      balance:
        type: string
    description: >-
      RedelegationEntryResponse is equivalent to a RedelegationEntry except that
      it

      contains a balance in addition to shares which is more suitable for client

      responses.
  cosmos.staking.v1beta1.RedelegationResponse:
    type: object
    properties:
      redelegation:
        type: object
        properties:
          delegator_address:
            type: string
            description: delegator_address is the bech32-encoded address of the delegator.
          validator_src_address:
            type: string
            description: >-
              validator_src_address is the validator redelegation source
              operator address.
          validator_dst_address:
            type: string
            description: >-
              validator_dst_address is the validator redelegation destination
              operator address.
          entries:
            type: array
            items:
              type: object
              properties:
                creation_height:
                  type: string
                  format: int64
                  description: >-
                    creation_height  defines the height which the redelegation
                    took place.
                completion_time:
                  type: string
                  format: date-time
                  description: >-
                    completion_time defines the unix time for redelegation
                    completion.
                initial_balance:
                  type: string
                  description: >-
                    initial_balance defines the initial balance when
                    redelegation started.
                shares_dst:
                  type: string
                  description: >-
                    shares_dst is the amount of destination-validator shares
                    created by redelegation.
              description: >-
                RedelegationEntry defines a redelegation object with relevant
                metadata.
            description: entries are the redelegation entries.
        description: >-
          Redelegation contains the list of a particular delegator's
          redelegating bonds

          from a particular source validator to a particular destination
          validator.
      entries:
        type: array
        items:
          type: object
          properties:
            redelegation_entry:
              type: object
              properties:
                creation_height:
                  type: string
                  format: int64
                  description: >-
                    creation_height  defines the height which the redelegation
                    took place.
                completion_time:
                  type: string
                  format: date-time
                  description: >-
                    completion_time defines the unix time for redelegation
                    completion.
                initial_balance:
                  type: string
                  description: >-
                    initial_balance defines the initial balance when
                    redelegation started.
                shares_dst:
                  type: string
                  description: >-
                    shares_dst is the amount of destination-validator shares
                    created by redelegation.
              description: >-
                RedelegationEntry defines a redelegation object with relevant
                metadata.
            balance:
              type: string
          description: >-
            RedelegationEntryResponse is equivalent to a RedelegationEntry
            except that it

            contains a balance in addition to shares which is more suitable for
            client

            responses.
    description: >-
      RedelegationResponse is equivalent to a Redelegation except that its
      entries

      contain a balance in addition to shares which is more suitable for client

      responses.
  cosmos.staking.v1beta1.UnbondingDelegation:
    type: object
    properties:
      delegator_address:
        type: string
        description: delegator_address is the bech32-encoded address of the delegator.
      validator_address:
        type: string
        description: validator_address is the bech32-encoded address of the validator.
      entries:
        type: array
        items:
          type: object
          properties:
            creation_height:
              type: string
              format: int64
              description: creation_height is the height which the unbonding took place.
            completion_time:
              type: string
              format: date-time
              description: completion_time is the unix time for unbonding completion.
            initial_balance:
              type: string
              description: >-
                initial_balance defines the tokens initially scheduled to
                receive at completion.
            balance:
              type: string
              description: balance defines the tokens to receive at completion.
          description: >-
            UnbondingDelegationEntry defines an unbonding object with relevant
            metadata.
        description: entries are the unbonding delegation entries.
    description: |-
      UnbondingDelegation stores all of a single delegator's unbonding bonds
      for a single validator in an time-ordered list.
  cosmos.staking.v1beta1.UnbondingDelegationEntry:
    type: object
    properties:
      creation_height:
        type: string
        format: int64
        description: creation_height is the height which the unbonding took place.
      completion_time:
        type: string
        format: date-time
        description: completion_time is the unix time for unbonding completion.
      initial_balance:
        type: string
        description: >-
          initial_balance defines the tokens initially scheduled to receive at
          completion.
      balance:
        type: string
        description: balance defines the tokens to receive at completion.
    description: >-
      UnbondingDelegationEntry defines an unbonding object with relevant
      metadata.
  cosmos.staking.v1beta1.Validator:
    type: object
    properties:
      operator_address:
        type: string
        description: >-
          operator_address defines the address of the validator's operator; bech
          encoded in JSON.
      consensus_pubkey:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      jailed:
        type: boolean
        description: >-
          jailed defined whether the validator has been jailed from bonded
          status or not.
      status:
        description: status is the validator status (bonded/unbonding/unbonded).
        type: string
        enum:
          - BOND_STATUS_UNSPECIFIED
          - BOND_STATUS_UNBONDED
          - BOND_STATUS_UNBONDING
          - BOND_STATUS_BONDED
        default: BOND_STATUS_UNSPECIFIED
      tokens:
        type: string
        description: tokens define the delegated tokens (incl. self-delegation).
      delegator_shares:
        type: string
        description: >-
          delegator_shares defines total shares issued to a validator's
          delegators.
      description:
        description: description defines the description terms for the validator.
        type: object
        properties:
          moniker:
            type: string
            description: moniker defines a human-readable name for the validator.
          identity:
            type: string
            description: >-
              identity defines an optional identity signature (ex. UPort or
              Keybase).
          website:
            type: string
            description: website defines an optional website link.
          security_contact:
            type: string
            description: security_contact defines an optional email for security contact.
          details:
            type: string
            description: details define other optional details.
      unbonding_height:
        type: string
        format: int64
        description: >-
          unbonding_height defines, if unbonding, the height at which this
          validator has begun unbonding.
      unbonding_time:
        type: string
        format: date-time
        description: >-
          unbonding_time defines, if unbonding, the min time for the validator
          to complete unbonding.
      commission:
        description: commission defines the commission parameters.
        type: object
        properties:
          commission_rates:
            description: >-
              commission_rates defines the initial commission rates to be used
              for creating a validator.
            type: object
            properties:
              rate:
                type: string
                description: >-
                  rate is the commission rate charged to delegators, as a
                  fraction.
              max_rate:
                type: string
                description: >-
                  max_rate defines the maximum commission rate which validator
                  can ever charge, as a fraction.
              max_change_rate:
                type: string
                description: >-
                  max_change_rate defines the maximum daily increase of the
                  validator commission, as a fraction.
          update_time:
            type: string
            format: date-time
            description: update_time is the last time the commission rate was changed.
      min_self_delegation:
        type: string
        description: >-
          min_self_delegation is the validator's self declared minimum self
          delegation.
    description: >-
      Validator defines a validator, together with the total amount of the

      Validator's bond shares and their exchange rate to coins. Slashing results
      in

      a decrease in the exchange rate, allowing correct calculation of future

      undelegations without iterating over delegators. When coins are delegated
      to

      this validator, the validator is credited with a delegation whose number
      of

      bond shares is based on the amount of coins delegated divided by the
      current

      exchange rate. Voting power can be calculated as total bonded shares

      multiplied by exchange rate.
  cosmos.staking.v1beta1.MsgBeginRedelegateResponse:
    type: object
    properties:
      completion_time:
        type: string
        format: date-time
    description: MsgBeginRedelegateResponse defines the Msg/BeginRedelegate response type.
  cosmos.staking.v1beta1.MsgCreateValidatorResponse:
    type: object
    description: MsgCreateValidatorResponse defines the Msg/CreateValidator response type.
  cosmos.staking.v1beta1.MsgDelegateResponse:
    type: object
    description: MsgDelegateResponse defines the Msg/Delegate response type.
  cosmos.staking.v1beta1.MsgEditValidatorResponse:
    type: object
    description: MsgEditValidatorResponse defines the Msg/EditValidator response type.
  cosmos.staking.v1beta1.MsgUndelegateResponse:
    type: object
    properties:
      completion_time:
        type: string
        format: date-time
    description: MsgUndelegateResponse defines the Msg/Undelegate response type.
  cosmos.base.abci.v1beta1.ABCIMessageLog:
    type: object
    properties:
      msg_index:
        type: integer
        format: int64
      log:
        type: string
      events:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            attributes:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                  value:
                    type: string
                description: >-
                  Attribute defines an attribute wrapper where the key and value
                  are

                  strings instead of raw bytes.
          description: |-
            StringEvent defines en Event object wrapper where all the attributes
            contain key/value pairs that are strings instead of raw bytes.
        description: |-
          Events contains a slice of Event objects that were emitted during some
          execution.
    description: >-
      ABCIMessageLog defines a structure containing an indexed tx ABCI message
      log.
  cosmos.base.abci.v1beta1.Attribute:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
    description: |-
      Attribute defines an attribute wrapper where the key and value are
      strings instead of raw bytes.
  cosmos.base.abci.v1beta1.GasInfo:
    type: object
    properties:
      gas_wanted:
        type: string
        format: uint64
        description: GasWanted is the maximum units of work we allow this tx to perform.
      gas_used:
        type: string
        format: uint64
        description: GasUsed is the amount of gas actually consumed.
    description: GasInfo defines tx execution gas context.
  cosmos.base.abci.v1beta1.Result:
    type: object
    properties:
      data:
        type: string
        format: byte
        description: >-
          Data is any data returned from message or handler execution. It MUST
          be

          length prefixed in order to separate data from multiple message
          executions.
      log:
        type: string
        description: Log contains the log information from message or handler execution.
      events:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            attributes:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                    format: byte
                  value:
                    type: string
                    format: byte
                  index:
                    type: boolean
                description: >-
                  EventAttribute is a single key-value pair, associated with an
                  event.
          description: >-
            Event allows application developers to attach additional information
            to

            ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
            ResponseDeliverTx.

            Later, transactions may be queried using these events.
        description: >-
          Events contains a slice of Event objects that were emitted during
          message

          or handler execution.
    description: Result is the union of ResponseFormat and ResponseCheckTx.
  cosmos.base.abci.v1beta1.StringEvent:
    type: object
    properties:
      type:
        type: string
      attributes:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
          description: |-
            Attribute defines an attribute wrapper where the key and value are
            strings instead of raw bytes.
    description: |-
      StringEvent defines en Event object wrapper where all the attributes
      contain key/value pairs that are strings instead of raw bytes.
  cosmos.base.abci.v1beta1.TxResponse:
    type: object
    properties:
      height:
        type: string
        format: int64
        title: The block height
      txhash:
        type: string
        description: The transaction hash.
      codespace:
        type: string
        title: Namespace for the Code
      code:
        type: integer
        format: int64
        description: Response code.
      data:
        type: string
        description: 'Result bytes, if any.'
      raw_log:
        type: string
        description: |-
          The output of the application's logger (raw string). May be
          non-deterministic.
      logs:
        type: array
        items:
          type: object
          properties:
            msg_index:
              type: integer
              format: int64
            log:
              type: string
            events:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  attributes:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                      description: >-
                        Attribute defines an attribute wrapper where the key and
                        value are

                        strings instead of raw bytes.
                description: >-
                  StringEvent defines en Event object wrapper where all the
                  attributes

                  contain key/value pairs that are strings instead of raw bytes.
              description: >-
                Events contains a slice of Event objects that were emitted
                during some

                execution.
          description: >-
            ABCIMessageLog defines a structure containing an indexed tx ABCI
            message log.
        description: >-
          The output of the application's logger (typed). May be
          non-deterministic.
      info:
        type: string
        description: Additional information. May be non-deterministic.
      gas_wanted:
        type: string
        format: int64
        description: Amount of gas requested for transaction.
      gas_used:
        type: string
        format: int64
        description: Amount of gas consumed by transaction.
      tx:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      timestamp:
        type: string
        description: >-
          Time of the previous block. For heights > 1, it's the weighted median
          of

          the timestamps of the valid votes in the block.LastCommit. For height
          == 1,

          it's genesis time.
    description: >-
      TxResponse defines a structure containing relevant tx data and metadata.
      The

      tags are stringified and the log is JSON decoded.
  cosmos.crypto.multisig.v1beta1.CompactBitArray:
    type: object
    properties:
      extra_bits_stored:
        type: integer
        format: int64
      elems:
        type: string
        format: byte
    description: |-
      CompactBitArray is an implementation of a space efficient bit array.
      This is used to ensure that the encoded data takes up a minimal amount of
      space after proto encoding.
      This is not thread safe, and is not intended for concurrent usage.
  cosmos.tx.signing.v1beta1.SignMode:
    type: string
    enum:
      - SIGN_MODE_UNSPECIFIED
      - SIGN_MODE_DIRECT
      - SIGN_MODE_TEXTUAL
      - SIGN_MODE_LEGACY_AMINO_JSON
    default: SIGN_MODE_UNSPECIFIED
    description: |-
      SignMode represents a signing mode with its own security guarantees.

       - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
      rejected
       - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
      verified with raw bytes from Tx
       - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
      human-readable textual representation on top of the binary representation
      from SIGN_MODE_DIRECT
       - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
      Amino JSON and will be removed in the future
  cosmos.tx.v1beta1.AuthInfo:
    type: object
    properties:
      signer_infos:
        type: array
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.SignerInfo'
        description: >-
          signer_infos defines the signing modes for the required signers. The
          number

          and order of elements must match the required signers from TxBody's

          messages. The first element is the primary signer and the one which
          pays

          the fee.
      fee:
        description: >-
          Fee is the fee and gas limit for the transaction. The first signer is
          the

          primary signer and the one which pays the fee. The fee can be
          calculated

          based on the cost of evaluating the body and doing signature
          verification

          of the signers. This can be estimated via simulation.
        type: object
        properties:
          amount:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: amount is the amount of coins to be paid as a fee
          gas_limit:
            type: string
            format: uint64
            title: >-
              gas_limit is the maximum gas that can be used in transaction
              processing

              before an out of gas error occurs
          payer:
            type: string
            description: >-
              if unset, the first signer is responsible for paying the fees. If
              set, the specified account must pay the fees.

              the payer must be a tx signer (and thus have signed this field in
              AuthInfo).

              setting this field does *not* change the ordering of required
              signers for the transaction.
          granter:
            type: string
            title: >-
              if set, the fee payer (either the first signer or the value of the
              payer field) requests that a fee grant be used

              to pay fees instead of the fee payer's own balance. If an
              appropriate fee grant does not exist or the chain does

              not support fee grants, this will fail
    description: |-
      AuthInfo describes the fee and signer modes that are used to sign a
      transaction.
  cosmos.tx.v1beta1.BroadcastMode:
    type: string
    enum:
      - BROADCAST_MODE_UNSPECIFIED
      - BROADCAST_MODE_BLOCK
      - BROADCAST_MODE_SYNC
      - BROADCAST_MODE_ASYNC
    default: BROADCAST_MODE_UNSPECIFIED
    description: >-
      BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC
      method.

       - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
       - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
      the tx to be committed in a block.
       - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
      a CheckTx execution response only.
       - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
      immediately.
  cosmos.tx.v1beta1.BroadcastTxRequest:
    type: object
    properties:
      tx_bytes:
        type: string
        format: byte
        description: tx_bytes is the raw transaction.
      mode:
        type: string
        enum:
          - BROADCAST_MODE_UNSPECIFIED
          - BROADCAST_MODE_BLOCK
          - BROADCAST_MODE_SYNC
          - BROADCAST_MODE_ASYNC
        default: BROADCAST_MODE_UNSPECIFIED
        description: >-
          BroadcastMode specifies the broadcast mode for the TxService.Broadcast
          RPC method.

           - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
           - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
          the tx to be committed in a block.
           - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
          a CheckTx execution response only.
           - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
          immediately.
    description: |-
      BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
      RPC method.
  cosmos.tx.v1beta1.BroadcastTxResponse:
    type: object
    properties:
      tx_response:
        type: object
        properties:
          height:
            type: string
            format: int64
            title: The block height
          txhash:
            type: string
            description: The transaction hash.
          codespace:
            type: string
            title: Namespace for the Code
          code:
            type: integer
            format: int64
            description: Response code.
          data:
            type: string
            description: 'Result bytes, if any.'
          raw_log:
            type: string
            description: |-
              The output of the application's logger (raw string). May be
              non-deterministic.
          logs:
            type: array
            items:
              type: object
              properties:
                msg_index:
                  type: integer
                  format: int64
                log:
                  type: string
                events:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                      attributes:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                            value:
                              type: string
                          description: >-
                            Attribute defines an attribute wrapper where the key
                            and value are

                            strings instead of raw bytes.
                    description: >-
                      StringEvent defines en Event object wrapper where all the
                      attributes

                      contain key/value pairs that are strings instead of raw
                      bytes.
                  description: >-
                    Events contains a slice of Event objects that were emitted
                    during some

                    execution.
              description: >-
                ABCIMessageLog defines a structure containing an indexed tx ABCI
                message log.
            description: >-
              The output of the application's logger (typed). May be
              non-deterministic.
          info:
            type: string
            description: Additional information. May be non-deterministic.
          gas_wanted:
            type: string
            format: int64
            description: Amount of gas requested for transaction.
          gas_used:
            type: string
            format: int64
            description: Amount of gas consumed by transaction.
          tx:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          timestamp:
            type: string
            description: >-
              Time of the previous block. For heights > 1, it's the weighted
              median of

              the timestamps of the valid votes in the block.LastCommit. For
              height == 1,

              it's genesis time.
        description: >-
          TxResponse defines a structure containing relevant tx data and
          metadata. The

          tags are stringified and the log is JSON decoded.
    description: |-
      BroadcastTxResponse is the response type for the
      Service.BroadcastTx method.
  cosmos.tx.v1beta1.Fee:
    type: object
    properties:
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: amount is the amount of coins to be paid as a fee
      gas_limit:
        type: string
        format: uint64
        title: >-
          gas_limit is the maximum gas that can be used in transaction
          processing

          before an out of gas error occurs
      payer:
        type: string
        description: >-
          if unset, the first signer is responsible for paying the fees. If set,
          the specified account must pay the fees.

          the payer must be a tx signer (and thus have signed this field in
          AuthInfo).

          setting this field does *not* change the ordering of required signers
          for the transaction.
      granter:
        type: string
        title: >-
          if set, the fee payer (either the first signer or the value of the
          payer field) requests that a fee grant be used

          to pay fees instead of the fee payer's own balance. If an appropriate
          fee grant does not exist or the chain does

          not support fee grants, this will fail
    description: >-
      Fee includes the amount of coins paid in fees and the maximum

      gas to be used by the transaction. The ratio yields an effective
      "gasprice",

      which must be above some miminum to be accepted into the mempool.
  cosmos.tx.v1beta1.GetTxResponse:
    type: object
    properties:
      tx:
        $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: tx is the queried transaction.
      tx_response:
        type: object
        properties:
          height:
            type: string
            format: int64
            title: The block height
          txhash:
            type: string
            description: The transaction hash.
          codespace:
            type: string
            title: Namespace for the Code
          code:
            type: integer
            format: int64
            description: Response code.
          data:
            type: string
            description: 'Result bytes, if any.'
          raw_log:
            type: string
            description: |-
              The output of the application's logger (raw string). May be
              non-deterministic.
          logs:
            type: array
            items:
              type: object
              properties:
                msg_index:
                  type: integer
                  format: int64
                log:
                  type: string
                events:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                      attributes:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                            value:
                              type: string
                          description: >-
                            Attribute defines an attribute wrapper where the key
                            and value are

                            strings instead of raw bytes.
                    description: >-
                      StringEvent defines en Event object wrapper where all the
                      attributes

                      contain key/value pairs that are strings instead of raw
                      bytes.
                  description: >-
                    Events contains a slice of Event objects that were emitted
                    during some

                    execution.
              description: >-
                ABCIMessageLog defines a structure containing an indexed tx ABCI
                message log.
            description: >-
              The output of the application's logger (typed). May be
              non-deterministic.
          info:
            type: string
            description: Additional information. May be non-deterministic.
          gas_wanted:
            type: string
            format: int64
            description: Amount of gas requested for transaction.
          gas_used:
            type: string
            format: int64
            description: Amount of gas consumed by transaction.
          tx:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          timestamp:
            type: string
            description: >-
              Time of the previous block. For heights > 1, it's the weighted
              median of

              the timestamps of the valid votes in the block.LastCommit. For
              height == 1,

              it's genesis time.
        description: >-
          TxResponse defines a structure containing relevant tx data and
          metadata. The

          tags are stringified and the log is JSON decoded.
    description: GetTxResponse is the response type for the Service.GetTx method.
  cosmos.tx.v1beta1.GetTxsEventResponse:
    type: object
    properties:
      txs:
        type: array
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: txs is the list of queried transactions.
      tx_responses:
        type: array
        items:
          type: object
          properties:
            height:
              type: string
              format: int64
              title: The block height
            txhash:
              type: string
              description: The transaction hash.
            codespace:
              type: string
              title: Namespace for the Code
            code:
              type: integer
              format: int64
              description: Response code.
            data:
              type: string
              description: 'Result bytes, if any.'
            raw_log:
              type: string
              description: |-
                The output of the application's logger (raw string). May be
                non-deterministic.
            logs:
              type: array
              items:
                type: object
                properties:
                  msg_index:
                    type: integer
                    format: int64
                  log:
                    type: string
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                              value:
                                type: string
                            description: >-
                              Attribute defines an attribute wrapper where the
                              key and value are

                              strings instead of raw bytes.
                      description: >-
                        StringEvent defines en Event object wrapper where all
                        the attributes

                        contain key/value pairs that are strings instead of raw
                        bytes.
                    description: >-
                      Events contains a slice of Event objects that were emitted
                      during some

                      execution.
                description: >-
                  ABCIMessageLog defines a structure containing an indexed tx
                  ABCI message log.
              description: >-
                The output of the application's logger (typed). May be
                non-deterministic.
            info:
              type: string
              description: Additional information. May be non-deterministic.
            gas_wanted:
              type: string
              format: int64
              description: Amount of gas requested for transaction.
            gas_used:
              type: string
              format: int64
              description: Amount of gas consumed by transaction.
            tx:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            timestamp:
              type: string
              description: >-
                Time of the previous block. For heights > 1, it's the weighted
                median of

                the timestamps of the valid votes in the block.LastCommit. For
                height == 1,

                it's genesis time.
          description: >-
            TxResponse defines a structure containing relevant tx data and
            metadata. The

            tags are stringified and the log is JSON decoded.
        description: tx_responses is the list of queried TxResponses.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      GetTxsEventResponse is the response type for the Service.TxsByEvents
      RPC method.
  cosmos.tx.v1beta1.ModeInfo:
    type: object
    properties:
      single:
        title: single represents a single signer
        type: object
        properties:
          mode:
            title: mode is the signing mode of the single signer
            type: string
            enum:
              - SIGN_MODE_UNSPECIFIED
              - SIGN_MODE_DIRECT
              - SIGN_MODE_TEXTUAL
              - SIGN_MODE_LEGACY_AMINO_JSON
            default: SIGN_MODE_UNSPECIFIED
            description: >-
              SignMode represents a signing mode with its own security
              guarantees.

               - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
              rejected
               - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
              verified with raw bytes from Tx
               - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
              human-readable textual representation on top of the binary
              representation

              from SIGN_MODE_DIRECT
               - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
              Amino JSON and will be removed in the future
      multi:
        $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo.Multi'
        title: multi represents a nested multisig signer
    description: ModeInfo describes the signing mode of a single or nested multisig signer.
  cosmos.tx.v1beta1.ModeInfo.Multi:
    type: object
    properties:
      bitarray:
        title: bitarray specifies which keys within the multisig are signing
        type: object
        properties:
          extra_bits_stored:
            type: integer
            format: int64
          elems:
            type: string
            format: byte
        description: >-
          CompactBitArray is an implementation of a space efficient bit array.

          This is used to ensure that the encoded data takes up a minimal amount
          of

          space after proto encoding.

          This is not thread safe, and is not intended for concurrent usage.
      mode_infos:
        type: array
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo'
        title: |-
          mode_infos is the corresponding modes of the signers of the multisig
          which could include nested multisig public keys
    title: Multi is the mode info for a multisig public key
  cosmos.tx.v1beta1.ModeInfo.Single:
    type: object
    properties:
      mode:
        title: mode is the signing mode of the single signer
        type: string
        enum:
          - SIGN_MODE_UNSPECIFIED
          - SIGN_MODE_DIRECT
          - SIGN_MODE_TEXTUAL
          - SIGN_MODE_LEGACY_AMINO_JSON
        default: SIGN_MODE_UNSPECIFIED
        description: >-
          SignMode represents a signing mode with its own security guarantees.

           - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
          rejected
           - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
          verified with raw bytes from Tx
           - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
          human-readable textual representation on top of the binary
          representation

          from SIGN_MODE_DIRECT
           - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
          Amino JSON and will be removed in the future
    title: |-
      Single is the mode info for a single signer. It is structured as a message
      to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
      future
  cosmos.tx.v1beta1.OrderBy:
    type: string
    enum:
      - ORDER_BY_UNSPECIFIED
      - ORDER_BY_ASC
      - ORDER_BY_DESC
    default: ORDER_BY_UNSPECIFIED
    description: >-
      - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting
      order. OrderBy defaults to ASC in this case.
       - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order
       - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
    title: OrderBy defines the sorting order
  cosmos.tx.v1beta1.SignerInfo:
    type: object
    properties:
      public_key:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      mode_info:
        $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo'
        title: |-
          mode_info describes the signing mode of the signer and is a nested
          structure to support nested multisig pubkey's
      sequence:
        type: string
        format: uint64
        description: >-
          sequence is the sequence of the account, which describes the

          number of committed transactions signed by a given address. It is used
          to

          prevent replay attacks.
    description: |-
      SignerInfo describes the public key and signing mode of a single top-level
      signer.
  cosmos.tx.v1beta1.SimulateRequest:
    type: object
    properties:
      tx:
        $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: tx is the transaction to simulate.
    description: |-
      SimulateRequest is the request type for the Service.Simulate
      RPC method.
  cosmos.tx.v1beta1.SimulateResponse:
    type: object
    properties:
      gas_info:
        description: gas_info is the information about gas used in the simulation.
        type: object
        properties:
          gas_wanted:
            type: string
            format: uint64
            description: >-
              GasWanted is the maximum units of work we allow this tx to
              perform.
          gas_used:
            type: string
            format: uint64
            description: GasUsed is the amount of gas actually consumed.
      result:
        description: result is the result of the simulation.
        type: object
        properties:
          data:
            type: string
            format: byte
            description: >-
              Data is any data returned from message or handler execution. It
              MUST be

              length prefixed in order to separate data from multiple message
              executions.
          log:
            type: string
            description: >-
              Log contains the log information from message or handler
              execution.
          events:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                attributes:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                      value:
                        type: string
                        format: byte
                      index:
                        type: boolean
                    description: >-
                      EventAttribute is a single key-value pair, associated with
                      an event.
              description: >-
                Event allows application developers to attach additional
                information to

                ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                ResponseDeliverTx.

                Later, transactions may be queried using these events.
            description: >-
              Events contains a slice of Event objects that were emitted during
              message

              or handler execution.
    description: |-
      SimulateResponse is the response type for the
      Service.SimulateRPC method.
  cosmos.tx.v1beta1.Tx:
    type: object
    properties:
      body:
        title: body is the processable content of the transaction
        type: object
        properties:
          messages:
            type: array
            items:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            description: >-
              messages is a list of messages to be executed. The required
              signers of

              those messages define the number and order of elements in
              AuthInfo's

              signer_infos and Tx's signatures. Each required signer address is
              added to

              the list only the first time it occurs.

              By convention, the first required signer (usually from the first
              message)

              is referred to as the primary signer and pays the fee for the
              whole

              transaction.
          memo:
            type: string
            title: memo is any arbitrary memo to be added to the transaction
          timeout_height:
            type: string
            format: uint64
            title: |-
              timeout is the block height after which this transaction will not
              be processed by the chain
          extension_options:
            type: array
            items:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            title: >-
              extension_options are arbitrary options that can be added by
              chains

              when the default options are not sufficient. If any of these are
              present

              and can't be handled, the transaction will be rejected
          non_critical_extension_options:
            type: array
            items:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            title: >-
              extension_options are arbitrary options that can be added by
              chains

              when the default options are not sufficient. If any of these are
              present

              and can't be handled, they will be ignored
        description: TxBody is the body of a transaction that all signers sign over.
      auth_info:
        $ref: '#/definitions/cosmos.tx.v1beta1.AuthInfo'
        title: |-
          auth_info is the authorization related content of the transaction,
          specifically signers, signer modes and fee
      signatures:
        type: array
        items:
          type: string
          format: byte
        description: >-
          signatures is a list of signatures that matches the length and order
          of

          AuthInfo's signer_infos to allow connecting signature meta information
          like

          public key and signing mode by position.
    description: Tx is the standard type used for broadcasting transactions.
  cosmos.tx.v1beta1.TxBody:
    type: object
    properties:
      messages:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: >-
          messages is a list of messages to be executed. The required signers of

          those messages define the number and order of elements in AuthInfo's

          signer_infos and Tx's signatures. Each required signer address is
          added to

          the list only the first time it occurs.

          By convention, the first required signer (usually from the first
          message)

          is referred to as the primary signer and pays the fee for the whole

          transaction.
      memo:
        type: string
        title: memo is any arbitrary memo to be added to the transaction
      timeout_height:
        type: string
        format: uint64
        title: |-
          timeout is the block height after which this transaction will not
          be processed by the chain
      extension_options:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        title: >-
          extension_options are arbitrary options that can be added by chains

          when the default options are not sufficient. If any of these are
          present

          and can't be handled, the transaction will be rejected
      non_critical_extension_options:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        title: >-
          extension_options are arbitrary options that can be added by chains

          when the default options are not sufficient. If any of these are
          present

          and can't be handled, they will be ignored
    description: TxBody is the body of a transaction that all signers sign over.
  tendermint.abci.Event:
    type: object
    properties:
      type:
        type: string
      attributes:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
              format: byte
            value:
              type: string
              format: byte
            index:
              type: boolean
          description: 'EventAttribute is a single key-value pair, associated with an event.'
    description: >-
      Event allows application developers to attach additional information to

      ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
      ResponseDeliverTx.

      Later, transactions may be queried using these events.
  tendermint.abci.EventAttribute:
    type: object
    properties:
      key:
        type: string
        format: byte
      value:
        type: string
        format: byte
      index:
        type: boolean
    description: 'EventAttribute is a single key-value pair, associated with an event.'
  cosmos.upgrade.v1beta1.Plan:
    type: object
    properties:
      name:
        type: string
        description: >-
          Sets the name for the upgrade. This name will be used by the upgraded

          version of the software to apply any special "on-upgrade" commands
          during

          the first BeginBlock method after the upgrade is applied. It is also
          used

          to detect whether a software version can handle a given upgrade. If no

          upgrade handler with this name has been set in the software, it will
          be

          assumed that the software is out-of-date when the upgrade Time or
          Height is

          reached and the software will exit.
      time:
        type: string
        format: date-time
        description: |-
          The time after which the upgrade must be performed.
          Leave set to its zero value to use a pre-defined Height instead.
      height:
        type: string
        format: int64
        description: |-
          The height at which the upgrade must be performed.
          Only used if Time is not set.
      info:
        type: string
        title: |-
          Any application specific upgrade info to be included on-chain
          such as a git commit that validators could automatically upgrade to
      upgraded_client_state:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: >-
          IBC-enabled chains can opt-in to including the upgraded client state
          in its upgrade plan

          This will make the chain commit to the correct upgraded (self) client
          state before the upgrade occurs,

          so that connecting chains can verify that the new upgraded client is
          valid by verifying a proof on the

          previous version of the chain.

          This will allow IBC connections to persist smoothly across planned
          chain upgrades
    description: >-
      Plan specifies information about a planned upgrade and when it should
      occur.
  cosmos.upgrade.v1beta1.QueryAppliedPlanResponse:
    type: object
    properties:
      height:
        type: string
        format: int64
        description: height is the block height at which the plan was applied.
    description: >-
      QueryAppliedPlanResponse is the response type for the Query/AppliedPlan
      RPC

      method.
  cosmos.upgrade.v1beta1.QueryCurrentPlanResponse:
    type: object
    properties:
      plan:
        description: plan is the current upgrade plan.
        type: object
        properties:
          name:
            type: string
            description: >-
              Sets the name for the upgrade. This name will be used by the
              upgraded

              version of the software to apply any special "on-upgrade" commands
              during

              the first BeginBlock method after the upgrade is applied. It is
              also used

              to detect whether a software version can handle a given upgrade.
              If no

              upgrade handler with this name has been set in the software, it
              will be

              assumed that the software is out-of-date when the upgrade Time or
              Height is

              reached and the software will exit.
          time:
            type: string
            format: date-time
            description: |-
              The time after which the upgrade must be performed.
              Leave set to its zero value to use a pre-defined Height instead.
          height:
            type: string
            format: int64
            description: |-
              The height at which the upgrade must be performed.
              Only used if Time is not set.
          info:
            type: string
            title: >-
              Any application specific upgrade info to be included on-chain

              such as a git commit that validators could automatically upgrade
              to
          upgraded_client_state:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            title: >-
              IBC-enabled chains can opt-in to including the upgraded client
              state in its upgrade plan

              This will make the chain commit to the correct upgraded (self)
              client state before the upgrade occurs,

              so that connecting chains can verify that the new upgraded client
              is valid by verifying a proof on the

              previous version of the chain.

              This will allow IBC connections to persist smoothly across planned
              chain upgrades
    description: >-
      QueryCurrentPlanResponse is the response type for the Query/CurrentPlan
      RPC

      method.
  cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse:
    type: object
    properties:
      upgraded_consensus_state:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: >-
      QueryUpgradedConsensusStateResponse is the response type for the
      Query/UpgradedConsensusState

      RPC method.
  cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse:
    type: object
    description: >-
      MsgCreateVestingAccountResponse defines the Msg/CreateVestingAccount
      response type.
  cosmwasm.wasm.v1beta1.AbsoluteTxPosition:
    type: object
    properties:
      block_height:
        type: string
        format: uint64
        title: BlockHeight is the block the contract was created at
      tx_index:
        type: string
        format: uint64
        title: >-
          TxIndex is a monotonic counter within the block (actual transaction
          index,

          or gas consumed)
    description: |-
      AbsoluteTxPosition is a unique transaction position that allows for global
      ordering of transactions.
  cosmwasm.wasm.v1beta1.CodeInfoResponse:
    type: object
    properties:
      code_id:
        type: string
        format: uint64
      creator:
        type: string
      data_hash:
        type: string
        format: byte
      source:
        type: string
      builder:
        type: string
    title: CodeInfoResponse contains code meta data from CodeInfo
  cosmwasm.wasm.v1beta1.ContractCodeHistoryEntry:
    type: object
    properties:
      operation:
        type: string
        enum:
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
        default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
        description: >-
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
          ContractCodeHistoryOperationTypeUnspecified placeholder for empty
          value
           - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
           - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
           - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
        title: ContractCodeHistoryOperationType actions that caused a code change
      code_id:
        type: string
        format: uint64
        title: CodeID is the reference to the stored WASM code
      updated:
        description: Updated Tx position when the operation was executed.
        type: object
        properties:
          block_height:
            type: string
            format: uint64
            title: BlockHeight is the block the contract was created at
          tx_index:
            type: string
            format: uint64
            title: >-
              TxIndex is a monotonic counter within the block (actual
              transaction index,

              or gas consumed)
      msg:
        type: string
        format: byte
    description: ContractCodeHistoryEntry metadata to a contract.
  cosmwasm.wasm.v1beta1.ContractCodeHistoryOperationType:
    type: string
    enum:
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
    default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
    description: >-
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
      ContractCodeHistoryOperationTypeUnspecified placeholder for empty value
       - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
       - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
       - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
    title: ContractCodeHistoryOperationType actions that caused a code change
  cosmwasm.wasm.v1beta1.ContractInfo:
    type: object
    properties:
      code_id:
        type: string
        format: uint64
        title: CodeID is the reference to the stored Wasm code
      creator:
        type: string
        title: Creator address who initially instantiated the contract
      admin:
        type: string
        title: Admin is an optional address that can execute migrations
      label:
        type: string
        description: Label is optional metadata to be stored with a contract instance.
      created:
        title: >-
          Created Tx position when the contract was instantiated.

          This data should kept internal and not be exposed via query results.
          Just

          use for sorting
        type: object
        properties:
          block_height:
            type: string
            format: uint64
            title: BlockHeight is the block the contract was created at
          tx_index:
            type: string
            format: uint64
            title: >-
              TxIndex is a monotonic counter within the block (actual
              transaction index,

              or gas consumed)
        description: >-
          AbsoluteTxPosition is a unique transaction position that allows for
          global

          ordering of transactions.
      ibc_port_id:
        type: string
      extension:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    title: ContractInfo stores a WASM contract instance
  cosmwasm.wasm.v1beta1.Model:
    type: object
    properties:
      key:
        type: string
        format: byte
        title: hex-encode key to read it better (this is often ascii)
      value:
        type: string
        format: byte
        title: base64-encode raw value
    title: Model is a struct that holds a KV pair
  cosmwasm.wasm.v1beta1.QueryAllContractStateResponse:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
              format: byte
              title: hex-encode key to read it better (this is often ascii)
            value:
              type: string
              format: byte
              title: base64-encode raw value
          title: Model is a struct that holds a KV pair
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: |-
      QueryAllContractStateResponse is the response type for the
      Query/AllContractState RPC method
  cosmwasm.wasm.v1beta1.QueryCodeResponse:
    type: object
    properties:
      code_info:
        type: object
        properties:
          code_id:
            type: string
            format: uint64
          creator:
            type: string
          data_hash:
            type: string
            format: byte
          source:
            type: string
          builder:
            type: string
        title: CodeInfoResponse contains code meta data from CodeInfo
      data:
        type: string
        format: byte
    title: QueryCodeResponse is the response type for the Query/Code RPC method
  cosmwasm.wasm.v1beta1.QueryCodesResponse:
    type: object
    properties:
      code_infos:
        type: array
        items:
          type: object
          properties:
            code_id:
              type: string
              format: uint64
            creator:
              type: string
            data_hash:
              type: string
              format: byte
            source:
              type: string
            builder:
              type: string
          title: CodeInfoResponse contains code meta data from CodeInfo
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: QueryCodesResponse is the response type for the Query/Codes RPC method
  cosmwasm.wasm.v1beta1.QueryContractHistoryResponse:
    type: object
    properties:
      entries:
        type: array
        items:
          type: object
          properties:
            operation:
              type: string
              enum:
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
              default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
              description: >-
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
                ContractCodeHistoryOperationTypeUnspecified placeholder for
                empty value
                 - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
                 - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
                 - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
              title: >-
                ContractCodeHistoryOperationType actions that caused a code
                change
            code_id:
              type: string
              format: uint64
              title: CodeID is the reference to the stored WASM code
            updated:
              description: Updated Tx position when the operation was executed.
              type: object
              properties:
                block_height:
                  type: string
                  format: uint64
                  title: BlockHeight is the block the contract was created at
                tx_index:
                  type: string
                  format: uint64
                  title: >-
                    TxIndex is a monotonic counter within the block (actual
                    transaction index,

                    or gas consumed)
            msg:
              type: string
              format: byte
          description: ContractCodeHistoryEntry metadata to a contract.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: |-
      QueryContractHistoryResponse is the response type for the
      Query/ContractHistory RPC method
  cosmwasm.wasm.v1beta1.QueryContractInfoResponse:
    type: object
    properties:
      address:
        type: string
        title: address is the address of the contract
      contract_info:
        type: object
        properties:
          code_id:
            type: string
            format: uint64
            title: CodeID is the reference to the stored Wasm code
          creator:
            type: string
            title: Creator address who initially instantiated the contract
          admin:
            type: string
            title: Admin is an optional address that can execute migrations
          label:
            type: string
            description: Label is optional metadata to be stored with a contract instance.
          created:
            title: >-
              Created Tx position when the contract was instantiated.

              This data should kept internal and not be exposed via query
              results. Just

              use for sorting
            type: object
            properties:
              block_height:
                type: string
                format: uint64
                title: BlockHeight is the block the contract was created at
              tx_index:
                type: string
                format: uint64
                title: >-
                  TxIndex is a monotonic counter within the block (actual
                  transaction index,

                  or gas consumed)
            description: >-
              AbsoluteTxPosition is a unique transaction position that allows
              for global

              ordering of transactions.
          ibc_port_id:
            type: string
          extension:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
        title: ContractInfo stores a WASM contract instance
    title: >-
      QueryContractInfoResponse is the response type for the Query/ContractInfo
      RPC

      method
  cosmwasm.wasm.v1beta1.QueryContractsByCodeResponse:
    type: object
    properties:
      contracts:
        type: array
        items:
          type: string
        title: contracts are a set of contract addresses
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: |-
      QueryContractsByCodeResponse is the response type for the
      Query/ContractsByCode RPC method
  cosmwasm.wasm.v1beta1.QueryRawContractStateResponse:
    type: object
    properties:
      data:
        type: string
        format: byte
        title: Data contains the raw store data
    title: |-
      QueryRawContractStateResponse is the response type for the
      Query/RawContractState RPC method
  cosmwasm.wasm.v1beta1.QuerySmartContractStateResponse:
    type: object
    properties:
      data:
        type: string
        format: byte
        title: Data contains the json data returned from the smart contract
    title: |-
      QuerySmartContractStateResponse is the response type for the
      Query/SmartContractState RPC method
  cosmwasm.wasm.v1beta1.AccessConfig:
    type: object
    properties:
      permission:
        type: string
        enum:
          - ACCESS_TYPE_UNSPECIFIED
          - ACCESS_TYPE_NOBODY
          - ACCESS_TYPE_ONLY_ADDRESS
          - ACCESS_TYPE_EVERYBODY
        default: ACCESS_TYPE_UNSPECIFIED
        description: >-
          - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for empty
          value
           - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
           - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to an address
           - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
        title: AccessType permission types
      address:
        type: string
    description: AccessConfig access control type.
  cosmwasm.wasm.v1beta1.AccessType:
    type: string
    enum:
      - ACCESS_TYPE_UNSPECIFIED
      - ACCESS_TYPE_NOBODY
      - ACCESS_TYPE_ONLY_ADDRESS
      - ACCESS_TYPE_EVERYBODY
    default: ACCESS_TYPE_UNSPECIFIED
    description: >-
      - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for empty
      value
       - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
       - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to an address
       - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
    title: AccessType permission types
  cosmwasm.wasm.v1beta1.MsgClearAdminResponse:
    type: object
    title: MsgClearAdminResponse returns empty data
  cosmwasm.wasm.v1beta1.MsgExecuteContractResponse:
    type: object
    properties:
      data:
        type: string
        format: byte
        title: Data contains base64-encoded bytes to returned from the contract
    description: MsgExecuteContractResponse returns execution result data.
  cosmwasm.wasm.v1beta1.MsgInstantiateContractResponse:
    type: object
    properties:
      address:
        type: string
        description: Address is the bech32 address of the new contract instance.
      data:
        type: string
        format: byte
        title: Data contains base64-encoded bytes to returned from the contract
    title: MsgInstantiateContractResponse return instantiation result data
  cosmwasm.wasm.v1beta1.MsgMigrateContractResponse:
    type: object
    properties:
      data:
        type: string
        format: byte
        title: |-
          Data contains same raw bytes returned as data from the wasm contract.
          (May be empty)
    description: MsgMigrateContractResponse returns contract migration result data.
  cosmwasm.wasm.v1beta1.MsgStoreCodeResponse:
    type: object
    properties:
      code_id:
        type: string
        format: uint64
        title: CodeID is the reference to the stored WASM code
    description: MsgStoreCodeResponse returns store result data.
  cosmwasm.wasm.v1beta1.MsgUpdateAdminResponse:
    type: object
    title: MsgUpdateAdminResponse returns empty data
  ibc.applications.transfer.v1.DenomTrace:
    type: object
    properties:
      path:
        type: string
        description: >-
          path defines the chain of port/channel identifiers used for tracing
          the

          source of the fungible token.
      base_denom:
        type: string
        description: base denomination of the relayed fungible token.
    description: >-
      DenomTrace contains the base denomination for ICS20 fungible tokens and
      the

      source tracing information path.
  ibc.applications.transfer.v1.Params:
    type: object
    properties:
      send_enabled:
        type: boolean
        description: >-
          send_enabled enables or disables all cross-chain token transfers from
          this

          chain.
      receive_enabled:
        type: boolean
        description: >-
          receive_enabled enables or disables all cross-chain token transfers to
          this

          chain.
    description: >-
      Params defines the set of IBC transfer parameters.

      NOTE: To prevent a single token from being transferred, set the

      TransfersEnabled parameter to true and then set the bank module's
      SendEnabled

      parameter for the denomination to false.
  ibc.applications.transfer.v1.QueryDenomTraceResponse:
    type: object
    properties:
      denom_trace:
        type: object
        properties:
          path:
            type: string
            description: >-
              path defines the chain of port/channel identifiers used for
              tracing the

              source of the fungible token.
          base_denom:
            type: string
            description: base denomination of the relayed fungible token.
        description: >-
          DenomTrace contains the base denomination for ICS20 fungible tokens
          and the

          source tracing information path.
    description: |-
      QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC
      method.
  ibc.applications.transfer.v1.QueryDenomTracesResponse:
    type: object
    properties:
      denom_traces:
        type: array
        items:
          type: object
          properties:
            path:
              type: string
              description: >-
                path defines the chain of port/channel identifiers used for
                tracing the

                source of the fungible token.
            base_denom:
              type: string
              description: base denomination of the relayed fungible token.
          description: >-
            DenomTrace contains the base denomination for ICS20 fungible tokens
            and the

            source tracing information path.
        description: denom_traces returns all denominations trace information.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryConnectionsResponse is the response type for the Query/DenomTraces
      RPC

      method.
  ibc.applications.transfer.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          send_enabled:
            type: boolean
            description: >-
              send_enabled enables or disables all cross-chain token transfers
              from this

              chain.
          receive_enabled:
            type: boolean
            description: >-
              receive_enabled enables or disables all cross-chain token
              transfers to this

              chain.
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  ibc.applications.transfer.v1.MsgTransferResponse:
    type: object
    description: MsgTransferResponse defines the Msg/Transfer response type.
  ibc.core.client.v1.Height:
    type: object
    properties:
      revision_number:
        type: string
        format: uint64
        title: the revision that the client is currently on
      revision_height:
        type: string
        format: uint64
        title: the height within the given revision
    description: >-
      Normally the RevisionHeight is incremented at each height while keeping
      RevisionNumber

      the same. However some consensus algorithms may choose to reset the

      height in certain conditions e.g. hard forks, state-machine breaking
      changes

      In these cases, the RevisionNumber is incremented so that height continues
      to

      be monitonically increasing even as the RevisionHeight gets reset
    title: >-
      Height is a monotonically increasing data type

      that can be compared against another Height for the purposes of updating
      and

      freezing clients
  ibc.core.channel.v1.Channel:
    type: object
    properties:
      state:
        title: current state of the channel end
        type: string
        enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
          - STATE_CLOSED
        default: STATE_UNINITIALIZED_UNSPECIFIED
        description: |-
          State defines if a channel is in one of the following states:
          CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

           - STATE_UNINITIALIZED_UNSPECIFIED: Default State
           - STATE_INIT: A channel has just started the opening handshake.
           - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
           - STATE_OPEN: A channel has completed the handshake. Open channels are
          ready to send and receive packets.
           - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
          packets.
      ordering:
        title: whether the channel is ordered or unordered
        type: string
        enum:
          - ORDER_NONE_UNSPECIFIED
          - ORDER_UNORDERED
          - ORDER_ORDERED
        default: ORDER_NONE_UNSPECIFIED
        description: |-
          - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
           - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
          which they were sent.
           - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
      counterparty:
        title: counterparty channel end
        type: object
        properties:
          port_id:
            type: string
            description: >-
              port on the counterparty chain which owns the other end of the
              channel.
          channel_id:
            type: string
            title: channel end on the counterparty chain
      connection_hops:
        type: array
        items:
          type: string
        title: |-
          list of connection identifiers, in order, along which packets sent on
          this channel will travel
      version:
        type: string
        title: 'opaque channel version, which is agreed upon during the handshake'
    description: |-
      Channel defines pipeline for exactly-once packet delivery between specific
      modules on separate blockchains, which has at least one end capable of
      sending packets and one end capable of receiving packets.
  ibc.core.channel.v1.Counterparty:
    type: object
    properties:
      port_id:
        type: string
        description: >-
          port on the counterparty chain which owns the other end of the
          channel.
      channel_id:
        type: string
        title: channel end on the counterparty chain
    title: Counterparty defines a channel end counterparty
  ibc.core.channel.v1.IdentifiedChannel:
    type: object
    properties:
      state:
        title: current state of the channel end
        type: string
        enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
          - STATE_CLOSED
        default: STATE_UNINITIALIZED_UNSPECIFIED
        description: |-
          State defines if a channel is in one of the following states:
          CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

           - STATE_UNINITIALIZED_UNSPECIFIED: Default State
           - STATE_INIT: A channel has just started the opening handshake.
           - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
           - STATE_OPEN: A channel has completed the handshake. Open channels are
          ready to send and receive packets.
           - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
          packets.
      ordering:
        title: whether the channel is ordered or unordered
        type: string
        enum:
          - ORDER_NONE_UNSPECIFIED
          - ORDER_UNORDERED
          - ORDER_ORDERED
        default: ORDER_NONE_UNSPECIFIED
        description: |-
          - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
           - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
          which they were sent.
           - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
      counterparty:
        title: counterparty channel end
        type: object
        properties:
          port_id:
            type: string
            description: >-
              port on the counterparty chain which owns the other end of the
              channel.
          channel_id:
            type: string
            title: channel end on the counterparty chain
      connection_hops:
        type: array
        items:
          type: string
        title: |-
          list of connection identifiers, in order, along which packets sent on
          this channel will travel
      version:
        type: string
        title: 'opaque channel version, which is agreed upon during the handshake'
      port_id:
        type: string
        title: port identifier
      channel_id:
        type: string
        title: channel identifier
    description: |-
      IdentifiedChannel defines a channel with additional port and channel
      identifier fields.
  ibc.core.channel.v1.Order:
    type: string
    enum:
      - ORDER_NONE_UNSPECIFIED
      - ORDER_UNORDERED
      - ORDER_ORDERED
    default: ORDER_NONE_UNSPECIFIED
    description: |-
      - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
       - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
      which they were sent.
       - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
    title: Order defines if a channel is ORDERED or UNORDERED
  ibc.core.channel.v1.PacketState:
    type: object
    properties:
      port_id:
        type: string
        description: channel port identifier.
      channel_id:
        type: string
        description: channel unique identifier.
      sequence:
        type: string
        format: uint64
        description: packet sequence.
      data:
        type: string
        format: byte
        description: embedded data that represents packet state.
    description: |-
      PacketState defines the generic type necessary to retrieve and store
      packet commitments, acknowledgements, and receipts.
      Caller is responsible for knowing the context necessary to interpret this
      state as a commitment, acknowledgement, or a receipt.
  ibc.core.channel.v1.QueryChannelClientStateResponse:
    type: object
    properties:
      identified_client_state:
        title: client state associated with the channel
        type: object
        properties:
          client_id:
            type: string
            title: client identifier
          client_state:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            title: client state
        description: |-
          IdentifiedClientState defines a client state with an additional client
          identifier field.
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: |-
      QueryChannelClientStateResponse is the Response type for the
      Query/QueryChannelClientState RPC method
  ibc.core.channel.v1.QueryChannelConsensusStateResponse:
    type: object
    properties:
      consensus_state:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: consensus state associated with the channel
      client_id:
        type: string
        title: client ID associated with the consensus state
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: |-
      QueryChannelClientStateResponse is the Response type for the
      Query/QueryChannelClientState RPC method
  ibc.core.channel.v1.QueryChannelResponse:
    type: object
    properties:
      channel:
        title: channel associated with the request identifiers
        type: object
        properties:
          state:
            title: current state of the channel end
            type: string
            enum:
              - STATE_UNINITIALIZED_UNSPECIFIED
              - STATE_INIT
              - STATE_TRYOPEN
              - STATE_OPEN
              - STATE_CLOSED
            default: STATE_UNINITIALIZED_UNSPECIFIED
            description: |-
              State defines if a channel is in one of the following states:
              CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

               - STATE_UNINITIALIZED_UNSPECIFIED: Default State
               - STATE_INIT: A channel has just started the opening handshake.
               - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
               - STATE_OPEN: A channel has completed the handshake. Open channels are
              ready to send and receive packets.
               - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
              packets.
          ordering:
            title: whether the channel is ordered or unordered
            type: string
            enum:
              - ORDER_NONE_UNSPECIFIED
              - ORDER_UNORDERED
              - ORDER_ORDERED
            default: ORDER_NONE_UNSPECIFIED
            description: |-
              - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
               - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
              which they were sent.
               - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
          counterparty:
            title: counterparty channel end
            type: object
            properties:
              port_id:
                type: string
                description: >-
                  port on the counterparty chain which owns the other end of the
                  channel.
              channel_id:
                type: string
                title: channel end on the counterparty chain
          connection_hops:
            type: array
            items:
              type: string
            title: >-
              list of connection identifiers, in order, along which packets sent
              on

              this channel will travel
          version:
            type: string
            title: 'opaque channel version, which is agreed upon during the handshake'
        description: >-
          Channel defines pipeline for exactly-once packet delivery between
          specific

          modules on separate blockchains, which has at least one end capable of

          sending packets and one end capable of receiving packets.
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    description: >-
      QueryChannelResponse is the response type for the Query/Channel RPC
      method.

      Besides the Channel end, it includes a proof and the height from which the

      proof was retrieved.
  ibc.core.channel.v1.QueryChannelsResponse:
    type: object
    properties:
      channels:
        type: array
        items:
          type: object
          properties:
            state:
              title: current state of the channel end
              type: string
              enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
                - STATE_CLOSED
              default: STATE_UNINITIALIZED_UNSPECIFIED
              description: |-
                State defines if a channel is in one of the following states:
                CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                 - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                 - STATE_INIT: A channel has just started the opening handshake.
                 - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                 - STATE_OPEN: A channel has completed the handshake. Open channels are
                ready to send and receive packets.
                 - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                packets.
            ordering:
              title: whether the channel is ordered or unordered
              type: string
              enum:
                - ORDER_NONE_UNSPECIFIED
                - ORDER_UNORDERED
                - ORDER_ORDERED
              default: ORDER_NONE_UNSPECIFIED
              description: |-
                - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                 - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                which they were sent.
                 - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
            counterparty:
              title: counterparty channel end
              type: object
              properties:
                port_id:
                  type: string
                  description: >-
                    port on the counterparty chain which owns the other end of
                    the channel.
                channel_id:
                  type: string
                  title: channel end on the counterparty chain
            connection_hops:
              type: array
              items:
                type: string
              title: >-
                list of connection identifiers, in order, along which packets
                sent on

                this channel will travel
            version:
              type: string
              title: >-
                opaque channel version, which is agreed upon during the
                handshake
            port_id:
              type: string
              title: port identifier
            channel_id:
              type: string
              title: channel identifier
          description: |-
            IdentifiedChannel defines a channel with additional port and channel
            identifier fields.
        description: list of stored channels of the chain.
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    description: >-
      QueryChannelsResponse is the response type for the Query/Channels RPC
      method.
  ibc.core.channel.v1.QueryConnectionChannelsResponse:
    type: object
    properties:
      channels:
        type: array
        items:
          type: object
          properties:
            state:
              title: current state of the channel end
              type: string
              enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
                - STATE_CLOSED
              default: STATE_UNINITIALIZED_UNSPECIFIED
              description: |-
                State defines if a channel is in one of the following states:
                CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                 - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                 - STATE_INIT: A channel has just started the opening handshake.
                 - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                 - STATE_OPEN: A channel has completed the handshake. Open channels are
                ready to send and receive packets.
                 - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                packets.
            ordering:
              title: whether the channel is ordered or unordered
              type: string
              enum:
                - ORDER_NONE_UNSPECIFIED
                - ORDER_UNORDERED
                - ORDER_ORDERED
              default: ORDER_NONE_UNSPECIFIED
              description: |-
                - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                 - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                which they were sent.
                 - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
            counterparty:
              title: counterparty channel end
              type: object
              properties:
                port_id:
                  type: string
                  description: >-
                    port on the counterparty chain which owns the other end of
                    the channel.
                channel_id:
                  type: string
                  title: channel end on the counterparty chain
            connection_hops:
              type: array
              items:
                type: string
              title: >-
                list of connection identifiers, in order, along which packets
                sent on

                this channel will travel
            version:
              type: string
              title: >-
                opaque channel version, which is agreed upon during the
                handshake
            port_id:
              type: string
              title: port identifier
            channel_id:
              type: string
              title: channel identifier
          description: |-
            IdentifiedChannel defines a channel with additional port and channel
            identifier fields.
        description: list of channels associated with a connection.
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: |-
      QueryConnectionChannelsResponse is the Response type for the
      Query/QueryConnectionChannels RPC method
  ibc.core.channel.v1.QueryNextSequenceReceiveResponse:
    type: object
    properties:
      next_sequence_receive:
        type: string
        format: uint64
        title: next sequence receive number
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: |-
      QuerySequenceResponse is the request type for the
      Query/QueryNextSequenceReceiveResponse RPC method
  ibc.core.channel.v1.QueryPacketAcknowledgementResponse:
    type: object
    properties:
      acknowledgement:
        type: string
        format: byte
        title: packet associated with the request fields
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: |-
      QueryPacketAcknowledgementResponse defines the client query response for a
      packet which also includes a proof and the height from which the
      proof was retrieved
  ibc.core.channel.v1.QueryPacketAcknowledgementsResponse:
    type: object
    properties:
      acknowledgements:
        type: array
        items:
          type: object
          properties:
            port_id:
              type: string
              description: channel port identifier.
            channel_id:
              type: string
              description: channel unique identifier.
            sequence:
              type: string
              format: uint64
              description: packet sequence.
            data:
              type: string
              format: byte
              description: embedded data that represents packet state.
          description: >-
            PacketState defines the generic type necessary to retrieve and store

            packet commitments, acknowledgements, and receipts.

            Caller is responsible for knowing the context necessary to interpret
            this

            state as a commitment, acknowledgement, or a receipt.
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: |-
      QueryPacketAcknowledgemetsResponse is the request type for the
      Query/QueryPacketAcknowledgements RPC method
  ibc.core.channel.v1.QueryPacketCommitmentResponse:
    type: object
    properties:
      commitment:
        type: string
        format: byte
        title: packet associated with the request fields
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: >-
      QueryPacketCommitmentResponse defines the client query response for a
      packet

      which also includes a proof and the height from which the proof was

      retrieved
  ibc.core.channel.v1.QueryPacketCommitmentsResponse:
    type: object
    properties:
      commitments:
        type: array
        items:
          type: object
          properties:
            port_id:
              type: string
              description: channel port identifier.
            channel_id:
              type: string
              description: channel unique identifier.
            sequence:
              type: string
              format: uint64
              description: packet sequence.
            data:
              type: string
              format: byte
              description: embedded data that represents packet state.
          description: >-
            PacketState defines the generic type necessary to retrieve and store

            packet commitments, acknowledgements, and receipts.

            Caller is responsible for knowing the context necessary to interpret
            this

            state as a commitment, acknowledgement, or a receipt.
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: |-
      QueryPacketCommitmentsResponse is the request type for the
      Query/QueryPacketCommitments RPC method
  ibc.core.channel.v1.QueryPacketReceiptResponse:
    type: object
    properties:
      received:
        type: boolean
        title: success flag for if receipt exists
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: >-
      QueryPacketReceiptResponse defines the client query response for a packet
      receipt

      which also includes a proof, and the height from which the proof was

      retrieved
  ibc.core.channel.v1.QueryUnreceivedAcksResponse:
    type: object
    properties:
      sequences:
        type: array
        items:
          type: string
          format: uint64
        title: list of unreceived acknowledgement sequences
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: |-
      QueryUnreceivedAcksResponse is the response type for the
      Query/UnreceivedAcks RPC method
  ibc.core.channel.v1.QueryUnreceivedPacketsResponse:
    type: object
    properties:
      sequences:
        type: array
        items:
          type: string
          format: uint64
        title: list of unreceived packet sequences
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: |-
      QueryUnreceivedPacketsResponse is the response type for the
      Query/UnreceivedPacketCommitments RPC method
  ibc.core.channel.v1.State:
    type: string
    enum:
      - STATE_UNINITIALIZED_UNSPECIFIED
      - STATE_INIT
      - STATE_TRYOPEN
      - STATE_OPEN
      - STATE_CLOSED
    default: STATE_UNINITIALIZED_UNSPECIFIED
    description: |-
      State defines if a channel is in one of the following states:
      CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

       - STATE_UNINITIALIZED_UNSPECIFIED: Default State
       - STATE_INIT: A channel has just started the opening handshake.
       - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
       - STATE_OPEN: A channel has completed the handshake. Open channels are
      ready to send and receive packets.
       - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
      packets.
  ibc.core.client.v1.IdentifiedClientState:
    type: object
    properties:
      client_id:
        type: string
        title: client identifier
      client_state:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: client state
    description: |-
      IdentifiedClientState defines a client state with an additional client
      identifier field.
  ibc.core.channel.v1.MsgAcknowledgementResponse:
    type: object
    description: MsgAcknowledgementResponse defines the Msg/Acknowledgement response type.
  ibc.core.channel.v1.MsgChannelCloseConfirmResponse:
    type: object
    description: >-
      MsgChannelCloseConfirmResponse defines the Msg/ChannelCloseConfirm
      response type.
  ibc.core.channel.v1.MsgChannelCloseInitResponse:
    type: object
    description: >-
      MsgChannelCloseInitResponse defines the Msg/ChannelCloseInit response
      type.
  ibc.core.channel.v1.MsgChannelOpenAckResponse:
    type: object
    description: MsgChannelOpenAckResponse defines the Msg/ChannelOpenAck response type.
  ibc.core.channel.v1.MsgChannelOpenConfirmResponse:
    type: object
    description: >-
      MsgChannelOpenConfirmResponse defines the Msg/ChannelOpenConfirm response
      type.
  ibc.core.channel.v1.MsgChannelOpenInitResponse:
    type: object
    description: MsgChannelOpenInitResponse defines the Msg/ChannelOpenInit response type.
  ibc.core.channel.v1.MsgChannelOpenTryResponse:
    type: object
    description: MsgChannelOpenTryResponse defines the Msg/ChannelOpenTry response type.
  ibc.core.channel.v1.MsgRecvPacketResponse:
    type: object
    description: MsgRecvPacketResponse defines the Msg/RecvPacket response type.
  ibc.core.channel.v1.MsgTimeoutOnCloseResponse:
    type: object
    description: MsgTimeoutOnCloseResponse defines the Msg/TimeoutOnClose response type.
  ibc.core.channel.v1.MsgTimeoutResponse:
    type: object
    description: MsgTimeoutResponse defines the Msg/Timeout response type.
  ibc.core.channel.v1.Packet:
    type: object
    properties:
      sequence:
        type: string
        format: uint64
        description: >-
          number corresponds to the order of sends and receives, where a Packet

          with an earlier sequence number must be sent and received before a
          Packet

          with a later sequence number.
      source_port:
        type: string
        description: identifies the port on the sending chain.
      source_channel:
        type: string
        description: identifies the channel end on the sending chain.
      destination_port:
        type: string
        description: identifies the port on the receiving chain.
      destination_channel:
        type: string
        description: identifies the channel end on the receiving chain.
      data:
        type: string
        format: byte
        title: actual opaque bytes transferred directly to the application module
      timeout_height:
        title: block height after which the packet times out
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
      timeout_timestamp:
        type: string
        format: uint64
        title: block timestamp (in nanoseconds) after which the packet times out
    title: >-
      Packet defines a type that carries data across different chains through
      IBC
  ibc.core.client.v1.ConsensusStateWithHeight:
    type: object
    properties:
      height:
        title: consensus state height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
      consensus_state:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: consensus state
    description: >-
      ConsensusStateWithHeight defines a consensus state with an additional
      height field.
  ibc.core.client.v1.Params:
    type: object
    properties:
      allowed_clients:
        type: array
        items:
          type: string
        description: allowed_clients defines the list of allowed client state types.
    description: Params defines the set of IBC light client parameters.
  ibc.core.client.v1.QueryClientParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          allowed_clients:
            type: array
            items:
              type: string
            description: allowed_clients defines the list of allowed client state types.
    description: >-
      QueryClientParamsResponse is the response type for the Query/ClientParams
      RPC method.
  ibc.core.client.v1.QueryClientStateResponse:
    type: object
    properties:
      client_state:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: client state associated with the request identifier
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    description: >-
      QueryClientStateResponse is the response type for the Query/ClientState
      RPC

      method. Besides the client state, it includes a proof and the height from

      which the proof was retrieved.
  ibc.core.client.v1.QueryClientStatesResponse:
    type: object
    properties:
      client_states:
        type: array
        items:
          type: object
          properties:
            client_id:
              type: string
              title: client identifier
            client_state:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              title: client state
          description: >-
            IdentifiedClientState defines a client state with an additional
            client

            identifier field.
        description: list of stored ClientStates of the chain.
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    description: >-
      QueryClientStatesResponse is the response type for the Query/ClientStates
      RPC

      method.
  ibc.core.client.v1.QueryConsensusStateResponse:
    type: object
    properties:
      consensus_state:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: >-
          consensus state associated with the client identifier at the given
          height
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: >-
      QueryConsensusStateResponse is the response type for the
      Query/ConsensusState

      RPC method
  ibc.core.client.v1.QueryConsensusStatesResponse:
    type: object
    properties:
      consensus_states:
        type: array
        items:
          type: object
          properties:
            height:
              title: consensus state height
              type: object
              properties:
                revision_number:
                  type: string
                  format: uint64
                  title: the revision that the client is currently on
                revision_height:
                  type: string
                  format: uint64
                  title: the height within the given revision
              description: >-
                Normally the RevisionHeight is incremented at each height while
                keeping RevisionNumber

                the same. However some consensus algorithms may choose to reset
                the

                height in certain conditions e.g. hard forks, state-machine
                breaking changes

                In these cases, the RevisionNumber is incremented so that height
                continues to

                be monitonically increasing even as the RevisionHeight gets
                reset
            consensus_state:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              title: consensus state
          description: >-
            ConsensusStateWithHeight defines a consensus state with an
            additional height field.
        title: consensus states associated with the identifier
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: |-
      QueryConsensusStatesResponse is the response type for the
      Query/ConsensusStates RPC method
  ibc.core.client.v1.MsgCreateClientResponse:
    type: object
    description: MsgCreateClientResponse defines the Msg/CreateClient response type.
  ibc.core.client.v1.MsgSubmitMisbehaviourResponse:
    type: object
    description: >-
      MsgSubmitMisbehaviourResponse defines the Msg/SubmitMisbehaviour response
      type.
  ibc.core.client.v1.MsgUpdateClientResponse:
    type: object
    description: MsgUpdateClientResponse defines the Msg/UpdateClient response type.
  ibc.core.client.v1.MsgUpgradeClientResponse:
    type: object
    description: MsgUpgradeClientResponse defines the Msg/UpgradeClient response type.
  ibc.core.commitment.v1.MerklePrefix:
    type: object
    properties:
      key_prefix:
        type: string
        format: byte
    title: |-
      MerklePrefix is merkle path prefixed to the key.
      The constructed key from the Path and the key will be append(Path.KeyPath,
      append(Path.KeyPrefix, key...))
  ibc.core.connection.v1.ConnectionEnd:
    type: object
    properties:
      client_id:
        type: string
        description: client associated with this connection.
      versions:
        type: array
        items:
          type: object
          properties:
            identifier:
              type: string
              title: unique version identifier
            features:
              type: array
              items:
                type: string
              title: list of features compatible with the specified identifier
          description: >-
            Version defines the versioning scheme used to negotiate the IBC
            verison in

            the connection handshake.
        description: >-
          IBC version which can be utilised to determine encodings or protocols
          for

          channels or packets utilising this connection.
      state:
        description: current state of the connection end.
        type: string
        enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
        default: STATE_UNINITIALIZED_UNSPECIFIED
      counterparty:
        description: counterparty chain associated with this connection.
        type: object
        properties:
          client_id:
            type: string
            description: >-
              identifies the client on the counterparty chain associated with a
              given

              connection.
          connection_id:
            type: string
            description: >-
              identifies the connection end on the counterparty chain associated
              with a

              given connection.
          prefix:
            description: commitment merkle prefix of the counterparty chain.
            type: object
            properties:
              key_prefix:
                type: string
                format: byte
            title: >-
              MerklePrefix is merkle path prefixed to the key.

              The constructed key from the Path and the key will be
              append(Path.KeyPath,

              append(Path.KeyPrefix, key...))
      delay_period:
        type: string
        format: uint64
        description: >-
          delay period that must pass before a consensus state can be used for
          packet-verification

          NOTE: delay period logic is only implemented by some clients.
    description: |-
      ConnectionEnd defines a stateful object on a chain connected to another
      separate one.
      NOTE: there must only be 2 defined ConnectionEnds to establish
      a connection between two chains.
  ibc.core.connection.v1.Counterparty:
    type: object
    properties:
      client_id:
        type: string
        description: >-
          identifies the client on the counterparty chain associated with a
          given

          connection.
      connection_id:
        type: string
        description: >-
          identifies the connection end on the counterparty chain associated
          with a

          given connection.
      prefix:
        description: commitment merkle prefix of the counterparty chain.
        type: object
        properties:
          key_prefix:
            type: string
            format: byte
        title: >-
          MerklePrefix is merkle path prefixed to the key.

          The constructed key from the Path and the key will be
          append(Path.KeyPath,

          append(Path.KeyPrefix, key...))
    description: >-
      Counterparty defines the counterparty chain associated with a connection
      end.
  ibc.core.connection.v1.IdentifiedConnection:
    type: object
    properties:
      id:
        type: string
        description: connection identifier.
      client_id:
        type: string
        description: client associated with this connection.
      versions:
        type: array
        items:
          type: object
          properties:
            identifier:
              type: string
              title: unique version identifier
            features:
              type: array
              items:
                type: string
              title: list of features compatible with the specified identifier
          description: >-
            Version defines the versioning scheme used to negotiate the IBC
            verison in

            the connection handshake.
        title: >-
          IBC version which can be utilised to determine encodings or protocols
          for

          channels or packets utilising this connection
      state:
        description: current state of the connection end.
        type: string
        enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
        default: STATE_UNINITIALIZED_UNSPECIFIED
      counterparty:
        description: counterparty chain associated with this connection.
        type: object
        properties:
          client_id:
            type: string
            description: >-
              identifies the client on the counterparty chain associated with a
              given

              connection.
          connection_id:
            type: string
            description: >-
              identifies the connection end on the counterparty chain associated
              with a

              given connection.
          prefix:
            description: commitment merkle prefix of the counterparty chain.
            type: object
            properties:
              key_prefix:
                type: string
                format: byte
            title: >-
              MerklePrefix is merkle path prefixed to the key.

              The constructed key from the Path and the key will be
              append(Path.KeyPath,

              append(Path.KeyPrefix, key...))
      delay_period:
        type: string
        format: uint64
        description: delay period associated with this connection.
    description: |-
      IdentifiedConnection defines a connection with additional connection
      identifier field.
  ibc.core.connection.v1.QueryClientConnectionsResponse:
    type: object
    properties:
      connection_paths:
        type: array
        items:
          type: string
        description: slice of all the connection paths associated with a client.
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was generated
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: |-
      QueryClientConnectionsResponse is the response type for the
      Query/ClientConnections RPC method
  ibc.core.connection.v1.QueryConnectionClientStateResponse:
    type: object
    properties:
      identified_client_state:
        title: client state associated with the channel
        type: object
        properties:
          client_id:
            type: string
            title: client identifier
          client_state:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            title: client state
        description: |-
          IdentifiedClientState defines a client state with an additional client
          identifier field.
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: |-
      QueryConnectionClientStateResponse is the response type for the
      Query/ConnectionClientState RPC method
  ibc.core.connection.v1.QueryConnectionConsensusStateResponse:
    type: object
    properties:
      consensus_state:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: consensus state associated with the channel
      client_id:
        type: string
        title: client ID associated with the consensus state
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    title: |-
      QueryConnectionConsensusStateResponse is the response type for the
      Query/ConnectionConsensusState RPC method
  ibc.core.connection.v1.QueryConnectionResponse:
    type: object
    properties:
      connection:
        title: connection associated with the request identifier
        type: object
        properties:
          client_id:
            type: string
            description: client associated with this connection.
          versions:
            type: array
            items:
              type: object
              properties:
                identifier:
                  type: string
                  title: unique version identifier
                features:
                  type: array
                  items:
                    type: string
                  title: list of features compatible with the specified identifier
              description: >-
                Version defines the versioning scheme used to negotiate the IBC
                verison in

                the connection handshake.
            description: >-
              IBC version which can be utilised to determine encodings or
              protocols for

              channels or packets utilising this connection.
          state:
            description: current state of the connection end.
            type: string
            enum:
              - STATE_UNINITIALIZED_UNSPECIFIED
              - STATE_INIT
              - STATE_TRYOPEN
              - STATE_OPEN
            default: STATE_UNINITIALIZED_UNSPECIFIED
          counterparty:
            description: counterparty chain associated with this connection.
            type: object
            properties:
              client_id:
                type: string
                description: >-
                  identifies the client on the counterparty chain associated
                  with a given

                  connection.
              connection_id:
                type: string
                description: >-
                  identifies the connection end on the counterparty chain
                  associated with a

                  given connection.
              prefix:
                description: commitment merkle prefix of the counterparty chain.
                type: object
                properties:
                  key_prefix:
                    type: string
                    format: byte
                title: >-
                  MerklePrefix is merkle path prefixed to the key.

                  The constructed key from the Path and the key will be
                  append(Path.KeyPath,

                  append(Path.KeyPrefix, key...))
          delay_period:
            type: string
            format: uint64
            description: >-
              delay period that must pass before a consensus state can be used
              for packet-verification

              NOTE: delay period logic is only implemented by some clients.
        description: >-
          ConnectionEnd defines a stateful object on a chain connected to
          another

          separate one.

          NOTE: there must only be 2 defined ConnectionEnds to establish

          a connection between two chains.
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    description: >-
      QueryConnectionResponse is the response type for the Query/Connection RPC

      method. Besides the connection end, it includes a proof and the height
      from

      which the proof was retrieved.
  ibc.core.connection.v1.QueryConnectionsResponse:
    type: object
    properties:
      connections:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              description: connection identifier.
            client_id:
              type: string
              description: client associated with this connection.
            versions:
              type: array
              items:
                type: object
                properties:
                  identifier:
                    type: string
                    title: unique version identifier
                  features:
                    type: array
                    items:
                      type: string
                    title: list of features compatible with the specified identifier
                description: >-
                  Version defines the versioning scheme used to negotiate the
                  IBC verison in

                  the connection handshake.
              title: >-
                IBC version which can be utilised to determine encodings or
                protocols for

                channels or packets utilising this connection
            state:
              description: current state of the connection end.
              type: string
              enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
              default: STATE_UNINITIALIZED_UNSPECIFIED
            counterparty:
              description: counterparty chain associated with this connection.
              type: object
              properties:
                client_id:
                  type: string
                  description: >-
                    identifies the client on the counterparty chain associated
                    with a given

                    connection.
                connection_id:
                  type: string
                  description: >-
                    identifies the connection end on the counterparty chain
                    associated with a

                    given connection.
                prefix:
                  description: commitment merkle prefix of the counterparty chain.
                  type: object
                  properties:
                    key_prefix:
                      type: string
                      format: byte
                  title: >-
                    MerklePrefix is merkle path prefixed to the key.

                    The constructed key from the Path and the key will be
                    append(Path.KeyPath,

                    append(Path.KeyPrefix, key...))
            delay_period:
              type: string
              format: uint64
              description: delay period associated with this connection.
          description: |-
            IdentifiedConnection defines a connection with additional connection
            identifier field.
        description: list of stored connections of the chain.
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping RevisionNumber

          the same. However some consensus algorithms may choose to reset the

          height in certain conditions e.g. hard forks, state-machine breaking
          changes

          In these cases, the RevisionNumber is incremented so that height
          continues to

          be monitonically increasing even as the RevisionHeight gets reset
    description: >-
      QueryConnectionsResponse is the response type for the Query/Connections
      RPC

      method.
  ibc.core.connection.v1.State:
    type: string
    enum:
      - STATE_UNINITIALIZED_UNSPECIFIED
      - STATE_INIT
      - STATE_TRYOPEN
      - STATE_OPEN
    default: STATE_UNINITIALIZED_UNSPECIFIED
    description: |-
      State defines if a connection is in one of the following states:
      INIT, TRYOPEN, OPEN or UNINITIALIZED.

       - STATE_UNINITIALIZED_UNSPECIFIED: Default State
       - STATE_INIT: A connection end has just started the opening handshake.
       - STATE_TRYOPEN: A connection end has acknowledged the handshake step on the counterparty
      chain.
       - STATE_OPEN: A connection end has completed the handshake.
  ibc.core.connection.v1.Version:
    type: object
    properties:
      identifier:
        type: string
        title: unique version identifier
      features:
        type: array
        items:
          type: string
        title: list of features compatible with the specified identifier
    description: |-
      Version defines the versioning scheme used to negotiate the IBC verison in
      the connection handshake.
  ibc.core.connection.v1.MsgConnectionOpenAckResponse:
    type: object
    description: >-
      MsgConnectionOpenAckResponse defines the Msg/ConnectionOpenAck response
      type.
  ibc.core.connection.v1.MsgConnectionOpenConfirmResponse:
    type: object
    description: >-
      MsgConnectionOpenConfirmResponse defines the Msg/ConnectionOpenConfirm
      response type.
  ibc.core.connection.v1.MsgConnectionOpenInitResponse:
    type: object
    description: >-
      MsgConnectionOpenInitResponse defines the Msg/ConnectionOpenInit response
      type.
  ibc.core.connection.v1.MsgConnectionOpenTryResponse:
    type: object
    description: >-
      MsgConnectionOpenTryResponse defines the Msg/ConnectionOpenTry response
      type.
  provenance.attribute.v1.Attribute:
    type: object
    properties:
      name:
        type: string
        description: The attribute name.
      value:
        type: string
        format: byte
        description: The attribute value.
      attribute_type:
        description: The attribute value type.
        type: string
        enum:
          - ATTRIBUTE_TYPE_UNSPECIFIED
          - ATTRIBUTE_TYPE_UUID
          - ATTRIBUTE_TYPE_JSON
          - ATTRIBUTE_TYPE_STRING
          - ATTRIBUTE_TYPE_URI
          - ATTRIBUTE_TYPE_INT
          - ATTRIBUTE_TYPE_FLOAT
          - ATTRIBUTE_TYPE_PROTO
          - ATTRIBUTE_TYPE_BYTES
        default: ATTRIBUTE_TYPE_UNSPECIFIED
        title: >-
          AttributeType defines the type of the data stored in the attribute
          value
      address:
        type: string
        title: The address the attribute is bound to
    title: >-
      Attribute holds a typed key/value structure for data associated with an
      account
  provenance.attribute.v1.AttributeType:
    type: string
    enum:
      - ATTRIBUTE_TYPE_UNSPECIFIED
      - ATTRIBUTE_TYPE_UUID
      - ATTRIBUTE_TYPE_JSON
      - ATTRIBUTE_TYPE_STRING
      - ATTRIBUTE_TYPE_URI
      - ATTRIBUTE_TYPE_INT
      - ATTRIBUTE_TYPE_FLOAT
      - ATTRIBUTE_TYPE_PROTO
      - ATTRIBUTE_TYPE_BYTES
    default: ATTRIBUTE_TYPE_UNSPECIFIED
    description: >-
      - ATTRIBUTE_TYPE_UNSPECIFIED: ATTRIBUTE_TYPE_UNSPECIFIED defines an
      unknown/invalid type
       - ATTRIBUTE_TYPE_UUID: ATTRIBUTE_TYPE_UUID defines an attribute value that contains a string value representation of a V4 uuid
       - ATTRIBUTE_TYPE_JSON: ATTRIBUTE_TYPE_JSON defines an attribute value that contains a byte string containing json data
       - ATTRIBUTE_TYPE_STRING: ATTRIBUTE_TYPE_STRING defines an attribute value that contains a generic string value
       - ATTRIBUTE_TYPE_URI: ATTRIBUTE_TYPE_URI defines an attribute value that contains a URI
       - ATTRIBUTE_TYPE_INT: ATTRIBUTE_TYPE_INT defines an attribute value that contains an integer (cast as int64)
       - ATTRIBUTE_TYPE_FLOAT: ATTRIBUTE_TYPE_FLOAT defines an attribute value that contains a float
       - ATTRIBUTE_TYPE_PROTO: ATTRIBUTE_TYPE_PROTO defines an attribute value that contains a serialized proto value in bytes
       - ATTRIBUTE_TYPE_BYTES: ATTRIBUTE_TYPE_BYTES defines an attribute value that contains an untyped array of bytes
    title: AttributeType defines the type of the data stored in the attribute value
  provenance.attribute.v1.Params:
    type: object
    properties:
      max_value_length:
        type: integer
        format: int64
        title: maximum length of data to allow in an attribute value
    description: Params defines the set of params for the attribute module.
  provenance.attribute.v1.QueryAttributeResponse:
    type: object
    properties:
      account:
        type: string
        description: >-
          a string containing the address of the account the attributes are
          assigned to.
      attributes:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: The attribute name.
            value:
              type: string
              format: byte
              description: The attribute value.
            attribute_type:
              description: The attribute value type.
              type: string
              enum:
                - ATTRIBUTE_TYPE_UNSPECIFIED
                - ATTRIBUTE_TYPE_UUID
                - ATTRIBUTE_TYPE_JSON
                - ATTRIBUTE_TYPE_STRING
                - ATTRIBUTE_TYPE_URI
                - ATTRIBUTE_TYPE_INT
                - ATTRIBUTE_TYPE_FLOAT
                - ATTRIBUTE_TYPE_PROTO
                - ATTRIBUTE_TYPE_BYTES
              default: ATTRIBUTE_TYPE_UNSPECIFIED
              title: >-
                AttributeType defines the type of the data stored in the
                attribute value
            address:
              type: string
              title: The address the attribute is bound to
          title: >-
            Attribute holds a typed key/value structure for data associated with
            an account
        title: a list of attribute values
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAttributeResponse is the response type for the Query/Attribute
      method.
  provenance.attribute.v1.QueryAttributesResponse:
    type: object
    properties:
      account:
        type: string
        title: >-
          a string containing the address of the account the attributes are
          assigned to=
      attributes:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: The attribute name.
            value:
              type: string
              format: byte
              description: The attribute value.
            attribute_type:
              description: The attribute value type.
              type: string
              enum:
                - ATTRIBUTE_TYPE_UNSPECIFIED
                - ATTRIBUTE_TYPE_UUID
                - ATTRIBUTE_TYPE_JSON
                - ATTRIBUTE_TYPE_STRING
                - ATTRIBUTE_TYPE_URI
                - ATTRIBUTE_TYPE_INT
                - ATTRIBUTE_TYPE_FLOAT
                - ATTRIBUTE_TYPE_PROTO
                - ATTRIBUTE_TYPE_BYTES
              default: ATTRIBUTE_TYPE_UNSPECIFIED
              title: >-
                AttributeType defines the type of the data stored in the
                attribute value
            address:
              type: string
              title: The address the attribute is bound to
          title: >-
            Attribute holds a typed key/value structure for data associated with
            an account
        title: a list of attribute values
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAttributesResponse is the response type for the Query/Attribute
      method.
  provenance.attribute.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          max_value_length:
            type: integer
            format: int64
            title: maximum length of data to allow in an attribute value
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  provenance.attribute.v1.QueryScanResponse:
    type: object
    properties:
      account:
        type: string
        title: >-
          a string containing the address of the account the attributes are
          assigned to=
      attributes:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: The attribute name.
            value:
              type: string
              format: byte
              description: The attribute value.
            attribute_type:
              description: The attribute value type.
              type: string
              enum:
                - ATTRIBUTE_TYPE_UNSPECIFIED
                - ATTRIBUTE_TYPE_UUID
                - ATTRIBUTE_TYPE_JSON
                - ATTRIBUTE_TYPE_STRING
                - ATTRIBUTE_TYPE_URI
                - ATTRIBUTE_TYPE_INT
                - ATTRIBUTE_TYPE_FLOAT
                - ATTRIBUTE_TYPE_PROTO
                - ATTRIBUTE_TYPE_BYTES
              default: ATTRIBUTE_TYPE_UNSPECIFIED
              title: >-
                AttributeType defines the type of the data stored in the
                attribute value
            address:
              type: string
              title: The address the attribute is bound to
          title: >-
            Attribute holds a typed key/value structure for data associated with
            an account
        title: a list of attribute values
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: QueryScanResponse is the response type for the Query/Attribute method.
  provenance.attribute.v1.MsgAddAttributeResponse:
    type: object
    description: MsgAddAttributeResponse defines the Msg/Vote response type.
  provenance.attribute.v1.MsgDeleteAttributeResponse:
    type: object
    description: MsgDeleteAttributeResponse defines the Msg/Vote response type.
  provenance.attribute.v1.MsgDeleteDistinctAttributeResponse:
    type: object
    description: MsgDeleteDistinctAttributeResponse defines the Msg/Vote response type.
  provenance.attribute.v1.MsgUpdateAttributeResponse:
    type: object
    description: MsgUpdateAttributeResponse defines the Msg/Vote response type.
  provenance.marker.v1.Access:
    type: string
    enum:
      - ACCESS_UNSPECIFIED
      - ACCESS_MINT
      - ACCESS_BURN
      - ACCESS_DEPOSIT
      - ACCESS_WITHDRAW
      - ACCESS_DELETE
      - ACCESS_ADMIN
      - ACCESS_TRANSFER
    default: ACCESS_UNSPECIFIED
    description: >-
      Access defines the different types of permissions that a marker supports
      granting to an address.

       - ACCESS_UNSPECIFIED: ACCESS_UNSPECIFIED defines a no-op vote option.
       - ACCESS_MINT: ACCESS_MINT is the ability to increase the supply of a marker
       - ACCESS_BURN: ACCESS_BURN is the ability to decrease the supply of the marker using coin held by the marker.
       - ACCESS_DEPOSIT: ACCESS_DEPOSIT is the ability to set a marker reference to this marker in the metadata/scopes module
       - ACCESS_WITHDRAW: ACCESS_WITHDRAW is the ability to remove marker references to this marker in from metadata/scopes or
      transfer coin from this marker account to another account.
       - ACCESS_DELETE: ACCESS_DELETE is the ability to move a proposed, finalized or active marker into the cancelled state. This
      access also allows cancelled markers to be marked for deletion
       - ACCESS_ADMIN: ACCESS_ADMIN is the ability to add access grants for accounts to the list of marker permissions.
       - ACCESS_TRANSFER: ACCESS_TRANSFER is the ability to invoke a send operation using the marker module to facilitate exchange.
      This access right is only supported on RESTRICTED markers.
  provenance.marker.v1.AccessGrant:
    type: object
    properties:
      address:
        type: string
      permissions:
        type: array
        items:
          type: string
          enum:
            - ACCESS_UNSPECIFIED
            - ACCESS_MINT
            - ACCESS_BURN
            - ACCESS_DEPOSIT
            - ACCESS_WITHDRAW
            - ACCESS_DELETE
            - ACCESS_ADMIN
            - ACCESS_TRANSFER
          default: ACCESS_UNSPECIFIED
          description: >-
            Access defines the different types of permissions that a marker
            supports granting to an address.

             - ACCESS_UNSPECIFIED: ACCESS_UNSPECIFIED defines a no-op vote option.
             - ACCESS_MINT: ACCESS_MINT is the ability to increase the supply of a marker
             - ACCESS_BURN: ACCESS_BURN is the ability to decrease the supply of the marker using coin held by the marker.
             - ACCESS_DEPOSIT: ACCESS_DEPOSIT is the ability to set a marker reference to this marker in the metadata/scopes module
             - ACCESS_WITHDRAW: ACCESS_WITHDRAW is the ability to remove marker references to this marker in from metadata/scopes or
            transfer coin from this marker account to another account.
             - ACCESS_DELETE: ACCESS_DELETE is the ability to move a proposed, finalized or active marker into the cancelled state. This
            access also allows cancelled markers to be marked for deletion
             - ACCESS_ADMIN: ACCESS_ADMIN is the ability to add access grants for accounts to the list of marker permissions.
             - ACCESS_TRANSFER: ACCESS_TRANSFER is the ability to invoke a send operation using the marker module to facilitate exchange.
            This access right is only supported on RESTRICTED markers.
    description: >-
      AccessGrant associates a colelction of permisssions with an address for
      delegated marker account control.
  provenance.marker.v1.Balance:
    type: object
    properties:
      address:
        type: string
        description: address is the address of the balance holder.
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: coins defines the different coins this balance holds.
    title: >-
      Balance defines an account address and balance pair used in queries for
      accounts holding a marker
  provenance.marker.v1.MarkerStatus:
    type: string
    enum:
      - MARKER_STATUS_UNSPECIFIED
      - MARKER_STATUS_PROPOSED
      - MARKER_STATUS_FINALIZED
      - MARKER_STATUS_ACTIVE
      - MARKER_STATUS_CANCELLED
      - MARKER_STATUS_DESTROYED
    default: MARKER_STATUS_UNSPECIFIED
    description: |-
      MarkerStatus defines the various states a marker account can be in.

       - MARKER_STATUS_UNSPECIFIED: MARKER_STATUS_UNSPECIFIED - Unknown/Invalid Marker Status
       - MARKER_STATUS_PROPOSED: MARKER_STATUS_PROPOSED - Initial configuration period, updates allowed, token supply not created.
       - MARKER_STATUS_FINALIZED: MARKER_STATUS_FINALIZED - Configuration finalized, ready for supply creation
       - MARKER_STATUS_ACTIVE: MARKER_STATUS_ACTIVE - Supply is created, rules are in force.
       - MARKER_STATUS_CANCELLED: MARKER_STATUS_CANCELLED - Marker has been cancelled, pending destroy
       - MARKER_STATUS_DESTROYED: MARKER_STATUS_DESTROYED - Marker supply has all been recalled, marker is considered destroyed and no further
      actions allowed.
  provenance.marker.v1.Params:
    type: object
    properties:
      max_total_supply:
        type: string
        format: uint64
        title: maximum amount of supply to allow a marker to be created with
      enable_governance:
        type: boolean
        format: boolean
        description: indicates if governance based controls of markers is allowed.
      unrestricted_denom_regex:
        type: string
        title: >-
          a regular expression used to validate marker denom values from normal
          create requests (governance

          requests are only subject to platform coin validation denom
          expression)
    description: Params defines the set of params for the account module.
  provenance.marker.v1.QueryAccessResponse:
    type: object
    properties:
      accounts:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            permissions:
              type: array
              items:
                type: string
                enum:
                  - ACCESS_UNSPECIFIED
                  - ACCESS_MINT
                  - ACCESS_BURN
                  - ACCESS_DEPOSIT
                  - ACCESS_WITHDRAW
                  - ACCESS_DELETE
                  - ACCESS_ADMIN
                  - ACCESS_TRANSFER
                default: ACCESS_UNSPECIFIED
                description: >-
                  Access defines the different types of permissions that a
                  marker supports granting to an address.

                   - ACCESS_UNSPECIFIED: ACCESS_UNSPECIFIED defines a no-op vote option.
                   - ACCESS_MINT: ACCESS_MINT is the ability to increase the supply of a marker
                   - ACCESS_BURN: ACCESS_BURN is the ability to decrease the supply of the marker using coin held by the marker.
                   - ACCESS_DEPOSIT: ACCESS_DEPOSIT is the ability to set a marker reference to this marker in the metadata/scopes module
                   - ACCESS_WITHDRAW: ACCESS_WITHDRAW is the ability to remove marker references to this marker in from metadata/scopes or
                  transfer coin from this marker account to another account.
                   - ACCESS_DELETE: ACCESS_DELETE is the ability to move a proposed, finalized or active marker into the cancelled state. This
                  access also allows cancelled markers to be marked for deletion
                   - ACCESS_ADMIN: ACCESS_ADMIN is the ability to add access grants for accounts to the list of marker permissions.
                   - ACCESS_TRANSFER: ACCESS_TRANSFER is the ability to invoke a send operation using the marker module to facilitate exchange.
                  This access right is only supported on RESTRICTED markers.
          description: >-
            AccessGrant associates a colelction of permisssions with an address
            for delegated marker account control.
    description: >-
      QueryAccessResponse is the response type for the Query/MarkerAccess
      method.
  provenance.marker.v1.QueryAllMarkersResponse:
    type: object
    properties:
      markers:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllMarkersResponse is the response type for the Query/AllMarkers
      method.
  provenance.marker.v1.QueryDenomMetadataResponse:
    type: object
    properties:
      metadata:
        type: object
        properties:
          description:
            type: string
          denom_units:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                  description: >-
                    denom represents the string name of the given denom unit
                    (e.g uatom).
                exponent:
                  type: integer
                  format: int64
                  description: >-
                    exponent represents power of 10 exponent that one must

                    raise the base_denom to in order to equal the given
                    DenomUnit's denom

                    1 denom = 1^exponent base_denom

                    (e.g. with a base_denom of uatom, one can create a DenomUnit
                    of 'atom' with

                    exponent = 6, thus: 1 atom = 10^6 uatom).
                aliases:
                  type: array
                  items:
                    type: string
                  title: aliases is a list of string aliases for the given denom
              description: |-
                DenomUnit represents a struct that describes a given
                denomination unit of the basic token.
            title: denom_units represents the list of DenomUnit's for a given coin
          base:
            type: string
            description: >-
              base represents the base denom (should be the DenomUnit with
              exponent = 0).
          display:
            type: string
            description: |-
              display indicates the suggested denom that should be
              displayed in clients.
          name:
            type: string
            description: 'Since: cosmos-sdk 0.43'
            title: 'name defines the name of the token (eg: Cosmos Atom)'
          symbol:
            type: string
            description: >-
              symbol is the token symbol usually shown on exchanges (eg: ATOM).
              This can

              be the same as the display.


              Since: cosmos-sdk 0.43
        description: |-
          Metadata represents a struct that describes
          a basic token.
    title: >-
      QueryDenomMetadataResponse is the response type for the
      Query/DenomMetadata
  provenance.marker.v1.QueryEscrowResponse:
    type: object
    properties:
      escrow:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: >-
      QueryEscrowResponse is the response type for the Query/MarkerEscrow
      method.
  provenance.marker.v1.QueryHoldingResponse:
    type: object
    properties:
      balances:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              description: address is the address of the balance holder.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: coins defines the different coins this balance holds.
          title: >-
            Balance defines an account address and balance pair used in queries
            for accounts holding a marker
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryHoldingResponse is the response type for the Query/MarkerHolders
      method.
  provenance.marker.v1.QueryMarkerResponse:
    type: object
    properties:
      marker:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: QueryMarkerResponse is the response type for the Query/Marker method.
  provenance.marker.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          max_total_supply:
            type: string
            format: uint64
            title: maximum amount of supply to allow a marker to be created with
          enable_governance:
            type: boolean
            format: boolean
            description: indicates if governance based controls of markers is allowed.
          unrestricted_denom_regex:
            type: string
            title: >-
              a regular expression used to validate marker denom values from
              normal create requests (governance

              requests are only subject to platform coin validation denom
              expression)
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  provenance.marker.v1.QuerySupplyResponse:
    type: object
    properties:
      amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: >-
      QuerySupplyResponse is the response type for the Query/MarkerSupply
      method.
  provenance.marker.v1.MarkerType:
    type: string
    enum:
      - MARKER_TYPE_UNSPECIFIED
      - MARKER_TYPE_COIN
      - MARKER_TYPE_RESTRICTED
    default: MARKER_TYPE_UNSPECIFIED
    description: >-
      - MARKER_TYPE_UNSPECIFIED: MARKER_TYPE_UNSPECIFIED is an invalid/unknown
      marker type.
       - MARKER_TYPE_COIN: MARKER_TYPE_COIN is a marker that represents a standard fungible coin (default).
       - MARKER_TYPE_RESTRICTED: MARKER_TYPE_RESTRICTED is a marker that represents a denom with send_enabled = false.
    title: MarkerType defines the types of marker
  provenance.marker.v1.MsgActivateResponse:
    type: object
    title: MsgActivateResponse defines the Msg/Activate response type
  provenance.marker.v1.MsgAddAccessResponse:
    type: object
    title: MsgAddAccessResponse defines the Msg/AddAccess response type
  provenance.marker.v1.MsgAddMarkerResponse:
    type: object
    title: MsgAddMarkerResponse defines the Msg/AddMarker response type
  provenance.marker.v1.MsgBurnResponse:
    type: object
    title: MsgBurnResponse defines the Msg/Burn response type
  provenance.marker.v1.MsgCancelResponse:
    type: object
    title: MsgCancelResponse defines the Msg/Cancel response type
  provenance.marker.v1.MsgDeleteAccessResponse:
    type: object
    title: MsgDeleteAccessResponse defines the Msg/DeleteAccess response type
  provenance.marker.v1.MsgDeleteResponse:
    type: object
    title: MsgDeleteResponse defines the Msg/Delete response type
  provenance.marker.v1.MsgFinalizeResponse:
    type: object
    title: MsgFinalizeResponse defines the Msg/Finalize response type
  provenance.marker.v1.MsgGrantAllowanceResponse:
    type: object
    description: >-
      MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response
      type.
  provenance.marker.v1.MsgMintResponse:
    type: object
    title: MsgMintResponse defines the Msg/Mint response type
  provenance.marker.v1.MsgSetDenomMetadataResponse:
    type: object
    title: MsgSetDenomMetadataResponse defines the Msg/SetDenomMetadata response type
  provenance.marker.v1.MsgTransferResponse:
    type: object
    title: MsgTransferResponse defines the Msg/Transfer response type
  provenance.marker.v1.MsgWithdrawResponse:
    type: object
    title: MsgWithdrawResponse defines the Msg/Withdraw response type
  provenance.metadata.v1.AuditFields:
    type: object
    properties:
      created_date:
        type: string
        format: date-time
        title: the date/time when this entry was created
      created_by:
        type: string
        title: the address of the account that created this record
      updated_date:
        type: string
        format: date-time
        title: the date/time when this entry was last updated
      updated_by:
        type: string
        title: the address of the account that modified this record
      version:
        type: integer
        format: int64
        title: an optional version number that is incremented with each update
      message:
        type: string
        title: an optional message associated with the creation/update event
    title: >-
      AuditFields capture information about the last account to make
      modifications and when they were made
  provenance.metadata.v1.ContractSpecIdInfo:
    type: object
    properties:
      contract_spec_id:
        type: string
        format: byte
        description: >-
          contract_spec_id is the raw bytes of the contract specification
          address.
      contract_spec_id_prefix:
        type: string
        format: byte
        description: contract_spec_id_prefix is the prefix portion of the contract_spec_id.
      contract_spec_id_contract_spec_uuid:
        type: string
        format: byte
        description: >-
          contract_spec_id_contract_spec_uuid is the contract_spec_uuid portion
          of the contract_spec_id.
      contract_spec_addr:
        type: string
        description: >-
          contract_spec_addr is the bech32 string version of the
          contract_spec_id.
      contract_spec_uuid:
        type: string
        description: >-
          contract_spec_uuid is the uuid hex string of the
          contract_spec_id_contract_spec_uuid.
    description: >-
      ContractSpecIdInfo contains various info regarding a contract
      specification id.
  provenance.metadata.v1.ContractSpecification:
    type: object
    properties:
      specification_id:
        type: string
        format: byte
        title: unique identifier for this specification on chain
      description:
        title: Description information for this contract specification
        type: object
        properties:
          name:
            type: string
            description: A Name for this thing.
          description:
            type: string
            description: A description of this thing.
          website_url:
            type: string
            description: URL to find even more info.
          icon_url:
            type: string
            description: URL of an icon.
        description: >-
          Description holds general information that is handy to associate with
          a structure.
      owner_addresses:
        type: array
        items:
          type: string
        title: Address of the account that owns this specificaiton
      parties_involved:
        type: array
        items:
          type: string
          enum:
            - PARTY_TYPE_UNSPECIFIED
            - PARTY_TYPE_ORIGINATOR
            - PARTY_TYPE_SERVICER
            - PARTY_TYPE_INVESTOR
            - PARTY_TYPE_CUSTODIAN
            - PARTY_TYPE_OWNER
            - PARTY_TYPE_AFFILIATE
            - PARTY_TYPE_OMNIBUS
            - PARTY_TYPE_PROVENANCE
            - PARTY_TYPE_CONTROLLER
            - PARTY_TYPE_VALIDATOR
          default: PARTY_TYPE_UNSPECIFIED
          description: >-
            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
            condition
             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
          title: PartyType are the different roles parties on a contract may use
        title: >-
          a list of party roles that must be fullfilled when signing a
          transaction for this contract specification
      resource_id:
        type: string
        format: byte
        title: the address of a record on chain that represents this contract
      hash:
        type: string
        title: the hash of contract binary (off-chain instance)
      class_name:
        type: string
        title: name of the class/type of this contract executable
    title: >-
      ContractSpecification defines the required parties, resources, conditions,
      and consideration outputs for a contract
  provenance.metadata.v1.ContractSpecificationRequest:
    type: object
    properties:
      specification_id:
        type: string
        description: >-
          specification_id can either be a uuid, e.g.
          def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
          specification

          address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

          It can also be a record specification address, e.g.

          recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
      include_record_specs:
        type: boolean
        format: boolean
        description: >-
          include_record_specs is a flag for whether or not the record
          specifications in this contract specification should

          be included in the result.
    description: >-
      ContractSpecificationRequest is the request type for the
      Query/ContractSpecification RPC method.
  provenance.metadata.v1.ContractSpecificationResponse:
    type: object
    properties:
      contract_specification:
        description: contract_specification is the wrapped contract specification.
        type: object
        properties:
          specification:
            description: specification is the on-chain contract specification message.
            type: object
            properties:
              specification_id:
                type: string
                format: byte
                title: unique identifier for this specification on chain
              description:
                title: Description information for this contract specification
                type: object
                properties:
                  name:
                    type: string
                    description: A Name for this thing.
                  description:
                    type: string
                    description: A description of this thing.
                  website_url:
                    type: string
                    description: URL to find even more info.
                  icon_url:
                    type: string
                    description: URL of an icon.
                description: >-
                  Description holds general information that is handy to
                  associate with a structure.
              owner_addresses:
                type: array
                items:
                  type: string
                title: Address of the account that owns this specificaiton
              parties_involved:
                type: array
                items:
                  type: string
                  enum:
                    - PARTY_TYPE_UNSPECIFIED
                    - PARTY_TYPE_ORIGINATOR
                    - PARTY_TYPE_SERVICER
                    - PARTY_TYPE_INVESTOR
                    - PARTY_TYPE_CUSTODIAN
                    - PARTY_TYPE_OWNER
                    - PARTY_TYPE_AFFILIATE
                    - PARTY_TYPE_OMNIBUS
                    - PARTY_TYPE_PROVENANCE
                    - PARTY_TYPE_CONTROLLER
                    - PARTY_TYPE_VALIDATOR
                  default: PARTY_TYPE_UNSPECIFIED
                  description: >-
                    - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                    condition
                     - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                     - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                     - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                     - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                     - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                     - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                     - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                     - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                     - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                     - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                  title: >-
                    PartyType are the different roles parties on a contract may
                    use
                title: >-
                  a list of party roles that must be fullfilled when signing a
                  transaction for this contract specification
              resource_id:
                type: string
                format: byte
                title: the address of a record on chain that represents this contract
              hash:
                type: string
                title: the hash of contract binary (off-chain instance)
              class_name:
                type: string
                title: name of the class/type of this contract executable
            title: >-
              ContractSpecification defines the required parties, resources,
              conditions, and consideration outputs for a contract
          contract_spec_id_info:
            description: >-
              contract_spec_id_info contains information about the id/address of
              the contract specification.
            type: object
            properties:
              contract_spec_id:
                type: string
                format: byte
                description: >-
                  contract_spec_id is the raw bytes of the contract
                  specification address.
              contract_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  contract_spec_id_prefix is the prefix portion of the
                  contract_spec_id.
              contract_spec_id_contract_spec_uuid:
                type: string
                format: byte
                description: >-
                  contract_spec_id_contract_spec_uuid is the contract_spec_uuid
                  portion of the contract_spec_id.
              contract_spec_addr:
                type: string
                description: >-
                  contract_spec_addr is the bech32 string version of the
                  contract_spec_id.
              contract_spec_uuid:
                type: string
                description: >-
                  contract_spec_uuid is the uuid hex string of the
                  contract_spec_id_contract_spec_uuid.
      record_specifications:
        type: array
        items:
          type: object
          properties:
            specification:
              description: specification is the on-chain record specification message.
              type: object
              properties:
                specification_id:
                  type: string
                  format: byte
                  title: unique identifier for this specification on chain
                name:
                  type: string
                  title: >-
                    Name of Record that will be created when this specification
                    is used
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        title: name for this input
                      type_name:
                        type: string
                        title: a type_name (typically a proto name or class_name)
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                    title: >-
                      InputSpecification defines a name, type_name, and source
                      reference (either on or off chain) to define an input

                      parameter
                  title: >-
                    A set of inputs that must be satisified to apply this
                    RecordSpecification and create a Record
                type_name:
                  type: string
                  title: >-
                    A type name for data associated with this record (typically
                    a class or proto name)
                result_type:
                  title: >-
                    Type of result for this record specification (must be RECORD
                    or RECORD_LIST)
                  type: string
                  enum:
                    - DEFINITION_TYPE_UNSPECIFIED
                    - DEFINITION_TYPE_PROPOSED
                    - DEFINITION_TYPE_RECORD
                    - DEFINITION_TYPE_RECORD_LIST
                  default: DEFINITION_TYPE_UNSPECIFIED
                  description: >-
                    - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED
                    indicates an unknown/invalid value
                     - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                     - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                     - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                    the same name
                responsible_parties:
                  type: array
                  items:
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    title: >-
                      PartyType are the different roles parties on a contract
                      may use
                  title: Type of party responsible for this record
              title: >-
                RecordSpecification defines the specification for a Record
                including allowed/required inputs/outputs
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordSpecificationWrapper contains a single record specification
            and some extra identifiers for it.
        description: >-
          record_specifications is any number or wrapped record specifications
          associated with this contract_specification

          (if requested).
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          specification_id:
            type: string
            description: >-
              specification_id can either be a uuid, e.g.
              def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
              specification

              address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

              It can also be a record specification address, e.g.

              recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
          include_record_specs:
            type: boolean
            format: boolean
            description: >-
              include_record_specs is a flag for whether or not the record
              specifications in this contract specification should

              be included in the result.
    description: >-
      ContractSpecificationResponse is the response type for the
      Query/ContractSpecification RPC method.
  provenance.metadata.v1.ContractSpecificationWrapper:
    type: object
    properties:
      specification:
        description: specification is the on-chain contract specification message.
        type: object
        properties:
          specification_id:
            type: string
            format: byte
            title: unique identifier for this specification on chain
          description:
            title: Description information for this contract specification
            type: object
            properties:
              name:
                type: string
                description: A Name for this thing.
              description:
                type: string
                description: A description of this thing.
              website_url:
                type: string
                description: URL to find even more info.
              icon_url:
                type: string
                description: URL of an icon.
            description: >-
              Description holds general information that is handy to associate
              with a structure.
          owner_addresses:
            type: array
            items:
              type: string
            title: Address of the account that owns this specificaiton
          parties_involved:
            type: array
            items:
              type: string
              enum:
                - PARTY_TYPE_UNSPECIFIED
                - PARTY_TYPE_ORIGINATOR
                - PARTY_TYPE_SERVICER
                - PARTY_TYPE_INVESTOR
                - PARTY_TYPE_CUSTODIAN
                - PARTY_TYPE_OWNER
                - PARTY_TYPE_AFFILIATE
                - PARTY_TYPE_OMNIBUS
                - PARTY_TYPE_PROVENANCE
                - PARTY_TYPE_CONTROLLER
                - PARTY_TYPE_VALIDATOR
              default: PARTY_TYPE_UNSPECIFIED
              description: >-
                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                condition
                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
              title: PartyType are the different roles parties on a contract may use
            title: >-
              a list of party roles that must be fullfilled when signing a
              transaction for this contract specification
          resource_id:
            type: string
            format: byte
            title: the address of a record on chain that represents this contract
          hash:
            type: string
            title: the hash of contract binary (off-chain instance)
          class_name:
            type: string
            title: name of the class/type of this contract executable
        title: >-
          ContractSpecification defines the required parties, resources,
          conditions, and consideration outputs for a contract
      contract_spec_id_info:
        description: >-
          contract_spec_id_info contains information about the id/address of the
          contract specification.
        type: object
        properties:
          contract_spec_id:
            type: string
            format: byte
            description: >-
              contract_spec_id is the raw bytes of the contract specification
              address.
          contract_spec_id_prefix:
            type: string
            format: byte
            description: >-
              contract_spec_id_prefix is the prefix portion of the
              contract_spec_id.
          contract_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              contract_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the contract_spec_id.
          contract_spec_addr:
            type: string
            description: >-
              contract_spec_addr is the bech32 string version of the
              contract_spec_id.
          contract_spec_uuid:
            type: string
            description: >-
              contract_spec_uuid is the uuid hex string of the
              contract_spec_id_contract_spec_uuid.
    description: >-
      ContractSpecificationWrapper contains a single contract specification and
      some extra identifiers for it.
  provenance.metadata.v1.ContractSpecificationsAllRequest:
    type: object
    properties:
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      ContractSpecificationsAllRequest is the request type for the
      Query/ContractSpecificationsAll RPC method.
  provenance.metadata.v1.ContractSpecificationsAllResponse:
    type: object
    properties:
      contract_specifications:
        type: array
        items:
          type: object
          properties:
            specification:
              description: specification is the on-chain contract specification message.
              type: object
              properties:
                specification_id:
                  type: string
                  format: byte
                  title: unique identifier for this specification on chain
                description:
                  title: Description information for this contract specification
                  type: object
                  properties:
                    name:
                      type: string
                      description: A Name for this thing.
                    description:
                      type: string
                      description: A description of this thing.
                    website_url:
                      type: string
                      description: URL to find even more info.
                    icon_url:
                      type: string
                      description: URL of an icon.
                  description: >-
                    Description holds general information that is handy to
                    associate with a structure.
                owner_addresses:
                  type: array
                  items:
                    type: string
                  title: Address of the account that owns this specificaiton
                parties_involved:
                  type: array
                  items:
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    title: >-
                      PartyType are the different roles parties on a contract
                      may use
                  title: >-
                    a list of party roles that must be fullfilled when signing a
                    transaction for this contract specification
                resource_id:
                  type: string
                  format: byte
                  title: >-
                    the address of a record on chain that represents this
                    contract
                hash:
                  type: string
                  title: the hash of contract binary (off-chain instance)
                class_name:
                  type: string
                  title: name of the class/type of this contract executable
              title: >-
                ContractSpecification defines the required parties, resources,
                conditions, and consideration outputs for a contract
            contract_spec_id_info:
              description: >-
                contract_spec_id_info contains information about the id/address
                of the contract specification.
              type: object
              properties:
                contract_spec_id:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id is the raw bytes of the contract
                    specification address.
                contract_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_prefix is the prefix portion of the
                    contract_spec_id.
                contract_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_contract_spec_uuid is the
                    contract_spec_uuid portion of the contract_spec_id.
                contract_spec_addr:
                  type: string
                  description: >-
                    contract_spec_addr is the bech32 string version of the
                    contract_spec_id.
                contract_spec_uuid:
                  type: string
                  description: >-
                    contract_spec_uuid is the uuid hex string of the
                    contract_spec_id_contract_spec_uuid.
          description: >-
            ContractSpecificationWrapper contains a single contract
            specification and some extra identifiers for it.
        description: contract_specifications are the wrapped contract specifications.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      ContractSpecificationsAllResponse is the response type for the
      Query/ContractSpecificationsAll RPC method.
  provenance.metadata.v1.DefinitionType:
    type: string
    enum:
      - DEFINITION_TYPE_UNSPECIFIED
      - DEFINITION_TYPE_PROPOSED
      - DEFINITION_TYPE_RECORD
      - DEFINITION_TYPE_RECORD_LIST
    default: DEFINITION_TYPE_UNSPECIFIED
    description: >-
      - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED indicates an
      unknown/invalid value
       - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
       - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
       - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
      the same name
    title: DefinitionType indicates the required definition type for this value
  provenance.metadata.v1.Description:
    type: object
    properties:
      name:
        type: string
        description: A Name for this thing.
      description:
        type: string
        description: A description of this thing.
      website_url:
        type: string
        description: URL to find even more info.
      icon_url:
        type: string
        description: URL of an icon.
    description: >-
      Description holds general information that is handy to associate with a
      structure.
  provenance.metadata.v1.InputSpecification:
    type: object
    properties:
      name:
        type: string
        title: name for this input
      type_name:
        type: string
        title: a type_name (typically a proto name or class_name)
      record_id:
        type: string
        format: byte
        title: the address of a record on chain (For Established Records)
      hash:
        type: string
        title: the hash of an off-chain piece of information (For Proposed Records)
    title: >-
      InputSpecification defines a name, type_name, and source reference (either
      on or off chain) to define an input

      parameter
  provenance.metadata.v1.OSAllLocatorsRequest:
    type: object
    properties:
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      OSAllLocatorsRequest is the request type for the Query/OSAllLocators RPC
      method.
  provenance.metadata.v1.OSAllLocatorsResponse:
    type: object
    properties:
      locators:
        type: array
        items:
          type: object
          properties:
            owner:
              type: string
              title: account address the endpoint is owned by
            locator_uri:
              type: string
              title: locator endpoint uri
            encryption_key:
              type: string
              title: owners encryption key address
          description: >-
            Defines an Locator object stored on chain, which represents a owner(
            blockchain address) associated with a endpoint

            uri for it's associated object store.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      OSAllLocatorsResponse is the response type for the Query/OSAllLocators RPC
      method.
  provenance.metadata.v1.OSLocatorParams:
    type: object
    properties:
      max_uri_length:
        type: integer
        format: int64
    description: Params defines the parameters for the metadata-locator module methods.
  provenance.metadata.v1.OSLocatorParamsRequest:
    type: object
    description: >-
      OSLocatorParamsRequest is the request type for the Query/OSLocatorParams
      RPC method.
  provenance.metadata.v1.OSLocatorParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          max_uri_length:
            type: integer
            format: int64
      request:
        description: request is a copy of the request that generated these results.
        type: object
    description: >-
      OSLocatorParamsResponse is the response type for the Query/OSLocatorParams
      RPC method.
  provenance.metadata.v1.OSLocatorRequest:
    type: object
    properties:
      owner:
        type: string
    description: OSLocatorRequest is the request type for the Query/OSLocator RPC method.
  provenance.metadata.v1.OSLocatorResponse:
    type: object
    properties:
      locator:
        type: object
        properties:
          owner:
            type: string
            title: account address the endpoint is owned by
          locator_uri:
            type: string
            title: locator endpoint uri
          encryption_key:
            type: string
            title: owners encryption key address
        description: >-
          Defines an Locator object stored on chain, which represents a owner(
          blockchain address) associated with a endpoint

          uri for it's associated object store.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          owner:
            type: string
    description: OSLocatorResponse is the response type for the Query/OSLocator RPC method.
  provenance.metadata.v1.OSLocatorsByScopeRequest:
    type: object
    properties:
      scope_id:
        type: string
    description: >-
      OSLocatorsByScopeRequest is the request type for the
      Query/OSLocatorsByScope RPC method.
  provenance.metadata.v1.OSLocatorsByScopeResponse:
    type: object
    properties:
      locators:
        type: array
        items:
          type: object
          properties:
            owner:
              type: string
              title: account address the endpoint is owned by
            locator_uri:
              type: string
              title: locator endpoint uri
            encryption_key:
              type: string
              title: owners encryption key address
          description: >-
            Defines an Locator object stored on chain, which represents a owner(
            blockchain address) associated with a endpoint

            uri for it's associated object store.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          scope_id:
            type: string
    description: >-
      OSLocatorsByScopeResponse is the response type for the
      Query/OSLocatorsByScope RPC method.
  provenance.metadata.v1.OSLocatorsByURIRequest:
    type: object
    properties:
      uri:
        type: string
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      OSLocatorsByURIRequest is the request type for the Query/OSLocatorsByURI
      RPC method.
  provenance.metadata.v1.OSLocatorsByURIResponse:
    type: object
    properties:
      locators:
        type: array
        items:
          type: object
          properties:
            owner:
              type: string
              title: account address the endpoint is owned by
            locator_uri:
              type: string
              title: locator endpoint uri
            encryption_key:
              type: string
              title: owners encryption key address
          description: >-
            Defines an Locator object stored on chain, which represents a owner(
            blockchain address) associated with a endpoint

            uri for it's associated object store.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          uri:
            type: string
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      OSLocatorsByURIResponse is the response type for the Query/OSLocatorsByURI
      RPC method.
  provenance.metadata.v1.ObjectStoreLocator:
    type: object
    properties:
      owner:
        type: string
        title: account address the endpoint is owned by
      locator_uri:
        type: string
        title: locator endpoint uri
      encryption_key:
        type: string
        title: owners encryption key address
    description: >-
      Defines an Locator object stored on chain, which represents a owner(
      blockchain address) associated with a endpoint

      uri for it's associated object store.
  provenance.metadata.v1.OwnershipRequest:
    type: object
    properties:
      address:
        type: string
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: OwnershipRequest is the request type for the Query/Ownership RPC method.
  provenance.metadata.v1.OwnershipResponse:
    type: object
    properties:
      scope_uuids:
        type: array
        items:
          type: string
        description: A list of scope ids (uuid) associated with the given address.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          address:
            type: string
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: OwnershipResponse is the response type for the Query/Ownership RPC method.
  provenance.metadata.v1.Params:
    type: object
    description: Params defines the set of params for the metadata module.
  provenance.metadata.v1.Party:
    type: object
    properties:
      address:
        type: string
        title: address of the account (on chain)
      role:
        type: string
        enum:
          - PARTY_TYPE_UNSPECIFIED
          - PARTY_TYPE_ORIGINATOR
          - PARTY_TYPE_SERVICER
          - PARTY_TYPE_INVESTOR
          - PARTY_TYPE_CUSTODIAN
          - PARTY_TYPE_OWNER
          - PARTY_TYPE_AFFILIATE
          - PARTY_TYPE_OMNIBUS
          - PARTY_TYPE_PROVENANCE
          - PARTY_TYPE_CONTROLLER
          - PARTY_TYPE_VALIDATOR
        default: PARTY_TYPE_UNSPECIFIED
        description: |-
          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error condition
           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
        title: PartyType are the different roles parties on a contract may use
    title: A Party is an address with/in a given role associated with a contract
  provenance.metadata.v1.PartyType:
    type: string
    enum:
      - PARTY_TYPE_UNSPECIFIED
      - PARTY_TYPE_ORIGINATOR
      - PARTY_TYPE_SERVICER
      - PARTY_TYPE_INVESTOR
      - PARTY_TYPE_CUSTODIAN
      - PARTY_TYPE_OWNER
      - PARTY_TYPE_AFFILIATE
      - PARTY_TYPE_OMNIBUS
      - PARTY_TYPE_PROVENANCE
      - PARTY_TYPE_CONTROLLER
      - PARTY_TYPE_VALIDATOR
    default: PARTY_TYPE_UNSPECIFIED
    description: |-
      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error condition
       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
    title: PartyType are the different roles parties on a contract may use
  provenance.metadata.v1.Process:
    type: object
    properties:
      address:
        type: string
        title: the address of a smart contract used for this process
      hash:
        type: string
        title: the hash of an off-chain process used
      name:
        type: string
        title: >-
          a name associated with the process (type_name, classname or smart
          contract common name)
      method:
        type: string
        title: >-
          method is a name or reference to a specific operation (method) within
          a class/contract that was invoked
    title: >-
      Process contains information used to uniquely identify what was used to
      generate this record
  provenance.metadata.v1.QueryParamsRequest:
    type: object
    description: QueryParamsRequest is the request type for the Query/Params RPC method.
  provenance.metadata.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
      request:
        description: request is a copy of the request that generated these results.
        type: object
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  provenance.metadata.v1.Record:
    type: object
    properties:
      name:
        type: string
        title: >-
          name/identifier for this record.  Value must be unique within the
          scope.  Also known as a Fact name
      session_id:
        type: string
        format: byte
        title: >-
          id of the session context that was used to create this record (use
          with filtered kvprefix iterator)
      process:
        title: >-
          process contain information used to uniquely identify an execution on
          or off chain that generated this record
        type: object
        properties:
          address:
            type: string
            title: the address of a smart contract used for this process
          hash:
            type: string
            title: the hash of an off-chain process used
          name:
            type: string
            title: >-
              a name associated with the process (type_name, classname or smart
              contract common name)
          method:
            type: string
            title: >-
              method is a name or reference to a specific operation (method)
              within a class/contract that was invoked
      inputs:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: Name value included to link back to the definition spec.
            record_id:
              type: string
              format: byte
              title: the address of a record on chain (For Established Records)
            hash:
              type: string
              title: >-
                the hash of an off-chain piece of information (For Proposed
                Records)
            type_name:
              type: string
              title: from proposed fact structure to unmarshal
            status:
              title: >-
                Indicates if this input was a recorded fact on chain or just a
                given hashed input
              type: string
              enum:
                - RECORD_INPUT_STATUS_UNSPECIFIED
                - RECORD_INPUT_STATUS_PROPOSED
                - RECORD_INPUT_STATUS_RECORD
              default: RECORD_INPUT_STATUS_UNSPECIFIED
              description: >-
                - RECORD_INPUT_STATUS_UNSPECIFIED:
                RECORD_INPUT_STATUS_UNSPECIFIED indicates an invalid/unknown
                input type
                 - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                 - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
          title: Tracks the inputs used to establish this record
        title: inputs used with the process to achieve the output on this record
      outputs:
        type: array
        items:
          type: object
          properties:
            hash:
              type: string
              title: >-
                Hash of the data output that was output/generated for this
                record
            status:
              title: >-
                Status of the process execution associated with this output
                indicating success,failure, or pending
              type: string
              enum:
                - RESULT_STATUS_UNSPECIFIED
                - RESULT_STATUS_PASS
                - RESULT_STATUS_SKIP
                - RESULT_STATUS_FAIL
              default: RESULT_STATUS_UNSPECIFIED
              description: >-
                - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED indicates
                an unset condition
                 - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                 - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                 - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
          title: RecordOutput encapsulates the output of a process recorded on chain
        title: >-
          output(s) is the results of executing the process on the given process
          indicated in this record
      specification_id:
        type: string
        format: byte
        description: >-
          specification_id is the id of the record specification that was used
          to create this record.
    title: >-
      A record (of fact) is attached to a session or each consideration output
      from a contract
  provenance.metadata.v1.RecordIdInfo:
    type: object
    properties:
      record_id:
        type: string
        format: byte
        description: record_id is the raw bytes of the record address.
      record_id_prefix:
        type: string
        format: byte
        description: record_id_prefix is the prefix portion of the record_id.
      record_id_scope_uuid:
        type: string
        format: byte
        description: record_id_scope_uuid is the scope_uuid portion of the record_id.
      record_id_hashed_name:
        type: string
        format: byte
        description: record_id_hashed_name is the hashed name portion of the record_id.
      record_addr:
        type: string
        description: record_addr is the bech32 string version of the record_id.
      scope_id_info:
        description: >-
          scope_id_info is information about the scope id referenced in the
          record_id.
        type: object
        properties:
          scope_id:
            type: string
            format: byte
            description: scope_id is the raw bytes of the scope address.
          scope_id_prefix:
            type: string
            format: byte
            description: scope_id_prefix is the prefix portion of the scope_id.
          scope_id_scope_uuid:
            type: string
            format: byte
            description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
          scope_addr:
            type: string
            description: scope_addr is the bech32 string version of the scope_id.
          scope_uuid:
            type: string
            description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
    description: RecordIdInfo contains various info regarding a record id.
  provenance.metadata.v1.RecordInput:
    type: object
    properties:
      name:
        type: string
        description: Name value included to link back to the definition spec.
      record_id:
        type: string
        format: byte
        title: the address of a record on chain (For Established Records)
      hash:
        type: string
        title: the hash of an off-chain piece of information (For Proposed Records)
      type_name:
        type: string
        title: from proposed fact structure to unmarshal
      status:
        title: >-
          Indicates if this input was a recorded fact on chain or just a given
          hashed input
        type: string
        enum:
          - RECORD_INPUT_STATUS_UNSPECIFIED
          - RECORD_INPUT_STATUS_PROPOSED
          - RECORD_INPUT_STATUS_RECORD
        default: RECORD_INPUT_STATUS_UNSPECIFIED
        description: >-
          - RECORD_INPUT_STATUS_UNSPECIFIED: RECORD_INPUT_STATUS_UNSPECIFIED
          indicates an invalid/unknown input type
           - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
           - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
    title: Tracks the inputs used to establish this record
  provenance.metadata.v1.RecordInputStatus:
    type: string
    enum:
      - RECORD_INPUT_STATUS_UNSPECIFIED
      - RECORD_INPUT_STATUS_PROPOSED
      - RECORD_INPUT_STATUS_RECORD
    default: RECORD_INPUT_STATUS_UNSPECIFIED
    description: >-
      - RECORD_INPUT_STATUS_UNSPECIFIED: RECORD_INPUT_STATUS_UNSPECIFIED
      indicates an invalid/unknown input type
       - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
       - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
    title: A set of types for inputs on a record (of fact)
  provenance.metadata.v1.RecordOutput:
    type: object
    properties:
      hash:
        type: string
        title: Hash of the data output that was output/generated for this record
      status:
        title: >-
          Status of the process execution associated with this output indicating
          success,failure, or pending
        type: string
        enum:
          - RESULT_STATUS_UNSPECIFIED
          - RESULT_STATUS_PASS
          - RESULT_STATUS_SKIP
          - RESULT_STATUS_FAIL
        default: RESULT_STATUS_UNSPECIFIED
        description: >-
          - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED indicates an
          unset condition
           - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
           - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
           - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
    title: RecordOutput encapsulates the output of a process recorded on chain
  provenance.metadata.v1.RecordSpecIdInfo:
    type: object
    properties:
      record_spec_id:
        type: string
        format: byte
        description: record_spec_id is the raw bytes of the record specification address.
      record_spec_id_prefix:
        type: string
        format: byte
        description: record_spec_id_prefix is the prefix portion of the record_spec_id.
      record_spec_id_contract_spec_uuid:
        type: string
        format: byte
        description: >-
          record_spec_id_contract_spec_uuid is the contract_spec_uuid portion of
          the record_spec_id.
      record_spec_id_hashed_name:
        type: string
        format: byte
        description: >-
          record_spec_id_hashed_name is the hashed name portion of the
          record_spec_id.
      record_spec_addr:
        type: string
        description: record_spec_addr is the bech32 string version of the record_spec_id.
      contract_spec_id_info:
        description: >-
          contract_spec_id_info is information about the contract spec id
          referenced in the record_spec_id.
        type: object
        properties:
          contract_spec_id:
            type: string
            format: byte
            description: >-
              contract_spec_id is the raw bytes of the contract specification
              address.
          contract_spec_id_prefix:
            type: string
            format: byte
            description: >-
              contract_spec_id_prefix is the prefix portion of the
              contract_spec_id.
          contract_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              contract_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the contract_spec_id.
          contract_spec_addr:
            type: string
            description: >-
              contract_spec_addr is the bech32 string version of the
              contract_spec_id.
          contract_spec_uuid:
            type: string
            description: >-
              contract_spec_uuid is the uuid hex string of the
              contract_spec_id_contract_spec_uuid.
    description: >-
      RecordSpecIdInfo contains various info regarding a record specification
      id.
  provenance.metadata.v1.RecordSpecification:
    type: object
    properties:
      specification_id:
        type: string
        format: byte
        title: unique identifier for this specification on chain
      name:
        type: string
        title: Name of Record that will be created when this specification is used
      inputs:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              title: name for this input
            type_name:
              type: string
              title: a type_name (typically a proto name or class_name)
            record_id:
              type: string
              format: byte
              title: the address of a record on chain (For Established Records)
            hash:
              type: string
              title: >-
                the hash of an off-chain piece of information (For Proposed
                Records)
          title: >-
            InputSpecification defines a name, type_name, and source reference
            (either on or off chain) to define an input

            parameter
        title: >-
          A set of inputs that must be satisified to apply this
          RecordSpecification and create a Record
      type_name:
        type: string
        title: >-
          A type name for data associated with this record (typically a class or
          proto name)
      result_type:
        title: >-
          Type of result for this record specification (must be RECORD or
          RECORD_LIST)
        type: string
        enum:
          - DEFINITION_TYPE_UNSPECIFIED
          - DEFINITION_TYPE_PROPOSED
          - DEFINITION_TYPE_RECORD
          - DEFINITION_TYPE_RECORD_LIST
        default: DEFINITION_TYPE_UNSPECIFIED
        description: >-
          - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED indicates
          an unknown/invalid value
           - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
           - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
           - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
          the same name
      responsible_parties:
        type: array
        items:
          type: string
          enum:
            - PARTY_TYPE_UNSPECIFIED
            - PARTY_TYPE_ORIGINATOR
            - PARTY_TYPE_SERVICER
            - PARTY_TYPE_INVESTOR
            - PARTY_TYPE_CUSTODIAN
            - PARTY_TYPE_OWNER
            - PARTY_TYPE_AFFILIATE
            - PARTY_TYPE_OMNIBUS
            - PARTY_TYPE_PROVENANCE
            - PARTY_TYPE_CONTROLLER
            - PARTY_TYPE_VALIDATOR
          default: PARTY_TYPE_UNSPECIFIED
          description: >-
            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
            condition
             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
          title: PartyType are the different roles parties on a contract may use
        title: Type of party responsible for this record
    title: >-
      RecordSpecification defines the specification for a Record including
      allowed/required inputs/outputs
  provenance.metadata.v1.RecordSpecificationRequest:
    type: object
    properties:
      specification_id:
        type: string
        description: >-
          specification_id can either be a uuid, e.g.
          def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
          specification

          address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

          It can also be a record specification address, e.g.

          recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
      name:
        type: string
        description: >-
          name is the name of the record to look up.

          It is required if the specification_id is a uuid or contract
          specification address.

          It is ignored if the specification_id is a record specification
          address.
    description: >-
      RecordSpecificationRequest is the request type for the
      Query/RecordSpecification RPC method.
  provenance.metadata.v1.RecordSpecificationResponse:
    type: object
    properties:
      record_specification:
        type: object
        properties:
          specification:
            description: specification is the on-chain record specification message.
            type: object
            properties:
              specification_id:
                type: string
                format: byte
                title: unique identifier for this specification on chain
              name:
                type: string
                title: >-
                  Name of Record that will be created when this specification is
                  used
              inputs:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      title: name for this input
                    type_name:
                      type: string
                      title: a type_name (typically a proto name or class_name)
                    record_id:
                      type: string
                      format: byte
                      title: >-
                        the address of a record on chain (For Established
                        Records)
                    hash:
                      type: string
                      title: >-
                        the hash of an off-chain piece of information (For
                        Proposed Records)
                  title: >-
                    InputSpecification defines a name, type_name, and source
                    reference (either on or off chain) to define an input

                    parameter
                title: >-
                  A set of inputs that must be satisified to apply this
                  RecordSpecification and create a Record
              type_name:
                type: string
                title: >-
                  A type name for data associated with this record (typically a
                  class or proto name)
              result_type:
                title: >-
                  Type of result for this record specification (must be RECORD
                  or RECORD_LIST)
                type: string
                enum:
                  - DEFINITION_TYPE_UNSPECIFIED
                  - DEFINITION_TYPE_PROPOSED
                  - DEFINITION_TYPE_RECORD
                  - DEFINITION_TYPE_RECORD_LIST
                default: DEFINITION_TYPE_UNSPECIFIED
                description: >-
                  - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED
                  indicates an unknown/invalid value
                   - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                   - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                   - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                  the same name
              responsible_parties:
                type: array
                items:
                  type: string
                  enum:
                    - PARTY_TYPE_UNSPECIFIED
                    - PARTY_TYPE_ORIGINATOR
                    - PARTY_TYPE_SERVICER
                    - PARTY_TYPE_INVESTOR
                    - PARTY_TYPE_CUSTODIAN
                    - PARTY_TYPE_OWNER
                    - PARTY_TYPE_AFFILIATE
                    - PARTY_TYPE_OMNIBUS
                    - PARTY_TYPE_PROVENANCE
                    - PARTY_TYPE_CONTROLLER
                    - PARTY_TYPE_VALIDATOR
                  default: PARTY_TYPE_UNSPECIFIED
                  description: >-
                    - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                    condition
                     - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                     - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                     - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                     - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                     - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                     - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                     - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                     - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                     - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                     - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                  title: >-
                    PartyType are the different roles parties on a contract may
                    use
                title: Type of party responsible for this record
            title: >-
              RecordSpecification defines the specification for a Record
              including allowed/required inputs/outputs
          record_spec_id_info:
            description: >-
              record_spec_id_info contains information about the id/address of
              the record specification.
            type: object
            properties:
              record_spec_id:
                type: string
                format: byte
                description: >-
                  record_spec_id is the raw bytes of the record specification
                  address.
              record_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  record_spec_id_prefix is the prefix portion of the
                  record_spec_id.
              record_spec_id_contract_spec_uuid:
                type: string
                format: byte
                description: >-
                  record_spec_id_contract_spec_uuid is the contract_spec_uuid
                  portion of the record_spec_id.
              record_spec_id_hashed_name:
                type: string
                format: byte
                description: >-
                  record_spec_id_hashed_name is the hashed name portion of the
                  record_spec_id.
              record_spec_addr:
                type: string
                description: >-
                  record_spec_addr is the bech32 string version of the
                  record_spec_id.
              contract_spec_id_info:
                description: >-
                  contract_spec_id_info is information about the contract spec
                  id referenced in the record_spec_id.
                type: object
                properties:
                  contract_spec_id:
                    type: string
                    format: byte
                    description: >-
                      contract_spec_id is the raw bytes of the contract
                      specification address.
                  contract_spec_id_prefix:
                    type: string
                    format: byte
                    description: >-
                      contract_spec_id_prefix is the prefix portion of the
                      contract_spec_id.
                  contract_spec_id_contract_spec_uuid:
                    type: string
                    format: byte
                    description: >-
                      contract_spec_id_contract_spec_uuid is the
                      contract_spec_uuid portion of the contract_spec_id.
                  contract_spec_addr:
                    type: string
                    description: >-
                      contract_spec_addr is the bech32 string version of the
                      contract_spec_id.
                  contract_spec_uuid:
                    type: string
                    description: >-
                      contract_spec_uuid is the uuid hex string of the
                      contract_spec_id_contract_spec_uuid.
        description: >-
          RecordSpecificationWrapper contains a single record specification and
          some extra identifiers for it.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          specification_id:
            type: string
            description: >-
              specification_id can either be a uuid, e.g.
              def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
              specification

              address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

              It can also be a record specification address, e.g.

              recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
          name:
            type: string
            description: >-
              name is the name of the record to look up.

              It is required if the specification_id is a uuid or contract
              specification address.

              It is ignored if the specification_id is a record specification
              address.
    description: >-
      RecordSpecificationResponse is the response type for the
      Query/RecordSpecification RPC method.
  provenance.metadata.v1.RecordSpecificationWrapper:
    type: object
    properties:
      specification:
        description: specification is the on-chain record specification message.
        type: object
        properties:
          specification_id:
            type: string
            format: byte
            title: unique identifier for this specification on chain
          name:
            type: string
            title: >-
              Name of Record that will be created when this specification is
              used
          inputs:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  title: name for this input
                type_name:
                  type: string
                  title: a type_name (typically a proto name or class_name)
                record_id:
                  type: string
                  format: byte
                  title: the address of a record on chain (For Established Records)
                hash:
                  type: string
                  title: >-
                    the hash of an off-chain piece of information (For Proposed
                    Records)
              title: >-
                InputSpecification defines a name, type_name, and source
                reference (either on or off chain) to define an input

                parameter
            title: >-
              A set of inputs that must be satisified to apply this
              RecordSpecification and create a Record
          type_name:
            type: string
            title: >-
              A type name for data associated with this record (typically a
              class or proto name)
          result_type:
            title: >-
              Type of result for this record specification (must be RECORD or
              RECORD_LIST)
            type: string
            enum:
              - DEFINITION_TYPE_UNSPECIFIED
              - DEFINITION_TYPE_PROPOSED
              - DEFINITION_TYPE_RECORD
              - DEFINITION_TYPE_RECORD_LIST
            default: DEFINITION_TYPE_UNSPECIFIED
            description: >-
              - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED
              indicates an unknown/invalid value
               - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
               - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
               - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
              the same name
          responsible_parties:
            type: array
            items:
              type: string
              enum:
                - PARTY_TYPE_UNSPECIFIED
                - PARTY_TYPE_ORIGINATOR
                - PARTY_TYPE_SERVICER
                - PARTY_TYPE_INVESTOR
                - PARTY_TYPE_CUSTODIAN
                - PARTY_TYPE_OWNER
                - PARTY_TYPE_AFFILIATE
                - PARTY_TYPE_OMNIBUS
                - PARTY_TYPE_PROVENANCE
                - PARTY_TYPE_CONTROLLER
                - PARTY_TYPE_VALIDATOR
              default: PARTY_TYPE_UNSPECIFIED
              description: >-
                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                condition
                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
              title: PartyType are the different roles parties on a contract may use
            title: Type of party responsible for this record
        title: >-
          RecordSpecification defines the specification for a Record including
          allowed/required inputs/outputs
      record_spec_id_info:
        description: >-
          record_spec_id_info contains information about the id/address of the
          record specification.
        type: object
        properties:
          record_spec_id:
            type: string
            format: byte
            description: >-
              record_spec_id is the raw bytes of the record specification
              address.
          record_spec_id_prefix:
            type: string
            format: byte
            description: record_spec_id_prefix is the prefix portion of the record_spec_id.
          record_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              record_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the record_spec_id.
          record_spec_id_hashed_name:
            type: string
            format: byte
            description: >-
              record_spec_id_hashed_name is the hashed name portion of the
              record_spec_id.
          record_spec_addr:
            type: string
            description: >-
              record_spec_addr is the bech32 string version of the
              record_spec_id.
          contract_spec_id_info:
            description: >-
              contract_spec_id_info is information about the contract spec id
              referenced in the record_spec_id.
            type: object
            properties:
              contract_spec_id:
                type: string
                format: byte
                description: >-
                  contract_spec_id is the raw bytes of the contract
                  specification address.
              contract_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  contract_spec_id_prefix is the prefix portion of the
                  contract_spec_id.
              contract_spec_id_contract_spec_uuid:
                type: string
                format: byte
                description: >-
                  contract_spec_id_contract_spec_uuid is the contract_spec_uuid
                  portion of the contract_spec_id.
              contract_spec_addr:
                type: string
                description: >-
                  contract_spec_addr is the bech32 string version of the
                  contract_spec_id.
              contract_spec_uuid:
                type: string
                description: >-
                  contract_spec_uuid is the uuid hex string of the
                  contract_spec_id_contract_spec_uuid.
    description: >-
      RecordSpecificationWrapper contains a single record specification and some
      extra identifiers for it.
  provenance.metadata.v1.RecordSpecificationsAllRequest:
    type: object
    properties:
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      RecordSpecificationsAllRequest is the request type for the
      Query/RecordSpecificationsAll RPC method.
  provenance.metadata.v1.RecordSpecificationsAllResponse:
    type: object
    properties:
      record_specifications:
        type: array
        items:
          type: object
          properties:
            specification:
              description: specification is the on-chain record specification message.
              type: object
              properties:
                specification_id:
                  type: string
                  format: byte
                  title: unique identifier for this specification on chain
                name:
                  type: string
                  title: >-
                    Name of Record that will be created when this specification
                    is used
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        title: name for this input
                      type_name:
                        type: string
                        title: a type_name (typically a proto name or class_name)
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                    title: >-
                      InputSpecification defines a name, type_name, and source
                      reference (either on or off chain) to define an input

                      parameter
                  title: >-
                    A set of inputs that must be satisified to apply this
                    RecordSpecification and create a Record
                type_name:
                  type: string
                  title: >-
                    A type name for data associated with this record (typically
                    a class or proto name)
                result_type:
                  title: >-
                    Type of result for this record specification (must be RECORD
                    or RECORD_LIST)
                  type: string
                  enum:
                    - DEFINITION_TYPE_UNSPECIFIED
                    - DEFINITION_TYPE_PROPOSED
                    - DEFINITION_TYPE_RECORD
                    - DEFINITION_TYPE_RECORD_LIST
                  default: DEFINITION_TYPE_UNSPECIFIED
                  description: >-
                    - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED
                    indicates an unknown/invalid value
                     - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                     - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                     - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                    the same name
                responsible_parties:
                  type: array
                  items:
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    title: >-
                      PartyType are the different roles parties on a contract
                      may use
                  title: Type of party responsible for this record
              title: >-
                RecordSpecification defines the specification for a Record
                including allowed/required inputs/outputs
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordSpecificationWrapper contains a single record specification
            and some extra identifiers for it.
        description: record_specifications are the wrapped record specifications.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      RecordSpecificationsAllResponse is the response type for the
      Query/RecordSpecificationsAll RPC method.
  provenance.metadata.v1.RecordSpecificationsForContractSpecificationRequest:
    type: object
    properties:
      specification_id:
        type: string
        description: >-
          specification_id can either be a uuid, e.g.
          def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
          specification

          address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

          It can also be a record specification address, e.g.

          recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
    description: >-
      RecordSpecificationsForContractSpecificationRequest is the request type
      for the

      Query/RecordSpecificationsForContractSpecification RPC method.
  provenance.metadata.v1.RecordSpecificationsForContractSpecificationResponse:
    type: object
    properties:
      record_specifications:
        type: array
        items:
          type: object
          properties:
            specification:
              description: specification is the on-chain record specification message.
              type: object
              properties:
                specification_id:
                  type: string
                  format: byte
                  title: unique identifier for this specification on chain
                name:
                  type: string
                  title: >-
                    Name of Record that will be created when this specification
                    is used
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        title: name for this input
                      type_name:
                        type: string
                        title: a type_name (typically a proto name or class_name)
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                    title: >-
                      InputSpecification defines a name, type_name, and source
                      reference (either on or off chain) to define an input

                      parameter
                  title: >-
                    A set of inputs that must be satisified to apply this
                    RecordSpecification and create a Record
                type_name:
                  type: string
                  title: >-
                    A type name for data associated with this record (typically
                    a class or proto name)
                result_type:
                  title: >-
                    Type of result for this record specification (must be RECORD
                    or RECORD_LIST)
                  type: string
                  enum:
                    - DEFINITION_TYPE_UNSPECIFIED
                    - DEFINITION_TYPE_PROPOSED
                    - DEFINITION_TYPE_RECORD
                    - DEFINITION_TYPE_RECORD_LIST
                  default: DEFINITION_TYPE_UNSPECIFIED
                  description: >-
                    - DEFINITION_TYPE_UNSPECIFIED: DEFINITION_TYPE_UNSPECIFIED
                    indicates an unknown/invalid value
                     - DEFINITION_TYPE_PROPOSED: DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
                     - DEFINITION_TYPE_RECORD: DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
                     - DEFINITION_TYPE_RECORD_LIST: DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
                    the same name
                responsible_parties:
                  type: array
                  items:
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    title: >-
                      PartyType are the different roles parties on a contract
                      may use
                  title: Type of party responsible for this record
              title: >-
                RecordSpecification defines the specification for a Record
                including allowed/required inputs/outputs
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordSpecificationWrapper contains a single record specification
            and some extra identifiers for it.
        description: >-
          record_specifications is any number of wrapped record specifications
          associated with this contract_specification.
      contract_specification_uuid:
        type: string
        description: >-
          contract_specification_uuid is the uuid of this contract
          specification.
      contract_specification_addr:
        type: string
        description: >-
          contract_specification_addr is the contract specification address as a
          bech32 encoded string.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          specification_id:
            type: string
            description: >-
              specification_id can either be a uuid, e.g.
              def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract
              specification

              address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.

              It can also be a record specification address, e.g.

              recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
    description: >-
      RecordSpecificationsForContractSpecificationResponse is the response type
      for the

      Query/RecordSpecificationsForContractSpecification RPC method.
  provenance.metadata.v1.RecordWrapper:
    type: object
    properties:
      record:
        description: record is the on-chain record message.
        type: object
        properties:
          name:
            type: string
            title: >-
              name/identifier for this record.  Value must be unique within the
              scope.  Also known as a Fact name
          session_id:
            type: string
            format: byte
            title: >-
              id of the session context that was used to create this record (use
              with filtered kvprefix iterator)
          process:
            title: >-
              process contain information used to uniquely identify an execution
              on or off chain that generated this record
            type: object
            properties:
              address:
                type: string
                title: the address of a smart contract used for this process
              hash:
                type: string
                title: the hash of an off-chain process used
              name:
                type: string
                title: >-
                  a name associated with the process (type_name, classname or
                  smart contract common name)
              method:
                type: string
                title: >-
                  method is a name or reference to a specific operation (method)
                  within a class/contract that was invoked
          inputs:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  description: Name value included to link back to the definition spec.
                record_id:
                  type: string
                  format: byte
                  title: the address of a record on chain (For Established Records)
                hash:
                  type: string
                  title: >-
                    the hash of an off-chain piece of information (For Proposed
                    Records)
                type_name:
                  type: string
                  title: from proposed fact structure to unmarshal
                status:
                  title: >-
                    Indicates if this input was a recorded fact on chain or just
                    a given hashed input
                  type: string
                  enum:
                    - RECORD_INPUT_STATUS_UNSPECIFIED
                    - RECORD_INPUT_STATUS_PROPOSED
                    - RECORD_INPUT_STATUS_RECORD
                  default: RECORD_INPUT_STATUS_UNSPECIFIED
                  description: >-
                    - RECORD_INPUT_STATUS_UNSPECIFIED:
                    RECORD_INPUT_STATUS_UNSPECIFIED indicates an invalid/unknown
                    input type
                     - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                     - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
              title: Tracks the inputs used to establish this record
            title: inputs used with the process to achieve the output on this record
          outputs:
            type: array
            items:
              type: object
              properties:
                hash:
                  type: string
                  title: >-
                    Hash of the data output that was output/generated for this
                    record
                status:
                  title: >-
                    Status of the process execution associated with this output
                    indicating success,failure, or pending
                  type: string
                  enum:
                    - RESULT_STATUS_UNSPECIFIED
                    - RESULT_STATUS_PASS
                    - RESULT_STATUS_SKIP
                    - RESULT_STATUS_FAIL
                  default: RESULT_STATUS_UNSPECIFIED
                  description: >-
                    - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED
                    indicates an unset condition
                     - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                     - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                     - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
              title: >-
                RecordOutput encapsulates the output of a process recorded on
                chain
            title: >-
              output(s) is the results of executing the process on the given
              process indicated in this record
          specification_id:
            type: string
            format: byte
            description: >-
              specification_id is the id of the record specification that was
              used to create this record.
        title: >-
          A record (of fact) is attached to a session or each consideration
          output from a contract
      record_id_info:
        description: >-
          record_id_info contains information about the id/address of the
          record.
        type: object
        properties:
          record_id:
            type: string
            format: byte
            description: record_id is the raw bytes of the record address.
          record_id_prefix:
            type: string
            format: byte
            description: record_id_prefix is the prefix portion of the record_id.
          record_id_scope_uuid:
            type: string
            format: byte
            description: record_id_scope_uuid is the scope_uuid portion of the record_id.
          record_id_hashed_name:
            type: string
            format: byte
            description: record_id_hashed_name is the hashed name portion of the record_id.
          record_addr:
            type: string
            description: record_addr is the bech32 string version of the record_id.
          scope_id_info:
            description: >-
              scope_id_info is information about the scope id referenced in the
              record_id.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
      record_spec_id_info:
        description: >-
          record_spec_id_info contains information about the id/address of the
          record specification.
        type: object
        properties:
          record_spec_id:
            type: string
            format: byte
            description: >-
              record_spec_id is the raw bytes of the record specification
              address.
          record_spec_id_prefix:
            type: string
            format: byte
            description: record_spec_id_prefix is the prefix portion of the record_spec_id.
          record_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              record_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the record_spec_id.
          record_spec_id_hashed_name:
            type: string
            format: byte
            description: >-
              record_spec_id_hashed_name is the hashed name portion of the
              record_spec_id.
          record_spec_addr:
            type: string
            description: >-
              record_spec_addr is the bech32 string version of the
              record_spec_id.
          contract_spec_id_info:
            description: >-
              contract_spec_id_info is information about the contract spec id
              referenced in the record_spec_id.
            type: object
            properties:
              contract_spec_id:
                type: string
                format: byte
                description: >-
                  contract_spec_id is the raw bytes of the contract
                  specification address.
              contract_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  contract_spec_id_prefix is the prefix portion of the
                  contract_spec_id.
              contract_spec_id_contract_spec_uuid:
                type: string
                format: byte
                description: >-
                  contract_spec_id_contract_spec_uuid is the contract_spec_uuid
                  portion of the contract_spec_id.
              contract_spec_addr:
                type: string
                description: >-
                  contract_spec_addr is the bech32 string version of the
                  contract_spec_id.
              contract_spec_uuid:
                type: string
                description: >-
                  contract_spec_uuid is the uuid hex string of the
                  contract_spec_id_contract_spec_uuid.
    description: RecordWrapper contains a single record and some extra identifiers for it.
  provenance.metadata.v1.RecordsAllRequest:
    type: object
    properties:
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: RecordsAllRequest is the request type for the Query/RecordsAll RPC method.
  provenance.metadata.v1.RecordsAllResponse:
    type: object
    properties:
      records:
        type: array
        items:
          type: object
          properties:
            record:
              description: record is the on-chain record message.
              type: object
              properties:
                name:
                  type: string
                  title: >-
                    name/identifier for this record.  Value must be unique
                    within the scope.  Also known as a Fact name
                session_id:
                  type: string
                  format: byte
                  title: >-
                    id of the session context that was used to create this
                    record (use with filtered kvprefix iterator)
                process:
                  title: >-
                    process contain information used to uniquely identify an
                    execution on or off chain that generated this record
                  type: object
                  properties:
                    address:
                      type: string
                      title: the address of a smart contract used for this process
                    hash:
                      type: string
                      title: the hash of an off-chain process used
                    name:
                      type: string
                      title: >-
                        a name associated with the process (type_name, classname
                        or smart contract common name)
                    method:
                      type: string
                      title: >-
                        method is a name or reference to a specific operation
                        (method) within a class/contract that was invoked
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: >-
                          Name value included to link back to the definition
                          spec.
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                      type_name:
                        type: string
                        title: from proposed fact structure to unmarshal
                      status:
                        title: >-
                          Indicates if this input was a recorded fact on chain
                          or just a given hashed input
                        type: string
                        enum:
                          - RECORD_INPUT_STATUS_UNSPECIFIED
                          - RECORD_INPUT_STATUS_PROPOSED
                          - RECORD_INPUT_STATUS_RECORD
                        default: RECORD_INPUT_STATUS_UNSPECIFIED
                        description: >-
                          - RECORD_INPUT_STATUS_UNSPECIFIED:
                          RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                          invalid/unknown input type
                           - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                           - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                    title: Tracks the inputs used to establish this record
                  title: >-
                    inputs used with the process to achieve the output on this
                    record
                outputs:
                  type: array
                  items:
                    type: object
                    properties:
                      hash:
                        type: string
                        title: >-
                          Hash of the data output that was output/generated for
                          this record
                      status:
                        title: >-
                          Status of the process execution associated with this
                          output indicating success,failure, or pending
                        type: string
                        enum:
                          - RESULT_STATUS_UNSPECIFIED
                          - RESULT_STATUS_PASS
                          - RESULT_STATUS_SKIP
                          - RESULT_STATUS_FAIL
                        default: RESULT_STATUS_UNSPECIFIED
                        description: >-
                          - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED
                          indicates an unset condition
                           - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                           - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                           - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                    title: >-
                      RecordOutput encapsulates the output of a process recorded
                      on chain
                  title: >-
                    output(s) is the results of executing the process on the
                    given process indicated in this record
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    specification_id is the id of the record specification that
                    was used to create this record.
              title: >-
                A record (of fact) is attached to a session or each
                consideration output from a contract
            record_id_info:
              description: >-
                record_id_info contains information about the id/address of the
                record.
              type: object
              properties:
                record_id:
                  type: string
                  format: byte
                  description: record_id is the raw bytes of the record address.
                record_id_prefix:
                  type: string
                  format: byte
                  description: record_id_prefix is the prefix portion of the record_id.
                record_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_id_scope_uuid is the scope_uuid portion of the
                    record_id.
                record_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_id_hashed_name is the hashed name portion of the
                    record_id.
                record_addr:
                  type: string
                  description: record_addr is the bech32 string version of the record_id.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the record_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordWrapper contains a single record and some extra identifiers
            for it.
        description: records are the wrapped records.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      RecordsAllResponse is the response type for the Query/RecordsAll RPC
      method.
  provenance.metadata.v1.RecordsRequest:
    type: object
    properties:
      record_addr:
        type: string
        description: >-
          record_addr is a bech32 record address, e.g.
          record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
      scope_id:
        type: string
        description: >-
          scope_id can either be a uuid, e.g.
          91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

          scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
      session_id:
        type: string
        description: >-
          session_id can either be a uuid, e.g.
          5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address, e.g.

          session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
          This can only be a uuid if a scope_id is also

          provided.
      name:
        type: string
        title: name is the name of the record to look for
      include_scope:
        type: boolean
        format: boolean
        description: >-
          include_scope is a flag for whether or not the scope containing these
          records should be included.
      include_sessions:
        type: boolean
        format: boolean
        description: >-
          include_sessions is a flag for whether or not the sessions containing
          these records should be included.
    description: RecordsRequest is the request type for the Query/Records RPC method.
  provenance.metadata.v1.RecordsResponse:
    type: object
    properties:
      scope:
        description: scope is the wrapped scope that holds these records (if requested).
        type: object
        properties:
          scope:
            description: scope is the on-chain scope message.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                title: >-
                  Unique ID for this scope.  Implements sdk.Address interface
                  for use where addresses are required in Cosmos
              specification_id:
                type: string
                format: byte
                title: >-
                  the scope specification that contains the specifications for
                  data elements allowed within this scope
              owners:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      title: address of the account (on chain)
                    role:
                      type: string
                      enum:
                        - PARTY_TYPE_UNSPECIFIED
                        - PARTY_TYPE_ORIGINATOR
                        - PARTY_TYPE_SERVICER
                        - PARTY_TYPE_INVESTOR
                        - PARTY_TYPE_CUSTODIAN
                        - PARTY_TYPE_OWNER
                        - PARTY_TYPE_AFFILIATE
                        - PARTY_TYPE_OMNIBUS
                        - PARTY_TYPE_PROVENANCE
                        - PARTY_TYPE_CONTROLLER
                        - PARTY_TYPE_VALIDATOR
                      default: PARTY_TYPE_UNSPECIFIED
                      description: >-
                        - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                        error condition
                         - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                         - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                         - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                         - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                         - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                         - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                         - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                         - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                         - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                         - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                      title: >-
                        PartyType are the different roles parties on a contract
                        may use
                  title: >-
                    A Party is an address with/in a given role associated with a
                    contract
                description: >-
                  These parties represent top level owners of the records
                  within.  These parties must sign any requests that modify

                  the data within the scope.  These addresses are in union with
                  parties listed on the sessions.
              data_access:
                type: array
                items:
                  type: string
                description: >-
                  Addessses in this list are authorized to recieve off-chain
                  data associated with this scope.
              value_owner_address:
                type: string
                description: >-
                  An address that controls the value associated with this
                  scope.  Standard blockchain accounts and marker accounts

                  are supported for this value.  This attribute may only be
                  changed by the entity indicated once it is set.
          scope_id_info:
            description: >-
              scope_id_info contains information about the id/address of the
              scope.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
          scope_spec_id_info:
            description: >-
              scope_spec_id_info contains information about the id/address of
              the scope specification.
            type: object
            properties:
              scope_spec_id:
                type: string
                format: byte
                description: >-
                  scope_spec_id is the raw bytes of the scope specification
                  address.
              scope_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  scope_spec_id_prefix is the prefix portion of the
                  scope_spec_id.
              scope_spec_id_scope_spec_uuid:
                type: string
                format: byte
                description: >-
                  scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion
                  of the scope_spec_id.
              scope_spec_addr:
                type: string
                description: >-
                  scope_spec_addr is the bech32 string version of the
                  scope_spec_id.
              scope_spec_uuid:
                type: string
                description: >-
                  scope_spec_uuid is the uuid hex string of the
                  scope_spec_id_scope_spec_uuid.
      sessions:
        type: array
        items:
          type: object
          properties:
            session:
              description: session is the on-chain session message.
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    unique id of the contract specification that was used to
                    create this session.
                parties:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        title: address of the account (on chain)
                      role:
                        type: string
                        enum:
                          - PARTY_TYPE_UNSPECIFIED
                          - PARTY_TYPE_ORIGINATOR
                          - PARTY_TYPE_SERVICER
                          - PARTY_TYPE_INVESTOR
                          - PARTY_TYPE_CUSTODIAN
                          - PARTY_TYPE_OWNER
                          - PARTY_TYPE_AFFILIATE
                          - PARTY_TYPE_OMNIBUS
                          - PARTY_TYPE_PROVENANCE
                          - PARTY_TYPE_CONTROLLER
                          - PARTY_TYPE_VALIDATOR
                        default: PARTY_TYPE_UNSPECIFIED
                        description: >-
                          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                          error condition
                           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                        title: >-
                          PartyType are the different roles parties on a
                          contract may use
                    title: >-
                      A Party is an address with/in a given role associated with
                      a contract
                  title: parties is the set of identities that signed this contract
                name:
                  type: string
                  title: >-
                    name to associate with this session execution context,
                    typically classname
                context:
                  type: string
                  format: byte
                  description: >-
                    context is a field for storing client specific data
                    associated with a session.
                audit:
                  description: >-
                    Created by, updated by, timestamps, version number, and
                    related info.
                  type: object
                  properties:
                    created_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was created
                    created_by:
                      type: string
                      title: the address of the account that created this record
                    updated_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was last updated
                    updated_by:
                      type: string
                      title: the address of the account that modified this record
                    version:
                      type: integer
                      format: int64
                      title: >-
                        an optional version number that is incremented with each
                        update
                    message:
                      type: string
                      title: >-
                        an optional message associated with the creation/update
                        event
                  title: >-
                    AuditFields capture information about the last account to
                    make modifications and when they were made
              title: >-
                A Session is created for an execution context against a specific
                specification instance
            session_id_info:
              description: >-
                session_id_info contains information about the id/address of the
                session.
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                  description: session_id is the raw bytes of the session address.
                session_id_prefix:
                  type: string
                  format: byte
                  description: session_id_prefix is the prefix portion of the session_id.
                session_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_scope_uuid is the scope_uuid portion of the
                    session_id.
                session_id_session_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_session_uuid is the session_uuid portion of the
                    session_id.
                session_addr:
                  type: string
                  description: session_addr is the bech32 string version of the session_id.
                session_uuid:
                  type: string
                  description: >-
                    session_uuid is the uuid hex string of the
                    session_id_session_uuid.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the session_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            contract_spec_id_info:
              description: >-
                contract_spec_id_info contains information about the id/address
                of the contract specification.
              type: object
              properties:
                contract_spec_id:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id is the raw bytes of the contract
                    specification address.
                contract_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_prefix is the prefix portion of the
                    contract_spec_id.
                contract_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_contract_spec_uuid is the
                    contract_spec_uuid portion of the contract_spec_id.
                contract_spec_addr:
                  type: string
                  description: >-
                    contract_spec_addr is the bech32 string version of the
                    contract_spec_id.
                contract_spec_uuid:
                  type: string
                  description: >-
                    contract_spec_uuid is the uuid hex string of the
                    contract_spec_id_contract_spec_uuid.
          description: >-
            SessionWrapper contains a single session and some extra identifiers
            for it.
        description: >-
          sessions is any number of wrapped sessions that hold these records (if
          requested).
      records:
        type: array
        items:
          type: object
          properties:
            record:
              description: record is the on-chain record message.
              type: object
              properties:
                name:
                  type: string
                  title: >-
                    name/identifier for this record.  Value must be unique
                    within the scope.  Also known as a Fact name
                session_id:
                  type: string
                  format: byte
                  title: >-
                    id of the session context that was used to create this
                    record (use with filtered kvprefix iterator)
                process:
                  title: >-
                    process contain information used to uniquely identify an
                    execution on or off chain that generated this record
                  type: object
                  properties:
                    address:
                      type: string
                      title: the address of a smart contract used for this process
                    hash:
                      type: string
                      title: the hash of an off-chain process used
                    name:
                      type: string
                      title: >-
                        a name associated with the process (type_name, classname
                        or smart contract common name)
                    method:
                      type: string
                      title: >-
                        method is a name or reference to a specific operation
                        (method) within a class/contract that was invoked
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: >-
                          Name value included to link back to the definition
                          spec.
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                      type_name:
                        type: string
                        title: from proposed fact structure to unmarshal
                      status:
                        title: >-
                          Indicates if this input was a recorded fact on chain
                          or just a given hashed input
                        type: string
                        enum:
                          - RECORD_INPUT_STATUS_UNSPECIFIED
                          - RECORD_INPUT_STATUS_PROPOSED
                          - RECORD_INPUT_STATUS_RECORD
                        default: RECORD_INPUT_STATUS_UNSPECIFIED
                        description: >-
                          - RECORD_INPUT_STATUS_UNSPECIFIED:
                          RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                          invalid/unknown input type
                           - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                           - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                    title: Tracks the inputs used to establish this record
                  title: >-
                    inputs used with the process to achieve the output on this
                    record
                outputs:
                  type: array
                  items:
                    type: object
                    properties:
                      hash:
                        type: string
                        title: >-
                          Hash of the data output that was output/generated for
                          this record
                      status:
                        title: >-
                          Status of the process execution associated with this
                          output indicating success,failure, or pending
                        type: string
                        enum:
                          - RESULT_STATUS_UNSPECIFIED
                          - RESULT_STATUS_PASS
                          - RESULT_STATUS_SKIP
                          - RESULT_STATUS_FAIL
                        default: RESULT_STATUS_UNSPECIFIED
                        description: >-
                          - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED
                          indicates an unset condition
                           - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                           - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                           - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                    title: >-
                      RecordOutput encapsulates the output of a process recorded
                      on chain
                  title: >-
                    output(s) is the results of executing the process on the
                    given process indicated in this record
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    specification_id is the id of the record specification that
                    was used to create this record.
              title: >-
                A record (of fact) is attached to a session or each
                consideration output from a contract
            record_id_info:
              description: >-
                record_id_info contains information about the id/address of the
                record.
              type: object
              properties:
                record_id:
                  type: string
                  format: byte
                  description: record_id is the raw bytes of the record address.
                record_id_prefix:
                  type: string
                  format: byte
                  description: record_id_prefix is the prefix portion of the record_id.
                record_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_id_scope_uuid is the scope_uuid portion of the
                    record_id.
                record_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_id_hashed_name is the hashed name portion of the
                    record_id.
                record_addr:
                  type: string
                  description: record_addr is the bech32 string version of the record_id.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the record_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordWrapper contains a single record and some extra identifiers
            for it.
        description: records is any number of wrapped record results.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          record_addr:
            type: string
            description: >-
              record_addr is a bech32 record address, e.g.
              record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          scope_id:
            type: string
            description: >-
              scope_id can either be a uuid, e.g.
              91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address,
              e.g.

              scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          session_id:
            type: string
            description: >-
              session_id can either be a uuid, e.g.
              5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
              e.g.

              session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
              This can only be a uuid if a scope_id is also

              provided.
          name:
            type: string
            title: name is the name of the record to look for
          include_scope:
            type: boolean
            format: boolean
            description: >-
              include_scope is a flag for whether or not the scope containing
              these records should be included.
          include_sessions:
            type: boolean
            format: boolean
            description: >-
              include_sessions is a flag for whether or not the sessions
              containing these records should be included.
    description: RecordsResponse is the response type for the Query/Records RPC method.
  provenance.metadata.v1.ResultStatus:
    type: string
    enum:
      - RESULT_STATUS_UNSPECIFIED
      - RESULT_STATUS_PASS
      - RESULT_STATUS_SKIP
      - RESULT_STATUS_FAIL
    default: RESULT_STATUS_UNSPECIFIED
    description: >-
      - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED indicates an unset
      condition
       - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
       - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
       - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
    title: ResultStatus indicates the various states of execution of a record
  provenance.metadata.v1.Scope:
    type: object
    properties:
      scope_id:
        type: string
        format: byte
        title: >-
          Unique ID for this scope.  Implements sdk.Address interface for use
          where addresses are required in Cosmos
      specification_id:
        type: string
        format: byte
        title: >-
          the scope specification that contains the specifications for data
          elements allowed within this scope
      owners:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              title: address of the account (on chain)
            role:
              type: string
              enum:
                - PARTY_TYPE_UNSPECIFIED
                - PARTY_TYPE_ORIGINATOR
                - PARTY_TYPE_SERVICER
                - PARTY_TYPE_INVESTOR
                - PARTY_TYPE_CUSTODIAN
                - PARTY_TYPE_OWNER
                - PARTY_TYPE_AFFILIATE
                - PARTY_TYPE_OMNIBUS
                - PARTY_TYPE_PROVENANCE
                - PARTY_TYPE_CONTROLLER
                - PARTY_TYPE_VALIDATOR
              default: PARTY_TYPE_UNSPECIFIED
              description: >-
                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                condition
                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
              title: PartyType are the different roles parties on a contract may use
          title: >-
            A Party is an address with/in a given role associated with a
            contract
        description: >-
          These parties represent top level owners of the records within.  These
          parties must sign any requests that modify

          the data within the scope.  These addresses are in union with parties
          listed on the sessions.
      data_access:
        type: array
        items:
          type: string
        description: >-
          Addessses in this list are authorized to recieve off-chain data
          associated with this scope.
      value_owner_address:
        type: string
        description: >-
          An address that controls the value associated with this scope. 
          Standard blockchain accounts and marker accounts

          are supported for this value.  This attribute may only be changed by
          the entity indicated once it is set.
    description: >-
      Scope defines a root reference for a collection of records owned by one or
      more parties.
  provenance.metadata.v1.ScopeIdInfo:
    type: object
    properties:
      scope_id:
        type: string
        format: byte
        description: scope_id is the raw bytes of the scope address.
      scope_id_prefix:
        type: string
        format: byte
        description: scope_id_prefix is the prefix portion of the scope_id.
      scope_id_scope_uuid:
        type: string
        format: byte
        description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
      scope_addr:
        type: string
        description: scope_addr is the bech32 string version of the scope_id.
      scope_uuid:
        type: string
        description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
    description: ScopeIdInfo contains various info regarding a scope id.
  provenance.metadata.v1.ScopeRequest:
    type: object
    properties:
      scope_id:
        type: string
        description: >-
          scope_id can either be a uuid, e.g.
          91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

          scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
      session_addr:
        type: string
        description: |-
          session_addr is a bech32 session address, e.g.
          session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
      record_addr:
        type: string
        description: >-
          record_addr is a bech32 record address, e.g.
          record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
      include_sessions:
        type: boolean
        format: boolean
        description: >-
          include_sessions is a flag for whether or not the sessions in the
          scope should be included.
      include_records:
        type: boolean
        format: boolean
        description: >-
          include_records is a flag for whether or not the records in the scope
          should be included.
    description: ScopeRequest is the request type for the Query/Scope RPC method.
  provenance.metadata.v1.ScopeResponse:
    type: object
    properties:
      scope:
        description: scope is the wrapped scope result.
        type: object
        properties:
          scope:
            description: scope is the on-chain scope message.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                title: >-
                  Unique ID for this scope.  Implements sdk.Address interface
                  for use where addresses are required in Cosmos
              specification_id:
                type: string
                format: byte
                title: >-
                  the scope specification that contains the specifications for
                  data elements allowed within this scope
              owners:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      title: address of the account (on chain)
                    role:
                      type: string
                      enum:
                        - PARTY_TYPE_UNSPECIFIED
                        - PARTY_TYPE_ORIGINATOR
                        - PARTY_TYPE_SERVICER
                        - PARTY_TYPE_INVESTOR
                        - PARTY_TYPE_CUSTODIAN
                        - PARTY_TYPE_OWNER
                        - PARTY_TYPE_AFFILIATE
                        - PARTY_TYPE_OMNIBUS
                        - PARTY_TYPE_PROVENANCE
                        - PARTY_TYPE_CONTROLLER
                        - PARTY_TYPE_VALIDATOR
                      default: PARTY_TYPE_UNSPECIFIED
                      description: >-
                        - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                        error condition
                         - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                         - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                         - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                         - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                         - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                         - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                         - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                         - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                         - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                         - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                      title: >-
                        PartyType are the different roles parties on a contract
                        may use
                  title: >-
                    A Party is an address with/in a given role associated with a
                    contract
                description: >-
                  These parties represent top level owners of the records
                  within.  These parties must sign any requests that modify

                  the data within the scope.  These addresses are in union with
                  parties listed on the sessions.
              data_access:
                type: array
                items:
                  type: string
                description: >-
                  Addessses in this list are authorized to recieve off-chain
                  data associated with this scope.
              value_owner_address:
                type: string
                description: >-
                  An address that controls the value associated with this
                  scope.  Standard blockchain accounts and marker accounts

                  are supported for this value.  This attribute may only be
                  changed by the entity indicated once it is set.
          scope_id_info:
            description: >-
              scope_id_info contains information about the id/address of the
              scope.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
          scope_spec_id_info:
            description: >-
              scope_spec_id_info contains information about the id/address of
              the scope specification.
            type: object
            properties:
              scope_spec_id:
                type: string
                format: byte
                description: >-
                  scope_spec_id is the raw bytes of the scope specification
                  address.
              scope_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  scope_spec_id_prefix is the prefix portion of the
                  scope_spec_id.
              scope_spec_id_scope_spec_uuid:
                type: string
                format: byte
                description: >-
                  scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion
                  of the scope_spec_id.
              scope_spec_addr:
                type: string
                description: >-
                  scope_spec_addr is the bech32 string version of the
                  scope_spec_id.
              scope_spec_uuid:
                type: string
                description: >-
                  scope_spec_uuid is the uuid hex string of the
                  scope_spec_id_scope_spec_uuid.
      sessions:
        type: array
        items:
          type: object
          properties:
            session:
              description: session is the on-chain session message.
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    unique id of the contract specification that was used to
                    create this session.
                parties:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        title: address of the account (on chain)
                      role:
                        type: string
                        enum:
                          - PARTY_TYPE_UNSPECIFIED
                          - PARTY_TYPE_ORIGINATOR
                          - PARTY_TYPE_SERVICER
                          - PARTY_TYPE_INVESTOR
                          - PARTY_TYPE_CUSTODIAN
                          - PARTY_TYPE_OWNER
                          - PARTY_TYPE_AFFILIATE
                          - PARTY_TYPE_OMNIBUS
                          - PARTY_TYPE_PROVENANCE
                          - PARTY_TYPE_CONTROLLER
                          - PARTY_TYPE_VALIDATOR
                        default: PARTY_TYPE_UNSPECIFIED
                        description: >-
                          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                          error condition
                           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                        title: >-
                          PartyType are the different roles parties on a
                          contract may use
                    title: >-
                      A Party is an address with/in a given role associated with
                      a contract
                  title: parties is the set of identities that signed this contract
                name:
                  type: string
                  title: >-
                    name to associate with this session execution context,
                    typically classname
                context:
                  type: string
                  format: byte
                  description: >-
                    context is a field for storing client specific data
                    associated with a session.
                audit:
                  description: >-
                    Created by, updated by, timestamps, version number, and
                    related info.
                  type: object
                  properties:
                    created_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was created
                    created_by:
                      type: string
                      title: the address of the account that created this record
                    updated_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was last updated
                    updated_by:
                      type: string
                      title: the address of the account that modified this record
                    version:
                      type: integer
                      format: int64
                      title: >-
                        an optional version number that is incremented with each
                        update
                    message:
                      type: string
                      title: >-
                        an optional message associated with the creation/update
                        event
                  title: >-
                    AuditFields capture information about the last account to
                    make modifications and when they were made
              title: >-
                A Session is created for an execution context against a specific
                specification instance
            session_id_info:
              description: >-
                session_id_info contains information about the id/address of the
                session.
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                  description: session_id is the raw bytes of the session address.
                session_id_prefix:
                  type: string
                  format: byte
                  description: session_id_prefix is the prefix portion of the session_id.
                session_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_scope_uuid is the scope_uuid portion of the
                    session_id.
                session_id_session_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_session_uuid is the session_uuid portion of the
                    session_id.
                session_addr:
                  type: string
                  description: session_addr is the bech32 string version of the session_id.
                session_uuid:
                  type: string
                  description: >-
                    session_uuid is the uuid hex string of the
                    session_id_session_uuid.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the session_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            contract_spec_id_info:
              description: >-
                contract_spec_id_info contains information about the id/address
                of the contract specification.
              type: object
              properties:
                contract_spec_id:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id is the raw bytes of the contract
                    specification address.
                contract_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_prefix is the prefix portion of the
                    contract_spec_id.
                contract_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_contract_spec_uuid is the
                    contract_spec_uuid portion of the contract_spec_id.
                contract_spec_addr:
                  type: string
                  description: >-
                    contract_spec_addr is the bech32 string version of the
                    contract_spec_id.
                contract_spec_uuid:
                  type: string
                  description: >-
                    contract_spec_uuid is the uuid hex string of the
                    contract_spec_id_contract_spec_uuid.
          description: >-
            SessionWrapper contains a single session and some extra identifiers
            for it.
        description: >-
          sessions is any number of wrapped sessions in this scope (if
          requested).
      records:
        type: array
        items:
          type: object
          properties:
            record:
              description: record is the on-chain record message.
              type: object
              properties:
                name:
                  type: string
                  title: >-
                    name/identifier for this record.  Value must be unique
                    within the scope.  Also known as a Fact name
                session_id:
                  type: string
                  format: byte
                  title: >-
                    id of the session context that was used to create this
                    record (use with filtered kvprefix iterator)
                process:
                  title: >-
                    process contain information used to uniquely identify an
                    execution on or off chain that generated this record
                  type: object
                  properties:
                    address:
                      type: string
                      title: the address of a smart contract used for this process
                    hash:
                      type: string
                      title: the hash of an off-chain process used
                    name:
                      type: string
                      title: >-
                        a name associated with the process (type_name, classname
                        or smart contract common name)
                    method:
                      type: string
                      title: >-
                        method is a name or reference to a specific operation
                        (method) within a class/contract that was invoked
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: >-
                          Name value included to link back to the definition
                          spec.
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                      type_name:
                        type: string
                        title: from proposed fact structure to unmarshal
                      status:
                        title: >-
                          Indicates if this input was a recorded fact on chain
                          or just a given hashed input
                        type: string
                        enum:
                          - RECORD_INPUT_STATUS_UNSPECIFIED
                          - RECORD_INPUT_STATUS_PROPOSED
                          - RECORD_INPUT_STATUS_RECORD
                        default: RECORD_INPUT_STATUS_UNSPECIFIED
                        description: >-
                          - RECORD_INPUT_STATUS_UNSPECIFIED:
                          RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                          invalid/unknown input type
                           - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                           - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                    title: Tracks the inputs used to establish this record
                  title: >-
                    inputs used with the process to achieve the output on this
                    record
                outputs:
                  type: array
                  items:
                    type: object
                    properties:
                      hash:
                        type: string
                        title: >-
                          Hash of the data output that was output/generated for
                          this record
                      status:
                        title: >-
                          Status of the process execution associated with this
                          output indicating success,failure, or pending
                        type: string
                        enum:
                          - RESULT_STATUS_UNSPECIFIED
                          - RESULT_STATUS_PASS
                          - RESULT_STATUS_SKIP
                          - RESULT_STATUS_FAIL
                        default: RESULT_STATUS_UNSPECIFIED
                        description: >-
                          - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED
                          indicates an unset condition
                           - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                           - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                           - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                    title: >-
                      RecordOutput encapsulates the output of a process recorded
                      on chain
                  title: >-
                    output(s) is the results of executing the process on the
                    given process indicated in this record
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    specification_id is the id of the record specification that
                    was used to create this record.
              title: >-
                A record (of fact) is attached to a session or each
                consideration output from a contract
            record_id_info:
              description: >-
                record_id_info contains information about the id/address of the
                record.
              type: object
              properties:
                record_id:
                  type: string
                  format: byte
                  description: record_id is the raw bytes of the record address.
                record_id_prefix:
                  type: string
                  format: byte
                  description: record_id_prefix is the prefix portion of the record_id.
                record_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_id_scope_uuid is the scope_uuid portion of the
                    record_id.
                record_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_id_hashed_name is the hashed name portion of the
                    record_id.
                record_addr:
                  type: string
                  description: record_addr is the bech32 string version of the record_id.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the record_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordWrapper contains a single record and some extra identifiers
            for it.
        description: records is any number of wrapped records in this scope (if requested).
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          scope_id:
            type: string
            description: >-
              scope_id can either be a uuid, e.g.
              91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address,
              e.g.

              scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          session_addr:
            type: string
            description: >-
              session_addr is a bech32 session address, e.g.

              session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
          record_addr:
            type: string
            description: >-
              record_addr is a bech32 record address, e.g.
              record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          include_sessions:
            type: boolean
            format: boolean
            description: >-
              include_sessions is a flag for whether or not the sessions in the
              scope should be included.
          include_records:
            type: boolean
            format: boolean
            description: >-
              include_records is a flag for whether or not the records in the
              scope should be included.
    description: ScopeResponse is the response type for the Query/Scope RPC method.
  provenance.metadata.v1.ScopeSpecIdInfo:
    type: object
    properties:
      scope_spec_id:
        type: string
        format: byte
        description: scope_spec_id is the raw bytes of the scope specification address.
      scope_spec_id_prefix:
        type: string
        format: byte
        description: scope_spec_id_prefix is the prefix portion of the scope_spec_id.
      scope_spec_id_scope_spec_uuid:
        type: string
        format: byte
        description: >-
          scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion of the
          scope_spec_id.
      scope_spec_addr:
        type: string
        description: scope_spec_addr is the bech32 string version of the scope_spec_id.
      scope_spec_uuid:
        type: string
        description: >-
          scope_spec_uuid is the uuid hex string of the
          scope_spec_id_scope_spec_uuid.
    description: ScopeSpecIdInfo contains various info regarding a scope specification id.
  provenance.metadata.v1.ScopeSpecification:
    type: object
    properties:
      specification_id:
        type: string
        format: byte
        title: unique identifier for this specification on chain
      description:
        description: General information about this scope specification.
        type: object
        properties:
          name:
            type: string
            description: A Name for this thing.
          description:
            type: string
            description: A description of this thing.
          website_url:
            type: string
            description: URL to find even more info.
          icon_url:
            type: string
            description: URL of an icon.
      owner_addresses:
        type: array
        items:
          type: string
        description: Addresses of the owners of this scope specification.
      parties_involved:
        type: array
        items:
          type: string
          enum:
            - PARTY_TYPE_UNSPECIFIED
            - PARTY_TYPE_ORIGINATOR
            - PARTY_TYPE_SERVICER
            - PARTY_TYPE_INVESTOR
            - PARTY_TYPE_CUSTODIAN
            - PARTY_TYPE_OWNER
            - PARTY_TYPE_AFFILIATE
            - PARTY_TYPE_OMNIBUS
            - PARTY_TYPE_PROVENANCE
            - PARTY_TYPE_CONTROLLER
            - PARTY_TYPE_VALIDATOR
          default: PARTY_TYPE_UNSPECIFIED
          description: >-
            - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
            condition
             - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
             - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
             - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
             - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
             - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
             - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
             - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
             - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
             - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
             - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
          title: PartyType are the different roles parties on a contract may use
        title: >-
          A list of parties that must be present on a scope (and their
          associated roles)
      contract_spec_ids:
        type: array
        items:
          type: string
          format: byte
        description: >-
          A list of contract specification ids allowed for a scope based on this
          specification.
    title: >-
      ScopeSpecification defines the required parties, resources, conditions,
      and consideration outputs for a contract
  provenance.metadata.v1.ScopeSpecificationRequest:
    type: object
    properties:
      specification_id:
        type: string
        description: >-
          specification_id can either be a uuid, e.g.
          dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope specification

          address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
    description: >-
      ScopeSpecificationRequest is the request type for the
      Query/ScopeSpecification RPC method.
  provenance.metadata.v1.ScopeSpecificationResponse:
    type: object
    properties:
      scope_specification:
        description: scope_specification is the wrapped scope specification.
        type: object
        properties:
          specification:
            description: specification is the on-chain scope specification message.
            type: object
            properties:
              specification_id:
                type: string
                format: byte
                title: unique identifier for this specification on chain
              description:
                description: General information about this scope specification.
                type: object
                properties:
                  name:
                    type: string
                    description: A Name for this thing.
                  description:
                    type: string
                    description: A description of this thing.
                  website_url:
                    type: string
                    description: URL to find even more info.
                  icon_url:
                    type: string
                    description: URL of an icon.
              owner_addresses:
                type: array
                items:
                  type: string
                description: Addresses of the owners of this scope specification.
              parties_involved:
                type: array
                items:
                  type: string
                  enum:
                    - PARTY_TYPE_UNSPECIFIED
                    - PARTY_TYPE_ORIGINATOR
                    - PARTY_TYPE_SERVICER
                    - PARTY_TYPE_INVESTOR
                    - PARTY_TYPE_CUSTODIAN
                    - PARTY_TYPE_OWNER
                    - PARTY_TYPE_AFFILIATE
                    - PARTY_TYPE_OMNIBUS
                    - PARTY_TYPE_PROVENANCE
                    - PARTY_TYPE_CONTROLLER
                    - PARTY_TYPE_VALIDATOR
                  default: PARTY_TYPE_UNSPECIFIED
                  description: >-
                    - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                    condition
                     - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                     - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                     - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                     - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                     - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                     - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                     - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                     - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                     - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                     - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                  title: >-
                    PartyType are the different roles parties on a contract may
                    use
                title: >-
                  A list of parties that must be present on a scope (and their
                  associated roles)
              contract_spec_ids:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  A list of contract specification ids allowed for a scope based
                  on this specification.
            title: >-
              ScopeSpecification defines the required parties, resources,
              conditions, and consideration outputs for a contract
          scope_spec_id_info:
            description: >-
              scope_spec_id_info contains information about the id/address of
              the scope specification.
            type: object
            properties:
              scope_spec_id:
                type: string
                format: byte
                description: >-
                  scope_spec_id is the raw bytes of the scope specification
                  address.
              scope_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  scope_spec_id_prefix is the prefix portion of the
                  scope_spec_id.
              scope_spec_id_scope_spec_uuid:
                type: string
                format: byte
                description: >-
                  scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion
                  of the scope_spec_id.
              scope_spec_addr:
                type: string
                description: >-
                  scope_spec_addr is the bech32 string version of the
                  scope_spec_id.
              scope_spec_uuid:
                type: string
                description: >-
                  scope_spec_uuid is the uuid hex string of the
                  scope_spec_id_scope_spec_uuid.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          specification_id:
            type: string
            description: >-
              specification_id can either be a uuid, e.g.
              dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope
              specification

              address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
    description: >-
      ScopeSpecificationResponse is the response type for the
      Query/ScopeSpecification RPC method.
  provenance.metadata.v1.ScopeSpecificationWrapper:
    type: object
    properties:
      specification:
        description: specification is the on-chain scope specification message.
        type: object
        properties:
          specification_id:
            type: string
            format: byte
            title: unique identifier for this specification on chain
          description:
            description: General information about this scope specification.
            type: object
            properties:
              name:
                type: string
                description: A Name for this thing.
              description:
                type: string
                description: A description of this thing.
              website_url:
                type: string
                description: URL to find even more info.
              icon_url:
                type: string
                description: URL of an icon.
          owner_addresses:
            type: array
            items:
              type: string
            description: Addresses of the owners of this scope specification.
          parties_involved:
            type: array
            items:
              type: string
              enum:
                - PARTY_TYPE_UNSPECIFIED
                - PARTY_TYPE_ORIGINATOR
                - PARTY_TYPE_SERVICER
                - PARTY_TYPE_INVESTOR
                - PARTY_TYPE_CUSTODIAN
                - PARTY_TYPE_OWNER
                - PARTY_TYPE_AFFILIATE
                - PARTY_TYPE_OMNIBUS
                - PARTY_TYPE_PROVENANCE
                - PARTY_TYPE_CONTROLLER
                - PARTY_TYPE_VALIDATOR
              default: PARTY_TYPE_UNSPECIFIED
              description: >-
                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                condition
                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
              title: PartyType are the different roles parties on a contract may use
            title: >-
              A list of parties that must be present on a scope (and their
              associated roles)
          contract_spec_ids:
            type: array
            items:
              type: string
              format: byte
            description: >-
              A list of contract specification ids allowed for a scope based on
              this specification.
        title: >-
          ScopeSpecification defines the required parties, resources,
          conditions, and consideration outputs for a contract
      scope_spec_id_info:
        description: >-
          scope_spec_id_info contains information about the id/address of the
          scope specification.
        type: object
        properties:
          scope_spec_id:
            type: string
            format: byte
            description: scope_spec_id is the raw bytes of the scope specification address.
          scope_spec_id_prefix:
            type: string
            format: byte
            description: scope_spec_id_prefix is the prefix portion of the scope_spec_id.
          scope_spec_id_scope_spec_uuid:
            type: string
            format: byte
            description: >-
              scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion of
              the scope_spec_id.
          scope_spec_addr:
            type: string
            description: scope_spec_addr is the bech32 string version of the scope_spec_id.
          scope_spec_uuid:
            type: string
            description: >-
              scope_spec_uuid is the uuid hex string of the
              scope_spec_id_scope_spec_uuid.
    description: >-
      ScopeSpecificationWrapper contains a single scope specification and some
      extra identifiers for it.
  provenance.metadata.v1.ScopeSpecificationsAllRequest:
    type: object
    properties:
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      ScopeSpecificationsAllRequest is the request type for the
      Query/ScopeSpecificationsAll RPC method.
  provenance.metadata.v1.ScopeSpecificationsAllResponse:
    type: object
    properties:
      scope_specifications:
        type: array
        items:
          type: object
          properties:
            specification:
              description: specification is the on-chain scope specification message.
              type: object
              properties:
                specification_id:
                  type: string
                  format: byte
                  title: unique identifier for this specification on chain
                description:
                  description: General information about this scope specification.
                  type: object
                  properties:
                    name:
                      type: string
                      description: A Name for this thing.
                    description:
                      type: string
                      description: A description of this thing.
                    website_url:
                      type: string
                      description: URL to find even more info.
                    icon_url:
                      type: string
                      description: URL of an icon.
                owner_addresses:
                  type: array
                  items:
                    type: string
                  description: Addresses of the owners of this scope specification.
                parties_involved:
                  type: array
                  items:
                    type: string
                    enum:
                      - PARTY_TYPE_UNSPECIFIED
                      - PARTY_TYPE_ORIGINATOR
                      - PARTY_TYPE_SERVICER
                      - PARTY_TYPE_INVESTOR
                      - PARTY_TYPE_CUSTODIAN
                      - PARTY_TYPE_OWNER
                      - PARTY_TYPE_AFFILIATE
                      - PARTY_TYPE_OMNIBUS
                      - PARTY_TYPE_PROVENANCE
                      - PARTY_TYPE_CONTROLLER
                      - PARTY_TYPE_VALIDATOR
                    default: PARTY_TYPE_UNSPECIFIED
                    description: >-
                      - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                      error condition
                       - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                       - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                       - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                       - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                       - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                       - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                       - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                       - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                       - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                       - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                    title: >-
                      PartyType are the different roles parties on a contract
                      may use
                  title: >-
                    A list of parties that must be present on a scope (and their
                    associated roles)
                contract_spec_ids:
                  type: array
                  items:
                    type: string
                    format: byte
                  description: >-
                    A list of contract specification ids allowed for a scope
                    based on this specification.
              title: >-
                ScopeSpecification defines the required parties, resources,
                conditions, and consideration outputs for a contract
            scope_spec_id_info:
              description: >-
                scope_spec_id_info contains information about the id/address of
                the scope specification.
              type: object
              properties:
                scope_spec_id:
                  type: string
                  format: byte
                  description: >-
                    scope_spec_id is the raw bytes of the scope specification
                    address.
                scope_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    scope_spec_id_prefix is the prefix portion of the
                    scope_spec_id.
                scope_spec_id_scope_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion
                    of the scope_spec_id.
                scope_spec_addr:
                  type: string
                  description: >-
                    scope_spec_addr is the bech32 string version of the
                    scope_spec_id.
                scope_spec_uuid:
                  type: string
                  description: >-
                    scope_spec_uuid is the uuid hex string of the
                    scope_spec_id_scope_spec_uuid.
          description: >-
            ScopeSpecificationWrapper contains a single scope specification and
            some extra identifiers for it.
        description: scope_specifications are the wrapped scope specifications.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      ScopeSpecificationsAllResponse is the response type for the
      Query/ScopeSpecificationsAll RPC method.
  provenance.metadata.v1.ScopeWrapper:
    type: object
    properties:
      scope:
        description: scope is the on-chain scope message.
        type: object
        properties:
          scope_id:
            type: string
            format: byte
            title: >-
              Unique ID for this scope.  Implements sdk.Address interface for
              use where addresses are required in Cosmos
          specification_id:
            type: string
            format: byte
            title: >-
              the scope specification that contains the specifications for data
              elements allowed within this scope
          owners:
            type: array
            items:
              type: object
              properties:
                address:
                  type: string
                  title: address of the account (on chain)
                role:
                  type: string
                  enum:
                    - PARTY_TYPE_UNSPECIFIED
                    - PARTY_TYPE_ORIGINATOR
                    - PARTY_TYPE_SERVICER
                    - PARTY_TYPE_INVESTOR
                    - PARTY_TYPE_CUSTODIAN
                    - PARTY_TYPE_OWNER
                    - PARTY_TYPE_AFFILIATE
                    - PARTY_TYPE_OMNIBUS
                    - PARTY_TYPE_PROVENANCE
                    - PARTY_TYPE_CONTROLLER
                    - PARTY_TYPE_VALIDATOR
                  default: PARTY_TYPE_UNSPECIFIED
                  description: >-
                    - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                    condition
                     - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                     - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                     - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                     - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                     - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                     - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                     - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                     - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                     - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                     - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                  title: >-
                    PartyType are the different roles parties on a contract may
                    use
              title: >-
                A Party is an address with/in a given role associated with a
                contract
            description: >-
              These parties represent top level owners of the records within. 
              These parties must sign any requests that modify

              the data within the scope.  These addresses are in union with
              parties listed on the sessions.
          data_access:
            type: array
            items:
              type: string
            description: >-
              Addessses in this list are authorized to recieve off-chain data
              associated with this scope.
          value_owner_address:
            type: string
            description: >-
              An address that controls the value associated with this scope. 
              Standard blockchain accounts and marker accounts

              are supported for this value.  This attribute may only be changed
              by the entity indicated once it is set.
      scope_id_info:
        description: scope_id_info contains information about the id/address of the scope.
        type: object
        properties:
          scope_id:
            type: string
            format: byte
            description: scope_id is the raw bytes of the scope address.
          scope_id_prefix:
            type: string
            format: byte
            description: scope_id_prefix is the prefix portion of the scope_id.
          scope_id_scope_uuid:
            type: string
            format: byte
            description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
          scope_addr:
            type: string
            description: scope_addr is the bech32 string version of the scope_id.
          scope_uuid:
            type: string
            description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
      scope_spec_id_info:
        description: >-
          scope_spec_id_info contains information about the id/address of the
          scope specification.
        type: object
        properties:
          scope_spec_id:
            type: string
            format: byte
            description: scope_spec_id is the raw bytes of the scope specification address.
          scope_spec_id_prefix:
            type: string
            format: byte
            description: scope_spec_id_prefix is the prefix portion of the scope_spec_id.
          scope_spec_id_scope_spec_uuid:
            type: string
            format: byte
            description: >-
              scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion of
              the scope_spec_id.
          scope_spec_addr:
            type: string
            description: scope_spec_addr is the bech32 string version of the scope_spec_id.
          scope_spec_uuid:
            type: string
            description: >-
              scope_spec_uuid is the uuid hex string of the
              scope_spec_id_scope_spec_uuid.
    description: SessionWrapper contains a single scope and its uuid.
  provenance.metadata.v1.ScopesAllRequest:
    type: object
    properties:
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: ScopesAllRequest is the request type for the Query/ScopesAll RPC method.
  provenance.metadata.v1.ScopesAllResponse:
    type: object
    properties:
      scopes:
        type: array
        items:
          type: object
          properties:
            scope:
              description: scope is the on-chain scope message.
              type: object
              properties:
                scope_id:
                  type: string
                  format: byte
                  title: >-
                    Unique ID for this scope.  Implements sdk.Address interface
                    for use where addresses are required in Cosmos
                specification_id:
                  type: string
                  format: byte
                  title: >-
                    the scope specification that contains the specifications for
                    data elements allowed within this scope
                owners:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        title: address of the account (on chain)
                      role:
                        type: string
                        enum:
                          - PARTY_TYPE_UNSPECIFIED
                          - PARTY_TYPE_ORIGINATOR
                          - PARTY_TYPE_SERVICER
                          - PARTY_TYPE_INVESTOR
                          - PARTY_TYPE_CUSTODIAN
                          - PARTY_TYPE_OWNER
                          - PARTY_TYPE_AFFILIATE
                          - PARTY_TYPE_OMNIBUS
                          - PARTY_TYPE_PROVENANCE
                          - PARTY_TYPE_CONTROLLER
                          - PARTY_TYPE_VALIDATOR
                        default: PARTY_TYPE_UNSPECIFIED
                        description: >-
                          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                          error condition
                           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                        title: >-
                          PartyType are the different roles parties on a
                          contract may use
                    title: >-
                      A Party is an address with/in a given role associated with
                      a contract
                  description: >-
                    These parties represent top level owners of the records
                    within.  These parties must sign any requests that modify

                    the data within the scope.  These addresses are in union
                    with parties listed on the sessions.
                data_access:
                  type: array
                  items:
                    type: string
                  description: >-
                    Addessses in this list are authorized to recieve off-chain
                    data associated with this scope.
                value_owner_address:
                  type: string
                  description: >-
                    An address that controls the value associated with this
                    scope.  Standard blockchain accounts and marker accounts

                    are supported for this value.  This attribute may only be
                    changed by the entity indicated once it is set.
            scope_id_info:
              description: >-
                scope_id_info contains information about the id/address of the
                scope.
              type: object
              properties:
                scope_id:
                  type: string
                  format: byte
                  description: scope_id is the raw bytes of the scope address.
                scope_id_prefix:
                  type: string
                  format: byte
                  description: scope_id_prefix is the prefix portion of the scope_id.
                scope_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    scope_id_scope_uuid is the scope_uuid portion of the
                    scope_id.
                scope_addr:
                  type: string
                  description: scope_addr is the bech32 string version of the scope_id.
                scope_uuid:
                  type: string
                  description: >-
                    scope_uuid is the uuid hex string of the
                    scope_id_scope_uuid.
            scope_spec_id_info:
              description: >-
                scope_spec_id_info contains information about the id/address of
                the scope specification.
              type: object
              properties:
                scope_spec_id:
                  type: string
                  format: byte
                  description: >-
                    scope_spec_id is the raw bytes of the scope specification
                    address.
                scope_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    scope_spec_id_prefix is the prefix portion of the
                    scope_spec_id.
                scope_spec_id_scope_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion
                    of the scope_spec_id.
                scope_spec_addr:
                  type: string
                  description: >-
                    scope_spec_addr is the bech32 string version of the
                    scope_spec_id.
                scope_spec_uuid:
                  type: string
                  description: >-
                    scope_spec_uuid is the uuid hex string of the
                    scope_spec_id_scope_spec_uuid.
          description: SessionWrapper contains a single scope and its uuid.
        description: scopes are the wrapped scopes.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: ScopesAllResponse is the response type for the Query/ScopesAll RPC method.
  provenance.metadata.v1.Session:
    type: object
    properties:
      session_id:
        type: string
        format: byte
      specification_id:
        type: string
        format: byte
        description: >-
          unique id of the contract specification that was used to create this
          session.
      parties:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              title: address of the account (on chain)
            role:
              type: string
              enum:
                - PARTY_TYPE_UNSPECIFIED
                - PARTY_TYPE_ORIGINATOR
                - PARTY_TYPE_SERVICER
                - PARTY_TYPE_INVESTOR
                - PARTY_TYPE_CUSTODIAN
                - PARTY_TYPE_OWNER
                - PARTY_TYPE_AFFILIATE
                - PARTY_TYPE_OMNIBUS
                - PARTY_TYPE_PROVENANCE
                - PARTY_TYPE_CONTROLLER
                - PARTY_TYPE_VALIDATOR
              default: PARTY_TYPE_UNSPECIFIED
              description: >-
                - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                condition
                 - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                 - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                 - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                 - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                 - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                 - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                 - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                 - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                 - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                 - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
              title: PartyType are the different roles parties on a contract may use
          title: >-
            A Party is an address with/in a given role associated with a
            contract
        title: parties is the set of identities that signed this contract
      name:
        type: string
        title: >-
          name to associate with this session execution context, typically
          classname
      context:
        type: string
        format: byte
        description: >-
          context is a field for storing client specific data associated with a
          session.
      audit:
        description: 'Created by, updated by, timestamps, version number, and related info.'
        type: object
        properties:
          created_date:
            type: string
            format: date-time
            title: the date/time when this entry was created
          created_by:
            type: string
            title: the address of the account that created this record
          updated_date:
            type: string
            format: date-time
            title: the date/time when this entry was last updated
          updated_by:
            type: string
            title: the address of the account that modified this record
          version:
            type: integer
            format: int64
            title: an optional version number that is incremented with each update
          message:
            type: string
            title: an optional message associated with the creation/update event
        title: >-
          AuditFields capture information about the last account to make
          modifications and when they were made
    description: >-
      The context will have a specification and set of parties involved.  The
      Session may be updated several

      times so long as the parties listed are signers on the transaction.  NOTE:
      When there are no Records within a Scope

      that reference a Session it is removed.
    title: >-
      A Session is created for an execution context against a specific
      specification instance
  provenance.metadata.v1.SessionIdInfo:
    type: object
    properties:
      session_id:
        type: string
        format: byte
        description: session_id is the raw bytes of the session address.
      session_id_prefix:
        type: string
        format: byte
        description: session_id_prefix is the prefix portion of the session_id.
      session_id_scope_uuid:
        type: string
        format: byte
        description: session_id_scope_uuid is the scope_uuid portion of the session_id.
      session_id_session_uuid:
        type: string
        format: byte
        description: session_id_session_uuid is the session_uuid portion of the session_id.
      session_addr:
        type: string
        description: session_addr is the bech32 string version of the session_id.
      session_uuid:
        type: string
        description: session_uuid is the uuid hex string of the session_id_session_uuid.
      scope_id_info:
        description: >-
          scope_id_info is information about the scope id referenced in the
          session_id.
        type: object
        properties:
          scope_id:
            type: string
            format: byte
            description: scope_id is the raw bytes of the scope address.
          scope_id_prefix:
            type: string
            format: byte
            description: scope_id_prefix is the prefix portion of the scope_id.
          scope_id_scope_uuid:
            type: string
            format: byte
            description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
          scope_addr:
            type: string
            description: scope_addr is the bech32 string version of the scope_id.
          scope_uuid:
            type: string
            description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
    description: SessionIdInfo contains various info regarding a session id.
  provenance.metadata.v1.SessionWrapper:
    type: object
    properties:
      session:
        description: session is the on-chain session message.
        type: object
        properties:
          session_id:
            type: string
            format: byte
          specification_id:
            type: string
            format: byte
            description: >-
              unique id of the contract specification that was used to create
              this session.
          parties:
            type: array
            items:
              type: object
              properties:
                address:
                  type: string
                  title: address of the account (on chain)
                role:
                  type: string
                  enum:
                    - PARTY_TYPE_UNSPECIFIED
                    - PARTY_TYPE_ORIGINATOR
                    - PARTY_TYPE_SERVICER
                    - PARTY_TYPE_INVESTOR
                    - PARTY_TYPE_CUSTODIAN
                    - PARTY_TYPE_OWNER
                    - PARTY_TYPE_AFFILIATE
                    - PARTY_TYPE_OMNIBUS
                    - PARTY_TYPE_PROVENANCE
                    - PARTY_TYPE_CONTROLLER
                    - PARTY_TYPE_VALIDATOR
                  default: PARTY_TYPE_UNSPECIFIED
                  description: >-
                    - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an error
                    condition
                     - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                     - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                     - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                     - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                     - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                     - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                     - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                     - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                     - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                     - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                  title: >-
                    PartyType are the different roles parties on a contract may
                    use
              title: >-
                A Party is an address with/in a given role associated with a
                contract
            title: parties is the set of identities that signed this contract
          name:
            type: string
            title: >-
              name to associate with this session execution context, typically
              classname
          context:
            type: string
            format: byte
            description: >-
              context is a field for storing client specific data associated
              with a session.
          audit:
            description: >-
              Created by, updated by, timestamps, version number, and related
              info.
            type: object
            properties:
              created_date:
                type: string
                format: date-time
                title: the date/time when this entry was created
              created_by:
                type: string
                title: the address of the account that created this record
              updated_date:
                type: string
                format: date-time
                title: the date/time when this entry was last updated
              updated_by:
                type: string
                title: the address of the account that modified this record
              version:
                type: integer
                format: int64
                title: >-
                  an optional version number that is incremented with each
                  update
              message:
                type: string
                title: an optional message associated with the creation/update event
            title: >-
              AuditFields capture information about the last account to make
              modifications and when they were made
        title: >-
          A Session is created for an execution context against a specific
          specification instance
      session_id_info:
        description: >-
          session_id_info contains information about the id/address of the
          session.
        type: object
        properties:
          session_id:
            type: string
            format: byte
            description: session_id is the raw bytes of the session address.
          session_id_prefix:
            type: string
            format: byte
            description: session_id_prefix is the prefix portion of the session_id.
          session_id_scope_uuid:
            type: string
            format: byte
            description: session_id_scope_uuid is the scope_uuid portion of the session_id.
          session_id_session_uuid:
            type: string
            format: byte
            description: >-
              session_id_session_uuid is the session_uuid portion of the
              session_id.
          session_addr:
            type: string
            description: session_addr is the bech32 string version of the session_id.
          session_uuid:
            type: string
            description: >-
              session_uuid is the uuid hex string of the
              session_id_session_uuid.
          scope_id_info:
            description: >-
              scope_id_info is information about the scope id referenced in the
              session_id.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
      contract_spec_id_info:
        description: >-
          contract_spec_id_info contains information about the id/address of the
          contract specification.
        type: object
        properties:
          contract_spec_id:
            type: string
            format: byte
            description: >-
              contract_spec_id is the raw bytes of the contract specification
              address.
          contract_spec_id_prefix:
            type: string
            format: byte
            description: >-
              contract_spec_id_prefix is the prefix portion of the
              contract_spec_id.
          contract_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              contract_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the contract_spec_id.
          contract_spec_addr:
            type: string
            description: >-
              contract_spec_addr is the bech32 string version of the
              contract_spec_id.
          contract_spec_uuid:
            type: string
            description: >-
              contract_spec_uuid is the uuid hex string of the
              contract_spec_id_contract_spec_uuid.
    description: >-
      SessionWrapper contains a single session and some extra identifiers for
      it.
  provenance.metadata.v1.SessionsAllRequest:
    type: object
    properties:
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      SessionsAllRequest is the request type for the Query/SessionsAll RPC
      method.
  provenance.metadata.v1.SessionsAllResponse:
    type: object
    properties:
      sessions:
        type: array
        items:
          type: object
          properties:
            session:
              description: session is the on-chain session message.
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    unique id of the contract specification that was used to
                    create this session.
                parties:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        title: address of the account (on chain)
                      role:
                        type: string
                        enum:
                          - PARTY_TYPE_UNSPECIFIED
                          - PARTY_TYPE_ORIGINATOR
                          - PARTY_TYPE_SERVICER
                          - PARTY_TYPE_INVESTOR
                          - PARTY_TYPE_CUSTODIAN
                          - PARTY_TYPE_OWNER
                          - PARTY_TYPE_AFFILIATE
                          - PARTY_TYPE_OMNIBUS
                          - PARTY_TYPE_PROVENANCE
                          - PARTY_TYPE_CONTROLLER
                          - PARTY_TYPE_VALIDATOR
                        default: PARTY_TYPE_UNSPECIFIED
                        description: >-
                          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                          error condition
                           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                        title: >-
                          PartyType are the different roles parties on a
                          contract may use
                    title: >-
                      A Party is an address with/in a given role associated with
                      a contract
                  title: parties is the set of identities that signed this contract
                name:
                  type: string
                  title: >-
                    name to associate with this session execution context,
                    typically classname
                context:
                  type: string
                  format: byte
                  description: >-
                    context is a field for storing client specific data
                    associated with a session.
                audit:
                  description: >-
                    Created by, updated by, timestamps, version number, and
                    related info.
                  type: object
                  properties:
                    created_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was created
                    created_by:
                      type: string
                      title: the address of the account that created this record
                    updated_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was last updated
                    updated_by:
                      type: string
                      title: the address of the account that modified this record
                    version:
                      type: integer
                      format: int64
                      title: >-
                        an optional version number that is incremented with each
                        update
                    message:
                      type: string
                      title: >-
                        an optional message associated with the creation/update
                        event
                  title: >-
                    AuditFields capture information about the last account to
                    make modifications and when they were made
              title: >-
                A Session is created for an execution context against a specific
                specification instance
            session_id_info:
              description: >-
                session_id_info contains information about the id/address of the
                session.
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                  description: session_id is the raw bytes of the session address.
                session_id_prefix:
                  type: string
                  format: byte
                  description: session_id_prefix is the prefix portion of the session_id.
                session_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_scope_uuid is the scope_uuid portion of the
                    session_id.
                session_id_session_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_session_uuid is the session_uuid portion of the
                    session_id.
                session_addr:
                  type: string
                  description: session_addr is the bech32 string version of the session_id.
                session_uuid:
                  type: string
                  description: >-
                    session_uuid is the uuid hex string of the
                    session_id_session_uuid.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the session_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            contract_spec_id_info:
              description: >-
                contract_spec_id_info contains information about the id/address
                of the contract specification.
              type: object
              properties:
                contract_spec_id:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id is the raw bytes of the contract
                    specification address.
                contract_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_prefix is the prefix portion of the
                    contract_spec_id.
                contract_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_contract_spec_uuid is the
                    contract_spec_uuid portion of the contract_spec_id.
                contract_spec_addr:
                  type: string
                  description: >-
                    contract_spec_addr is the bech32 string version of the
                    contract_spec_id.
                contract_spec_uuid:
                  type: string
                  description: >-
                    contract_spec_uuid is the uuid hex string of the
                    contract_spec_id_contract_spec_uuid.
          description: >-
            SessionWrapper contains a single session and some extra identifiers
            for it.
        description: sessions are the wrapped sessions.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      SessionsAllResponse is the response type for the Query/SessionsAll RPC
      method.
  provenance.metadata.v1.SessionsRequest:
    type: object
    properties:
      scope_id:
        type: string
        description: >-
          scope_id can either be a uuid, e.g.
          91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.

          scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
      session_id:
        type: string
        description: >-
          session_id can either be a uuid, e.g.
          5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address, e.g.

          session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
          This can only be a uuid if a scope_id is also

          provided.
      record_addr:
        type: string
        description: >-
          record_addr is a bech32 record address, e.g.
          record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
      record_name:
        type: string
        description: >-
          record_name is the name of the record to find the session for in the
          provided scope.
      include_scope:
        type: boolean
        format: boolean
        description: >-
          include_scope is a flag for whether or not the scope containing these
          sessions should be included.
      include_records:
        type: boolean
        format: boolean
        description: >-
          include_records is a flag for whether or not the records in these
          sessions should be included.
    description: SessionsRequest is the request type for the Query/Sessions RPC method.
  provenance.metadata.v1.SessionsResponse:
    type: object
    properties:
      scope:
        description: scope is the wrapped scope that holds these sessions (if requested).
        type: object
        properties:
          scope:
            description: scope is the on-chain scope message.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                title: >-
                  Unique ID for this scope.  Implements sdk.Address interface
                  for use where addresses are required in Cosmos
              specification_id:
                type: string
                format: byte
                title: >-
                  the scope specification that contains the specifications for
                  data elements allowed within this scope
              owners:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      title: address of the account (on chain)
                    role:
                      type: string
                      enum:
                        - PARTY_TYPE_UNSPECIFIED
                        - PARTY_TYPE_ORIGINATOR
                        - PARTY_TYPE_SERVICER
                        - PARTY_TYPE_INVESTOR
                        - PARTY_TYPE_CUSTODIAN
                        - PARTY_TYPE_OWNER
                        - PARTY_TYPE_AFFILIATE
                        - PARTY_TYPE_OMNIBUS
                        - PARTY_TYPE_PROVENANCE
                        - PARTY_TYPE_CONTROLLER
                        - PARTY_TYPE_VALIDATOR
                      default: PARTY_TYPE_UNSPECIFIED
                      description: >-
                        - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                        error condition
                         - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                         - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                         - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                         - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                         - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                         - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                         - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                         - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                         - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                         - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                      title: >-
                        PartyType are the different roles parties on a contract
                        may use
                  title: >-
                    A Party is an address with/in a given role associated with a
                    contract
                description: >-
                  These parties represent top level owners of the records
                  within.  These parties must sign any requests that modify

                  the data within the scope.  These addresses are in union with
                  parties listed on the sessions.
              data_access:
                type: array
                items:
                  type: string
                description: >-
                  Addessses in this list are authorized to recieve off-chain
                  data associated with this scope.
              value_owner_address:
                type: string
                description: >-
                  An address that controls the value associated with this
                  scope.  Standard blockchain accounts and marker accounts

                  are supported for this value.  This attribute may only be
                  changed by the entity indicated once it is set.
          scope_id_info:
            description: >-
              scope_id_info contains information about the id/address of the
              scope.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
          scope_spec_id_info:
            description: >-
              scope_spec_id_info contains information about the id/address of
              the scope specification.
            type: object
            properties:
              scope_spec_id:
                type: string
                format: byte
                description: >-
                  scope_spec_id is the raw bytes of the scope specification
                  address.
              scope_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  scope_spec_id_prefix is the prefix portion of the
                  scope_spec_id.
              scope_spec_id_scope_spec_uuid:
                type: string
                format: byte
                description: >-
                  scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion
                  of the scope_spec_id.
              scope_spec_addr:
                type: string
                description: >-
                  scope_spec_addr is the bech32 string version of the
                  scope_spec_id.
              scope_spec_uuid:
                type: string
                description: >-
                  scope_spec_uuid is the uuid hex string of the
                  scope_spec_id_scope_spec_uuid.
      sessions:
        type: array
        items:
          type: object
          properties:
            session:
              description: session is the on-chain session message.
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    unique id of the contract specification that was used to
                    create this session.
                parties:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        title: address of the account (on chain)
                      role:
                        type: string
                        enum:
                          - PARTY_TYPE_UNSPECIFIED
                          - PARTY_TYPE_ORIGINATOR
                          - PARTY_TYPE_SERVICER
                          - PARTY_TYPE_INVESTOR
                          - PARTY_TYPE_CUSTODIAN
                          - PARTY_TYPE_OWNER
                          - PARTY_TYPE_AFFILIATE
                          - PARTY_TYPE_OMNIBUS
                          - PARTY_TYPE_PROVENANCE
                          - PARTY_TYPE_CONTROLLER
                          - PARTY_TYPE_VALIDATOR
                        default: PARTY_TYPE_UNSPECIFIED
                        description: >-
                          - PARTY_TYPE_UNSPECIFIED: PARTY_TYPE_UNSPECIFIED is an
                          error condition
                           - PARTY_TYPE_ORIGINATOR: PARTY_TYPE_ORIGINATOR is an asset originator
                           - PARTY_TYPE_SERVICER: PARTY_TYPE_SERVICER provides debt servicing functions
                           - PARTY_TYPE_INVESTOR: PARTY_TYPE_INVESTOR is a generic investor
                           - PARTY_TYPE_CUSTODIAN: PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
                           - PARTY_TYPE_OWNER: PARTY_TYPE_OWNER indicates this party is an owner of the item
                           - PARTY_TYPE_AFFILIATE: PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
                           - PARTY_TYPE_OMNIBUS: PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
                           - PARTY_TYPE_PROVENANCE: PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
                           - PARTY_TYPE_CONTROLLER: PARTY_TYPE_CONTROLLER is an entity which controls a specific asset on chain (ie enote)
                           - PARTY_TYPE_VALIDATOR: PARTY_TYPE_VALIDATOR is an entity which validates given assets on chain
                        title: >-
                          PartyType are the different roles parties on a
                          contract may use
                    title: >-
                      A Party is an address with/in a given role associated with
                      a contract
                  title: parties is the set of identities that signed this contract
                name:
                  type: string
                  title: >-
                    name to associate with this session execution context,
                    typically classname
                context:
                  type: string
                  format: byte
                  description: >-
                    context is a field for storing client specific data
                    associated with a session.
                audit:
                  description: >-
                    Created by, updated by, timestamps, version number, and
                    related info.
                  type: object
                  properties:
                    created_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was created
                    created_by:
                      type: string
                      title: the address of the account that created this record
                    updated_date:
                      type: string
                      format: date-time
                      title: the date/time when this entry was last updated
                    updated_by:
                      type: string
                      title: the address of the account that modified this record
                    version:
                      type: integer
                      format: int64
                      title: >-
                        an optional version number that is incremented with each
                        update
                    message:
                      type: string
                      title: >-
                        an optional message associated with the creation/update
                        event
                  title: >-
                    AuditFields capture information about the last account to
                    make modifications and when they were made
              title: >-
                A Session is created for an execution context against a specific
                specification instance
            session_id_info:
              description: >-
                session_id_info contains information about the id/address of the
                session.
              type: object
              properties:
                session_id:
                  type: string
                  format: byte
                  description: session_id is the raw bytes of the session address.
                session_id_prefix:
                  type: string
                  format: byte
                  description: session_id_prefix is the prefix portion of the session_id.
                session_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_scope_uuid is the scope_uuid portion of the
                    session_id.
                session_id_session_uuid:
                  type: string
                  format: byte
                  description: >-
                    session_id_session_uuid is the session_uuid portion of the
                    session_id.
                session_addr:
                  type: string
                  description: session_addr is the bech32 string version of the session_id.
                session_uuid:
                  type: string
                  description: >-
                    session_uuid is the uuid hex string of the
                    session_id_session_uuid.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the session_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            contract_spec_id_info:
              description: >-
                contract_spec_id_info contains information about the id/address
                of the contract specification.
              type: object
              properties:
                contract_spec_id:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id is the raw bytes of the contract
                    specification address.
                contract_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_prefix is the prefix portion of the
                    contract_spec_id.
                contract_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_contract_spec_uuid is the
                    contract_spec_uuid portion of the contract_spec_id.
                contract_spec_addr:
                  type: string
                  description: >-
                    contract_spec_addr is the bech32 string version of the
                    contract_spec_id.
                contract_spec_uuid:
                  type: string
                  description: >-
                    contract_spec_uuid is the uuid hex string of the
                    contract_spec_id_contract_spec_uuid.
          description: >-
            SessionWrapper contains a single session and some extra identifiers
            for it.
        description: sessions is any number of wrapped session results.
      records:
        type: array
        items:
          type: object
          properties:
            record:
              description: record is the on-chain record message.
              type: object
              properties:
                name:
                  type: string
                  title: >-
                    name/identifier for this record.  Value must be unique
                    within the scope.  Also known as a Fact name
                session_id:
                  type: string
                  format: byte
                  title: >-
                    id of the session context that was used to create this
                    record (use with filtered kvprefix iterator)
                process:
                  title: >-
                    process contain information used to uniquely identify an
                    execution on or off chain that generated this record
                  type: object
                  properties:
                    address:
                      type: string
                      title: the address of a smart contract used for this process
                    hash:
                      type: string
                      title: the hash of an off-chain process used
                    name:
                      type: string
                      title: >-
                        a name associated with the process (type_name, classname
                        or smart contract common name)
                    method:
                      type: string
                      title: >-
                        method is a name or reference to a specific operation
                        (method) within a class/contract that was invoked
                inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: >-
                          Name value included to link back to the definition
                          spec.
                      record_id:
                        type: string
                        format: byte
                        title: >-
                          the address of a record on chain (For Established
                          Records)
                      hash:
                        type: string
                        title: >-
                          the hash of an off-chain piece of information (For
                          Proposed Records)
                      type_name:
                        type: string
                        title: from proposed fact structure to unmarshal
                      status:
                        title: >-
                          Indicates if this input was a recorded fact on chain
                          or just a given hashed input
                        type: string
                        enum:
                          - RECORD_INPUT_STATUS_UNSPECIFIED
                          - RECORD_INPUT_STATUS_PROPOSED
                          - RECORD_INPUT_STATUS_RECORD
                        default: RECORD_INPUT_STATUS_UNSPECIFIED
                        description: >-
                          - RECORD_INPUT_STATUS_UNSPECIFIED:
                          RECORD_INPUT_STATUS_UNSPECIFIED indicates an
                          invalid/unknown input type
                           - RECORD_INPUT_STATUS_PROPOSED: RECORD_INPUT_STATUS_PROPOSED indicates this input was an arbitrary piece of data that was hashed
                           - RECORD_INPUT_STATUS_RECORD: RECORD_INPUT_STATUS_RECORD indicates this input is a reference to a previously recorded fact on blockchain
                    title: Tracks the inputs used to establish this record
                  title: >-
                    inputs used with the process to achieve the output on this
                    record
                outputs:
                  type: array
                  items:
                    type: object
                    properties:
                      hash:
                        type: string
                        title: >-
                          Hash of the data output that was output/generated for
                          this record
                      status:
                        title: >-
                          Status of the process execution associated with this
                          output indicating success,failure, or pending
                        type: string
                        enum:
                          - RESULT_STATUS_UNSPECIFIED
                          - RESULT_STATUS_PASS
                          - RESULT_STATUS_SKIP
                          - RESULT_STATUS_FAIL
                        default: RESULT_STATUS_UNSPECIFIED
                        description: >-
                          - RESULT_STATUS_UNSPECIFIED: RESULT_STATUS_UNSPECIFIED
                          indicates an unset condition
                           - RESULT_STATUS_PASS: RESULT_STATUS_PASS indicates the execution was successfult
                           - RESULT_STATUS_SKIP: RESULT_STATUS_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
                           - RESULT_STATUS_FAIL: RESULT_STATUS_FAIL indicates the execution of the condition/consideration failed.
                    title: >-
                      RecordOutput encapsulates the output of a process recorded
                      on chain
                  title: >-
                    output(s) is the results of executing the process on the
                    given process indicated in this record
                specification_id:
                  type: string
                  format: byte
                  description: >-
                    specification_id is the id of the record specification that
                    was used to create this record.
              title: >-
                A record (of fact) is attached to a session or each
                consideration output from a contract
            record_id_info:
              description: >-
                record_id_info contains information about the id/address of the
                record.
              type: object
              properties:
                record_id:
                  type: string
                  format: byte
                  description: record_id is the raw bytes of the record address.
                record_id_prefix:
                  type: string
                  format: byte
                  description: record_id_prefix is the prefix portion of the record_id.
                record_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_id_scope_uuid is the scope_uuid portion of the
                    record_id.
                record_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_id_hashed_name is the hashed name portion of the
                    record_id.
                record_addr:
                  type: string
                  description: record_addr is the bech32 string version of the record_id.
                scope_id_info:
                  description: >-
                    scope_id_info is information about the scope id referenced
                    in the record_id.
                  type: object
                  properties:
                    scope_id:
                      type: string
                      format: byte
                      description: scope_id is the raw bytes of the scope address.
                    scope_id_prefix:
                      type: string
                      format: byte
                      description: scope_id_prefix is the prefix portion of the scope_id.
                    scope_id_scope_uuid:
                      type: string
                      format: byte
                      description: >-
                        scope_id_scope_uuid is the scope_uuid portion of the
                        scope_id.
                    scope_addr:
                      type: string
                      description: scope_addr is the bech32 string version of the scope_id.
                    scope_uuid:
                      type: string
                      description: >-
                        scope_uuid is the uuid hex string of the
                        scope_id_scope_uuid.
            record_spec_id_info:
              description: >-
                record_spec_id_info contains information about the id/address of
                the record specification.
              type: object
              properties:
                record_spec_id:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id is the raw bytes of the record specification
                    address.
                record_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_prefix is the prefix portion of the
                    record_spec_id.
                record_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_contract_spec_uuid is the contract_spec_uuid
                    portion of the record_spec_id.
                record_spec_id_hashed_name:
                  type: string
                  format: byte
                  description: >-
                    record_spec_id_hashed_name is the hashed name portion of the
                    record_spec_id.
                record_spec_addr:
                  type: string
                  description: >-
                    record_spec_addr is the bech32 string version of the
                    record_spec_id.
                contract_spec_id_info:
                  description: >-
                    contract_spec_id_info is information about the contract spec
                    id referenced in the record_spec_id.
                  type: object
                  properties:
                    contract_spec_id:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id is the raw bytes of the contract
                        specification address.
                    contract_spec_id_prefix:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_prefix is the prefix portion of the
                        contract_spec_id.
                    contract_spec_id_contract_spec_uuid:
                      type: string
                      format: byte
                      description: >-
                        contract_spec_id_contract_spec_uuid is the
                        contract_spec_uuid portion of the contract_spec_id.
                    contract_spec_addr:
                      type: string
                      description: >-
                        contract_spec_addr is the bech32 string version of the
                        contract_spec_id.
                    contract_spec_uuid:
                      type: string
                      description: >-
                        contract_spec_uuid is the uuid hex string of the
                        contract_spec_id_contract_spec_uuid.
          description: >-
            RecordWrapper contains a single record and some extra identifiers
            for it.
        description: >-
          records is any number of wrapped records contained in these sessions
          (if requested).
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          scope_id:
            type: string
            description: >-
              scope_id can either be a uuid, e.g.
              91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address,
              e.g.

              scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
          session_id:
            type: string
            description: >-
              session_id can either be a uuid, e.g.
              5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address,
              e.g.

              session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
              This can only be a uuid if a scope_id is also

              provided.
          record_addr:
            type: string
            description: >-
              record_addr is a bech32 record address, e.g.
              record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
          record_name:
            type: string
            description: >-
              record_name is the name of the record to find the session for in
              the provided scope.
          include_scope:
            type: boolean
            format: boolean
            description: >-
              include_scope is a flag for whether or not the scope containing
              these sessions should be included.
          include_records:
            type: boolean
            format: boolean
            description: >-
              include_records is a flag for whether or not the records in these
              sessions should be included.
    description: SessionsResponse is the response type for the Query/Sessions RPC method.
  provenance.metadata.v1.ValueOwnershipRequest:
    type: object
    properties:
      address:
        type: string
      pagination:
        description: pagination defines optional pagination parameters for the request.
        type: object
        properties:
          key:
            type: string
            format: byte
            description: |-
              key is a value returned in PageResponse.next_key to begin
              querying the next page most efficiently. Only one of offset or key
              should be set.
          offset:
            type: string
            format: uint64
            description: >-
              offset is a numeric offset that can be used when key is
              unavailable.

              It is less efficient than using key. Only one of offset or key
              should

              be set.
          limit:
            type: string
            format: uint64
            description: >-
              limit is the total number of results to be returned in the result
              page.

              If left empty it will default to a value to be set by each app.
          count_total:
            type: boolean
            format: boolean
            description: >-
              count_total is set to true  to indicate that the result set should
              include

              a count of the total number of items available for pagination in
              UIs.

              count_total is only respected when offset is used. It is ignored
              when key

              is set.
          reverse:
            type: boolean
            format: boolean
            description: >-
              reverse is set to true if results are to be returned in the
              descending order.


              Since: cosmos-sdk 0.43
        title: |-
          PageRequest is to be embedded in gRPC request messages for efficient
          pagination. Ex:
    description: >-
      ValueOwnershipRequest is the request type for the Query/ValueOwnership RPC
      method.
  provenance.metadata.v1.ValueOwnershipResponse:
    type: object
    properties:
      scope_uuids:
        type: array
        items:
          type: string
        description: A list of scope ids (uuid) associated with the given address.
      request:
        description: request is a copy of the request that generated these results.
        type: object
        properties:
          address:
            type: string
          pagination:
            description: pagination defines optional pagination parameters for the request.
            type: object
            properties:
              key:
                type: string
                format: byte
                description: >-
                  key is a value returned in PageResponse.next_key to begin

                  querying the next page most efficiently. Only one of offset or
                  key

                  should be set.
              offset:
                type: string
                format: uint64
                description: >-
                  offset is a numeric offset that can be used when key is
                  unavailable.

                  It is less efficient than using key. Only one of offset or key
                  should

                  be set.
              limit:
                type: string
                format: uint64
                description: >-
                  limit is the total number of results to be returned in the
                  result page.

                  If left empty it will default to a value to be set by each
                  app.
              count_total:
                type: boolean
                format: boolean
                description: >-
                  count_total is set to true  to indicate that the result set
                  should include

                  a count of the total number of items available for pagination
                  in UIs.

                  count_total is only respected when offset is used. It is
                  ignored when key

                  is set.
              reverse:
                type: boolean
                format: boolean
                description: >-
                  reverse is set to true if results are to be returned in the
                  descending order.


                  Since: cosmos-sdk 0.43
            title: >-
              PageRequest is to be embedded in gRPC request messages for
              efficient

              pagination. Ex:
      pagination:
        description: pagination provides the pagination information of this response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      ValueOwnershipResponse is the response type for the Query/ValueOwnership
      RPC method.
  provenance.metadata.v1.MsgAddContractSpecToScopeSpecResponse:
    type: object
    description: >-
      MsgAddContractSpecToScopeSpecResponse is the response type for the
      Msg/AddContractSpecToScopeSpec RPC method.
  provenance.metadata.v1.MsgAddScopeDataAccessResponse:
    type: object
    title: >-
      MsgAddScopeDataAccessResponse is the response for adding data access
      AccAddress to scope
  provenance.metadata.v1.MsgAddScopeOwnerResponse:
    type: object
    title: >-
      MsgAddScopeOwnerResponse is the response for adding owner AccAddresses to
      scope
  provenance.metadata.v1.MsgBindOSLocatorResponse:
    type: object
    properties:
      locator:
        type: object
        properties:
          owner:
            type: string
            title: account address the endpoint is owned by
          locator_uri:
            type: string
            title: locator endpoint uri
          encryption_key:
            type: string
            title: owners encryption key address
        description: >-
          Defines an Locator object stored on chain, which represents a owner(
          blockchain address) associated with a endpoint

          uri for it's associated object store.
    description: >-
      MsgBindOSLocatorResponse is the response type for the Msg/BindOSLocator
      RPC method.
  provenance.metadata.v1.MsgDeleteContractSpecFromScopeSpecResponse:
    type: object
    description: >-
      MsgDeleteContractSpecFromScopeSpecResponse is the response type for the
      Msg/DeleteContractSpecFromScopeSpec RPC

      method.
  provenance.metadata.v1.MsgDeleteContractSpecificationResponse:
    type: object
    description: >-
      MsgDeleteContractSpecificationResponse is the response type for the
      Msg/DeleteContractSpecification RPC method.
  provenance.metadata.v1.MsgDeleteOSLocatorResponse:
    type: object
    properties:
      locator:
        type: object
        properties:
          owner:
            type: string
            title: account address the endpoint is owned by
          locator_uri:
            type: string
            title: locator endpoint uri
          encryption_key:
            type: string
            title: owners encryption key address
        description: >-
          Defines an Locator object stored on chain, which represents a owner(
          blockchain address) associated with a endpoint

          uri for it's associated object store.
    description: >-
      MsgDeleteOSLocatorResponse is the response type for the
      Msg/DeleteOSLocator RPC method.
  provenance.metadata.v1.MsgDeleteRecordResponse:
    type: object
    description: >-
      MsgDeleteRecordResponse is the response type for the Msg/DeleteRecord RPC
      method.
  provenance.metadata.v1.MsgDeleteRecordSpecificationResponse:
    type: object
    description: >-
      MsgDeleteRecordSpecificationResponse is the response type for the
      Msg/DeleteRecordSpecification RPC method.
  provenance.metadata.v1.MsgDeleteScopeDataAccessResponse:
    type: object
    title: >-
      MsgDeleteScopeDataAccessResponse is the response from removing data access
      AccAddress to scope
  provenance.metadata.v1.MsgDeleteScopeOwnerResponse:
    type: object
    title: >-
      MsgDeleteScopeOwnerResponse is the response from removing owner AccAddress
      to scope
  provenance.metadata.v1.MsgDeleteScopeResponse:
    type: object
    description: >-
      MsgDeleteScopeResponse is the response type for the Msg/DeleteScope RPC
      method.
  provenance.metadata.v1.MsgDeleteScopeSpecificationResponse:
    type: object
    description: >-
      MsgDeleteScopeSpecificationResponse is the response type for the
      Msg/DeleteScopeSpecification RPC method.
  provenance.metadata.v1.MsgModifyOSLocatorResponse:
    type: object
    properties:
      locator:
        type: object
        properties:
          owner:
            type: string
            title: account address the endpoint is owned by
          locator_uri:
            type: string
            title: locator endpoint uri
          encryption_key:
            type: string
            title: owners encryption key address
        description: >-
          Defines an Locator object stored on chain, which represents a owner(
          blockchain address) associated with a endpoint

          uri for it's associated object store.
    description: >-
      MsgModifyOSLocatorResponse is the response type for the
      Msg/ModifyOSLocator RPC method.
  provenance.metadata.v1.MsgP8eMemorializeContractResponse:
    type: object
    properties:
      scope_id_info:
        description: >-
          scope_id_info contains information about the id/address of the scope
          that was added or updated.
        type: object
        properties:
          scope_id:
            type: string
            format: byte
            description: scope_id is the raw bytes of the scope address.
          scope_id_prefix:
            type: string
            format: byte
            description: scope_id_prefix is the prefix portion of the scope_id.
          scope_id_scope_uuid:
            type: string
            format: byte
            description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
          scope_addr:
            type: string
            description: scope_addr is the bech32 string version of the scope_id.
          scope_uuid:
            type: string
            description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
      session_id_info:
        description: >-
          session_id_info contains information about the id/address of the
          session that was added or updated.
        type: object
        properties:
          session_id:
            type: string
            format: byte
            description: session_id is the raw bytes of the session address.
          session_id_prefix:
            type: string
            format: byte
            description: session_id_prefix is the prefix portion of the session_id.
          session_id_scope_uuid:
            type: string
            format: byte
            description: session_id_scope_uuid is the scope_uuid portion of the session_id.
          session_id_session_uuid:
            type: string
            format: byte
            description: >-
              session_id_session_uuid is the session_uuid portion of the
              session_id.
          session_addr:
            type: string
            description: session_addr is the bech32 string version of the session_id.
          session_uuid:
            type: string
            description: >-
              session_uuid is the uuid hex string of the
              session_id_session_uuid.
          scope_id_info:
            description: >-
              scope_id_info is information about the scope id referenced in the
              session_id.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
      record_id_infos:
        type: array
        items:
          type: object
          properties:
            record_id:
              type: string
              format: byte
              description: record_id is the raw bytes of the record address.
            record_id_prefix:
              type: string
              format: byte
              description: record_id_prefix is the prefix portion of the record_id.
            record_id_scope_uuid:
              type: string
              format: byte
              description: record_id_scope_uuid is the scope_uuid portion of the record_id.
            record_id_hashed_name:
              type: string
              format: byte
              description: >-
                record_id_hashed_name is the hashed name portion of the
                record_id.
            record_addr:
              type: string
              description: record_addr is the bech32 string version of the record_id.
            scope_id_info:
              description: >-
                scope_id_info is information about the scope id referenced in
                the record_id.
              type: object
              properties:
                scope_id:
                  type: string
                  format: byte
                  description: scope_id is the raw bytes of the scope address.
                scope_id_prefix:
                  type: string
                  format: byte
                  description: scope_id_prefix is the prefix portion of the scope_id.
                scope_id_scope_uuid:
                  type: string
                  format: byte
                  description: >-
                    scope_id_scope_uuid is the scope_uuid portion of the
                    scope_id.
                scope_addr:
                  type: string
                  description: scope_addr is the bech32 string version of the scope_id.
                scope_uuid:
                  type: string
                  description: >-
                    scope_uuid is the uuid hex string of the
                    scope_id_scope_uuid.
          description: RecordIdInfo contains various info regarding a record id.
        description: >-
          record_id_infos contains information about the ids/addresses of the
          records that were added or updated.
    description: >-
      MsgP8eMemorializeContractResponse is the response type for the
      Msg/P8eMemorializeContract RPC method.
  provenance.metadata.v1.MsgWriteContractSpecificationResponse:
    type: object
    properties:
      contract_spec_id_info:
        description: >-
          contract_spec_id_info contains information about the id/address of the
          contract specification that was added or

          updated.
        type: object
        properties:
          contract_spec_id:
            type: string
            format: byte
            description: >-
              contract_spec_id is the raw bytes of the contract specification
              address.
          contract_spec_id_prefix:
            type: string
            format: byte
            description: >-
              contract_spec_id_prefix is the prefix portion of the
              contract_spec_id.
          contract_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              contract_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the contract_spec_id.
          contract_spec_addr:
            type: string
            description: >-
              contract_spec_addr is the bech32 string version of the
              contract_spec_id.
          contract_spec_uuid:
            type: string
            description: >-
              contract_spec_uuid is the uuid hex string of the
              contract_spec_id_contract_spec_uuid.
    description: >-
      MsgWriteContractSpecificationResponse is the response type for the
      Msg/WriteContractSpecification RPC method.
  provenance.metadata.v1.MsgWriteP8eContractSpecResponse:
    type: object
    properties:
      contract_spec_id_info:
        description: >-
          contract_spec_id_info contains information about the id/address of the
          contract specification that was added or

          updated.
        type: object
        properties:
          contract_spec_id:
            type: string
            format: byte
            description: >-
              contract_spec_id is the raw bytes of the contract specification
              address.
          contract_spec_id_prefix:
            type: string
            format: byte
            description: >-
              contract_spec_id_prefix is the prefix portion of the
              contract_spec_id.
          contract_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              contract_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the contract_spec_id.
          contract_spec_addr:
            type: string
            description: >-
              contract_spec_addr is the bech32 string version of the
              contract_spec_id.
          contract_spec_uuid:
            type: string
            description: >-
              contract_spec_uuid is the uuid hex string of the
              contract_spec_id_contract_spec_uuid.
      record_spec_id_infos:
        type: array
        items:
          type: object
          properties:
            record_spec_id:
              type: string
              format: byte
              description: >-
                record_spec_id is the raw bytes of the record specification
                address.
            record_spec_id_prefix:
              type: string
              format: byte
              description: >-
                record_spec_id_prefix is the prefix portion of the
                record_spec_id.
            record_spec_id_contract_spec_uuid:
              type: string
              format: byte
              description: >-
                record_spec_id_contract_spec_uuid is the contract_spec_uuid
                portion of the record_spec_id.
            record_spec_id_hashed_name:
              type: string
              format: byte
              description: >-
                record_spec_id_hashed_name is the hashed name portion of the
                record_spec_id.
            record_spec_addr:
              type: string
              description: >-
                record_spec_addr is the bech32 string version of the
                record_spec_id.
            contract_spec_id_info:
              description: >-
                contract_spec_id_info is information about the contract spec id
                referenced in the record_spec_id.
              type: object
              properties:
                contract_spec_id:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id is the raw bytes of the contract
                    specification address.
                contract_spec_id_prefix:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_prefix is the prefix portion of the
                    contract_spec_id.
                contract_spec_id_contract_spec_uuid:
                  type: string
                  format: byte
                  description: >-
                    contract_spec_id_contract_spec_uuid is the
                    contract_spec_uuid portion of the contract_spec_id.
                contract_spec_addr:
                  type: string
                  description: >-
                    contract_spec_addr is the bech32 string version of the
                    contract_spec_id.
                contract_spec_uuid:
                  type: string
                  description: >-
                    contract_spec_uuid is the uuid hex string of the
                    contract_spec_id_contract_spec_uuid.
          description: >-
            RecordSpecIdInfo contains various info regarding a record
            specification id.
        description: >-
          record_spec_id_infos contains information about the ids/addresses of
          the record specifications that were added or

          updated.
    description: >-
      MsgWriteP8eContractSpecResponse is the response type for the
      Msg/WriteP8eContractSpec RPC method.
  provenance.metadata.v1.MsgWriteRecordResponse:
    type: object
    properties:
      record_id_info:
        type: object
        properties:
          record_id:
            type: string
            format: byte
            description: record_id is the raw bytes of the record address.
          record_id_prefix:
            type: string
            format: byte
            description: record_id_prefix is the prefix portion of the record_id.
          record_id_scope_uuid:
            type: string
            format: byte
            description: record_id_scope_uuid is the scope_uuid portion of the record_id.
          record_id_hashed_name:
            type: string
            format: byte
            description: record_id_hashed_name is the hashed name portion of the record_id.
          record_addr:
            type: string
            description: record_addr is the bech32 string version of the record_id.
          scope_id_info:
            description: >-
              scope_id_info is information about the scope id referenced in the
              record_id.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
        description: RecordIdInfo contains various info regarding a record id.
    description: >-
      MsgWriteRecordResponse is the response type for the Msg/WriteRecord RPC
      method.
  provenance.metadata.v1.MsgWriteRecordSpecificationResponse:
    type: object
    properties:
      record_spec_id_info:
        type: object
        properties:
          record_spec_id:
            type: string
            format: byte
            description: >-
              record_spec_id is the raw bytes of the record specification
              address.
          record_spec_id_prefix:
            type: string
            format: byte
            description: record_spec_id_prefix is the prefix portion of the record_spec_id.
          record_spec_id_contract_spec_uuid:
            type: string
            format: byte
            description: >-
              record_spec_id_contract_spec_uuid is the contract_spec_uuid
              portion of the record_spec_id.
          record_spec_id_hashed_name:
            type: string
            format: byte
            description: >-
              record_spec_id_hashed_name is the hashed name portion of the
              record_spec_id.
          record_spec_addr:
            type: string
            description: >-
              record_spec_addr is the bech32 string version of the
              record_spec_id.
          contract_spec_id_info:
            description: >-
              contract_spec_id_info is information about the contract spec id
              referenced in the record_spec_id.
            type: object
            properties:
              contract_spec_id:
                type: string
                format: byte
                description: >-
                  contract_spec_id is the raw bytes of the contract
                  specification address.
              contract_spec_id_prefix:
                type: string
                format: byte
                description: >-
                  contract_spec_id_prefix is the prefix portion of the
                  contract_spec_id.
              contract_spec_id_contract_spec_uuid:
                type: string
                format: byte
                description: >-
                  contract_spec_id_contract_spec_uuid is the contract_spec_uuid
                  portion of the contract_spec_id.
              contract_spec_addr:
                type: string
                description: >-
                  contract_spec_addr is the bech32 string version of the
                  contract_spec_id.
              contract_spec_uuid:
                type: string
                description: >-
                  contract_spec_uuid is the uuid hex string of the
                  contract_spec_id_contract_spec_uuid.
        description: >-
          RecordSpecIdInfo contains various info regarding a record
          specification id.
    description: >-
      MsgWriteRecordSpecificationResponse is the response type for the
      Msg/WriteRecordSpecification RPC method.
  provenance.metadata.v1.MsgWriteScopeResponse:
    type: object
    properties:
      scope_id_info:
        description: >-
          scope_id_info contains information about the id/address of the scope
          that was added or updated.
        type: object
        properties:
          scope_id:
            type: string
            format: byte
            description: scope_id is the raw bytes of the scope address.
          scope_id_prefix:
            type: string
            format: byte
            description: scope_id_prefix is the prefix portion of the scope_id.
          scope_id_scope_uuid:
            type: string
            format: byte
            description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
          scope_addr:
            type: string
            description: scope_addr is the bech32 string version of the scope_id.
          scope_uuid:
            type: string
            description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
    description: >-
      MsgWriteScopeResponse is the response type for the Msg/WriteScope RPC
      method.
  provenance.metadata.v1.MsgWriteScopeSpecificationResponse:
    type: object
    properties:
      scope_spec_id_info:
        description: >-
          scope_spec_id_info contains information about the id/address of the
          scope specification that was added or updated.
        type: object
        properties:
          scope_spec_id:
            type: string
            format: byte
            description: scope_spec_id is the raw bytes of the scope specification address.
          scope_spec_id_prefix:
            type: string
            format: byte
            description: scope_spec_id_prefix is the prefix portion of the scope_spec_id.
          scope_spec_id_scope_spec_uuid:
            type: string
            format: byte
            description: >-
              scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion of
              the scope_spec_id.
          scope_spec_addr:
            type: string
            description: scope_spec_addr is the bech32 string version of the scope_spec_id.
          scope_spec_uuid:
            type: string
            description: >-
              scope_spec_uuid is the uuid hex string of the
              scope_spec_id_scope_spec_uuid.
    description: >-
      MsgWriteScopeSpecificationResponse is the response type for the
      Msg/WriteScopeSpecification RPC method.
  provenance.metadata.v1.MsgWriteSessionResponse:
    type: object
    properties:
      session_id_info:
        description: >-
          session_id_info contains information about the id/address of the
          session that was added or updated.
        type: object
        properties:
          session_id:
            type: string
            format: byte
            description: session_id is the raw bytes of the session address.
          session_id_prefix:
            type: string
            format: byte
            description: session_id_prefix is the prefix portion of the session_id.
          session_id_scope_uuid:
            type: string
            format: byte
            description: session_id_scope_uuid is the scope_uuid portion of the session_id.
          session_id_session_uuid:
            type: string
            format: byte
            description: >-
              session_id_session_uuid is the session_uuid portion of the
              session_id.
          session_addr:
            type: string
            description: session_addr is the bech32 string version of the session_id.
          session_uuid:
            type: string
            description: >-
              session_uuid is the uuid hex string of the
              session_id_session_uuid.
          scope_id_info:
            description: >-
              scope_id_info is information about the scope id referenced in the
              session_id.
            type: object
            properties:
              scope_id:
                type: string
                format: byte
                description: scope_id is the raw bytes of the scope address.
              scope_id_prefix:
                type: string
                format: byte
                description: scope_id_prefix is the prefix portion of the scope_id.
              scope_id_scope_uuid:
                type: string
                format: byte
                description: scope_id_scope_uuid is the scope_uuid portion of the scope_id.
              scope_addr:
                type: string
                description: scope_addr is the bech32 string version of the scope_id.
              scope_uuid:
                type: string
                description: scope_uuid is the uuid hex string of the scope_id_scope_uuid.
    description: >-
      MsgWriteSessionResponse is the response type for the Msg/WriteSession RPC
      method.
  provenance.metadata.v1.SessionIdComponents:
    type: object
    properties:
      scope_uuid:
        type: string
        title: >-
          scope_uuid is the uuid string for the scope, e.g.
          "91978ba2-5f35-459a-86a7-feca1b0512e0"
      scope_addr:
        type: string
        title: >-
          scope_addr is the bech32 address string for the scope, g.g.
          "scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel"
      session_uuid:
        type: string
        title: >-
          session_uuid is a uuid string for identifying this session, e.g.
          "5803f8bc-6067-4eb5-951f-2121671c2ec0"
    description: >-
      SessionIDComponents contains fields for the components that make up a
      session id.
  provenance.metadata.v1.p8e.Condition:
    type: object
    properties:
      condition_name:
        type: string
      result:
        type: object
        properties:
          output:
            type: object
            properties:
              name:
                type: string
              hash:
                type: string
              classname:
                type: string
              ancestor:
                type: object
                properties:
                  scope_uuid:
                    title: |-
                      [Req] [Scope.uuid]
                      Scope ID
                    type: object
                    properties:
                      value:
                        type: string
                  group_uuid:
                    title: |-
                      [Opt] [RecordGroup.group_uuid]
                      require record to be within a specific group
                    type: object
                    properties:
                      value:
                        type: string
                  hash:
                    type: string
                    title: >-
                      [Opt] [Record.result_hash]

                      specify a specific record inside a scope (and group) by
                      result-hash
                  name:
                    type: string
                    title: |-
                      [Opt] [Record.result_name]
                      specify a result-name of a record within a scope
          result:
            type: string
            enum:
              - RESULT_TYPE_UNKNOWN
              - RESULT_TYPE_PASS
              - RESULT_TYPE_SKIP
              - RESULT_TYPE_FAIL
            default: RESULT_TYPE_UNKNOWN
            description: ' - RESULT_TYPE_SKIP: Couldn''t process the condition/consideration due to missing facts being generated by other considerations.'
          recorded_at:
            type: object
            properties:
              seconds:
                type: string
                format: int64
                title: Represents seconds of UTC time since Unix epoch
              nanos:
                type: integer
                format: int32
                description: Non-negative fractions of a second at nanosecond resolution.
            description: >-
              A Timestamp represents a point in time using values relative to
              the epoch.
          error_message:
            type: string
  provenance.metadata.v1.p8e.ConditionSpec:
    type: object
    properties:
      func_name:
        type: string
      input_specs:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            resource_location:
              type: object
              properties:
                ref:
                  type: object
                  properties:
                    scope_uuid:
                      title: |-
                        [Req] [Scope.uuid]
                        Scope ID
                      type: object
                      properties:
                        value:
                          type: string
                    group_uuid:
                      title: |-
                        [Opt] [RecordGroup.group_uuid]
                        require record to be within a specific group
                      type: object
                      properties:
                        value:
                          type: string
                    hash:
                      type: string
                      title: >-
                        [Opt] [Record.result_hash]

                        specify a specific record inside a scope (and group) by
                        result-hash
                    name:
                      type: string
                      title: |-
                        [Opt] [Record.result_name]
                        specify a result-name of a record within a scope
                classname:
                  type: string
            signature:
              type: object
              properties:
                algo:
                  type: string
                  title: Signature Detail
                provider:
                  type: string
                signature:
                  type: string
                signer:
                  title: Identity of signer
                  type: object
                  properties:
                    signing_public_key:
                      type: object
                      properties:
                        public_key_bytes:
                          type: string
                          format: byte
                        type:
                          type: string
                          enum:
                            - ELLIPTIC
                          default: ELLIPTIC
                        curve:
                          type: string
                          enum:
                            - SECP256K1
                            - P256
                          default: SECP256K1
                    encryption_public_key:
                      type: object
                      properties:
                        public_key_bytes:
                          type: string
                          format: byte
                        type:
                          type: string
                          enum:
                            - ELLIPTIC
                          default: ELLIPTIC
                        curve:
                          type: string
                          enum:
                            - SECP256K1
                            - P256
                          default: SECP256K1
            type:
              type: string
              enum:
                - DEFINITION_SPEC_TYPE_UNKNOWN
                - DEFINITION_SPEC_TYPE_PROPOSED
                - DEFINITION_SPEC_TYPE_FACT
                - DEFINITION_SPEC_TYPE_FACT_LIST
              default: DEFINITION_SPEC_TYPE_UNKNOWN
      output_spec:
        type: object
        properties:
          spec:
            type: object
            properties:
              name:
                type: string
              resource_location:
                type: object
                properties:
                  ref:
                    type: object
                    properties:
                      scope_uuid:
                        title: |-
                          [Req] [Scope.uuid]
                          Scope ID
                        type: object
                        properties:
                          value:
                            type: string
                      group_uuid:
                        title: |-
                          [Opt] [RecordGroup.group_uuid]
                          require record to be within a specific group
                        type: object
                        properties:
                          value:
                            type: string
                      hash:
                        type: string
                        title: >-
                          [Opt] [Record.result_hash]

                          specify a specific record inside a scope (and group)
                          by result-hash
                      name:
                        type: string
                        title: |-
                          [Opt] [Record.result_name]
                          specify a result-name of a record within a scope
                  classname:
                    type: string
              signature:
                type: object
                properties:
                  algo:
                    type: string
                    title: Signature Detail
                  provider:
                    type: string
                  signature:
                    type: string
                  signer:
                    title: Identity of signer
                    type: object
                    properties:
                      signing_public_key:
                        type: object
                        properties:
                          public_key_bytes:
                            type: string
                            format: byte
                          type:
                            type: string
                            enum:
                              - ELLIPTIC
                            default: ELLIPTIC
                          curve:
                            type: string
                            enum:
                              - SECP256K1
                              - P256
                            default: SECP256K1
                      encryption_public_key:
                        type: object
                        properties:
                          public_key_bytes:
                            type: string
                            format: byte
                          type:
                            type: string
                            enum:
                              - ELLIPTIC
                            default: ELLIPTIC
                          curve:
                            type: string
                            enum:
                              - SECP256K1
                              - P256
                            default: SECP256K1
              type:
                type: string
                enum:
                  - DEFINITION_SPEC_TYPE_UNKNOWN
                  - DEFINITION_SPEC_TYPE_PROPOSED
                  - DEFINITION_SPEC_TYPE_FACT
                  - DEFINITION_SPEC_TYPE_FACT_LIST
                default: DEFINITION_SPEC_TYPE_UNKNOWN
  provenance.metadata.v1.p8e.Consideration:
    type: object
    properties:
      consideration_name:
        type: string
      inputs:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            hash:
              type: string
            classname:
              type: string
            ancestor:
              type: object
              properties:
                scope_uuid:
                  title: |-
                    [Req] [Scope.uuid]
                    Scope ID
                  type: object
                  properties:
                    value:
                      type: string
                group_uuid:
                  title: |-
                    [Opt] [RecordGroup.group_uuid]
                    require record to be within a specific group
                  type: object
                  properties:
                    value:
                      type: string
                hash:
                  type: string
                  title: >-
                    [Opt] [Record.result_hash]

                    specify a specific record inside a scope (and group) by
                    result-hash
                name:
                  type: string
                  title: |-
                    [Opt] [Record.result_name]
                    specify a result-name of a record within a scope
        title: >-
          Data pushed to a consideration that will ultimately match the
          output_spec of the consideration
      result:
        type: object
        properties:
          output:
            type: object
            properties:
              name:
                type: string
              hash:
                type: string
              classname:
                type: string
              ancestor:
                type: object
                properties:
                  scope_uuid:
                    title: |-
                      [Req] [Scope.uuid]
                      Scope ID
                    type: object
                    properties:
                      value:
                        type: string
                  group_uuid:
                    title: |-
                      [Opt] [RecordGroup.group_uuid]
                      require record to be within a specific group
                    type: object
                    properties:
                      value:
                        type: string
                  hash:
                    type: string
                    title: >-
                      [Opt] [Record.result_hash]

                      specify a specific record inside a scope (and group) by
                      result-hash
                  name:
                    type: string
                    title: |-
                      [Opt] [Record.result_name]
                      specify a result-name of a record within a scope
          result:
            type: string
            enum:
              - RESULT_TYPE_UNKNOWN
              - RESULT_TYPE_PASS
              - RESULT_TYPE_SKIP
              - RESULT_TYPE_FAIL
            default: RESULT_TYPE_UNKNOWN
            description: ' - RESULT_TYPE_SKIP: Couldn''t process the condition/consideration due to missing facts being generated by other considerations.'
          recorded_at:
            type: object
            properties:
              seconds:
                type: string
                format: int64
                title: Represents seconds of UTC time since Unix epoch
              nanos:
                type: integer
                format: int32
                description: Non-negative fractions of a second at nanosecond resolution.
            description: >-
              A Timestamp represents a point in time using values relative to
              the epoch.
          error_message:
            type: string
  provenance.metadata.v1.p8e.ConsiderationSpec:
    type: object
    properties:
      func_name:
        type: string
      responsible_party:
        title: Invoking party
        type: string
        enum:
          - PARTY_TYPE_UNKNOWN
          - PARTY_TYPE_ORIGINATOR
          - PARTY_TYPE_SERVICER
          - PARTY_TYPE_INVESTOR
          - PARTY_TYPE_CUSTODIAN
          - PARTY_TYPE_OWNER
          - PARTY_TYPE_AFFILIATE
          - PARTY_TYPE_OMNIBUS
          - PARTY_TYPE_PROVENANCE
          - PARTY_TYPE_MARKER
          - PARTY_TYPE_CONTROLLER
          - PARTY_TYPE_VALIDATOR
        default: PARTY_TYPE_UNKNOWN
      input_specs:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            resource_location:
              type: object
              properties:
                ref:
                  type: object
                  properties:
                    scope_uuid:
                      title: |-
                        [Req] [Scope.uuid]
                        Scope ID
                      type: object
                      properties:
                        value:
                          type: string
                    group_uuid:
                      title: |-
                        [Opt] [RecordGroup.group_uuid]
                        require record to be within a specific group
                      type: object
                      properties:
                        value:
                          type: string
                    hash:
                      type: string
                      title: >-
                        [Opt] [Record.result_hash]

                        specify a specific record inside a scope (and group) by
                        result-hash
                    name:
                      type: string
                      title: |-
                        [Opt] [Record.result_name]
                        specify a result-name of a record within a scope
                classname:
                  type: string
            signature:
              type: object
              properties:
                algo:
                  type: string
                  title: Signature Detail
                provider:
                  type: string
                signature:
                  type: string
                signer:
                  title: Identity of signer
                  type: object
                  properties:
                    signing_public_key:
                      type: object
                      properties:
                        public_key_bytes:
                          type: string
                          format: byte
                        type:
                          type: string
                          enum:
                            - ELLIPTIC
                          default: ELLIPTIC
                        curve:
                          type: string
                          enum:
                            - SECP256K1
                            - P256
                          default: SECP256K1
                    encryption_public_key:
                      type: object
                      properties:
                        public_key_bytes:
                          type: string
                          format: byte
                        type:
                          type: string
                          enum:
                            - ELLIPTIC
                          default: ELLIPTIC
                        curve:
                          type: string
                          enum:
                            - SECP256K1
                            - P256
                          default: SECP256K1
            type:
              type: string
              enum:
                - DEFINITION_SPEC_TYPE_UNKNOWN
                - DEFINITION_SPEC_TYPE_PROPOSED
                - DEFINITION_SPEC_TYPE_FACT
                - DEFINITION_SPEC_TYPE_FACT_LIST
              default: DEFINITION_SPEC_TYPE_UNKNOWN
      output_spec:
        type: object
        properties:
          spec:
            type: object
            properties:
              name:
                type: string
              resource_location:
                type: object
                properties:
                  ref:
                    type: object
                    properties:
                      scope_uuid:
                        title: |-
                          [Req] [Scope.uuid]
                          Scope ID
                        type: object
                        properties:
                          value:
                            type: string
                      group_uuid:
                        title: |-
                          [Opt] [RecordGroup.group_uuid]
                          require record to be within a specific group
                        type: object
                        properties:
                          value:
                            type: string
                      hash:
                        type: string
                        title: >-
                          [Opt] [Record.result_hash]

                          specify a specific record inside a scope (and group)
                          by result-hash
                      name:
                        type: string
                        title: |-
                          [Opt] [Record.result_name]
                          specify a result-name of a record within a scope
                  classname:
                    type: string
              signature:
                type: object
                properties:
                  algo:
                    type: string
                    title: Signature Detail
                  provider:
                    type: string
                  signature:
                    type: string
                  signer:
                    title: Identity of signer
                    type: object
                    properties:
                      signing_public_key:
                        type: object
                        properties:
                          public_key_bytes:
                            type: string
                            format: byte
                          type:
                            type: string
                            enum:
                              - ELLIPTIC
                            default: ELLIPTIC
                          curve:
                            type: string
                            enum:
                              - SECP256K1
                              - P256
                            default: SECP256K1
                      encryption_public_key:
                        type: object
                        properties:
                          public_key_bytes:
                            type: string
                            format: byte
                          type:
                            type: string
                            enum:
                              - ELLIPTIC
                            default: ELLIPTIC
                          curve:
                            type: string
                            enum:
                              - SECP256K1
                              - P256
                            default: SECP256K1
              type:
                type: string
                enum:
                  - DEFINITION_SPEC_TYPE_UNKNOWN
                  - DEFINITION_SPEC_TYPE_PROPOSED
                  - DEFINITION_SPEC_TYPE_FACT
                  - DEFINITION_SPEC_TYPE_FACT_LIST
                default: DEFINITION_SPEC_TYPE_UNKNOWN
  provenance.metadata.v1.p8e.Contract:
    type: object
    properties:
      definition:
        type: object
        properties:
          name:
            type: string
          resource_location:
            type: object
            properties:
              ref:
                type: object
                properties:
                  scope_uuid:
                    title: |-
                      [Req] [Scope.uuid]
                      Scope ID
                    type: object
                    properties:
                      value:
                        type: string
                  group_uuid:
                    title: |-
                      [Opt] [RecordGroup.group_uuid]
                      require record to be within a specific group
                    type: object
                    properties:
                      value:
                        type: string
                  hash:
                    type: string
                    title: >-
                      [Opt] [Record.result_hash]

                      specify a specific record inside a scope (and group) by
                      result-hash
                  name:
                    type: string
                    title: |-
                      [Opt] [Record.result_name]
                      specify a result-name of a record within a scope
              classname:
                type: string
          signature:
            type: object
            properties:
              algo:
                type: string
                title: Signature Detail
              provider:
                type: string
              signature:
                type: string
              signer:
                title: Identity of signer
                type: object
                properties:
                  signing_public_key:
                    type: object
                    properties:
                      public_key_bytes:
                        type: string
                        format: byte
                      type:
                        type: string
                        enum:
                          - ELLIPTIC
                        default: ELLIPTIC
                      curve:
                        type: string
                        enum:
                          - SECP256K1
                          - P256
                        default: SECP256K1
                  encryption_public_key:
                    type: object
                    properties:
                      public_key_bytes:
                        type: string
                        format: byte
                      type:
                        type: string
                        enum:
                          - ELLIPTIC
                        default: ELLIPTIC
                      curve:
                        type: string
                        enum:
                          - SECP256K1
                          - P256
                        default: SECP256K1
          type:
            type: string
            enum:
              - DEFINITION_SPEC_TYPE_UNKNOWN
              - DEFINITION_SPEC_TYPE_PROPOSED
              - DEFINITION_SPEC_TYPE_FACT
              - DEFINITION_SPEC_TYPE_FACT_LIST
            default: DEFINITION_SPEC_TYPE_UNKNOWN
      spec:
        title: Points to the proto for the contractSpec
        type: object
        properties:
          name:
            type: string
          data_location:
            type: object
            properties:
              ref:
                type: object
                properties:
                  scope_uuid:
                    title: |-
                      [Req] [Scope.uuid]
                      Scope ID
                    type: object
                    properties:
                      value:
                        type: string
                  group_uuid:
                    title: |-
                      [Opt] [RecordGroup.group_uuid]
                      require record to be within a specific group
                    type: object
                    properties:
                      value:
                        type: string
                  hash:
                    type: string
                    title: >-
                      [Opt] [Record.result_hash]

                      specify a specific record inside a scope (and group) by
                      result-hash
                  name:
                    type: string
                    title: |-
                      [Opt] [Record.result_name]
                      specify a result-name of a record within a scope
              classname:
                type: string
      invoker:
        title: Invoker of this contract
        type: object
        properties:
          signing_public_key:
            type: object
            properties:
              public_key_bytes:
                type: string
                format: byte
              type:
                type: string
                enum:
                  - ELLIPTIC
                default: ELLIPTIC
              curve:
                type: string
                enum:
                  - SECP256K1
                  - P256
                default: SECP256K1
          encryption_public_key:
            type: object
            properties:
              public_key_bytes:
                type: string
                format: byte
              type:
                type: string
                enum:
                  - ELLIPTIC
                default: ELLIPTIC
              curve:
                type: string
                enum:
                  - SECP256K1
                  - P256
                default: SECP256K1
      inputs:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            data_location:
              type: object
              properties:
                ref:
                  type: object
                  properties:
                    scope_uuid:
                      title: |-
                        [Req] [Scope.uuid]
                        Scope ID
                      type: object
                      properties:
                        value:
                          type: string
                    group_uuid:
                      title: |-
                        [Opt] [RecordGroup.group_uuid]
                        require record to be within a specific group
                      type: object
                      properties:
                        value:
                          type: string
                    hash:
                      type: string
                      title: >-
                        [Opt] [Record.result_hash]

                        specify a specific record inside a scope (and group) by
                        result-hash
                    name:
                      type: string
                      title: |-
                        [Opt] [Record.result_name]
                        specify a result-name of a record within a scope
                classname:
                  type: string
        description: |-
          Constructor arguments.
          These are always the output of a previously recorded consideration.
      conditions:
        type: array
        items:
          type: object
          properties:
            condition_name:
              type: string
            result:
              type: object
              properties:
                output:
                  type: object
                  properties:
                    name:
                      type: string
                    hash:
                      type: string
                    classname:
                      type: string
                    ancestor:
                      type: object
                      properties:
                        scope_uuid:
                          title: |-
                            [Req] [Scope.uuid]
                            Scope ID
                          type: object
                          properties:
                            value:
                              type: string
                        group_uuid:
                          title: |-
                            [Opt] [RecordGroup.group_uuid]
                            require record to be within a specific group
                          type: object
                          properties:
                            value:
                              type: string
                        hash:
                          type: string
                          title: >-
                            [Opt] [Record.result_hash]

                            specify a specific record inside a scope (and group)
                            by result-hash
                        name:
                          type: string
                          title: |-
                            [Opt] [Record.result_name]
                            specify a result-name of a record within a scope
                result:
                  type: string
                  enum:
                    - RESULT_TYPE_UNKNOWN
                    - RESULT_TYPE_PASS
                    - RESULT_TYPE_SKIP
                    - RESULT_TYPE_FAIL
                  default: RESULT_TYPE_UNKNOWN
                  description: ' - RESULT_TYPE_SKIP: Couldn''t process the condition/consideration due to missing facts being generated by other considerations.'
                recorded_at:
                  type: object
                  properties:
                    seconds:
                      type: string
                      format: int64
                      title: Represents seconds of UTC time since Unix epoch
                    nanos:
                      type: integer
                      format: int32
                      description: >-
                        Non-negative fractions of a second at nanosecond
                        resolution.
                  description: >-
                    A Timestamp represents a point in time using values relative
                    to the epoch.
                error_message:
                  type: string
        description: conditions is a deprecated field that is not used at all anymore.
      considerations:
        type: array
        items:
          type: object
          properties:
            consideration_name:
              type: string
            inputs:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  hash:
                    type: string
                  classname:
                    type: string
                  ancestor:
                    type: object
                    properties:
                      scope_uuid:
                        title: |-
                          [Req] [Scope.uuid]
                          Scope ID
                        type: object
                        properties:
                          value:
                            type: string
                      group_uuid:
                        title: |-
                          [Opt] [RecordGroup.group_uuid]
                          require record to be within a specific group
                        type: object
                        properties:
                          value:
                            type: string
                      hash:
                        type: string
                        title: >-
                          [Opt] [Record.result_hash]

                          specify a specific record inside a scope (and group)
                          by result-hash
                      name:
                        type: string
                        title: |-
                          [Opt] [Record.result_name]
                          specify a result-name of a record within a scope
              title: >-
                Data pushed to a consideration that will ultimately match the
                output_spec of the consideration
            result:
              type: object
              properties:
                output:
                  type: object
                  properties:
                    name:
                      type: string
                    hash:
                      type: string
                    classname:
                      type: string
                    ancestor:
                      type: object
                      properties:
                        scope_uuid:
                          title: |-
                            [Req] [Scope.uuid]
                            Scope ID
                          type: object
                          properties:
                            value:
                              type: string
                        group_uuid:
                          title: |-
                            [Opt] [RecordGroup.group_uuid]
                            require record to be within a specific group
                          type: object
                          properties:
                            value:
                              type: string
                        hash:
                          type: string
                          title: >-
                            [Opt] [Record.result_hash]

                            specify a specific record inside a scope (and group)
                            by result-hash
                        name:
                          type: string
                          title: |-
                            [Opt] [Record.result_name]
                            specify a result-name of a record within a scope
                result:
                  type: string
                  enum:
                    - RESULT_TYPE_UNKNOWN
                    - RESULT_TYPE_PASS
                    - RESULT_TYPE_SKIP
                    - RESULT_TYPE_FAIL
                  default: RESULT_TYPE_UNKNOWN
                  description: ' - RESULT_TYPE_SKIP: Couldn''t process the condition/consideration due to missing facts being generated by other considerations.'
                recorded_at:
                  type: object
                  properties:
                    seconds:
                      type: string
                      format: int64
                      title: Represents seconds of UTC time since Unix epoch
                    nanos:
                      type: integer
                      format: int32
                      description: >-
                        Non-negative fractions of a second at nanosecond
                        resolution.
                  description: >-
                    A Timestamp represents a point in time using values relative
                    to the epoch.
                error_message:
                  type: string
      recitals:
        type: array
        items:
          type: object
          properties:
            signer_role:
              type: string
              enum:
                - PARTY_TYPE_UNKNOWN
                - PARTY_TYPE_ORIGINATOR
                - PARTY_TYPE_SERVICER
                - PARTY_TYPE_INVESTOR
                - PARTY_TYPE_CUSTODIAN
                - PARTY_TYPE_OWNER
                - PARTY_TYPE_AFFILIATE
                - PARTY_TYPE_OMNIBUS
                - PARTY_TYPE_PROVENANCE
                - PARTY_TYPE_MARKER
                - PARTY_TYPE_CONTROLLER
                - PARTY_TYPE_VALIDATOR
              default: PARTY_TYPE_UNKNOWN
            signer:
              type: object
              properties:
                signing_public_key:
                  type: object
                  properties:
                    public_key_bytes:
                      type: string
                      format: byte
                    type:
                      type: string
                      enum:
                        - ELLIPTIC
                      default: ELLIPTIC
                    curve:
                      type: string
                      enum:
                        - SECP256K1
                        - P256
                      default: SECP256K1
                encryption_public_key:
                  type: object
                  properties:
                    public_key_bytes:
                      type: string
                      format: byte
                    type:
                      type: string
                      enum:
                        - ELLIPTIC
                      default: ELLIPTIC
                    curve:
                      type: string
                      enum:
                        - SECP256K1
                        - P256
                      default: SECP256K1
            address:
              type: string
              format: byte
      times_executed:
        type: integer
        format: int32
      start_time:
        type: object
        properties:
          seconds:
            type: string
            format: int64
            title: Represents seconds of UTC time since Unix epoch
          nanos:
            type: integer
            format: int32
            description: Non-negative fractions of a second at nanosecond resolution.
        description: >-
          A Timestamp represents a point in time using values relative to the
          epoch.
        title: This is only set once when the contract is initially executed
      context:
        type: string
        format: byte
  provenance.metadata.v1.p8e.ContractSpec:
    type: object
    properties:
      definition:
        type: object
        properties:
          name:
            type: string
          resource_location:
            type: object
            properties:
              ref:
                type: object
                properties:
                  scope_uuid:
                    title: |-
                      [Req] [Scope.uuid]
                      Scope ID
                    type: object
                    properties:
                      value:
                        type: string
                  group_uuid:
                    title: |-
                      [Opt] [RecordGroup.group_uuid]
                      require record to be within a specific group
                    type: object
                    properties:
                      value:
                        type: string
                  hash:
                    type: string
                    title: >-
                      [Opt] [Record.result_hash]

                      specify a specific record inside a scope (and group) by
                      result-hash
                  name:
                    type: string
                    title: |-
                      [Opt] [Record.result_name]
                      specify a result-name of a record within a scope
              classname:
                type: string
          signature:
            type: object
            properties:
              algo:
                type: string
                title: Signature Detail
              provider:
                type: string
              signature:
                type: string
              signer:
                title: Identity of signer
                type: object
                properties:
                  signing_public_key:
                    type: object
                    properties:
                      public_key_bytes:
                        type: string
                        format: byte
                      type:
                        type: string
                        enum:
                          - ELLIPTIC
                        default: ELLIPTIC
                      curve:
                        type: string
                        enum:
                          - SECP256K1
                          - P256
                        default: SECP256K1
                  encryption_public_key:
                    type: object
                    properties:
                      public_key_bytes:
                        type: string
                        format: byte
                      type:
                        type: string
                        enum:
                          - ELLIPTIC
                        default: ELLIPTIC
                      curve:
                        type: string
                        enum:
                          - SECP256K1
                          - P256
                        default: SECP256K1
          type:
            type: string
            enum:
              - DEFINITION_SPEC_TYPE_UNKNOWN
              - DEFINITION_SPEC_TYPE_PROPOSED
              - DEFINITION_SPEC_TYPE_FACT
              - DEFINITION_SPEC_TYPE_FACT_LIST
            default: DEFINITION_SPEC_TYPE_UNKNOWN
      input_specs:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            resource_location:
              type: object
              properties:
                ref:
                  type: object
                  properties:
                    scope_uuid:
                      title: |-
                        [Req] [Scope.uuid]
                        Scope ID
                      type: object
                      properties:
                        value:
                          type: string
                    group_uuid:
                      title: |-
                        [Opt] [RecordGroup.group_uuid]
                        require record to be within a specific group
                      type: object
                      properties:
                        value:
                          type: string
                    hash:
                      type: string
                      title: >-
                        [Opt] [Record.result_hash]

                        specify a specific record inside a scope (and group) by
                        result-hash
                    name:
                      type: string
                      title: |-
                        [Opt] [Record.result_name]
                        specify a result-name of a record within a scope
                classname:
                  type: string
            signature:
              type: object
              properties:
                algo:
                  type: string
                  title: Signature Detail
                provider:
                  type: string
                signature:
                  type: string
                signer:
                  title: Identity of signer
                  type: object
                  properties:
                    signing_public_key:
                      type: object
                      properties:
                        public_key_bytes:
                          type: string
                          format: byte
                        type:
                          type: string
                          enum:
                            - ELLIPTIC
                          default: ELLIPTIC
                        curve:
                          type: string
                          enum:
                            - SECP256K1
                            - P256
                          default: SECP256K1
                    encryption_public_key:
                      type: object
                      properties:
                        public_key_bytes:
                          type: string
                          format: byte
                        type:
                          type: string
                          enum:
                            - ELLIPTIC
                          default: ELLIPTIC
                        curve:
                          type: string
                          enum:
                            - SECP256K1
                            - P256
                          default: SECP256K1
            type:
              type: string
              enum:
                - DEFINITION_SPEC_TYPE_UNKNOWN
                - DEFINITION_SPEC_TYPE_PROPOSED
                - DEFINITION_SPEC_TYPE_FACT
                - DEFINITION_SPEC_TYPE_FACT_LIST
              default: DEFINITION_SPEC_TYPE_UNKNOWN
      parties_involved:
        type: array
        items:
          type: string
          enum:
            - PARTY_TYPE_UNKNOWN
            - PARTY_TYPE_ORIGINATOR
            - PARTY_TYPE_SERVICER
            - PARTY_TYPE_INVESTOR
            - PARTY_TYPE_CUSTODIAN
            - PARTY_TYPE_OWNER
            - PARTY_TYPE_AFFILIATE
            - PARTY_TYPE_OMNIBUS
            - PARTY_TYPE_PROVENANCE
            - PARTY_TYPE_MARKER
            - PARTY_TYPE_CONTROLLER
            - PARTY_TYPE_VALIDATOR
          default: PARTY_TYPE_UNKNOWN
      condition_specs:
        type: array
        items:
          type: object
          properties:
            func_name:
              type: string
            input_specs:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  resource_location:
                    type: object
                    properties:
                      ref:
                        type: object
                        properties:
                          scope_uuid:
                            title: |-
                              [Req] [Scope.uuid]
                              Scope ID
                            type: object
                            properties:
                              value:
                                type: string
                          group_uuid:
                            title: |-
                              [Opt] [RecordGroup.group_uuid]
                              require record to be within a specific group
                            type: object
                            properties:
                              value:
                                type: string
                          hash:
                            type: string
                            title: >-
                              [Opt] [Record.result_hash]

                              specify a specific record inside a scope (and
                              group) by result-hash
                          name:
                            type: string
                            title: |-
                              [Opt] [Record.result_name]
                              specify a result-name of a record within a scope
                      classname:
                        type: string
                  signature:
                    type: object
                    properties:
                      algo:
                        type: string
                        title: Signature Detail
                      provider:
                        type: string
                      signature:
                        type: string
                      signer:
                        title: Identity of signer
                        type: object
                        properties:
                          signing_public_key:
                            type: object
                            properties:
                              public_key_bytes:
                                type: string
                                format: byte
                              type:
                                type: string
                                enum:
                                  - ELLIPTIC
                                default: ELLIPTIC
                              curve:
                                type: string
                                enum:
                                  - SECP256K1
                                  - P256
                                default: SECP256K1
                          encryption_public_key:
                            type: object
                            properties:
                              public_key_bytes:
                                type: string
                                format: byte
                              type:
                                type: string
                                enum:
                                  - ELLIPTIC
                                default: ELLIPTIC
                              curve:
                                type: string
                                enum:
                                  - SECP256K1
                                  - P256
                                default: SECP256K1
                  type:
                    type: string
                    enum:
                      - DEFINITION_SPEC_TYPE_UNKNOWN
                      - DEFINITION_SPEC_TYPE_PROPOSED
                      - DEFINITION_SPEC_TYPE_FACT
                      - DEFINITION_SPEC_TYPE_FACT_LIST
                    default: DEFINITION_SPEC_TYPE_UNKNOWN
            output_spec:
              type: object
              properties:
                spec:
                  type: object
                  properties:
                    name:
                      type: string
                    resource_location:
                      type: object
                      properties:
                        ref:
                          type: object
                          properties:
                            scope_uuid:
                              title: |-
                                [Req] [Scope.uuid]
                                Scope ID
                              type: object
                              properties:
                                value:
                                  type: string
                            group_uuid:
                              title: |-
                                [Opt] [RecordGroup.group_uuid]
                                require record to be within a specific group
                              type: object
                              properties:
                                value:
                                  type: string
                            hash:
                              type: string
                              title: >-
                                [Opt] [Record.result_hash]

                                specify a specific record inside a scope (and
                                group) by result-hash
                            name:
                              type: string
                              title: |-
                                [Opt] [Record.result_name]
                                specify a result-name of a record within a scope
                        classname:
                          type: string
                    signature:
                      type: object
                      properties:
                        algo:
                          type: string
                          title: Signature Detail
                        provider:
                          type: string
                        signature:
                          type: string
                        signer:
                          title: Identity of signer
                          type: object
                          properties:
                            signing_public_key:
                              type: object
                              properties:
                                public_key_bytes:
                                  type: string
                                  format: byte
                                type:
                                  type: string
                                  enum:
                                    - ELLIPTIC
                                  default: ELLIPTIC
                                curve:
                                  type: string
                                  enum:
                                    - SECP256K1
                                    - P256
                                  default: SECP256K1
                            encryption_public_key:
                              type: object
                              properties:
                                public_key_bytes:
                                  type: string
                                  format: byte
                                type:
                                  type: string
                                  enum:
                                    - ELLIPTIC
                                  default: ELLIPTIC
                                curve:
                                  type: string
                                  enum:
                                    - SECP256K1
                                    - P256
                                  default: SECP256K1
                    type:
                      type: string
                      enum:
                        - DEFINITION_SPEC_TYPE_UNKNOWN
                        - DEFINITION_SPEC_TYPE_PROPOSED
                        - DEFINITION_SPEC_TYPE_FACT
                        - DEFINITION_SPEC_TYPE_FACT_LIST
                      default: DEFINITION_SPEC_TYPE_UNKNOWN
      consideration_specs:
        type: array
        items:
          type: object
          properties:
            func_name:
              type: string
            responsible_party:
              title: Invoking party
              type: string
              enum:
                - PARTY_TYPE_UNKNOWN
                - PARTY_TYPE_ORIGINATOR
                - PARTY_TYPE_SERVICER
                - PARTY_TYPE_INVESTOR
                - PARTY_TYPE_CUSTODIAN
                - PARTY_TYPE_OWNER
                - PARTY_TYPE_AFFILIATE
                - PARTY_TYPE_OMNIBUS
                - PARTY_TYPE_PROVENANCE
                - PARTY_TYPE_MARKER
                - PARTY_TYPE_CONTROLLER
                - PARTY_TYPE_VALIDATOR
              default: PARTY_TYPE_UNKNOWN
            input_specs:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  resource_location:
                    type: object
                    properties:
                      ref:
                        type: object
                        properties:
                          scope_uuid:
                            title: |-
                              [Req] [Scope.uuid]
                              Scope ID
                            type: object
                            properties:
                              value:
                                type: string
                          group_uuid:
                            title: |-
                              [Opt] [RecordGroup.group_uuid]
                              require record to be within a specific group
                            type: object
                            properties:
                              value:
                                type: string
                          hash:
                            type: string
                            title: >-
                              [Opt] [Record.result_hash]

                              specify a specific record inside a scope (and
                              group) by result-hash
                          name:
                            type: string
                            title: |-
                              [Opt] [Record.result_name]
                              specify a result-name of a record within a scope
                      classname:
                        type: string
                  signature:
                    type: object
                    properties:
                      algo:
                        type: string
                        title: Signature Detail
                      provider:
                        type: string
                      signature:
                        type: string
                      signer:
                        title: Identity of signer
                        type: object
                        properties:
                          signing_public_key:
                            type: object
                            properties:
                              public_key_bytes:
                                type: string
                                format: byte
                              type:
                                type: string
                                enum:
                                  - ELLIPTIC
                                default: ELLIPTIC
                              curve:
                                type: string
                                enum:
                                  - SECP256K1
                                  - P256
                                default: SECP256K1
                          encryption_public_key:
                            type: object
                            properties:
                              public_key_bytes:
                                type: string
                                format: byte
                              type:
                                type: string
                                enum:
                                  - ELLIPTIC
                                default: ELLIPTIC
                              curve:
                                type: string
                                enum:
                                  - SECP256K1
                                  - P256
                                default: SECP256K1
                  type:
                    type: string
                    enum:
                      - DEFINITION_SPEC_TYPE_UNKNOWN
                      - DEFINITION_SPEC_TYPE_PROPOSED
                      - DEFINITION_SPEC_TYPE_FACT
                      - DEFINITION_SPEC_TYPE_FACT_LIST
                    default: DEFINITION_SPEC_TYPE_UNKNOWN
            output_spec:
              type: object
              properties:
                spec:
                  type: object
                  properties:
                    name:
                      type: string
                    resource_location:
                      type: object
                      properties:
                        ref:
                          type: object
                          properties:
                            scope_uuid:
                              title: |-
                                [Req] [Scope.uuid]
                                Scope ID
                              type: object
                              properties:
                                value:
                                  type: string
                            group_uuid:
                              title: |-
                                [Opt] [RecordGroup.group_uuid]
                                require record to be within a specific group
                              type: object
                              properties:
                                value:
                                  type: string
                            hash:
                              type: string
                              title: >-
                                [Opt] [Record.result_hash]

                                specify a specific record inside a scope (and
                                group) by result-hash
                            name:
                              type: string
                              title: |-
                                [Opt] [Record.result_name]
                                specify a result-name of a record within a scope
                        classname:
                          type: string
                    signature:
                      type: object
                      properties:
                        algo:
                          type: string
                          title: Signature Detail
                        provider:
                          type: string
                        signature:
                          type: string
                        signer:
                          title: Identity of signer
                          type: object
                          properties:
                            signing_public_key:
                              type: object
                              properties:
                                public_key_bytes:
                                  type: string
                                  format: byte
                                type:
                                  type: string
                                  enum:
                                    - ELLIPTIC
                                  default: ELLIPTIC
                                curve:
                                  type: string
                                  enum:
                                    - SECP256K1
                                    - P256
                                  default: SECP256K1
                            encryption_public_key:
                              type: object
                              properties:
                                public_key_bytes:
                                  type: string
                                  format: byte
                                type:
                                  type: string
                                  enum:
                                    - ELLIPTIC
                                  default: ELLIPTIC
                                curve:
                                  type: string
                                  enum:
                                    - SECP256K1
                                    - P256
                                  default: SECP256K1
                    type:
                      type: string
                      enum:
                        - DEFINITION_SPEC_TYPE_UNKNOWN
                        - DEFINITION_SPEC_TYPE_PROPOSED
                        - DEFINITION_SPEC_TYPE_FACT
                        - DEFINITION_SPEC_TYPE_FACT_LIST
                      default: DEFINITION_SPEC_TYPE_UNKNOWN
  provenance.metadata.v1.p8e.DefinitionSpec:
    type: object
    properties:
      name:
        type: string
      resource_location:
        type: object
        properties:
          ref:
            type: object
            properties:
              scope_uuid:
                title: |-
                  [Req] [Scope.uuid]
                  Scope ID
                type: object
                properties:
                  value:
                    type: string
              group_uuid:
                title: |-
                  [Opt] [RecordGroup.group_uuid]
                  require record to be within a specific group
                type: object
                properties:
                  value:
                    type: string
              hash:
                type: string
                title: >-
                  [Opt] [Record.result_hash]

                  specify a specific record inside a scope (and group) by
                  result-hash
              name:
                type: string
                title: |-
                  [Opt] [Record.result_name]
                  specify a result-name of a record within a scope
          classname:
            type: string
      signature:
        type: object
        properties:
          algo:
            type: string
            title: Signature Detail
          provider:
            type: string
          signature:
            type: string
          signer:
            title: Identity of signer
            type: object
            properties:
              signing_public_key:
                type: object
                properties:
                  public_key_bytes:
                    type: string
                    format: byte
                  type:
                    type: string
                    enum:
                      - ELLIPTIC
                    default: ELLIPTIC
                  curve:
                    type: string
                    enum:
                      - SECP256K1
                      - P256
                    default: SECP256K1
              encryption_public_key:
                type: object
                properties:
                  public_key_bytes:
                    type: string
                    format: byte
                  type:
                    type: string
                    enum:
                      - ELLIPTIC
                    default: ELLIPTIC
                  curve:
                    type: string
                    enum:
                      - SECP256K1
                      - P256
                    default: SECP256K1
      type:
        type: string
        enum:
          - DEFINITION_SPEC_TYPE_UNKNOWN
          - DEFINITION_SPEC_TYPE_PROPOSED
          - DEFINITION_SPEC_TYPE_FACT
          - DEFINITION_SPEC_TYPE_FACT_LIST
        default: DEFINITION_SPEC_TYPE_UNKNOWN
  provenance.metadata.v1.p8e.DefinitionSpecType:
    type: string
    enum:
      - DEFINITION_SPEC_TYPE_UNKNOWN
      - DEFINITION_SPEC_TYPE_PROPOSED
      - DEFINITION_SPEC_TYPE_FACT
      - DEFINITION_SPEC_TYPE_FACT_LIST
    default: DEFINITION_SPEC_TYPE_UNKNOWN
  provenance.metadata.v1.p8e.ExecutionResult:
    type: object
    properties:
      output:
        type: object
        properties:
          name:
            type: string
          hash:
            type: string
          classname:
            type: string
          ancestor:
            type: object
            properties:
              scope_uuid:
                title: |-
                  [Req] [Scope.uuid]
                  Scope ID
                type: object
                properties:
                  value:
                    type: string
              group_uuid:
                title: |-
                  [Opt] [RecordGroup.group_uuid]
                  require record to be within a specific group
                type: object
                properties:
                  value:
                    type: string
              hash:
                type: string
                title: >-
                  [Opt] [Record.result_hash]

                  specify a specific record inside a scope (and group) by
                  result-hash
              name:
                type: string
                title: |-
                  [Opt] [Record.result_name]
                  specify a result-name of a record within a scope
      result:
        type: string
        enum:
          - RESULT_TYPE_UNKNOWN
          - RESULT_TYPE_PASS
          - RESULT_TYPE_SKIP
          - RESULT_TYPE_FAIL
        default: RESULT_TYPE_UNKNOWN
        description: ' - RESULT_TYPE_SKIP: Couldn''t process the condition/consideration due to missing facts being generated by other considerations.'
      recorded_at:
        type: object
        properties:
          seconds:
            type: string
            format: int64
            title: Represents seconds of UTC time since Unix epoch
          nanos:
            type: integer
            format: int32
            description: Non-negative fractions of a second at nanosecond resolution.
        description: >-
          A Timestamp represents a point in time using values relative to the
          epoch.
      error_message:
        type: string
  provenance.metadata.v1.p8e.ExecutionResultType:
    type: string
    enum:
      - RESULT_TYPE_UNKNOWN
      - RESULT_TYPE_PASS
      - RESULT_TYPE_SKIP
      - RESULT_TYPE_FAIL
    default: RESULT_TYPE_UNKNOWN
    description: ' - RESULT_TYPE_SKIP: Couldn''t process the condition/consideration due to missing facts being generated by other considerations.'
  provenance.metadata.v1.p8e.Fact:
    type: object
    properties:
      name:
        type: string
      data_location:
        type: object
        properties:
          ref:
            type: object
            properties:
              scope_uuid:
                title: |-
                  [Req] [Scope.uuid]
                  Scope ID
                type: object
                properties:
                  value:
                    type: string
              group_uuid:
                title: |-
                  [Opt] [RecordGroup.group_uuid]
                  require record to be within a specific group
                type: object
                properties:
                  value:
                    type: string
              hash:
                type: string
                title: >-
                  [Opt] [Record.result_hash]

                  specify a specific record inside a scope (and group) by
                  result-hash
              name:
                type: string
                title: |-
                  [Opt] [Record.result_name]
                  specify a result-name of a record within a scope
          classname:
            type: string
  provenance.metadata.v1.p8e.Location:
    type: object
    properties:
      ref:
        type: object
        properties:
          scope_uuid:
            title: |-
              [Req] [Scope.uuid]
              Scope ID
            type: object
            properties:
              value:
                type: string
          group_uuid:
            title: |-
              [Opt] [RecordGroup.group_uuid]
              require record to be within a specific group
            type: object
            properties:
              value:
                type: string
          hash:
            type: string
            title: >-
              [Opt] [Record.result_hash]

              specify a specific record inside a scope (and group) by
              result-hash
          name:
            type: string
            title: |-
              [Opt] [Record.result_name]
              specify a result-name of a record within a scope
      classname:
        type: string
  provenance.metadata.v1.p8e.OutputSpec:
    type: object
    properties:
      spec:
        type: object
        properties:
          name:
            type: string
          resource_location:
            type: object
            properties:
              ref:
                type: object
                properties:
                  scope_uuid:
                    title: |-
                      [Req] [Scope.uuid]
                      Scope ID
                    type: object
                    properties:
                      value:
                        type: string
                  group_uuid:
                    title: |-
                      [Opt] [RecordGroup.group_uuid]
                      require record to be within a specific group
                    type: object
                    properties:
                      value:
                        type: string
                  hash:
                    type: string
                    title: >-
                      [Opt] [Record.result_hash]

                      specify a specific record inside a scope (and group) by
                      result-hash
                  name:
                    type: string
                    title: |-
                      [Opt] [Record.result_name]
                      specify a result-name of a record within a scope
              classname:
                type: string
          signature:
            type: object
            properties:
              algo:
                type: string
                title: Signature Detail
              provider:
                type: string
              signature:
                type: string
              signer:
                title: Identity of signer
                type: object
                properties:
                  signing_public_key:
                    type: object
                    properties:
                      public_key_bytes:
                        type: string
                        format: byte
                      type:
                        type: string
                        enum:
                          - ELLIPTIC
                        default: ELLIPTIC
                      curve:
                        type: string
                        enum:
                          - SECP256K1
                          - P256
                        default: SECP256K1
                  encryption_public_key:
                    type: object
                    properties:
                      public_key_bytes:
                        type: string
                        format: byte
                      type:
                        type: string
                        enum:
                          - ELLIPTIC
                        default: ELLIPTIC
                      curve:
                        type: string
                        enum:
                          - SECP256K1
                          - P256
                        default: SECP256K1
          type:
            type: string
            enum:
              - DEFINITION_SPEC_TYPE_UNKNOWN
              - DEFINITION_SPEC_TYPE_PROPOSED
              - DEFINITION_SPEC_TYPE_FACT
              - DEFINITION_SPEC_TYPE_FACT_LIST
            default: DEFINITION_SPEC_TYPE_UNKNOWN
  provenance.metadata.v1.p8e.PartyType:
    type: string
    enum:
      - PARTY_TYPE_UNKNOWN
      - PARTY_TYPE_ORIGINATOR
      - PARTY_TYPE_SERVICER
      - PARTY_TYPE_INVESTOR
      - PARTY_TYPE_CUSTODIAN
      - PARTY_TYPE_OWNER
      - PARTY_TYPE_AFFILIATE
      - PARTY_TYPE_OMNIBUS
      - PARTY_TYPE_PROVENANCE
      - PARTY_TYPE_MARKER
      - PARTY_TYPE_CONTROLLER
      - PARTY_TYPE_VALIDATOR
    default: PARTY_TYPE_UNKNOWN
  provenance.metadata.v1.p8e.ProposedFact:
    type: object
    properties:
      name:
        type: string
      hash:
        type: string
      classname:
        type: string
      ancestor:
        type: object
        properties:
          scope_uuid:
            title: |-
              [Req] [Scope.uuid]
              Scope ID
            type: object
            properties:
              value:
                type: string
          group_uuid:
            title: |-
              [Opt] [RecordGroup.group_uuid]
              require record to be within a specific group
            type: object
            properties:
              value:
                type: string
          hash:
            type: string
            title: >-
              [Opt] [Record.result_hash]

              specify a specific record inside a scope (and group) by
              result-hash
          name:
            type: string
            title: |-
              [Opt] [Record.result_name]
              specify a result-name of a record within a scope
  provenance.metadata.v1.p8e.ProvenanceReference:
    type: object
    properties:
      scope_uuid:
        title: |-
          [Req] [Scope.uuid]
          Scope ID
        type: object
        properties:
          value:
            type: string
      group_uuid:
        title: |-
          [Opt] [RecordGroup.group_uuid]
          require record to be within a specific group
        type: object
        properties:
          value:
            type: string
      hash:
        type: string
        title: |-
          [Opt] [Record.result_hash]
          specify a specific record inside a scope (and group) by result-hash
      name:
        type: string
        title: |-
          [Opt] [Record.result_name]
          specify a result-name of a record within a scope
  provenance.metadata.v1.p8e.PublicKey:
    type: object
    properties:
      public_key_bytes:
        type: string
        format: byte
      type:
        type: string
        enum:
          - ELLIPTIC
        default: ELLIPTIC
      curve:
        type: string
        enum:
          - SECP256K1
          - P256
        default: SECP256K1
  provenance.metadata.v1.p8e.PublicKeyCurve:
    type: string
    enum:
      - SECP256K1
      - P256
    default: SECP256K1
  provenance.metadata.v1.p8e.PublicKeyType:
    type: string
    enum:
      - ELLIPTIC
    default: ELLIPTIC
  provenance.metadata.v1.p8e.Recital:
    type: object
    properties:
      signer_role:
        type: string
        enum:
          - PARTY_TYPE_UNKNOWN
          - PARTY_TYPE_ORIGINATOR
          - PARTY_TYPE_SERVICER
          - PARTY_TYPE_INVESTOR
          - PARTY_TYPE_CUSTODIAN
          - PARTY_TYPE_OWNER
          - PARTY_TYPE_AFFILIATE
          - PARTY_TYPE_OMNIBUS
          - PARTY_TYPE_PROVENANCE
          - PARTY_TYPE_MARKER
          - PARTY_TYPE_CONTROLLER
          - PARTY_TYPE_VALIDATOR
        default: PARTY_TYPE_UNKNOWN
      signer:
        type: object
        properties:
          signing_public_key:
            type: object
            properties:
              public_key_bytes:
                type: string
                format: byte
              type:
                type: string
                enum:
                  - ELLIPTIC
                default: ELLIPTIC
              curve:
                type: string
                enum:
                  - SECP256K1
                  - P256
                default: SECP256K1
          encryption_public_key:
            type: object
            properties:
              public_key_bytes:
                type: string
                format: byte
              type:
                type: string
                enum:
                  - ELLIPTIC
                default: ELLIPTIC
              curve:
                type: string
                enum:
                  - SECP256K1
                  - P256
                default: SECP256K1
      address:
        type: string
        format: byte
  provenance.metadata.v1.p8e.Recitals:
    type: object
    properties:
      parties:
        type: array
        items:
          type: object
          properties:
            signer_role:
              type: string
              enum:
                - PARTY_TYPE_UNKNOWN
                - PARTY_TYPE_ORIGINATOR
                - PARTY_TYPE_SERVICER
                - PARTY_TYPE_INVESTOR
                - PARTY_TYPE_CUSTODIAN
                - PARTY_TYPE_OWNER
                - PARTY_TYPE_AFFILIATE
                - PARTY_TYPE_OMNIBUS
                - PARTY_TYPE_PROVENANCE
                - PARTY_TYPE_MARKER
                - PARTY_TYPE_CONTROLLER
                - PARTY_TYPE_VALIDATOR
              default: PARTY_TYPE_UNKNOWN
            signer:
              type: object
              properties:
                signing_public_key:
                  type: object
                  properties:
                    public_key_bytes:
                      type: string
                      format: byte
                    type:
                      type: string
                      enum:
                        - ELLIPTIC
                      default: ELLIPTIC
                    curve:
                      type: string
                      enum:
                        - SECP256K1
                        - P256
                      default: SECP256K1
                encryption_public_key:
                  type: object
                  properties:
                    public_key_bytes:
                      type: string
                      format: byte
                    type:
                      type: string
                      enum:
                        - ELLIPTIC
                      default: ELLIPTIC
                    curve:
                      type: string
                      enum:
                        - SECP256K1
                        - P256
                      default: SECP256K1
            address:
              type: string
              format: byte
  provenance.metadata.v1.p8e.Signature:
    type: object
    properties:
      algo:
        type: string
        title: Signature Detail
      provider:
        type: string
      signature:
        type: string
      signer:
        title: Identity of signer
        type: object
        properties:
          signing_public_key:
            type: object
            properties:
              public_key_bytes:
                type: string
                format: byte
              type:
                type: string
                enum:
                  - ELLIPTIC
                default: ELLIPTIC
              curve:
                type: string
                enum:
                  - SECP256K1
                  - P256
                default: SECP256K1
          encryption_public_key:
            type: object
            properties:
              public_key_bytes:
                type: string
                format: byte
              type:
                type: string
                enum:
                  - ELLIPTIC
                default: ELLIPTIC
              curve:
                type: string
                enum:
                  - SECP256K1
                  - P256
                default: SECP256K1
  provenance.metadata.v1.p8e.SignatureSet:
    type: object
    properties:
      signatures:
        type: array
        items:
          type: object
          properties:
            algo:
              type: string
              title: Signature Detail
            provider:
              type: string
            signature:
              type: string
            signer:
              title: Identity of signer
              type: object
              properties:
                signing_public_key:
                  type: object
                  properties:
                    public_key_bytes:
                      type: string
                      format: byte
                    type:
                      type: string
                      enum:
                        - ELLIPTIC
                      default: ELLIPTIC
                    curve:
                      type: string
                      enum:
                        - SECP256K1
                        - P256
                      default: SECP256K1
                encryption_public_key:
                  type: object
                  properties:
                    public_key_bytes:
                      type: string
                      format: byte
                    type:
                      type: string
                      enum:
                        - ELLIPTIC
                      default: ELLIPTIC
                    curve:
                      type: string
                      enum:
                        - SECP256K1
                        - P256
                      default: SECP256K1
  provenance.metadata.v1.p8e.SigningAndEncryptionPublicKeys:
    type: object
    properties:
      signing_public_key:
        type: object
        properties:
          public_key_bytes:
            type: string
            format: byte
          type:
            type: string
            enum:
              - ELLIPTIC
            default: ELLIPTIC
          curve:
            type: string
            enum:
              - SECP256K1
              - P256
            default: SECP256K1
      encryption_public_key:
        type: object
        properties:
          public_key_bytes:
            type: string
            format: byte
          type:
            type: string
            enum:
              - ELLIPTIC
            default: ELLIPTIC
          curve:
            type: string
            enum:
              - SECP256K1
              - P256
            default: SECP256K1
  provenance.metadata.v1.p8e.Timestamp:
    type: object
    properties:
      seconds:
        type: string
        format: int64
        title: Represents seconds of UTC time since Unix epoch
      nanos:
        type: integer
        format: int32
        description: Non-negative fractions of a second at nanosecond resolution.
    description: A Timestamp represents a point in time using values relative to the epoch.
  provenance.metadata.v1.p8e.UUID:
    type: object
    properties:
      value:
        type: string
  provenance.name.v1.Params:
    type: object
    properties:
      max_segment_length:
        type: integer
        format: int64
        title: maximum length of name segment to allow
      min_segment_length:
        type: integer
        format: int64
        title: minimum length of name segment to allow
      max_name_levels:
        type: integer
        format: int64
        title: >-
          maximum number of name segments to allow.  Example: `foo.bar.baz`
          would be 3
      allow_unrestricted_names:
        type: boolean
        format: boolean
        title: determines if unrestricted name keys are allowed or not
    description: Params defines the set of params for the name module.
  provenance.name.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          max_segment_length:
            type: integer
            format: int64
            title: maximum length of name segment to allow
          min_segment_length:
            type: integer
            format: int64
            title: minimum length of name segment to allow
          max_name_levels:
            type: integer
            format: int64
            title: >-
              maximum number of name segments to allow.  Example: `foo.bar.baz`
              would be 3
          allow_unrestricted_names:
            type: boolean
            format: boolean
            title: determines if unrestricted name keys are allowed or not
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  provenance.name.v1.QueryResolveResponse:
    type: object
    properties:
      address:
        type: string
        title: a string containing the address the name resolves to
      restricted:
        type: boolean
        format: boolean
        description: Whether owner signature is required to add sub-names.
    description: QueryResolveResponse is the response type for the Query/Resolve method.
  provenance.name.v1.QueryReverseLookupResponse:
    type: object
    properties:
      name:
        type: array
        items:
          type: string
        title: an array of names bound against a given address
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryReverseLookupResponse is the response type for the Query/Resolve
      method.
  provenance.name.v1.MsgBindNameResponse:
    type: object
    description: MsgBindNameResponse defines the Msg/BindName response type.
  provenance.name.v1.MsgDeleteNameResponse:
    type: object
    description: MsgDeleteNameResponse defines the Msg/DeleteName response type.
  provenance.name.v1.NameRecord:
    type: object
    properties:
      name:
        type: string
        title: The bound name
      address:
        type: string
        description: The address the name resolved to.
      restricted:
        type: boolean
        format: boolean
        description: Whether owner signature is required to add sub-names.
    title: >-
      NameRecord is a structure used to bind ownership of a name hierarchy to a
      collection of addresses
  provenance.msgfees.v1.CalculateTxFeesRequest:
    type: object
    properties:
      tx_bytes:
        type: string
        format: byte
        description: tx_bytes is the transaction to simulate.
      default_base_denom:
        type: string
        description: |-
          default_base_denom is used to set the denom used for gas fees
          if not set it will default to nhash.
      gas_adjustment:
        type: number
        format: float
        title: >-
          gas_adjustment is the adjustment factor to be multiplied against the
          estimate returned by the tx simulation
    description: CalculateTxFeesRequest is the request type for the Query RPC method.
  provenance.msgfees.v1.CalculateTxFeesResponse:
    type: object
    properties:
      additional_fees:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: additional_fees are the amount of coins to be for addition msg fees
      total_fees:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: >-
          total_fees are the total amount of fees needed for the transactions
          (msg fees + gas fee)

          note: the gas fee is calculated with the floor gas price module param.
      estimated_gas:
        type: string
        format: uint64
        title: estimated_gas is the amount of gas needed for the transaction
    description: CalculateTxFeesResponse is the response type for the Query RPC method.
  provenance.msgfees.v1.MsgFee:
    type: object
    properties:
      msg_type_url:
        type: string
      additional_fee:
        title: >-
          additional_fee can pay in any Coin( basically a Denom and Amount,
          Amount can be zero)
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    title: |-
      MsgFee is the core of what gets stored on the blockchain
      it consists of two parts
      1. the msg type url, i.e. /cosmos.bank.v1beta1.MsgSend
      2. minimum additional fees(can be of any denom)
  provenance.msgfees.v1.Params:
    type: object
    properties:
      floor_gas_price:
        title: >-
          constant used to calculate fees when gas fees shares denom with msg
          fee
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: Params defines the set of params for the msgfees module.
  provenance.msgfees.v1.QueryAllMsgFeesResponse:
    type: object
    properties:
      msg_fees:
        type: array
        items:
          type: object
          properties:
            msg_type_url:
              type: string
            additional_fee:
              title: >-
                additional_fee can pay in any Coin( basically a Denom and
                Amount, Amount can be zero)
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          title: |-
            MsgFee is the core of what gets stored on the blockchain
            it consists of two parts
            1. the msg type url, i.e. /cosmos.bank.v1beta1.MsgSend
            2. minimum additional fees(can be of any denom)
      pagination:
        description: pagination defines an optional pagination for the request.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: response for querying all msg's with fees associated with them
  provenance.msgfees.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          floor_gas_price:
            title: >-
              constant used to calculate fees when gas fees shares denom with
              msg fee
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
