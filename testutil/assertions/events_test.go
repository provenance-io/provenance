package assertions

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	sdk "github.com/cosmos/cosmos-sdk/types"

	abci "github.com/tendermint/tendermint/abci/types"
)

func TestEventsToStrings(t *testing.T) {
	t.Run("no events", func(t *testing.T) {
		var events sdk.Events
		actual := eventsToStrings(events)
		assert.Empty(t, actual, "eventsToStrings(nil)")
	})

	t.Run("two events", func(t *testing.T) {
		// This test is just making sure that the strings generated by eventsToStrings have
		// all the needed info in them for accurate comparisons.
		coins := func(amounts string) sdk.Coins {
			rv, err := sdk.ParseCoinsNormalized(amounts)
			require.NoError(t, err, "ParseCoinsNormalized(%q)", amounts)
			return rv
		}
		attr := func(key, value string) abci.EventAttribute {
			return abci.EventAttribute{
				Key:   []byte(key),
				Value: []byte(fmt.Sprintf("%q", value)),
			}
		}

		addrAdd := sdk.AccAddress("address_add_event___")
		coinsAdd := coins("97acorn,12banana")
		reason := "just some test reason"
		eventAdd := sdk.Event{
			Type: "provenance.hold.v1.EventHoldAdded",
			Attributes: []abci.EventAttribute{
				attr("address", addrAdd.String()),
				attr("amount", coinsAdd.String()),
				attr("reason", reason),
			},
		}

		addrRel := sdk.AccAddress("address_rel_event___")
		coinsRel := coins("13cucumber,81dill")
		eventRel := sdk.Event{
			Type: "provenance.hold.v1.EventHoldReleased",
			Attributes: []abci.EventAttribute{
				attr("address", addrRel.String()),
				attr("amount", coinsRel.String()),
			},
		}

		events := sdk.Events{
			eventAdd,
			eventRel,
		}

		// Set the index flag on the first attribute of the first event so we make sure that makes a difference.
		events[0].Attributes[0].Index = true

		expected := []string{
			fmt.Sprintf("[0]provenance.hold.v1.EventHoldAdded[0]: \"address\" = \"\\\"%s\\\"\" (indexed)", addrAdd.String()),
			fmt.Sprintf("[0]provenance.hold.v1.EventHoldAdded[1]: \"amount\" = \"\\\"%s\\\"\"", coinsAdd.String()),
			fmt.Sprintf("[0]provenance.hold.v1.EventHoldAdded[2]: \"reason\" = \"\\\"%s\\\"\"", reason),
			fmt.Sprintf("[1]provenance.hold.v1.EventHoldReleased[0]: \"address\" = \"\\\"%s\\\"\"", addrRel.String()),
			fmt.Sprintf("[1]provenance.hold.v1.EventHoldReleased[1]: \"amount\" = \"\\\"%s\\\"\"", coinsRel.String()),
		}

		actual := eventsToStrings(events)
		assert.Equal(t, expected, actual, "events strings")
	})
}

// equalEventsTestCase is a test case for the [Assert|Require]EqualEvents[f]? functions.
type equalEventsTestCase struct {
	name      string
	expected  sdk.Events
	actual    sdk.Events
	expOutput []string
}

// getEqualEventsTestCases returns all the tests cases for the [Assert|Require]EqualEvents[f]? functions.
func getEqualEventsTestCases() []equalEventsTestCase {
	attr := func(key, value string) abci.EventAttribute {
		return abci.EventAttribute{
			Key:   []byte(key),
			Value: []byte(value),
		}
	}
	attri := func(key, value string) abci.EventAttribute {
		return abci.EventAttribute{
			Key:   []byte(key),
			Value: []byte(value),
			Index: true,
		}
	}
	event := func(name string, attrs ...abci.EventAttribute) sdk.Event {
		return sdk.Event{
			Type:       name,
			Attributes: attrs,
		}
	}

	return []equalEventsTestCase{
		{
			name:      "nil nil",
			expected:  nil,
			actual:    nil,
			expOutput: nil,
		},
		{
			name:      "nil empty",
			expected:  nil,
			actual:    sdk.Events{},
			expOutput: nil,
		},
		{
			name:      "empty nil",
			expected:  sdk.Events{},
			actual:    nil,
			expOutput: nil,
		},
		{
			name:      "empty empty",
			expected:  sdk.Events{},
			actual:    sdk.Events{},
			expOutput: nil,
		},
		{
			name:     "nil one",
			expected: nil,
			actual:   sdk.Events{event("missing", attr("mk", "mv"))},
			expOutput: []string{
				errorLead + "Not equal:",
				blankLead + "expected: []string(nil)",
				blankLead + "actual  : []string{\"[0]missing[0]: \\\"mk\\\" = \\\"mv\\\"\"}",
				"+ (string) (len=26) \"[0]missing[0]: \\\"mk\\\" = \\\"mv\\\"\"",
			},
		},
		{
			name:     "one nil",
			expected: sdk.Events{event("missing", attr("mk", "mv"))},
			actual:   nil,
			expOutput: []string{
				errorLead + "Not equal:",
				blankLead + "expected: []string{\"[0]missing[0]: \\\"mk\\\" = \\\"mv\\\"\"}",
				blankLead + "actual  : []string(nil)",
				"- (string) (len=26) \"[0]missing[0]: \\\"mk\\\" = \\\"mv\\\"\"",
			},
		},
		{
			name:      "one and same",
			expected:  sdk.Events{event("found", attr("key1", "value1"))},
			actual:    sdk.Events{event("found", attr("key1", "value1"))},
			expOutput: nil,
		},
		{
			name:     "one with different attribute key",
			expected: sdk.Events{event("found", attr("key1", "value1"))},
			actual:   sdk.Events{event("found", attr("key2", "value1"))},
			expOutput: []string{
				errorLead + "Not equal:",
				blankLead + "expected: []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\"}",
				blankLead + "actual  : []string{\"[0]found[0]: \\\"key2\\\" = \\\"value1\\\"\"}",
				"- (string) (len=30) \"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\"",
				"+ (string) (len=30) \"[0]found[0]: \\\"key2\\\" = \\\"value1\\\"\"",
			},
		},
		{
			name:     "one with different attribute value",
			expected: sdk.Events{event("found", attr("key1", "value1"))},
			actual:   sdk.Events{event("found", attr("key1", "value2"))},
			expOutput: []string{
				errorLead + "Not equal:",
				blankLead + "expected: []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\"}",
				blankLead + "actual  : []string{\"[0]found[0]: \\\"key1\\\" = \\\"value2\\\"\"}",
				"- (string) (len=30) \"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\"",
				"+ (string) (len=30) \"[0]found[0]: \\\"key1\\\" = \\\"value2\\\"\"",
			},
		},
		{
			name:     "one expected index",
			expected: sdk.Events{event("found", attri("key1", "value1"))},
			actual:   sdk.Events{event("found", attr("key1", "value1"))},
			expOutput: []string{
				errorLead + "Not equal:",
				blankLead + "expected: []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\" (indexed)\"}",
				blankLead + "actual  : []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\"}",
				"- (string) (len=40) \"[0]found[0]: \\\"key1\\\" = \\\"value1\\\" (indexed)\"",
				"+ (string) (len=30) \"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\"",
			},
		},
		{
			name:     "one actual index",
			expected: sdk.Events{event("found", attr("key1", "value1"))},
			actual:   sdk.Events{event("found", attri("key1", "value1"))},
			expOutput: []string{
				errorLead + "Not equal:",
				blankLead + "expected: []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\"}",
				blankLead + "actual  : []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\" (indexed)\"}",
				"- (string) (len=30) \"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\"",
				"+ (string) (len=40) \"[0]found[0]: \\\"key1\\\" = \\\"value1\\\" (indexed)\"",
			},
		},
		{
			name:     "one expected extra attribute",
			expected: sdk.Events{event("found", attr("key1", "value1"), attr("key2", "value2"))},
			actual:   sdk.Events{event("found", attr("key1", "value1"))},
			expOutput: []string{
				errorLead + "Not equal:",
				blankLead + "expected: []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\", \"[0]found[1]: \\\"key2\\\" = \\\"value2\\\"\"}",
				blankLead + "actual  : []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\"}",
				"- (string) (len=30) \"[0]found[1]: \\\"key2\\\" = \\\"value2\\\"\"",
			},
		},
		{
			name:     "one actual extra attribute",
			expected: sdk.Events{event("found", attr("key1", "value1"))},
			actual:   sdk.Events{event("found", attr("key1", "value1"), attr("key2", "value2"))},
			expOutput: []string{
				errorLead + "Not equal:",
				blankLead + "expected: []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\"}",
				blankLead + "actual  : []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\", \"[0]found[1]: \\\"key2\\\" = \\\"value2\\\"\"}",
				"+ (string) (len=30) \"[0]found[1]: \\\"key2\\\" = \\\"value2\\\"\"",
			},
		},
		{
			name:     "one diff attr order",
			expected: sdk.Events{event("found", attr("key1", "value1"), attr("key2", "value2"))},
			actual:   sdk.Events{event("found", attr("key2", "value2"), attr("key1", "value1"))},
			expOutput: []string{
				errorLead + "Not equal:",
				blankLead + "expected: []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\", \"[0]found[1]: \\\"key2\\\" = \\\"value2\\\"\"}",
				blankLead + "actual  : []string{\"[0]found[0]: \\\"key2\\\" = \\\"value2\\\"\", \"[0]found[1]: \\\"key1\\\" = \\\"value1\\\"\"}",
				"- (string) (len=30) \"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\"",
				"- (string) (len=30) \"[0]found[1]: \\\"key2\\\" = \\\"value2\\\"\"",
				"+ (string) (len=30) \"[0]found[0]: \\\"key2\\\" = \\\"value2\\\"\"",
				"+ (string) (len=30) \"[0]found[1]: \\\"key1\\\" = \\\"value1\\\"\"",
			},
		},
		{
			name: "extra expected",
			expected: sdk.Events{
				event("found", attr("key1", "value1")),
				event("missing", attr("key2", "value2")),
			},
			actual: sdk.Events{event("found", attr("key1", "value1"))},
			expOutput: []string{
				errorLead + "Not equal:",
				blankLead + "expected: []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\", \"[1]missing[0]: \\\"key2\\\" = \\\"value2\\\"\"}",
				blankLead + "actual  : []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\"}",
				"- (string) (len=32) \"[1]missing[0]: \\\"key2\\\" = \\\"value2\\\"\"",
			},
		},
		{
			name:     "extra actual",
			expected: sdk.Events{event("found", attr("key1", "value1"))},
			actual: sdk.Events{
				event("found", attr("key1", "value1")),
				event("missing", attr("key2", "value2")),
			},
			expOutput: []string{
				errorLead + "Not equal:",
				blankLead + "expected: []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\"}",
				blankLead + "actual  : []string{\"[0]found[0]: \\\"key1\\\" = \\\"value1\\\"\", \"[1]missing[0]: \\\"key2\\\" = \\\"value2\\\"\"}",
				"+ (string) (len=32) \"[1]missing[0]: \\\"key2\\\" = \\\"value2\\\"\"",
			},
		},
		{
			name: "two in same order",
			expected: sdk.Events{
				event("first", attr("key1", "value1")),
				event("second", attr("key2", "value2")),
			},
			actual: sdk.Events{
				event("first", attr("key1", "value1")),
				event("second", attr("key2", "value2")),
			},
			expOutput: nil,
		},
		{
			name: "two in different order",
			expected: sdk.Events{
				event("first", attr("key1", "value1")),
				event("second", attr("key2", "value2")),
			},
			actual: sdk.Events{
				event("second", attr("key2", "value2")),
				event("first", attr("key1", "value1")),
			},
			expOutput: []string{
				errorLead + "Not equal:",
				blankLead + "expected: []string{\"[0]first[0]: \\\"key1\\\" = \\\"value1\\\"\", \"[1]second[0]: \\\"key2\\\" = \\\"value2\\\"\"}",
				blankLead + "actual  : []string{\"[0]second[0]: \\\"key2\\\" = \\\"value2\\\"\", \"[1]first[0]: \\\"key1\\\" = \\\"value1\\\"\"}",
				"- (string) (len=30) \"[0]first[0]: \\\"key1\\\" = \\\"value1\\\"\"",
				"- (string) (len=31) \"[1]second[0]: \\\"key2\\\" = \\\"value2\\\"\"",
				"+ (string) (len=31) \"[0]second[0]: \\\"key2\\\" = \\\"value2\\\"\"",
				"+ (string) (len=30) \"[1]first[0]: \\\"key1\\\" = \\\"value1\\\"\"",
			},
		},
	}
}

func TestAssertEqualEvents(t *testing.T) {
	funcName := "AssertEqualEvents"
	for _, tc := range getEqualEventsTestCases() {
		t.Run(tc.name, func(t *testing.T) {
			msg := "msg with %d args: %q %q"
			args := []interface{}{2, "msg arg 1", "msg arg 2"}
			msgAndArgs := append([]interface{}{msg}, args...)
			expMsgAndArgs := "Messages:   \t" + fmt.Sprintf(msg, args...)

			var success bool
			testFunc := func(testTB TB) {
				success = AssertEqualEvents(testTB, tc.expected, tc.actual, msgAndArgs...)
			}
			tb := mockRun(t, testFunc)

			assertMockRunAssertResult(t, funcName, tb, success, tc.expOutput, expMsgAndArgs)
		})
	}
}

func TestRequireEqualEvents(t *testing.T) {
	funcName := "RequireEqualEvents"
	for _, tc := range getEqualEventsTestCases() {
		t.Run(tc.name, func(t *testing.T) {
			msg := "msg with %d args: %q %q"
			args := []interface{}{2, "msg arg 1", "msg arg 2"}
			msgAndArgs := append([]interface{}{msg}, args...)
			expMsgAndArgs := "Messages:   \t" + fmt.Sprintf(msg, args...)

			exited := true
			testFunc := func(testTB TB) {
				RequireEqualEvents(testTB, tc.expected, tc.actual, msgAndArgs...)
				exited = false
			}
			tb := mockRun(t, testFunc)

			assertMockRunRequireResult(t, funcName, tb, exited, tc.expOutput, expMsgAndArgs)
		})
	}
}

func TestAssertEqualEventsf(t *testing.T) {
	funcName := "AssertEqualEventsf"
	for _, tc := range getEqualEventsTestCases() {
		t.Run(tc.name, func(t *testing.T) {
			msg := "msg with %d args: %q %q"
			args := []interface{}{2, "msg arg 1", "msg arg 2"}
			expMsgAndArgs := "Messages:   \t" + fmt.Sprintf(msg, args...)

			var success bool
			testFunc := func(testTB TB) {
				success = AssertEqualEventsf(testTB, tc.expected, tc.actual, msg, args...)
			}
			tb := mockRun(t, testFunc)

			assertMockRunAssertResult(t, funcName, tb, success, tc.expOutput, expMsgAndArgs)
		})
	}
}

func TestRequireEqualEventsf(t *testing.T) {
	funcName := "RequireEqualEventsf"
	for _, tc := range getEqualEventsTestCases() {
		t.Run(tc.name, func(t *testing.T) {
			msg := "msg with %d args: %q %q"
			args := []interface{}{2, "msg arg 1", "msg arg 2"}
			expMsgAndArgs := "Messages:   \t" + fmt.Sprintf(msg, args...)

			exited := true
			testFunc := func(testTB TB) {
				RequireEqualEventsf(testTB, tc.expected, tc.actual, msg, args...)
				exited = false
			}
			tb := mockRun(t, testFunc)

			assertMockRunRequireResult(t, funcName, tb, exited, tc.expOutput, expMsgAndArgs)
		})
	}
}
