syntax = "proto3";
package provenance.ledger.v1;

option go_package          = "github.com/provenance-io/provenance/x/ledger";
option java_package        = "io.provenance.ledger.v1";
option java_multiple_files = true;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

// Ledger
message Ledger {
  // Address of the NFT to which this ledger is linked.
  string nft_address = 1;

  // This denom will represent the entry values within the ledger.
  string denom = 2;

  // Next payment date days since epoch
  int32 next_pmt_date = 3;

  // Next payment amount
  int64 next_pmt_amt = 4;

  // Status of the ledger
  string status = 5;

  // Interest rate
  int32 interest_rate = 6;

  // Maturity date days since epoch
  int32 maturity_date = 7;
}

// LedgerEntryType
enum LedgerEntryType {
  LEDGER_ENTRY_TYPE_UNSPECIFIED         = 0 [(gogoproto.enumvalue_customname) = "Unspecified"];
  LEDGER_ENTRY_TYPE_DISBURSEMENT        = 1 [(gogoproto.enumvalue_customname) = "Disbursement"];
  LEDGER_ENTRY_TYPE_SCHEDULED_PAYMENT   = 2 [(gogoproto.enumvalue_customname) = "Scheduled_Payment"];
  LEDGER_ENTRY_TYPE_UNSCHEDULED_PAYMENT = 3 [(gogoproto.enumvalue_customname) = "Unscheduled_Payment"];
  LEDGER_ENTRY_TYPE_FORECLOSURE_PAYMENT = 4 [(gogoproto.enumvalue_customname) = "Foreclosure_Payment"];
  LEDGER_ENTRY_TYPE_FEE                 = 5 [(gogoproto.enumvalue_customname) = "Fee"];
  LEDGER_ENTRY_TYPE_OTHER               = 6 [(gogoproto.enumvalue_customname) = "Other"];
}

// LedgerEntry
message LedgerEntry {
  // Correlation ID for tracking ledger entries with external systems (max 50 characters)
  string correlation_id = 1;

  // Sequence number of the ledger entry (less than 100)
  // This field is used to maintain the correct order of entries when multiple entries
  // share the same effective date. Entries are sorted first by effective date, then by sequence.
  uint32 sequence = 2;

  LedgerEntryType type     = 3;
  string          sub_type = 4;

  // Posted date days since epoch
  int32 posted_date = 5;

  // Effective date days since epoch
  int32 effective_date = 6;

  int64 total_amt = 7;

  repeated LedgerBucketAmount applied_amounts = 8;
}

message LedgerBucketAmount {
  string bucket      = 1;
  int64  applied_amt = 2;
  int64  balance_amt = 3;
}

// FlowStatus represents the current status of a flow
enum FundingTransferStatus {
  FUNDING_TRANSFER_STATUS_UNSPECIFIED = 0;
  FUNDING_TRANSFER_STATUS_PENDING     = 1;
  FUNDING_TRANSFER_STATUS_PROCESSING  = 2;
  FUNDING_TRANSFER_STATUS_COMPLETED   = 3;
  FUNDING_TRANSFER_STATUS_FAILED      = 4;
}

// FundTransfer represents a single fund transfer to process
message FundTransfer {
  string                nft_address                 = 1;
  string                ledger_entry_correlation_id = 2;
  string                amount                      = 3;
  FundingTransferStatus status                      = 4;
  string                memo                        = 5;

  // The minimum block height or timestamp for settlement
  int64 settlement_block = 6;
}

// SettlementInstruction represents blockchain-specific settlement instructions
message SettlementInstruction {
  string amount = 1;

  // The recipient's blockchain address
  string recipient_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Optional memo or note for the transaction
  string memo = 3;

  // The minimum block height or timestamp for settlement
  int64 settlement_block = 4;
}

// FundTransferEntryWithSettlement represents a fund transfer with settlement instructions
message FundTransferWithSettlement {
  string                         nft_address                 = 1;
  string                         ledger_entry_correlation_id = 2;
  repeated SettlementInstruction settlementInstructions      = 3;
}

// Balances represents the current balances for principal, interest, and other amounts
message Balances {
  repeated BucketBalance bucket_balances = 1;
}

message BucketBalance {
  string bucket  = 1;
  int64  balance = 2;
}
