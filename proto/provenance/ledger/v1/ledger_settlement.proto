syntax = "proto3";
package provenance.ledger.v1;

option go_package          = "github.com/provenance-io/provenance/x/ledger/types";
option java_package        = "io.provenance.ledger.v1";
option java_multiple_files = true;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "provenance/ledger/v1/ledger.proto";

// FlowStatus represents the current status of a flow
enum FundingTransferStatus {
  FUNDING_TRANSFER_STATUS_UNSPECIFIED = 0;
  FUNDING_TRANSFER_STATUS_PENDING     = 1;
  FUNDING_TRANSFER_STATUS_PROCESSING  = 2;
  FUNDING_TRANSFER_STATUS_COMPLETED   = 3;
  FUNDING_TRANSFER_STATUS_FAILED      = 4;
}

// FundTransferEntryWithSettlement represents a fund transfer with settlement instructions
message FundTransferWithSettlement {
  LedgerKey                      key                         = 1;
  string                         ledger_entry_correlation_id = 2;
  repeated SettlementInstruction settlementInstructions      = 3;
}

// SettlementInstruction represents blockchain-specific settlement instructions
message SettlementInstruction {
  cosmos.base.v1beta1.Coin amount = 1 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (amino.dont_omitempty)   = true,
    (amino.encoding)         = "legacy_coins"
  ];

  // The recipient's blockchain address
  string recipient_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  FundingTransferStatus status = 3;

  // Optional memo or note for the transaction
  string memo = 4;
}

// Used as the stored version of settlement instructions against a ledger key and entry correlation id.
message StoredSettlementInstructions {
  repeated SettlementInstruction settlementInstructions = 1;
}