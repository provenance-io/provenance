syntax = "proto3";
package provenance.ledger.v1;

option go_package          = "github.com/provenance-io/provenance/x/ledger/types";
option java_package        = "io.provenance.ledger.v1";
option java_multiple_files = true;

import "cosmos_proto/cosmos.proto";

// EventLedgerCreated is emitted when a new ledger is created for an asset.
// This event is triggered by the MsgCreateLedger message handler when a
// ledger is successfully created for a specific NFT or scope.
message EventLedgerCreated {
  // asset class of the ledger
  string asset_class_id = 1;

  // nft id of the ledger (scope id or nft id)
  string nft_id = 2;
}

// EventLedgerUpdated is emitted when a ledger's configuration is updated.
// This event is triggered by various update message handlers such as
// MsgUpdateLedgerStatus, MsgUpdateLedgerInterestRate, MsgUpdateLedgerPayment,
// and MsgUpdateLedgerMaturityDate when a ledger's configuration is
// successfully modified.
message EventLedgerUpdated {
  // asset class of the ledger
  string asset_class_id = 1;

  // nft id of the ledger (scope id or nft id)
  string nft_id = 2;

  // What type of data update caused this event to be emitted.
  UpdateType update_type = 3;
}

// UpdateType is the type of data update that caused the EventLedgerUpdated event to be emitted.
// This is used to identify the specific update that caused the event to be emitted.
enum UpdateType {
  UPDATE_TYPE_UNSPECIFIED = 0;
  UPDATE_TYPE_STATUS = 1;
  UPDATE_TYPE_INTEREST_RATE = 2;
  UPDATE_TYPE_PAYMENT = 3;
  UPDATE_TYPE_MATURITY_DATE = 4;
}

// EventLedgerEntryAdded is emitted when a new entry is added to a ledger.
// This event is triggered by the MsgAppendLedgerEntry message handler when
// one or more ledger entries are successfully added to an existing ledger.
message EventLedgerEntryAdded {
  // asset class of the ledger
  string asset_class_id = 1;

  // nft id of the ledger (scope id or nft id)
  string nft_id = 2;

  // correlation id of the ledger entry
  string correlation_id = 3;
}

// EventFundTransferWithSettlement is emitted when funds are transferred with
// settlement instructions. This event is triggered by the
// MsgTransferFundsWithSettlement message handler when a fund transfer with
// settlement instructions is successfully processed.
message EventFundTransferWithSettlement {
  // asset class of the ledger
  string asset_class_id = 1;

  // nft id of the ledger (scope id or nft id)
  string nft_id = 2;

  // correlation id of the ledger entry
  string correlation_id = 3;
}

// EventLedgerDestroyed is emitted when a ledger is destroyed.
// This event is triggered by the MsgDestroyLedger message handler when
// a ledger and all its associated data are successfully removed.
message EventLedgerDestroyed {
  // asset class of the ledger
  string asset_class_id = 1;

  // nft id of the ledger (scope id or nft id)
  string nft_id = 2;
}