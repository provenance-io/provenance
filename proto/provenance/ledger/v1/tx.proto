syntax = "proto3";
package provenance.ledger.v1;

option go_package = "github.com/provenance-io/provenance/x/ledger";

option java_package        = "io.provenance.ledger.v1";
option java_multiple_files = true;

import "cosmos/msg/v1/msg.proto";
import "provenance/ledger/v1/ledger.proto";
import "provenance/ledger/v1/ledger_settlement.proto";

// Msg defines the attribute module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Create a new NFT ledger
  rpc CreateTx(MsgCreateRequest) returns (MsgCreateResponse);

  // Append a ledger entry
  rpc AppendTx(MsgAppendRequest) returns (MsgAppendResponse);

  // Balances can be updated for a ledger entry allowing for retroactive adjustments to be applied
  rpc UpdateBalancesTx(MsgUpdateBalancesRequest) returns (MsgUpdateBalancesResponse);

  // Process multiple fund transfers (payments and disbursements)
  rpc ProcessFundTransfersTx(MsgProcessFundTransfersRequest) returns (MsgProcessFundTransfersResponse);

  // Process multiple fund transfers with manual settlement instructions
  rpc ProcessFundTransfersWithSettlementTx(MsgProcessFundTransfersWithSettlementRequest)
      returns (MsgProcessFundTransfersResponse);

  // Destroy a ledger by NFT address
  rpc DestroyTx(MsgDestroyRequest) returns (MsgDestroyResponse);

  // Create a new ledger class
  rpc CreateLedgerClassTx(MsgCreateLedgerClassRequest) returns (MsgCreateLedgerClassResponse);

  // Add a status type to a ledger class
  rpc AddLedgerClassStatusTypeTx(MsgAddLedgerClassStatusTypeRequest) returns (MsgAddLedgerClassStatusTypeResponse);

  // Add an entry type to a ledger class
  rpc AddLedgerClassEntryTypeTx(MsgAddLedgerClassEntryTypeRequest) returns (MsgAddLedgerClassEntryTypeResponse);
}

// MsgCreateRequest
message MsgCreateRequest {
  option (cosmos.msg.v1.signer) = "authority";

  Ledger ledger    = 1;
  string authority = 2;
}

// MsgCreateResponse
message MsgCreateResponse {}

// MsgAppendRequest
message MsgAppendRequest {
  option (cosmos.msg.v1.signer) = "authority";

  LedgerKey            key       = 1;
  repeated LedgerEntry entries   = 2;
  string               authority = 3;
}

// MsgAppendResponse
message MsgAppendResponse {}

// MsgUpdateBalancesRequest
message MsgUpdateBalancesRequest {
  option (cosmos.msg.v1.signer) = "authority";

  LedgerKey key       = 1;
  string    authority = 2;

  string correlation_id = 3;

  repeated BucketBalance bucket_balances = 4;
}

// MsgUpdateBalancesResponse
message MsgUpdateBalancesResponse {}

// MsgProcessFundTransfersRequest represents a request to process multiple fund transfers
message MsgProcessFundTransfersRequest {
  option (cosmos.msg.v1.signer) = "authority";

  string                authority = 1;
  repeated FundTransfer transfers = 2;
}

// MsgProcessFundTransfersResponse represents the response from processing fund transfers
message MsgProcessFundTransfersResponse {}

// MsgProcessFundTransfersWithSettlementRequest represents a request to process fund transfers with settlement
// instructions
message MsgProcessFundTransfersWithSettlementRequest {
  option (cosmos.msg.v1.signer) = "authority";

  string                              authority = 1;
  repeated FundTransferWithSettlement transfers = 2;
}

// MsgDestroyRequest represents a request to destroy a ledger
message MsgDestroyRequest {
  option (cosmos.msg.v1.signer) = "authority";

  LedgerKey key       = 1;
  string    authority = 2;
}

// MsgDestroyResponse represents the response from destroying a ledger
message MsgDestroyResponse {}

// MsgCreateLedgerClassRequest represents a request to create a new ledger class
message MsgCreateLedgerClassRequest {
  option (cosmos.msg.v1.signer) = "authority";

  LedgerClass ledger_class = 1;
  string      authority    = 2;
}

// MsgCreateLedgerClassResponse represents the response from creating a ledger class
message MsgCreateLedgerClassResponse {}

// MsgAddLedgerClassStatusTypeRequest represents a request to add a status type to a ledger class
message MsgAddLedgerClassStatusTypeRequest {
  option (cosmos.msg.v1.signer) = "authority";

  string                ledger_class_id = 1;
  LedgerClassStatusType status_type     = 2;
  string                authority       = 3;
}

// MsgAddLedgerClassStatusTypeResponse represents the response from adding a status type
message MsgAddLedgerClassStatusTypeResponse {}

// MsgAddLedgerClassEntryTypeRequest represents a request to add an entry type to a ledger class
message MsgAddLedgerClassEntryTypeRequest {
  option (cosmos.msg.v1.signer) = "authority";

  string               ledger_class_id = 1;
  LedgerClassEntryType entry_type      = 2;
  string               authority       = 3;
}

// MsgAddLedgerClassEntryTypeResponse represents the response from adding an entry type
message MsgAddLedgerClassEntryTypeResponse {}
