syntax = "proto3";
package provenance.ledger.v1;

option go_package          = "github.com/provenance-io/provenance/x/ledger/types";
option java_package        = "io.provenance.ledger.v1";
option java_multiple_files = true;

import "cosmos/msg/v1/msg.proto";
import "provenance/ledger/v1/ledger.proto";
import "provenance/ledger/v1/ledger_settlement.proto";

// Msg defines the ledger module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Create a new NFT ledger.
  rpc Create(MsgCreateRequest) returns (MsgCreateResponse);

  // Update Status.
  rpc UpdateStatus(MsgUpdateStatusRequest) returns (MsgUpdateStatusResponse);

  // Update Interest Rate.
  rpc UpdateInterestRate(MsgUpdateInterestRateRequest) returns (MsgUpdateInterestRateResponse);

  // Update Payment Amount, Next Payment Date, and Payment Frequency.
  rpc UpdatePayment(MsgUpdatePaymentRequest) returns (MsgUpdatePaymentResponse);

  // Update Maturity Date.
  rpc UpdateMaturityDate(MsgUpdateMaturityDateRequest) returns (MsgUpdateMaturityDateResponse);

  // Append a ledger entry.
  rpc Append(MsgAppendRequest) returns (MsgAppendResponse);

  // Balances can be updated for a ledger entry allowing for retroactive adjustments to be applied.
  rpc UpdateBalances(MsgUpdateBalancesRequest) returns (MsgUpdateBalancesResponse);

  // Process multiple fund transfers with manual settlement instructions.
  rpc TransferFundsWithSettlement(MsgTransferFundsWithSettlementRequest)
      returns (MsgTransferFundsWithSettlementResponse);

  // Destroy a ledger by NFT address.
  rpc Destroy(MsgDestroyRequest) returns (MsgDestroyResponse);

  // Create a new ledger class.
  rpc CreateLedgerClass(MsgCreateLedgerClassRequest) returns (MsgCreateLedgerClassResponse);

  // Add a status type to a ledger class.
  rpc AddLedgerClassStatusType(MsgAddLedgerClassStatusTypeRequest) returns (MsgAddLedgerClassStatusTypeResponse);

  // Add an entry type to a ledger class.
  rpc AddLedgerClassEntryType(MsgAddLedgerClassEntryTypeRequest) returns (MsgAddLedgerClassEntryTypeResponse);

  // Add a bucket type to a ledger class.
  rpc AddLedgerClassBucketType(MsgAddLedgerClassBucketTypeRequest) returns (MsgAddLedgerClassBucketTypeResponse);

  // Bulk create ledgers and entries.
  rpc BulkCreate(MsgBulkCreateRequest) returns (MsgBulkCreateResponse);
}

// MsgCreateRequest represents a request to create a new ledger.
message MsgCreateRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // The ledger to create.
  Ledger ledger = 1;
  // The authority address that can create ledgers.
  string authority = 2;
}

// MsgCreateResponse represents the response from creating a ledger.
message MsgCreateResponse {}

// MsgUpdateStatusRequest represents a request to update the status of a ledger.
message MsgUpdateStatusRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // Ledger key of the ledger whose status is being updated
  LedgerKey key = 1;

  // The authority/signer that is updating the status
  string authority = 2;

  // The new status type id of the ledger
  int32 status_type_id = 3;
}

// MsgUpdateStatusResponse represents the response from updating a ledger status.
message MsgUpdateStatusResponse {}

// MsgUpdateInterestRateRequest represents a request to update the interest rate configuration of a ledger.
message MsgUpdateInterestRateRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // Ledger key of the ledger whose interest rate is being updated
  LedgerKey key = 1;

  // The authority/signer that is updating the interest rate
  string authority = 2;

  // The new interest rate of the ledger
  int32 interest_rate = 3;

  // The new interest day count convention of the ledger
  DayCountConvention interest_day_count_convention = 4;

  // The new interest accrual method of the ledger
  InterestAccrualMethod interest_accrual_method = 5;
}

// MsgUpdateInterestRateResponse represents the response from updating a ledger interest rate.
message MsgUpdateInterestRateResponse {}

// MsgUpdatePaymentRequest represents a request to update payment configuration of a ledger.
message MsgUpdatePaymentRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // Ledger key of the ledger whose payment is being updated
  LedgerKey key = 1;

  // The authority/signer that is updating the payment
  string authority = 2;

  // The new next payment amount of the ledger
  int64 next_pmt_amt = 3;

  // The new next payment date in days since epoch
  int32 next_pmt_date = 4;

  // The new payment frequency of the ledger
  PaymentFrequency payment_frequency = 5;
}

// MsgUpdatePaymentResponse represents the response from updating a ledger payment configuration.
message MsgUpdatePaymentResponse {}

// MsgUpdateMaturityDateRequest represents a request to update the maturity date of a ledger.
message MsgUpdateMaturityDateRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // Ledger key of the ledger whose maturity date is being updated
  LedgerKey key = 1;

  // The authority/signer that is updating the maturity date
  string authority = 2;

  // The new maturity date in days since epoch
  int32 maturity_date = 3;
}

// MsgUpdateMaturityDateResponse represents the response from updating a ledger maturity date.
message MsgUpdateMaturityDateResponse {}

// MsgAppendRequest represents a request to append entries to a ledger.
message MsgAppendRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // Ledger key of the ledger whose entries are being appended
  LedgerKey key = 1;

  // The entries to append to the ledger
  repeated LedgerEntry entries = 2;

  // The authority/signer that is appending the entries
  string authority = 3;
}

// MsgAppendResponse represents the response from appending entries to a ledger.
message MsgAppendResponse {}

// MsgUpdateBalancesRequest represents a request to update balances for a ledger entry.
message MsgUpdateBalancesRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // Ledger key of the ledger whose balances are being updated
  LedgerKey key = 1;

  // The authority/signer that is updating the balances
  string authority = 2;

  // The correlation id of the ledger entry
  string correlation_id = 3;

  // The applied amounts to be updated.
  repeated LedgerBucketAmount applied_amounts = 4;

  // The bucket balances to update.
  repeated BucketBalance balance_amounts = 5;
}

// MsgUpdateBalancesResponse represents the response from updating ledger balances.
message MsgUpdateBalancesResponse {}

// MsgTransferFundsWithSettlementRequest represents a request to transfer funds with settlement instructions.
message MsgTransferFundsWithSettlementRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // The authority/signer that is transferring the funds
  string authority = 1;

  // The transfers to be made
  repeated FundTransferWithSettlement transfers = 2;
}

// MsgTransferFundsWithSettlementResponse represents the response from transferring funds with settlement.
message MsgTransferFundsWithSettlementResponse {}

// MsgDestroyRequest represents a request to destroy a ledger.
message MsgDestroyRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // Ledger key of the ledger to destroy
  LedgerKey key = 1;

  // The authority/signer that is destroying the ledger
  string authority = 2;
}

// MsgDestroyResponse represents the response from destroying a ledger.
message MsgDestroyResponse {}

// MsgCreateLedgerClassRequest represents a request to create a new ledger class.
message MsgCreateLedgerClassRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // The ledger class to create
  LedgerClass ledger_class = 1;

  // The authority/signer that is creating the ledger class
  string authority = 2;
}

// MsgCreateLedgerClassResponse represents the response from creating a ledger class.
message MsgCreateLedgerClassResponse {}

// MsgAddLedgerClassStatusTypeRequest represents a request to add a status type to a ledger class.
message MsgAddLedgerClassStatusTypeRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // Ledger class id to add the status type to
  string ledger_class_id = 1;

  // The status type to add to the ledger class
  LedgerClassStatusType status_type = 2;

  // The authority/signer that is adding the status type
  string authority = 3;
}

// MsgAddLedgerClassStatusTypeResponse represents the response from adding a status type.
message MsgAddLedgerClassStatusTypeResponse {}

// MsgAddLedgerClassEntryTypeRequest represents a request to add an entry type to a ledger class.
message MsgAddLedgerClassEntryTypeRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // Ledger class id to add the entry type to
  string ledger_class_id = 1;

  // The entry type to add to the ledger class
  LedgerClassEntryType entry_type = 2;

  // The authority/signer that is adding the entry type
  string authority = 3;
}

// MsgAddLedgerClassEntryTypeResponse represents the response from adding an entry type.
message MsgAddLedgerClassEntryTypeResponse {}

// MsgAddLedgerClassBucketTypeRequest represents a request to add a bucket type to a ledger class.
message MsgAddLedgerClassBucketTypeRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // Ledger class id to add the bucket type to
  string ledger_class_id = 1;

  // The bucket type to add to the ledger class
  LedgerClassBucketType bucket_type = 2;

  // The authority/signer that is adding the bucket type
  string authority = 3;
}

// MsgAddLedgerClassBucketTypeResponse represents the response from adding a bucket type.
message MsgAddLedgerClassBucketTypeResponse {}

// MsgBulkCreateRequest represents a request to bulk create ledgers and entries.
message MsgBulkCreateRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // The authority/signer that is bulk importing the ledger data
  string authority = 1;

  // The genesis state to bulk import
  repeated LedgerToEntries ledger_to_entries = 2;
}

// MsgBulkCreateResponse represents the response from bulk creating ledgers and entries.
message MsgBulkCreateResponse {}
