syntax = "proto3";
package provenance.ledger.v1;

option go_package = "github.com/provenance-io/provenance/x/ledger";

option java_package        = "io.provenance.ledger.v1";
option java_multiple_files = true;

import "cosmos/msg/v1/msg.proto";
import "provenance/ledger/v1/ledger.proto";
import "google/protobuf/duration.proto";

// Msg defines the attribute module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Create a new NFT ledger
  rpc Create(MsgCreateRequest) returns (MsgCreateResponse);

  // Append a ledger entry
  rpc Append(MsgAppendRequest) returns (MsgAppendResponse);

  // Process multiple payments
  rpc ProcessPayments(MsgProcessPaymentsRequest) returns (MsgProcessPaymentsResponse);

  // Process multiple disbursements
  rpc ProcessDisbursements(MsgProcessDisbursementsRequest) returns (MsgProcessDisbursementsResponse);
}

// MsgCreateRequest
message MsgCreateRequest {
  option (cosmos.msg.v1.signer) = "owner";

  string nft_address = 1;
  string denom       = 2;
  string owner       = 3;
}

// MsgCreateResponse
message MsgCreateResponse {}

// MsgAppendRequest
message MsgAppendRequest {
  option (cosmos.msg.v1.signer) = "owner";

  string      nft_address = 1;
  LedgerEntry entry       = 2;
  string      owner       = 3;
}

// MsgAppendResponse
message MsgAppendResponse {}

// PaymentEntry represents a single payment to process
message PaymentEntry {
  string ledger_entry_uuid = 1;
  string amount = 2;
  string memo = 3;
}

// MsgProcessPaymentsRequest represents a request to process multiple payments
message MsgProcessPaymentsRequest {
  option (cosmos.msg.v1.signer) = "owner";

  string owner = 1;
  repeated PaymentEntry payments = 2;
}

// MsgProcessPaymentsResponse represents the response from processing payments
message MsgProcessPaymentsResponse {
  repeated string processed_entry_uuids = 1;
}

// DisbursementEntry represents a single disbursement to process
message DisbursementEntry {
  string ledger_entry_uuid = 1;
  string amount = 2;
  string memo = 3;
  google.protobuf.Duration delay = 4;
}

// MsgProcessDisbursementsRequest represents a request to process multiple disbursements
message MsgProcessDisbursementsRequest {
  option (cosmos.msg.v1.signer) = "owner";

  string owner = 1;
  repeated DisbursementEntry disbursements = 2;
}

// MsgProcessDisbursementsResponse represents the response from processing disbursements
message MsgProcessDisbursementsResponse {
  repeated string processed_entry_uuids = 1;
}
