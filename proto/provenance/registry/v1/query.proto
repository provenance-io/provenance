syntax = "proto3";
package provenance.registry.v1;

option go_package          = "github.com/provenance-io/provenance/x/registry";
option java_package        = "io.provenance.registry.v1";
option java_multiple_files = true;

import "gogoproto/gogo.proto";
import "provenance/registry/v1/registry.proto";
import "google/api/annotations.proto";

// Query defines the gRPC querier service.
service Query {
  // GetRegistry returns the registry for a given key
  rpc GetRegistry(QueryGetRegistryRequest) returns (QueryGetRegistryResponse) {
    option (google.api.http).get = "/provenance/registry/v1/registry/{key.asset_class_id}/{key.nft_id}";
  }

  // HasRole returns true if the address has the role for the given key
  rpc HasRole(QueryHasRoleRequest) returns (QueryHasRoleResponse) {
    option (google.api.http).get =
        "/provenance/registry/v1/has_role/{key.asset_class_id}/{key.nft_id}/{address}/{role}";
  }
}

// QueryGetRegistryRequest is the request type for the Query/GetRegistry RPC method
message QueryGetRegistryRequest {
  // key is the key to query
  RegistryKey key = 1;
}

// QueryGetRegistryResponse is the response type for the Query/GetRegistry RPC method
message QueryGetRegistryResponse {
  // entry is the registry entry for the requested key
  RegistryEntry registry = 1 [(gogoproto.nullable) = false];
}

// QueryHasRoleRequest is the request type for the Query/HasRole RPC method
message QueryHasRoleRequest {
  // key is the key to query
  RegistryKey key = 1;

  // address is the address to query
  string address = 2;

  // role is the role to query
  RegistryRole role = 3;
}

// QueryHasRoleResponse is the response type for the Query/HasRole RPC method
message QueryHasRoleResponse {
  // has_role is true if the address has the role for the given key
  bool has_role = 1;
}
