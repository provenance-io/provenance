syntax = "proto3";
package provenance.registry.v1;

option go_package          = "github.com/provenance-io/provenance/x/registry/types";
option java_package        = "io.provenance.registry.v1";
option java_multiple_files = true;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "provenance/registry/v1/registry.proto";

// Msg defines the registry Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // RegisterNFT registers a new NFT
  rpc RegisterNFT(MsgRegisterNFT) returns (MsgRegisterNFTResponse);

  // GrantRole grants a role to an address
  rpc GrantRole(MsgGrantRole) returns (MsgGrantRoleResponse);

  // RevokeRole revokes a role from an address
  rpc RevokeRole(MsgRevokeRole) returns (MsgRevokeRoleResponse);

  // UnregisterNFT unregisters an NFT from the registry
  rpc UnregisterNFT(MsgUnregisterNFT) returns (MsgUnregisterNFTResponse);
}

// MsgRegisterNFT
message MsgRegisterNFT {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that is authorized to register addresses
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // key is the key to register
  RegistryKey key = 2;

  // roles is a list of roles and addresses that can perform that role
  repeated RolesEntry roles = 3 [(gogoproto.nullable) = false];
}

// MsgRegisterNFTResponse defines the response for RegisterNFT
message MsgRegisterNFTResponse {}

// MsgGrantRole
message MsgGrantRole {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that is authorized to grant the role
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // key is the key to grant the role to
  RegistryKey key = 2;

  // role is the role to grant
  RegistryRole role = 3;

  // addresses is the list of addresses to grant the role to
  repeated string addresses = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgGrantRoleResponse
message MsgGrantRoleResponse {}

// MsgRevokeRole
message MsgRevokeRole {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that is authorized to revoke the role
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // key is the key to revoke the role from
  RegistryKey key = 2;

  // role is the role to revoke
  RegistryRole role = 3;

  // addresses is the list of addresses to revoke the role from
  repeated string addresses = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgRevokeRoleResponse
message MsgRevokeRoleResponse {}

// MsgUnregisterNFT
message MsgUnregisterNFT {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that is authorized to remove addresses
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // key is the key to remove
  RegistryKey key = 2;
}

// MsgUnregisterNFTResponse
message MsgUnregisterNFTResponse {}