syntax = "proto3";
package provenance.oracle.v1;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package          = "github.com/provenance-io/provenance/x/oracle/types";
option java_package        = "io.provenance.oracle.v1";
option java_multiple_files = true;

// Msg
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateOracle is the RPC endpoint for updating the oracle
  rpc UpdateOracle(MsgUpdateOracleRequest) returns (MsgUpdateOracleResponse);
  // SendQueryOracle sends a query to an oracle on another chain
  rpc SendQueryOracle(MsgSendQueryOracleRequest) returns (MsgSendQueryOracleResponse);
}

// MsgSendQueryOracleRequest queries an oracle on another chain
message MsgSendQueryOracleRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // Query contains the query data passed to the oracle.
  bytes query = 1 [(gogoproto.casttype) = "github.com/CosmWasm/wasmd/x/wasm/types.RawContractMessage"];
  // Channel is the channel to the oracle.
  string channel = 3;
  // The signing authority for the request
  string authority = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgSendQueryOracleResponse contains the id of the oracle query.
message MsgSendQueryOracleResponse {
  // The sequence number that uniquely identifies the query.
  uint64 sequence = 1;
}

// MsgUpdateOracleRequest is the request type for updating an oracle's contract address
message MsgUpdateOracleRequest {
  option (cosmos.msg.v1.signer) = "authority";
  option (gogoproto.equal)      = true;

  // The address of the oracle's contract
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The signing authorities for the request
  string authority = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgUpdateOracleResponse is the response type for updating the oracle.
message MsgUpdateOracleResponse {}