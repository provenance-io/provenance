syntax = "proto3";
package provenance.oracle.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";

option go_package          = "github.com/provenance-io/provenance/x/oracle/types";
option java_package        = "io.provenance.oracle.v1";
option java_multiple_files = true;

// Query defines the gRPC querier service for oracle module.
service Query {
  // ContractAddress returns the address of the oracle's contract
  rpc ContractAddress(QueryContractAddressRequest) returns (QueryContractAddressResponse) {
    option (google.api.http).get = "/provenance/oracle/v1/contract_address";
  }

  // OracleContract sends a query to the oracle's contract
  rpc OracleContract(QueryOracleContractRequest) returns (QueryOracleContractResponse) {
    option (google.api.http).get = "/provenance/oracle/v1/oracle_contract";
  }

  // OracleResult returns the address of the oracle's contract
  rpc OracleResult(QueryOracleResultRequest) returns (QueryOracleResultResponse) {
    option (google.api.http).get = "/provenance/oracle/v1/oracle_result";
  }

  rpc QueryState(QueryQueryStateRequest) returns (QueryQueryStateResponse) {
    option (google.api.http).get = "/quasar-finance/interchainquerydemo/interquery/query_state";
  }
}

message QueryQueryStateRequest {
  uint64 sequence = 1;
}

message QueryQueryStateResponse {
  google.protobuf.Any request  = 1 [(gogoproto.nullable) = false];
  google.protobuf.Any response = 2 [(gogoproto.nullable) = true];
}

// QueryContractAddressRequest queries for the Trigger with an identifier of id.
message QueryContractAddressRequest {}

// QueryContractAddressResponse contains the address of the oracle's contract.
message QueryContractAddressResponse {
  // The address of the oracle's contract
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryOracleContractRequest queries the oracle's smart contract
message QueryOracleContractRequest {
  // Query contains the query data passed to the contract.
  bytes query = 1 [(gogoproto.casttype) = "github.com/CosmWasm/wasmd/x/wasm/types.RawContractMessage"];
}

// QueryOracleContractResponse contains the result of the query to the oracle's smart contract
message QueryOracleContractResponse {
  // Data contains the json data returned from the smart contract.
  bytes data = 1 [(gogoproto.casttype) = "github.com/CosmWasm/wasmd/x/wasm/types.RawContractMessage"];
}

// QueryOracleResultRequest attempts to obtain the result of the oracle query.
message QueryOracleResultRequest {
  // The id of the query to get the result from
  uint64 query_id = 1;
}

// QueryOracleResult contains the result of the oracle query.
message QueryOracleResultResponse {
  // Data contains the json data returned from the smart contract.
  bytes data = 2 [(gogoproto.casttype) = "github.com/CosmWasm/wasmd/x/wasm/types.RawContractMessage"];
}