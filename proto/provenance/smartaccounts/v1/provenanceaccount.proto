syntax = "proto3";

package provenance.smartaccounts.v1;

option go_package = "github.com/provenance-io/provenance/x/smartaccounts/types";

import "google/protobuf/any.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/auth/v1beta1/auth.proto";
import "amino/amino.proto";

// ProvenanceAccount is a Type Of Smart Account assumes presence of a BaseAccount.
message ProvenanceAccount {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal)           = false;

  // address is the address of the account.
  // This will be the same as the base account based on discussion on Jan30th, 2025.
  //  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  //  Makes inheritance explicit
  //  Provides access to BaseAccount fields (account_number, sequence, etc.)
  //  Follows Cosmos SDK conventions
  //  Simplifies implementation of account interfaces
  cosmos.auth.v1beta1.BaseAccount base_account = 1 [(gogoproto.embed) = true];

  // smart_account_number is the global sequence number.
  uint64 smart_account_number = 2;

  // list of credential types supported by the account
  repeated Credential credentials = 3;

  // set to false but if set to true only smart account authentication is allowed.
  bool is_smart_account_only_authentication = 4;
}

// MsgInit is used to initialize a provenance account.
message MsgInit {
  option (cosmos.msg.v1.signer) = "sender";

  // sender is the address of the sender of this message.
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // list of credential types supported by the account
  // at least one has to be provided.
  repeated Credential credentials = 2;
}

// MsgInitResponse is the response returned after smart account initialization.
// For now, This is empty.
message MsgInitResponse {
  // account_address is the address of the newly created account.
  string account_address = 1;
  // sequence is the current sequence of the account.
  uint64 sequence = 2;
}

// Enum for credential type
enum CredentialType {
  // Unspecified credential type
  CREDENTIAL_TYPE_UNSPECIFIED = 0;
  // ED25519 credential type
  CREDENTIAL_TYPE_ED25519 = 1;
  // K256 credential type, this will the usual cosmos credential
  CREDENTIAL_TYPE_K256 = 2;
  // P256 credential type
  CREDENTIAL_TYPE_P256 = 3;
  // WebAuthn credential type
  CREDENTIAL_TYPE_WEBAUTHN = 4;
  // WebAuthn with UV credential type
  CREDENTIAL_TYPE_WEBAUTHN_UV = 5;
}

// Credential is a credential that can be used to authenticate a smart account.
message Credential {
  BaseCredential base_credential = 1 [(gogoproto.embed) = true];
  // authenticator is the authenticator for the credential.
  oneof authenticator {
    Fido2Authenticator   fido2_authenticator   = 2;
    K256Authenticator    k256_authenticator    = 3;
    SessionAuthenticator session_authenticator = 4;
  }
}

// Credential message
message BaseCredential {
  // assigned globally unique in order of creation (like BaseAccount.account_number)
  uint64 credential_number = 1;

  // this is the public key of the credential
  // The public key portion of a Relying Party-specific credential key pair, generated by an authenticator and returned
  // to a Relying Party at registration time (see also public key credential). The private key portion of the credential
  // key pair is known as the credential private key. Note that in the case of self attestation, the credential key pair
  // is also used as the attestation key pair, see self attestation for details.
  google.protobuf.Any public_key = 2;

  // see CredentialType enum
  CredentialType variant = 3;

  // Seconds since UNIX epoch timestamp
  int64 create_time = 4;
}

// Fido2Authenticator is a Fido2 authenticator.
message Fido2Authenticator {
  // A probabilistically-unique byte sequence identifying a public key credential source and its authentication
  // assertions. The credential id (from the id attribute) is the base64url encoding of the data contained in the
  // [[identifier]] internal slot.
  string id = 1;

  // this is the username of the credential
  string username = 2;

  // Note on why to store aaGuid
  // The AAGUID itself doesnâ€™t directly identify a user but could potentially be used to infer the device type or model.
  // Storing the AAGUID is not mandatory but is useful for enforcing security policies, auditing, and accessing device
  // metadata. because of privacy, for now store it.
  bytes aaguid = 3;

  // This is the response returned by the browser after a WebAuthn credential
  // is created using navigator.credentials.create().
  // base64 encoded string
  string credential_creation_response = 4;

  // store the rp id
  string rp_id = 5;

  // store the rp origin
  string rp_origin = 6;
}

// K256Authenticator is a K256 authenticator.
message K256Authenticator {}

// Only valid for the duration of the session, public key for now is only k256 based.
// This is NOT IMPLEMENTED right now, but should be implemented for Session level credentials.
message SessionAuthenticator {
  /// block height at which it is invalidated
  int64 end_session_height = 1;
  /// seconds component of block consensus timestamp
  bool timed_out = 2;
}

// Params defines the set of module parameters.
message Params {
  option (amino.name)                 = "smartaccount/params";
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  // check if the smart account module is enabled.
  bool enabled = 1;
  // max_credential_allowed is the max number of smart credentials allowed per base account.
  uint32 max_credential_allowed = 2;
}
