syntax = 'proto3';

package types;

option go_package          = "github.com/provenance-io/provenance/x/metadata/legacy/v039";
option java_package        = "io.provenance.metadata.v0";
option java_multiple_files = true;

// Wrapper for an ISO8601 date string. EX: "2020-05-22"
message Date {
  string value = 1;
}

// Wrapper type for a standard uuid.
message UUID {
  string value = 1;
}

// Wrap a boolean result type.
message BooleanResult {
  bool value = 1;
}

// Wrap a location.
message Location {
  types.ProvenanceReference ref       = 1;
  string                    classname = 2;
}

// Wrap a factual data element.
message Fact {
  string         name          = 1;
  types.Location data_location = 2;
}

message ProvenanceReference {
  // [Req] [Scope.uuid]
  // Scope ID
  types.UUID scope_uuid = 1;
  // [Opt] [RecordGroup.group_uuid]
  // require record to be within a specific group
  types.UUID group_uuid = 2;
  // [Opt] [Record.result_hash]
  // specify a specific record inside a scope (and group) by result-hash
  string hash = 3;
  // [Opt] [Record.result_name]
  // specify a result-name of a record within a scope
  string name = 4;
}

// Wrapper around a standard signature.
message Signature {
  // Signature Detail
  string algo      = 1;
  string provider  = 2;
  string signature = 3;

  // Identity of signer
  types.SigningAndEncryptionPublicKeys signer = 4;
}

// A collection of signatures
message SignatureSet {
  repeated Signature signatures = 1;
}

enum PublicKeyType { ELLIPTIC = 0; }

enum PublicKeyCurve {
  SECP256K1 = 0;
  P256      = 1;
}

message PublicKey {
  bytes          public_key_bytes = 1;
  PublicKeyType  type             = 2;
  PublicKeyCurve curve            = 3;
}

message SigningAndEncryptionPublicKeys {
  types.PublicKey signing_public_key    = 1;
  types.PublicKey encryption_public_key = 2;
}

enum PartyType {
  PARTY_TYPE_UNKNOWN    = 0;
  PARTY_TYPE_ORIGINATOR = 1;
  PARTY_TYPE_SERVICER   = 2;
  PARTY_TYPE_INVESTOR   = 3;
  PARTY_TYPE_CUSTODIAN  = 4;
  PARTY_TYPE_OWNER      = 5;
  PARTY_TYPE_AFFILIATE  = 6;
  PARTY_TYPE_OMNIBUS    = 7;
  PARTY_TYPE_PROVENANCE = 8;
  PARTY_TYPE_MARKER     = 9;
}

// Audit
message AuditFields {
  GogoTimeHack created_date = 1;
  string                    created_by   = 2;
  GogoTimeHack updated_date = 3;
  string updated_by = 4;
  int32  version    = 5;
  string message    = 6;
}

// proto 3 timestamp structure (hack to get around gogo issues with invalid dates)
message GogoTimeHack {
  int64 seconds = 1;
  int32 nanos = 2;
}