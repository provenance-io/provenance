syntax = "proto3";
package provenance.metadata.v1;

import "gogoproto/gogo.proto";
import "provenance/metadata/v1/scope.proto";
import "provenance/metadata/v1/specification.proto";
import "provenance/metadata/v1/objectstore.proto";
import "provenance/metadata/v1/p8e/p8e.proto";

option go_package = "github.com/provenance-io/provenance/x/metadata/types";

option java_package        = "io.provenance.metadata.v1";
option java_multiple_files = true;

// Msg defines the Metadata Msg service.
service Msg {
  // ---- Primary Data Management -----

  // WriteScope adds or updates a scope.
  rpc WriteScope(MsgWriteScopeRequest) returns (MsgWriteScopeResponse);
  // DeleteScope deletes a scope and all associated Records, Sessions.
  rpc DeleteScope(MsgDeleteScopeRequest) returns (MsgDeleteScopeResponse);

  // WriteSession adds or updates a session context.
  rpc WriteSession(MsgWriteSessionRequest) returns (MsgWriteSessionResponse);

  // WriteRecord adds or updates a record.
  rpc WriteRecord(MsgWriteRecordRequest) returns (MsgWriteRecordResponse);
  // DeleteRecord deletes a record.
  rpc DeleteRecord(MsgDeleteRecordRequest) returns (MsgDeleteRecordResponse);

  // ---- Specification Management -----

  // WriteScopeSpecification adds or updates a scope specification.
  rpc WriteScopeSpecification(MsgWriteScopeSpecificationRequest) returns (MsgWriteScopeSpecificationResponse);
  // DeleteScopeSpecification deletes a scope specification.
  rpc DeleteScopeSpecification(MsgDeleteScopeSpecificationRequest) returns (MsgDeleteScopeSpecificationResponse);

  // WriteContractSpecification adds or updates a contract specification.
  rpc WriteContractSpecification(MsgWriteContractSpecificationRequest) returns (MsgWriteContractSpecificationResponse);
  // DeleteContractSpecification deletes a contract specification.
  rpc DeleteContractSpecification(MsgDeleteContractSpecificationRequest)
      returns (MsgDeleteContractSpecificationResponse);

  // WriteRecordSpecification adds or updates a record specification.
  rpc WriteRecordSpecification(MsgWriteRecordSpecificationRequest) returns (MsgWriteRecordSpecificationResponse);
  // DeleteRecordSpecification deletes a record specification.
  rpc DeleteRecordSpecification(MsgDeleteRecordSpecificationRequest) returns (MsgDeleteRecordSpecificationResponse);

  // ---- Deprecated Transition Endpoints -----

  // WriteP8eContractSpec adds a P8e v39 contract spec as a v40 ContractSpecification
  // It only exists to help facilitate the transition. Users should transition to WriteContractSpecification.
  rpc WriteP8eContractSpec(MsgWriteP8eContractSpecRequest) returns (MsgWriteP8eContractSpecResponse) {
    option deprecated = true;
  };
  // P8EMemorializeContract records the results of a P8e contract execution as a session and set of records in a scope
  // It only exists to help facilitate the transition. Users should transition to calling the individual Write methods.
  rpc P8eMemorializeContract(MsgP8eMemorializeContractRequest) returns (MsgP8eMemorializeContractResponse) {
    option deprecated = true;
  };

  // ---- Object Store Locator Management -----

  // BindOSLocator binds an owner address to a uri.
  rpc BindOSLocator(MsgBindOSLocatorRequest) returns (MsgBindOSLocatorResponse);
  // DeleteOSLocator deletes an existing ObjectStoreLocator record.
  rpc DeleteOSLocator(MsgDeleteOSLocatorRequest) returns (MsgDeleteOSLocatorResponse);
  // ModifyOSLocator updates an ObjectStoreLocator record by the current owner.
  rpc ModifyOSLocator(MsgModifyOSLocatorRequest) returns (MsgModifyOSLocatorResponse);
}

// MsgWriteScopeRequest is the request type for the Msg/WriteScope RPC method.
message MsgWriteScopeRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  Scope           scope   = 1 [(gogoproto.nullable) = false];
  repeated string signers = 2;
}

// MsgWriteScopeResponse is the response type for the Msg/WriteScope RPC method.
message MsgWriteScopeResponse {}

// MsgDeleteScopeRequest is the request type for the Msg/DeleteScope RPC method.
message MsgDeleteScopeRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  // Unique ID for the scope to delete
  bytes scope_id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "MetadataAddress",
    (gogoproto.moretags)   = "yaml:\"scope_id\""
  ];
  repeated string signers = 2;
}

// MsgDeleteScopeResponse is the response type for the Msg/DeleteScope RPC method.
message MsgDeleteScopeResponse {}

// MsgWriteSessionRequest is the request type for the Msg/WriteSession RPC method.
message MsgWriteSessionRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  Session         session = 1;
  repeated string signers = 2;
}

// MsgWriteSessionResponse is the response type for the Msg/WriteSession RPC method.
message MsgWriteSessionResponse {}

// MsgWriteRecordRequest is the request type for the Msg/WriteRecord RPC method.
message MsgWriteRecordRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  bytes session_id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "MetadataAddress",
    (gogoproto.moretags)   = "yaml:\"session_id\""
  ];

  Record          record  = 2;
  repeated string signers = 3;
}

// MsgWriteRecordResponse is the response type for the Msg/WriteRecord RPC method.
message MsgWriteRecordResponse {}

// MsgDeleteRecordRequest is the request type for the Msg/DeleteRecord RPC method.
message MsgDeleteRecordRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  bytes record_id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "MetadataAddress",
    (gogoproto.moretags)   = "yaml:\"record_id\""
  ];

  repeated string signers = 2;
}

// MsgDeleteRecordResponse is the response type for the Msg/DeleteRecord RPC method.
message MsgDeleteRecordResponse {}

// MsgWriteScopeSpecificationRequest is the request type for the Msg/WriteScopeSpecification RPC method.
message MsgWriteScopeSpecificationRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  ScopeSpecification specification = 1 [(gogoproto.nullable) = false];
  repeated string    signers       = 2;
}

// MsgWriteScopeSpecificationResponse is the response type for the Msg/WriteScopeSpecification RPC method.
message MsgWriteScopeSpecificationResponse {}

// MsgDeleteScopeSpecificationRequest is the request type for the Msg/DeleteScopeSpecification RPC method.
message MsgDeleteScopeSpecificationRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  // MetadataAddress for the scope specification to delete.
  bytes specification_id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "MetadataAddress",
    (gogoproto.moretags)   = "yaml:\"specification_id\""
  ];
  repeated string signers = 2;
}

// MsgDeleteScopeSpecificationResponse is the response type for the Msg/DeleteScopeSpecification RPC method.
message MsgDeleteScopeSpecificationResponse {}

// MsgWriteContractSpecificationRequest is the request type for the Msg/WriteContractSpecification RPC method.
message MsgWriteContractSpecificationRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  ContractSpecification specification = 1 [(gogoproto.nullable) = false];
  repeated string       signers       = 2;
}

// MsgWriteContractSpecificationResponse is the response type for the Msg/WriteContractSpecification RPC method.
message MsgWriteContractSpecificationResponse {}

// MsgDeleteContractSpecificationRequest is the request type for the Msg/DeleteContractSpecification RPC method.
message MsgDeleteContractSpecificationRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  // MetadataAddress for the contract specification to delete.
  bytes specification_id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "MetadataAddress",
    (gogoproto.moretags)   = "yaml:\"specification_id\""
  ];
  repeated string signers = 2;
}

// MsgDeleteContractSpecificationResponse is the response type for the Msg/DeleteContractSpecification RPC method.
message MsgDeleteContractSpecificationResponse {}

// MsgWriteRecordSpecificationRequest is the request type for the Msg/WriteRecordSpecification RPC method.
message MsgWriteRecordSpecificationRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  RecordSpecification specification = 1 [(gogoproto.nullable) = false];
  repeated string     signers       = 2;
}

// MsgWriteRecordSpecificationResponse is the response type for the Msg/WriteRecordSpecification RPC method.
message MsgWriteRecordSpecificationResponse {}

// MsgDeleteRecordSpecificationRequest is the request type for the Msg/DeleteRecordSpecification RPC method.
message MsgDeleteRecordSpecificationRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  // MetadataAddress for the record specification to delete.
  bytes specification_id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "MetadataAddress",
    (gogoproto.moretags)   = "yaml:\"specification_id\""
  ];
  repeated string signers = 2;
}

// MsgDeleteRecordSpecificationResponse is the response type for the Msg/DeleteRecordSpecification RPC method.
message MsgDeleteRecordSpecificationResponse {}

// MsgWriteP8eContractSpecRequest is the request type for the Msg/WriteP8eContractSpec RPC method.
message MsgWriteP8eContractSpecRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  // ContractSpec v39 p8e ContractSpect to be converted into a v40
  p8e.ContractSpec contractspec = 1 [(gogoproto.nullable) = false];
  repeated string  signers      = 2;
}

// MsgWriteP8eContractSpecResponse is the response type for the Msg/WriteP8eContractSpec RPC method.
message MsgWriteP8eContractSpecResponse {}

// MsgP8eMemorializeContractRequest is the request type for the Msg/P8eMemorializeContract RPC method.
message MsgP8eMemorializeContractRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  // The scope id of the object being add or modified on blockchain.
  string scope_id = 1;
  // The uuid of the contract execution.
  string group_id = 2;
  // The scope specification id.
  string scope_specification_id = 3;
  // The new recitals for the scope.  Used in leu of Contract for direct ownership changes.
  provenance.metadata.v1.p8e.Recitals recitals = 4;
  // The executed contract.
  provenance.metadata.v1.p8e.Contract contract = 5;
  // The contract signatures
  provenance.metadata.v1.p8e.SignatureSet signatures = 6;
  // The bech32 address of the notary (ie the broadcaster of this message).
  string invoker = 7;
}

// MsgP8eMemorializeContractResponse is the response type for the Msg/P8eMemorializeContract RPC method.
message MsgP8eMemorializeContractResponse {}

// MsgBindOSLocatorRequest is the request type for the Msg/BindOSLocator RPC method.
message MsgBindOSLocatorRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;
  // The object locator to bind the address to bind to the URI.
  ObjectStoreLocator locator = 1 [(gogoproto.nullable) = false];
}

// MsgBindOSLocatorResponse is the response type for the Msg/BindOSLocator RPC method.
message MsgBindOSLocatorResponse {
  ObjectStoreLocator locator = 1 [(gogoproto.nullable) = false];
}

// MsgDeleteOSLocatorRequest is the request type for the Msg/DeleteOSLocator RPC method.
message MsgDeleteOSLocatorRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // The record being removed
  ObjectStoreLocator locator = 1 [(gogoproto.nullable) = false];
}

// MsgDeleteOSLocatorResponse is the response type for the Msg/DeleteOSLocator RPC method.
message MsgDeleteOSLocatorResponse {
  ObjectStoreLocator locator = 1 [(gogoproto.nullable) = false];
}

// MsgModifyOSLocatorRequest is the request type for the Msg/ModifyOSLocator RPC method.
message MsgModifyOSLocatorRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;
  // The object locator to bind the address to bind to the URI.
  ObjectStoreLocator locator = 1 [(gogoproto.nullable) = false];
}

// MsgModifyOSLocatorResponse is the response type for the Msg/ModifyOSLocator RPC method.
message MsgModifyOSLocatorResponse {
  ObjectStoreLocator locator = 1 [(gogoproto.nullable) = false];
}
