syntax = "proto3";
package provenance.metadata.v1;

import "gogoproto/gogo.proto";
import "provenance/metadata/v1/scope.proto";
import "provenance/metadata/v1/contract.proto";
import "provenance/metadata/v1/specification.proto";

import "cosmos/tx/signing/v1beta1/signing.proto";

option go_package = "github.com/provenance-io/provenance/x/metadata/types";

option java_package        = "io.provenance.metadata.v1";
option java_multiple_files = true;

// Msg defines the Metadata Msg service.
service Msg {
  // MemorializeContract records the results of a P8e contract execution as a session and set of records in a scope
  rpc MemorializeContract(MsgMemorializeContractRequest) returns (MsgMemorializeContractResponse);
  // ChangeOwnership allows P8e contracts to record a new set of owners on a scope
  rpc ChangeOwnership(MsgChangeOwnershipRequest) returns (MsgChangeOwnershipResponse);

  // AddScope adds a new scope
  rpc AddScope(MsgAddScopeRequest) returns (MsgAddScopeResponse);
  // DeleteScope deletes a scope and all associated Records, Sessions
  rpc DeleteScope(MsgDeleteScopeRequest) returns (MsgDeleteScopeResponse);

  // AddSession adds a new session context to a scope
  rpc AddSession(MsgAddSessionRequest) returns (MsgAddSessionResponse);
  // AddRecord adds a set of records in a session within a scope
  rpc AddRecord(MsgAddRecordRequest) returns (MsgAddRecordResponse);
  // DeleteRecord deletes a record in a session
  rpc DeleteRecord(MsgDeleteRecordRequest) returns (MsgDeleteRecordResponse);

  // AddScopeSpecification adds a scope specification
  rpc AddScopeSpecification(MsgAddScopeSpecificationRequest) returns (MsgAddScopeSpecificationResponse);
  // DeleteScopeSpecification deletes a scope specification
  rpc DeleteScopeSpecification(MsgDeleteScopeSpecificationRequest) returns (MsgDeleteScopeSpecificationResponse);

  // AddContractSpecification adds a contract specification
  rpc AddContractSpecification(MsgAddContractSpecificationRequest) returns (MsgAddContractSpecificationResponse);
  // DeleteContractSpecification deletes a contract specification
  rpc DeleteContractSpecification(MsgDeleteContractSpecificationRequest)
      returns (MsgDeleteContractSpecificationResponse);

  // AddRecordSpecification adds a record specification
  rpc AddRecordSpecification(MsgAddRecordSpecificationRequest) returns (MsgAddRecordSpecificationResponse);
  // DeleteRecordSpecification deletes a record specification
  rpc DeleteRecordSpecification(MsgDeleteRecordSpecificationRequest) returns (MsgDeleteRecordSpecificationResponse);
}

// MsgMemorializeContractRequest is a request from a P8e execution environment to record results of a contract
message MsgMemorializeContractRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  // The scope of the object being modified on blockchain.
  string scope_id = 1;
  // The uuid of the contract execution.
  string session_id = 2;
  // Unique identifier for determining contract/session execution instance
  string execution_id = 3;
  // The executed contract.
  Contract contract = 4 [(gogoproto.nullable) = false];
  // The contract signatures
  cosmos.tx.signing.v1beta1.SignatureDescriptors signatures = 5 [(gogoproto.nullable) = false];
  // The address of the notary (ie the broadcaster of this message).
  string notary = 6;
}

// MsgMemorializeContractResponse from a contract execution memorialization request
message MsgMemorializeContractResponse {}

// MsgChangeOwnershipRequest records the result of a change ownership p8e contract execution
message MsgChangeOwnershipRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  // The scope of the object being modified on blockchain.
  string scope_id = 1 [(gogoproto.moretags) = "yaml:\"scope_id\""];
  // The uuid of the contract execution.
  string session_id = 2 [(gogoproto.moretags) = "yaml:\"session_id\""];
  // Unique identifier for determining contract/session execution instance
  string execution_id = 3 [(gogoproto.moretags) = "yaml:\"execution_id\""];
  // The recitals to use for the scope parties
  Recitals recitals = 4;
  // The executed contract.
  Contract contract = 5;
  // The contract signatures
  cosmos.tx.signing.v1beta1.SignatureDescriptors signatures = 6 [(gogoproto.nullable) = false];
  // The address of the notary (ie the broadcaster of this message).
  string notary = 7;
}

// MsgChangeOwnershipResponse from a contract execution ownership change request
message MsgChangeOwnershipResponse {}

// MsgAddScopeRequest adds a new scope
message MsgAddScopeRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  Scope           scope   = 1 [(gogoproto.nullable) = false];
  repeated string signers = 2;
}

// MsgAddScopeResponse from an add scope request
message MsgAddScopeResponse {}

// MsgDeleteScopeRequest deletes a scope
message MsgDeleteScopeRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  // Unique ID for the scope to delete
  bytes scope_id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "MetadataAddress",
    (gogoproto.moretags)   = "yaml:\"scope_id\""
  ];
  repeated string signers = 2;
}

// MsgDeleteScopeResponse from a delete scope request
message MsgDeleteScopeResponse {}

// MsgAddSessionRequest adds a new session
message MsgAddSessionRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  Session         session = 1;
  repeated string signers = 2;
}

// MsgAddSessionResponse from an add session request
message MsgAddSessionResponse {}

// MsgAddRecordRequest is a request to add a session of records to a scope
message MsgAddRecordRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  bytes session_id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "MetadataAddress",
    (gogoproto.moretags)   = "yaml:\"session_id\""
  ];

  Record          record  = 2;
  repeated string signers = 3;
}

// MsgAddRecordResponse from an add records request
message MsgAddRecordResponse {}

// MsgDeleteRecordRequest is a request to add a session of records to a scope
message MsgDeleteRecordRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  bytes record_id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "MetadataAddress",
    (gogoproto.moretags)   = "yaml:\"record_id\""
  ];

  repeated string signers = 2;
}

// MsgDeleteRecordResponse from a delete record request
message MsgDeleteRecordResponse {}

// MsgAddScopeSpecificationRequest is a request to add a scope specification
message MsgAddScopeSpecificationRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  ScopeSpecification specification = 1 [(gogoproto.nullable) = false];
  repeated string    signers       = 2;
}

// MsgAddScopeSpecificationResponse from an add scope specification request
message MsgAddScopeSpecificationResponse {}

// MsgDeleteScopeSpecificationRequest deletes a scope specification
message MsgDeleteScopeSpecificationRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  // MetadataAddress for the scope specification to delete.
  bytes specification_id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "MetadataAddress",
    (gogoproto.moretags)   = "yaml:\"specification_id\""
  ];
  repeated string signers = 2;
}

// MsgDeleteScopeSpecificationResponse from a delete scope specification request
message MsgDeleteScopeSpecificationResponse {}

// MsgAddContractSpecificationRequest is a request to add a contract specification
message MsgAddContractSpecificationRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  ContractSpecification specification = 1 [(gogoproto.nullable) = false];
  repeated string       signers       = 2;
}

// AddContractSpecificationResponse from an add contract specification request
message MsgAddContractSpecificationResponse {}

// MsgDeleteContractSpecificationRequest deletes a contract specification
message MsgDeleteContractSpecificationRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  // MetadataAddress for the contract specification to delete.
  bytes specification_id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "MetadataAddress",
    (gogoproto.moretags)   = "yaml:\"specification_id\""
  ];
  repeated string signers = 2;
}

// MsgDeleteContractSpecificationResponse from a delete contract specification request
message MsgDeleteContractSpecificationResponse {}

// MsgAddRecordSpecificationRequest is a request to add a record specification
message MsgAddRecordSpecificationRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  RecordSpecification specification = 1 [(gogoproto.nullable) = false];
  repeated string     signers       = 2;
}

// MsgAddRecordSpecificationResponse from an add record specification request
message MsgAddRecordSpecificationResponse {}

// MsgDeleteRecordSpecificationRequest deletes a record specification
message MsgDeleteRecordSpecificationRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer)         = false;
  option (gogoproto.goproto_getters)  = false;

  // MetadataAddress for the record specification to delete.
  bytes specification_id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customtype) = "MetadataAddress",
    (gogoproto.moretags)   = "yaml:\"specification_id\""
  ];
  repeated string signers = 2;
}

// MsgDeleteRecordSpecificationResponse from a delete record specification request
message MsgDeleteRecordSpecificationResponse {}
