syntax = "proto3";
package provenance.metadata.v1;

import "google/api/annotations.proto";
import "provenance/metadata/v1/objectstore.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/provenance-io/provenance/x/metadata/types";

option java_package        = "io.provenance.metadata.v1";
option java_multiple_files = true;

// Query defines the Metadata Query service.
service QueryOS {

  // Params queries all parameters.
  rpc Params(OSLocatorQueryParamsRequest) returns (OSLocatorQueryParamsResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/locator/params";
  }

  // Scope returns a specific scope by id
  rpc OSLocation(OSLocatorRequest) returns (OSLocatorResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/locator/{owner}";
  }

}

// OSLocationRequest is used for requesting a Objectstore location by name
message OSLocatorRequest {
  string owner = 1;
}

// ScopeResponse is the response to a scope request.
message OSLocatorResponse {
  ObjectStoreLocator   locator = 1;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message OSLocatorQueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message OSLocatorQueryParamsResponse {
  // params defines the parameters of the module.
  OSLocatorParams params = 1 [(gogoproto.nullable) = false];
}

// Params defines the parameters for the auth module.
message OSLocatorParams {
  uint64 max_uri_characters     = 1 [(gogoproto.customtype) = "uint64", (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"max_uri_characters\""];
}
