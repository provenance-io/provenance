syntax = "proto3";
package provenance.metadata.v1;

option go_package = "github.com/provenance-io/provenance/x/metadata/types";

option java_package        = "io.provenance.metadata.v1";
option java_multiple_files = true;

import "gogoproto/gogo.proto";
import "provenance/metadata/v1/specification.proto";
import "google/protobuf/timestamp.proto";

/*

  Contract Memorialization

  When memorializing a contract the only pieces that matter are the results and facts.  We scope these inside the
  contract_group structure to represent a context around this information and keep the controlling parties (recitals)
  attached which prevents a co-mingling of the rights to change/update these records.  The proof submitted to record
  the facts is part of the readset (the submitted Contract package) and is not important now that the information has
  been recorded.  If the source is required it can be pulled from the ReadSet and referenced (or any of the members
  that stored it under the associated URI.

*/

// Contracts are the collection results of an execution of code within the P8e execution environment
message Contract {
  Definition definition = 1 [(gogoproto.nullable) = false];
  // Points to the proto for the contractSpec
  RecordReference spec = 2 [(gogoproto.nullable) = false];
  // Invoker address of this contract
  string invoker = 3;
  // A repeated list of references both on/off chain used by the contract conditions/considerations
  repeated RecordReference inputs = 4 [(gogoproto.nullable) = false];
  // A set of conditions to evaluate first, if these conditions are not all succcessful then the considerations
  // are not evaluated.
  repeated Condition conditions = 5 [(gogoproto.nullable) = false];
  // A collection of outputs summarizing the execution of processes that will result in records within the scope
  repeated Consideration considerations = 6 [(gogoproto.nullable) = false];
  // The parties and the roles they are performing as associated with the contract that was executed.
  Recitals recitals = 7 [(gogoproto.nullable) = false];
}

// Recitals is a list of recital
message Recitals {
  repeated Recital parties = 1;
}

// RecordReference wrap a factual data element.
message RecordReference {
  // name of the record (used to map against the contract's specification)
  string name = 1;
  // reference to an existing record on chain
  Reference reference = 2 [(gogoproto.nullable) = false];
}

// Conditions are constraints that are checked prior to contract execution
message Condition {
  // conidtion_name will match the name of a condition listed on the record group specification
  string condition_name = 1;
  // the result of the condition evaluation
  ExecutionResult result = 2 [(gogoproto.nullable) = false];
}

// Considerations are outputs of a contract
message Consideration {
  string consideration_name = 1;
  // Data pushed to a consideration that will ultimately match the output_spec of the consideration
  repeated ProposedRecord inputs = 2 [(gogoproto.nullable) = false];
  // result of evaluating this condition
  ExecutionResult result = 3 [(gogoproto.nullable) = false];
}

// Recital is an address with/in a given role associated with a contract
message Recital {
  // the role this address is performing for this contract execution
  PartyType signer_role = 1;
  // address of the account performing the role above
  string address = 2;
}

// ProposedRecord is an input to a consideration defined at runtime, and emitted as a proposed fact for inclusion on the
// blockchain.  If this contract is successfully processed this value will be stored as a record within the scope
message ProposedRecord {
  // name to use for the record within the scope
  string name = 1;
  // hash of the actual value (off-chain) this record is referencing
  string hash = 2;
  // Type information for the proposed record
  string type_name = 3;
  // If this proposed fact is intended to replace an existing value, the existing record must be referenced explicitly
  Reference ancestor = 4 [(gogoproto.nullable) = false];
}

// ExecutionResult is a structure that holds the output of a given execution
message ExecutionResult {
  // output of the execution of the process or method within the contract
  ProposedRecord output = 1 [(gogoproto.nullable) = false];
  // generic result classification (pass/fail/skip)
  ResultType result = 2;
  // the timestap of when the execution result was created
  google.protobuf.Timestamp recorded_at = 3
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"recorded_at\""];
  ;
  // an associated error message (if applicable)
  string error_message = 4;
}

// Result indicates the various states of execution of a record
enum ResultType {
  // RESULT_TYPE_UNSPECIFIED indicates an unset condition
  RESULT_TYPE_UNSPECIFIED = 0;
  // RESULT_TYPE_PASS indicates the execution was successfult
  RESULT_TYPE_PASS = 1;
  // RESULT_TYPE_SKIP indicates condition/consideration was skipped due to missing inputs or delayed execution
  RESULT_TYPE_SKIP = 2;
  // RESULT_TYPE_FAIL indicates the execution of the condition/consideration failed.
  RESULT_TYPE_FAIL = 3;
}

// Definition encapsulates the information required to uniquely associate a resource with a type and location
message Definition {
  // a common name given to this definition.  The name is used to match up with references to this part of the spec
  string name = 1;
  // location of the resource on chain
  Reference resource_location = 2;
  // address of the account that created this definition
  string creator_address = 3;
  // The type of data definition (proposed, fact/recorded, list)
  DefinitionType definition_type = 4;
}

// Reference is a multipart structure that defines a reference to a piece of data recorded within a scope
message Reference {

  // TODO this structure should probably be replaced with a MetadataAddress

  // unique identifer for the scope being referenced
  string scope_id = 1;
  // require record to be within a specific group (optional)
  string group_id = 3;
  // specify a specific record inside a scope (and group) by result-hash (optional)
  string hash = 4;
  // specify a result-name of a record within a scope (optional)
  string name = 5;
  // type/classname of the target data (optional)
  string type_name = 6;
}