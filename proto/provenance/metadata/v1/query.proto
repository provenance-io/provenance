syntax = "proto3";
package provenance.metadata.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "provenance/metadata/v1/metadata.proto";
import "provenance/metadata/v1/scope.proto";
import "provenance/metadata/v1/specification.proto";
import "provenance/metadata/v1/objectstore.proto";

option go_package = "github.com/provenance-io/provenance/x/metadata/types";

option java_package        = "io.provenance.metadata.v1";
option java_multiple_files = true;

// Query defines the Metadata Query service.
service Query {
  // Params queries the parameters of x/metadata module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/params";
  }

  // Scope returns a specific scope by id
  rpc Scope(ScopeRequest) returns (ScopeResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/scope/{scope_uuid}";
  }

  // SessionContextByUUID returns a specific session context within a scope (or all sessions)
  rpc SessionContextByUUID(SessionContextByUUIDRequest) returns (SessionContextByUUIDResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/scope/uuid/{scope_uuid}/session/{session_uuid}";
  }

  // SessionContextByID returns a specific session context within a scope (or all sessions)
  rpc SessionContextByID(SessionContextByIDRequest) returns (SessionContextByIDResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/scope/id/{scope_id}/session/{session_id}";
  }

  // RecordsByScopeUUID returns a collection of the records in a scope by scope uuid or a specific one by name
  rpc RecordsByScopeUUID(RecordsByScopeUUIDRequest) returns (RecordsByScopeUUIDResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/scope/uuid/{scope_uuid}/records/{name}";
  }

  // RecordsByScopeID returns a collection of the records in a scope by scope bech32 id or a specific one by name
  rpc RecordsByScopeID(RecordsByScopeIDRequest) returns (RecordsByScopeIDResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/scope/id/{scope_id}/records/{name}";
  }

  // Ownership returns a list of scope identifiers that list the given address as a data or value owner
  rpc Ownership(OwnershipRequest) returns (OwnershipResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/ownership/{address}";
  }

  // ValueOwnership returns a list of scope identifiers that list the given address as the value owner
  rpc ValueOwnership(ValueOwnershipRequest) returns (ValueOwnershipResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/valueownership/{address}";
  }

  // ScopeSpecification returns a scope specification for the given specification uuid
  rpc ScopeSpecification(ScopeSpecificationRequest) returns (ScopeSpecificationResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/scopespec/{specification_uuid}";
  }

  // ContractSpecification returns a contract specification for the given specification uuid
  rpc ContractSpecification(ContractSpecificationRequest) returns (ContractSpecificationResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/contractspec/{specification_uuid}";
  }

  // ContractSpecification returns a contract specification and record specifications for the given contract
  // specification uuid
  rpc ContractSpecificationExtended(ContractSpecificationExtendedRequest)
      returns (ContractSpecificationExtendedResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/contractspec/{specification_uuid}/extended";
  }

  // RecordSpecificationsForContractSpecification returns the record specifications for the given contract specification
  // uuid
  rpc RecordSpecificationsForContractSpecification(RecordSpecificationsForContractSpecificationRequest)
      returns (RecordSpecificationsForContractSpecificationResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/contractspec/{contract_specification_uuid}/recordspecs";
  }

  // RecordSpecification returns a record specification for the given specification uuid
  rpc RecordSpecification(RecordSpecificationRequest) returns (RecordSpecificationResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/recordspec/{contract_specification_uuid}/{name}";
  }

  // ---- OS locator methods -----
  // Params queries all parameters for os locator sub module.
  rpc OSLocatorParams(OSLocatorQueryParamsRequest) returns (OSLocatorQueryParamsResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/locator/params";
  }

  // for querying oslocator by address.
  rpc OSLocator(OSLocatorRequest) returns (OSLocatorResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/locator/{owner}";
  }

  // for querying oslocator by uri.
  rpc OSLocatorByURI(OSLocatorByURIRequest) returns (OSLocatorResponses) {
    option (google.api.http).get = "/provenance/metadata/v1/locator/{uri}";
  }

  rpc OSLocatorByScopeUUID(ScopeRequest) returns (OSLocatorScopeResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/locator/{scope_uuid}";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// ScopeRequest is used for requesting a scope by id
message ScopeRequest {
  string scope_uuid = 1 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
}

// ScopeResponse is the response to a scope request.
message ScopeResponse {
  Scope            scope    = 1;
  repeated Session sessions = 2 [(gogoproto.moretags) = "yaml:\"sessions\""];
  repeated Record  records  = 3;
}

// OwnershipRequest looks for all scope level resources associated with the given addrss
message OwnershipRequest {
  string address = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// OwnershipResponse is the reponse to the ownership request and includes a list of scope identifiers
message OwnershipResponse {
  // A list of scope ids (uuid) associated with the given address.
  repeated string scope_uuids = 1 [(gogoproto.moretags) = "yaml:\"scope_uuids\""];

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// ValueOwnershipRequest looks for all scope level resources that have the address as the value owner
message ValueOwnershipRequest {
  string address = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// ValueOwnershipResponse is the reponse to the Valueownership request and includes a list of scope identifiers
message ValueOwnershipResponse {
  // A list of scope ids (uuid) associated with the given address.
  repeated string scope_uuids = 1 [(gogoproto.moretags) = "yaml:\"scope_uuids\""];

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// SessionContextByUUIDRequest returns the record sessions for a given scope identifer or optionally a specific record
// session
message SessionContextByUUIDRequest {
  string scope_uuid   = 1 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
  string session_uuid = 2 [(gogoproto.moretags) = "yaml:\"session_uuid\""];
}

// SessionContextByUUIDResponse is the response to a SessionContextByUUIDRequest
message SessionContextByUUIDResponse {
  string scope_id   = 1 [(gogoproto.moretags) = "yaml:\"scope_id\""];
  string session_id = 2 [(gogoproto.moretags) = "yaml:\"session_id\""];

  repeated Session sessions = 3;
}

// SessionContextByIDRequest returns the record sessions for a given scope identifer or optionally a specific record
// session
message SessionContextByIDRequest {
  string scope_id   = 1 [(gogoproto.moretags) = "yaml:\"scope_id\""];
  string session_id = 2 [(gogoproto.moretags) = "yaml:\"session_id\""];
}

// SessionContextByIDResponse is the response to a SessionContextByIDRequest
message SessionContextByIDResponse {
  string           scope_id   = 1 [(gogoproto.moretags) = "yaml:\"scope_id\""];
  string           session_id = 2 [(gogoproto.moretags) = "yaml:\"session_id\""];
  repeated Session sessions   = 3;
}

// RecordsByScopeUUIDRequest is a request for all of the records in a specific scope by uuid or a specific record if a
// name is given.
message RecordsByScopeUUIDRequest {
  string scope_uuid = 1 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
  string name       = 2;
}

// RecordsByScopeUUIDResponse is the response to a RecordsByScopeUUIDRequest
message RecordsByScopeUUIDResponse {
  string          scope_uuid = 1 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
  string          scope_id   = 2 [(gogoproto.moretags) = "yaml:\"scope_id\""];
  repeated Record records    = 3;
}

// RecordsByScopeIDRequest is a request for all of the records in a specific scope by bech32 id or a specific record if
// a name is given.
message RecordsByScopeIDRequest {
  string scope_id = 1 [(gogoproto.moretags) = "yaml:\"scope_id\""];
  string name     = 2;
}

// RecordsByScopeIDResponse is the response to a RecordsByScopeIDRequest
message RecordsByScopeIDResponse {
  string          scope_uuid = 1 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
  string          scope_id   = 2 [(gogoproto.moretags) = "yaml:\"scope_id\""];
  repeated Record records    = 3;
}

// ScopeSpecificationRequest is used for requesting a scope specification by uuid
message ScopeSpecificationRequest {
  string specification_uuid = 1 [(gogoproto.moretags) = "yaml:\"specification_uuid\""];
}

// ScopeSpecification is the response to a scope specification request.
message ScopeSpecificationResponse {
  ScopeSpecification scope_specification = 1 [(gogoproto.moretags) = "yaml:\"scope_specification\""];
}

// ContractSpecificationRequest is used for requesting a contract specification by uuid
message ContractSpecificationRequest {
  string specification_uuid = 1 [(gogoproto.moretags) = "yaml:\"specification_uuid\""];
}

// ContractSpecificationResponse is the response to a contract specification request.
message ContractSpecificationResponse {
  ContractSpecification contract_specification = 1 [(gogoproto.moretags) = "yaml:\"contract_specification\""];
}

// ContractSpecificationExtendedRequest is used for requesting a contract specification with extended data by contract
// specification uuid
message ContractSpecificationExtendedRequest {
  string specification_uuid = 1 [(gogoproto.moretags) = "yaml:\"specification_uuid\""];
}

// ContractSpecificationExtendedResponse is the response to a contract specification extended request.
message ContractSpecificationExtendedResponse {
  ContractSpecification        contract_specification = 1 [(gogoproto.moretags) = "yaml:\"contract_specification\""];
  repeated RecordSpecification record_specifications  = 2 [(gogoproto.moretags) = "yaml:\"record_specifications\""];
}

// RecordSpecificationsForContractSpecificationRequest is used for requesting record specifications by contract
// specification uuid
message RecordSpecificationsForContractSpecificationRequest {
  string contract_specification_uuid = 1 [(gogoproto.moretags) = "yaml:\"contract_specification_uuid\""];
}

// RecordSpecificationResponseResponse is the response to a record specification for contract specification request.
message RecordSpecificationsForContractSpecificationResponse {
  repeated RecordSpecification record_specifications = 1 [(gogoproto.moretags) = "yaml:\"record_specifications\""];
}

// RecordSpecificationRequest is used for requesting a record specification by uuid
message RecordSpecificationRequest {
  string contract_specification_uuid = 1 [(gogoproto.moretags) = "yaml:\"contract_specification_uuid\""];
  string name                        = 2;
}

// RecordSpecificationResponse is the response to a record specification request.
message RecordSpecificationResponse {
  RecordSpecification record_specification = 1 [(gogoproto.moretags) = "yaml:\"record_specification\""];
}

// OSLocationRequest is used for requesting a Objectstore location by name
message OSLocatorRequest {
  string owner = 1;
}

message OSLocatorByURIRequest {
  string uri = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// OSLocatorResponse is the response to a os locator request.
message OSLocatorResponse {
  ObjectStoreLocator   locator = 1;
}


// OSLocatorQueryParamsRequest is the request type for the Query/Params RPC method.
message OSLocatorQueryParamsRequest {}

// OSLocatorQueryParamsResponse is the response type for the Query/Params RPC method.
message OSLocatorQueryParamsResponse {
  // params defines the parameters of the module.
  OSLocatorParams params = 1 [(gogoproto.nullable) = false];
}

// Params defines the parameters for the metadata-locator module methods.
message OSLocatorParams {
  uint64 max_uri_characters     = 1 [(gogoproto.customtype) = "uint64", (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"max_uri_characters\""];
}

message OSLocatorResponses {
  repeated ObjectStoreLocator   locator = 1[(gogoproto.nullable) = false];

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message OSLocatorScopeResponse {
  repeated ObjectStoreLocator   locator = 1[(gogoproto.nullable) = false];
}
