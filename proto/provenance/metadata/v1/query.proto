syntax = "proto3";
package provenance.metadata.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "provenance/metadata/v1/metadata.proto";
import "provenance/metadata/v1/scope.proto";
import "provenance/metadata/v1/specification.proto";
import "provenance/metadata/v1/objectstore.proto";

option go_package = "github.com/provenance-io/provenance/x/metadata/types";

option java_package        = "io.provenance.metadata.v1";
option java_multiple_files = true;

// Query defines the Metadata Query service.
service Query {
  // Params queries the parameters of x/metadata module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/params";
  }

  // ---- Primary Data Queries -----

  // Scope searches for a scope.
  //
  // The scope id, if provided, must either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,
  // e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if provided, must be a bech32 session address,
  // e.g. session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The record_addr, if provided, must be a
  // bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. Case doesn't
  // matter.
  //
  // Providing a session addr or record addr does not limit the sessions and records returned.
  // Those parameters are only used to find the scope.
  //
  // * If a scope id is provided, the other input is ignored and that scope is returned.
  // * Otherwise, if a session addr is provided, the record addr is ignored and the scope containing that session is
  // returned.
  // * Lastly, if a record addr is provided, the scope containing that record is returned.
  //
  // By default, sessions and records are not included.
  // Set include_sessions and/or include_records to true to include sessions and/or records.
  rpc Scope(ScopeRequest) returns (ScopeResponse) {
    option (google.api.http) = {
      get: "/provenance/metadata/v1/scope/{scope_id}"
      additional_bindings: [
        {get: "/provenance/metadata/v1/session/{session_addr}/scope"},
        {get: "/provenance/metadata/v1/record/{record_addr}/scope"}
      ]
    };
  }

  // Sessions searches for sessions.
  //
  // The scope id can either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
  // scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can either be a uuid or session address, e.g.
  // session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. Case doesn't matter.
  //
  // * If only a session id is provided, and it is an address, then the scope id will be ignored and the session id used
  // to find a single session.
  // * If only a session id is provided, and it is a uuid, a bad request is returned.
  // * If only a scope id is provided, all sessions for that scope will be returned.
  // * If both a scope id and session id is provided, and the session id is a uuid, then the session in the provided
  // scope, with the provided session uuid is returned.
  // * If neither a scope id, nor a session id are provided, a bad request is returned.
  rpc Sessions(SessionsRequest) returns (SessionsResponse) {
    option (google.api.http) = {
      get: "/provenance/metadata/v1/session/{session_id}",
      additional_bindings: [
        {get: "/provenance/metadata/v1/scope/{scope_id}/sessions"},
        {get: "/provenance/metadata/v1/scope/{scope_id}/session/{session_id}"}
      ]
    };
  }

  // Records searches for records.
  //
  // The record_addr, if provided, must be a bech32 record address, e.g.
  // record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The scope id can either be scope uuid, e.g.
  // 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,
  // the session_id can either be a uuid or session address, e.g.
  // session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The name is the name of the record you're
  // interested in. Case doesn't matter.
  //
  // * If a record_addr is provided, the rest of the fields are ignored and that record is returned.
  // * If only a scope_id is provided, all records in that scope are returned.
  // * If only a session_id is provided, it must be a bech32 session address. All records in that session are returned.
  // * If a name is provided, either a scope_id must be provided or a session_id must be provided as a bech32 session
  // address. The record with the provided name in the provided context is returned.
  rpc Records(RecordsRequest) returns (RecordsResponse) {
    option (google.api.http) = {
      get: "/provenance/metadata/v1/record/{record_addr}",
      additional_bindings: [
        {get: "/provenance/metadata/v1/scope/{scope_id}/records"},
        {get: "/provenance/metadata/v1/scope/{scope_id}/record/{name}"},
        {get: "/provenance/metadata/v1/scope/{scope_id}/session/{session_id}/records"},
        {get: "/provenance/metadata/v1/scope/{scope_id}/session/{session_id}/record/{name}"},
        {get: "/provenance/metadata/v1/session/{session_id}/records"},
        {get: "/provenance/metadata/v1/session/{session_id}/record/{name}"}
      ]
    };
  }

  // Ownership returns the scope identifiers that list the given address as either a data or value owner.
  rpc Ownership(OwnershipRequest) returns (OwnershipResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/ownership/{address}";
  }

  // ValueOwnership returns the scope identifiers that list the given address as the value owner.
  rpc ValueOwnership(ValueOwnershipRequest) returns (ValueOwnershipResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/valueownership/{address}";
  }

  // ---- Specification Queries -----

  // ScopeSpecification returns a scope specification for the given specification uuid.
  rpc ScopeSpecification(ScopeSpecificationRequest) returns (ScopeSpecificationResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/scopespec/{specification_uuid}";
  }

  // ContractSpecification returns a contract specification for the given specification uuid.
  rpc ContractSpecification(ContractSpecificationRequest) returns (ContractSpecificationResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/contractspec/{specification_uuid}";
  }

  // ContractSpecificationExtended returns a contract specification and record specifications for the given contract
  // specification uuid.
  rpc ContractSpecificationExtended(ContractSpecificationExtendedRequest)
      returns (ContractSpecificationExtendedResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/contractspec/{specification_uuid}/extended";
  }

  // RecordSpecificationsForContractSpecification returns the record specifications for the given contract specification
  // uuid.
  rpc RecordSpecificationsForContractSpecification(RecordSpecificationsForContractSpecificationRequest)
      returns (RecordSpecificationsForContractSpecificationResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/contractspec/{contract_specification_uuid}/recordspecs";
  }

  // RecordSpecification returns a record specification for the given contract specification uuid and record name.
  rpc RecordSpecification(RecordSpecificationRequest) returns (RecordSpecificationResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/recordspec/{contract_specification_uuid}/{name}";
  }

  // RecordSpecificationByID returns a record specification for the given record specification id.
  rpc RecordSpecificationByID(RecordSpecificationByIDRequest) returns (RecordSpecificationByIDResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/recordspec/id/{record_specification_id}";
  }

  // ---- Object Store Locator Queries -----

  // OSLocatorParams returns all parameters for the os locator sub module.
  rpc OSLocatorParams(OSLocatorParamsRequest) returns (OSLocatorParamsResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/locator/params";
  }

  // OSLocator returns an ObjectStoreLocator by its owner's address.
  rpc OSLocator(OSLocatorRequest) returns (OSLocatorResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/locator/{owner}";
  }

  // OSLocator returns all ObjectStoreLocator for a locator uri.
  rpc OSLocatorByURI(OSLocatorByURIRequest) returns (OSLocatorByURIResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/locator/uri/{uri}";
  }

  // OSLocatorByScopeUUID returns all ObjectStoreLocator for a for all signer's present in the specified scope.
  rpc OSLocatorByScopeUUID(OSLocatorByScopeUUIDRequest) returns (OSLocatorByScopeUUIDResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/locator/scope/{scope_uuid}";
  }

  // OSAllLocators returns all ObjectStoreLocator entries.
  rpc OSAllLocators(OSAllLocatorsRequest) returns (OSAllLocatorsResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/locators/all";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// ScopeRequest is the request type for the Query/Scope RPC method.
message ScopeRequest {
  // scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.
  // scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
  string scope_id = 1 [(gogoproto.moretags) = "yaml:\"scope_id\""];
  // session_addr is a bech32 session address, e.g.
  // session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
  string session_addr = 2 [(gogoproto.moretags) = "yaml:\"session_addr\""];
  // record_addr is a bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
  string record_addr = 3 [(gogoproto.moretags) = "yaml:\"record_addr\""];

  // include_sessions is a flag for whether or not the sessions in the scope should be included.
  bool include_sessions = 10 [(gogoproto.moretags) = "yaml:\"include_sessions\""];
  // include_records is a flag for whether or not the records in the scope should be included.
  bool include_records = 11 [(gogoproto.moretags) = "yaml:\"include_records\""];
}

// ScopeResponse is the response type for the Query/Scope RPC method.
message ScopeResponse {
  // scope is the wrapped scope result.
  ScopeWrapper scope = 1;
  // sessions is any number of wrapped sessions in this scope (if requested).
  repeated SessionWrapper sessions = 2 [(gogoproto.moretags) = "yaml:\"sessions,omitempty\""];
  // records is any number of wrapped records in this scope (if requested).
  repeated RecordWrapper records = 3 [(gogoproto.moretags) = "yaml:\"records,omitempty\""];

  // request is a copy of the request that generated these results.
  ScopeRequest request = 98;
}

// SessionWrapper contains a single scope and its uuid.
message ScopeWrapper {
  // scope is the on-chain scope message.
  Scope scope = 1;
  // scope_addr is the bech32 address of the scope, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
  string scope_addr = 2 [(gogoproto.moretags) = "yaml:\"scope_addr\""];
  // scope_uuid is the uuid of this scope, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0.
  string scope_uuid = 3 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
}

// SessionsRequest is the request type for the Query/Sessions RPC method.
message SessionsRequest {
  // scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.
  // scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
  string scope_id = 1 [(gogoproto.moretags) = "yaml:\"scope_id\""];
  // session_id can either be a uuid, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address, e.g.
  // session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. This can only be a uuid if a scope_id is also
  // provided.
  string session_id = 2 [(gogoproto.moretags) = "yaml:\"session_id\""];

  // include_scope is a flag for whether or not the scope containing these sessions should be included.
  bool include_scope = 10 [(gogoproto.moretags) = "yaml:\"include_scope\""];
  // include_records is a flag for whether or not the records in these sessions should be included.
  bool include_records = 11 [(gogoproto.moretags) = "yaml:\"include_records\""];
}

// SessionsResponse is the response type for the Query/Sessions RPC method.
message SessionsResponse {
  // scope is the wrapped scope that holds these sessions (if requested).
  ScopeWrapper scope = 1 [(gogoproto.moretags) = "yaml:\"scope,omitempty\""];
  // sessions is any number of wrapped session results.
  repeated SessionWrapper sessions = 2;
  // records is any number of wrapped records contained in these sessions (if requested).
  repeated RecordWrapper records = 3 [(gogoproto.moretags) = "yaml:\"records,omitempty\""];

  // request is a copy of the request that generated these results.
  SessionsRequest request = 98;
}

// SessionWrapper contains a single session and some extra identifiers for it.
message SessionWrapper {
  // session is the on-chain session message.
  Session session = 1;
  // scope_addr is the bech32 address of the scope containing this session, e.g.
  // scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
  string scope_addr = 2 [(gogoproto.moretags) = "yaml:\"scope_addr\""];
  // session_addr is the bech32 address of the session, e.g.
  // session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
  string session_addr = 3 [(gogoproto.moretags) = "yaml:\"session_addr\""];
  // scope_uuid is the uuid of the scope containing this session, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0.
  string scope_uuid = 4 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
  // session_uuid is the uuid of the session, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0.
  // This is meaningless without the added context of the scope uuid (or scope addr).
  string session_uuid = 5 [(gogoproto.moretags) = "yaml:\"session_uuid\""];
}

// RecordsRequest is the request type for the Query/Records RPC method.
message RecordsRequest {
  // record_addr is a bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
  string record_addr = 1 [(gogoproto.moretags) = "yaml:\"record_addr\""];
  // scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.
  // scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
  string scope_id = 2 [(gogoproto.moretags) = "yaml:\"scope_id\""];
  // session_id can either be a uuid, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address, e.g.
  // session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. This can only be a uuid if a scope_id is also
  // provided.
  string session_id = 3 [(gogoproto.moretags) = "yaml:\"session_id\""];
  // name is the name of the record to look for
  string name = 4;

  // include_scope is a flag for whether or not the scope containing these records should be included.
  bool include_scope = 10 [(gogoproto.moretags) = "yaml:\"include_scope\""];
  // include_sessions is a flag for whether or not the sessions containing these records should be included.
  bool include_sessions = 11 [(gogoproto.moretags) = "yaml:\"include_sessions\""];
}

// RecordsResponse is the response type for the Query/Records RPC method.
message RecordsResponse {
  // scope is the wrapped scope that holds these records (if requested).
  ScopeWrapper scope = 1 [(gogoproto.moretags) = "yaml:\"scope,omitempty\""];
  // sessions is any number of wrapped sessions that hold these records (if requested).
  repeated SessionWrapper sessions = 2 [(gogoproto.moretags) = "yaml:\"sessions,omitempty\""];
  // records is any number of wrapped record results.
  repeated RecordWrapper records = 3;

  // request is a copy of the request that generated these results.
  RecordsRequest request = 98;
}

// RecordWrapper contains a single record and some extra identifiers for it.
message RecordWrapper {
  // record is the on-chain record message.
  Record record = 1;
  // scope_addr is the bech32 address of the scope containing this record, e.g.
  // scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
  string scope_addr = 2 [(gogoproto.moretags) = "yaml:\"scope_addr\""];
  // session_addr is the bech32 address of the session containing this record, e.g.
  // session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
  string session_addr = 3 [(gogoproto.moretags) = "yaml:\"session_addr\""];
  // record_addr is the bech32 address of this record, e.g.
  // record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3
  string record_addr = 4 [(gogoproto.moretags) = "yaml:\"record_addr\""];
  // scope_uuid is the uuid of the scope containing this record, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0.
  string scope_uuid = 5 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
  // session_uuid is the uuid of the session containing this record, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0.
  // This is meaningless without the added context of the scope_uuid (or scope_addr).
  string session_uuid = 6 [(gogoproto.moretags) = "yaml:\"session_uuid\""];
}

// OwnershipRequest is the request type for the Query/Ownership RPC method.
message OwnershipRequest {
  string address = 1;

  // pagination defines optional pagination parameters for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// OwnershipResponse is the response type for the Query/Ownership RPC method.
message OwnershipResponse {
  // A list of scope ids (uuid) associated with the given address.
  repeated string scope_uuids = 1 [(gogoproto.moretags) = "yaml:\"scope_uuids\""];

  // pagination provides the pagination information of this response.
  cosmos.base.query.v1beta1.PageResponse pagination = 99;
}

// ValueOwnershipRequest is the request type for the Query/ValueOwnership RPC method.
message ValueOwnershipRequest {
  string address = 1;

  // pagination defines optional pagination parameters for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// ValueOwnershipResponse is the response type for the Query/ValueOwnership RPC method.
message ValueOwnershipResponse {
  // A list of scope ids (uuid) associated with the given address.
  repeated string scope_uuids = 1 [(gogoproto.moretags) = "yaml:\"scope_uuids\""];

  // pagination provides the pagination information of this response.
  cosmos.base.query.v1beta1.PageResponse pagination = 99;
}

// ScopeSpecificationRequest is the request type for the Query/ScopeSpecification RPC method.
message ScopeSpecificationRequest {
  string specification_uuid = 1 [(gogoproto.moretags) = "yaml:\"specification_uuid\""];
}

// ScopeSpecificationResponse is the response type for the Query/ScopeSpecification RPC method.
message ScopeSpecificationResponse {
  ScopeSpecification scope_specification = 1 [(gogoproto.moretags) = "yaml:\"scope_specification\""];
  string             specification_uuid  = 2 [(gogoproto.moretags) = "yaml:\"specification_uuid\""];
}

// ContractSpecificationRequest is the request type for the Query/ContractSpecification RPC method.
message ContractSpecificationRequest {
  string specification_uuid = 1 [(gogoproto.moretags) = "yaml:\"specification_uuid\""];
}

// ContractSpecificationResponse is the response type for the Query/ContractSpecification RPC method.
message ContractSpecificationResponse {
  ContractSpecification contract_specification      = 1 [(gogoproto.moretags) = "yaml:\"contract_specification\""];
  string                contract_specification_uuid = 2 [(gogoproto.moretags) = "yaml:\"contract_specification_uuid\""];
}

// ContractSpecificationExtendedRequest is the request type for the Query/ContractSpecificationExtended RPC method.
// specification uuid
message ContractSpecificationExtendedRequest {
  string specification_uuid = 1 [(gogoproto.moretags) = "yaml:\"specification_uuid\""];
}

// ContractSpecificationExtendedResponse is the response type for the Query/ContractSpecificationExtended RPC method.
message ContractSpecificationExtendedResponse {
  ContractSpecification        contract_specification = 1 [(gogoproto.moretags) = "yaml:\"contract_specification\""];
  repeated RecordSpecification record_specifications  = 2 [(gogoproto.moretags) = "yaml:\"record_specifications\""];
  string contract_specification_uuid = 3 [(gogoproto.moretags) = "yaml:\"contract_specification_uuid\""];
}

// RecordSpecificationsForContractSpecificationRequest is the request type for the
// Query/RecordSpecificationsForContractSpecification RPC method.
message RecordSpecificationsForContractSpecificationRequest {
  string contract_specification_uuid = 1 [(gogoproto.moretags) = "yaml:\"contract_specification_uuid\""];
}

// RecordSpecificationsForContractSpecificationResponse is the response type for the
// Query/RecordSpecificationsForContractSpecification RPC method.
message RecordSpecificationsForContractSpecificationResponse {
  repeated RecordSpecification record_specifications = 1 [(gogoproto.moretags) = "yaml:\"record_specifications\""];
  string contract_specification_uuid = 2 [(gogoproto.moretags) = "yaml:\"contract_specification_uuid\""];
}

// RecordSpecificationRequest is the request type for the Query/RecordSpecification RPC method.
message RecordSpecificationRequest {
  string contract_specification_uuid = 1 [(gogoproto.moretags) = "yaml:\"contract_specification_uuid\""];
  string name                        = 2;
}

// RecordSpecificationResponse is the response type for the Query/RecordSpecification RPC method.
message RecordSpecificationResponse {
  RecordSpecification record_specification        = 1 [(gogoproto.moretags) = "yaml:\"record_specification\""];
  string              contract_specification_uuid = 2 [(gogoproto.moretags) = "yaml:\"contract_specification_uuid\""];
  string              name                        = 3;
}

// RecordSpecificationByIDRequest is the request type for the Query/RecordSpecificationByID RPC method.
message RecordSpecificationByIDRequest {
  string record_specification_id = 1 [(gogoproto.moretags) = "yaml:\"record_specification_id\""];
}

// RecordSpecificationByIDResponse is the response type for the Query/RecordSpecificationByID RPC method.
message RecordSpecificationByIDResponse {
  RecordSpecification record_specification    = 1 [(gogoproto.moretags) = "yaml:\"record_specification\""];
  string              record_specification_id = 2 [(gogoproto.moretags) = "yaml:\"record_specification_id\""];
}

// OSLocatorParamsRequest is the request type for the Query/OSLocatorParams RPC method.
message OSLocatorParamsRequest {}

// OSLocatorParamsResponse is the response type for the Query/OSLocatorParams RPC method.
message OSLocatorParamsResponse {
  // params defines the parameters of the module.
  OSLocatorParams params = 1 [(gogoproto.nullable) = false];
}

// OSLocationRequest is the request type for the Query/OSLocator RPC method.
message OSLocatorRequest {
  string owner = 1;
}

// OSLocatorResponse is the response type for the Query/OSLocator RPC method.
message OSLocatorResponse {
  ObjectStoreLocator locator = 1;
}

// OSLocatorByURIRequest is the request type for the Query/OSLocatorByURI RPC method.
message OSLocatorByURIRequest {
  string uri = 1;

  // pagination defines optional pagination parameters for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// OSLocatorByURIResponse is the response type for the Query/OSLocatorByURI RPC method.
message OSLocatorByURIResponse {
  repeated ObjectStoreLocator locator = 1 [(gogoproto.nullable) = false];

  // pagination provides the pagination information of this response.
  cosmos.base.query.v1beta1.PageResponse pagination = 99;
}

// OSLocatorByScopeUUIDRequest is the request type for the Query/OSLocatorByScopeUUID RPC method.
message OSLocatorByScopeUUIDRequest {
  string scope_uuid = 1 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
}

// OSLocatorByScopeUUIDResponse is the response type for the Query/OSLocatorByScopeUUID RPC method.
message OSLocatorByScopeUUIDResponse {
  repeated ObjectStoreLocator locator = 1 [(gogoproto.nullable) = false];
}

// OSAllLocatorsRequest is the request type for the Query/OSAllLocators RPC method.
message OSAllLocatorsRequest {
  // pagination defines optional pagination parameters for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// OSAllLocatorsResponse is the response type for the Query/OSAllLocators RPC method.
message OSAllLocatorsResponse {
  repeated ObjectStoreLocator locator = 1 [(gogoproto.nullable) = false];

  // pagination provides the pagination information of this response.
  cosmos.base.query.v1beta1.PageResponse pagination = 99;
}
