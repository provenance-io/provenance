syntax = "proto3";
package provenance.metadata.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "provenance/metadata/v1/metadata.proto";
import "provenance/metadata/v1/scope.proto";
import "provenance/metadata/v1/specification.proto";

option go_package = "github.com/provenance-io/provenance/x/metadata/types";

option java_package        = "io.provenance.metadata.v1";
option java_multiple_files = true;

// Query defines the Metadata Query service.
service Query {
  // Params queries the parameters of x/metadata module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/params";
  }

  // Scope returns a specific scope by id
  rpc Scope(ScopeRequest) returns (ScopeResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/scope/{scope_uuid}";
  }

  // GroupContext returns a specific group context within a scope (or all groups)
  rpc GroupContext(GroupContextRequest) returns (GroupContextResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/scope/{scope_uuid}/group/{group_uuid}";
  }

  // RecordsByScopeUUID returns a collection of the records in a scope by scope uuid or a specific one by name
  rpc RecordsByScopeUUID(RecordsByScopeUUIDRequest) returns (RecordsByScopeUUIDResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/scope/uuid/{scope_uuid}/records/{name}";
  }

  // RecordsByScopeID returns a collection of the records in a scope by scope bech32 id or a specific one by name
  rpc RecordsByScopeID(RecordsByScopeIDRequest) returns (RecordsByScopeIDResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/scope/id/{scope_id}/records/{name}";
  }

  // Ownership returns a list of scope identifiers that list the given address as a data or value owner
  rpc Ownership(OwnershipRequest) returns (OwnershipResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/ownership/{address}";
  }

  // ValueOwnership returns a list of scope identifiers that list the given address as the value owner
  rpc ValueOwnership(ValueOwnershipRequest) returns (ValueOwnershipResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/valueownership/{address}";
  }

  // ScopeSpecification returns a scope specification for the given specification id
  rpc ScopeSpecification(ScopeSpecificationRequest) returns (ScopeSpecificationResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/scopespec/{specification_uuid}";
  }

  // ContractSpecification returns a contract specification for the given specification id
  rpc ContractSpecification(ContractSpecificationRequest) returns (ContractSpecificationResponse) {
    option (google.api.http).get = "/provenance/metadata/v1/contractspec/{specification_uuid}";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// ScopeRequest is used for requesting a scope by id
message ScopeRequest {
  string scope_uuid = 1 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
}

// ScopeResponse is the response to a scope request.
message ScopeResponse {
  Scope                scope         = 1;
  repeated RecordGroup record_groups = 2 [(gogoproto.moretags) = "yaml:\"record_groups\""];
  repeated Record      records       = 3;
}

// OwnershipRequest looks for all scope level resources associated with the given addrss
message OwnershipRequest {
  string address = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// OwnershipResponse is the reponse to the ownership request and includes a list of scope identifiers
message OwnershipResponse {
  // A list of scope ids (uuid) associated with the given address.
  repeated string scope_uuids = 1 [(gogoproto.moretags) = "yaml:\"scope_uuids\""];

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// ValueOwnershipRequest looks for all scope level resources that have the address as the value owner
message ValueOwnershipRequest {
  string address = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// ValueOwnershipResponse is the reponse to the Valueownership request and includes a list of scope identifiers
message ValueOwnershipResponse {
  // A list of scope ids (uuid) associated with the given address.
  repeated string scope_uuids = 1 [(gogoproto.moretags) = "yaml:\"scope_uuids\""];

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GroupContextRequest returns the record groups for a given scope identifer or optionally a specific record group
message GroupContextRequest {
  string scope_uuid = 1 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
  string group_uuid = 2 [(gogoproto.moretags) = "yaml:\"group_uuid\""];
}

// GroupContextResponse is the response to a GroupContextRequest
message GroupContextResponse {
  repeated RecordGroup groups = 1;
}

// RecordsByScopeUUIDRequest is a request for all of the records in a specific scope by uuid or a specific record if a name is given.
message RecordsByScopeUUIDRequest {
  string scope_uuid = 1 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
  string name     = 2;
}

// RecordsByScopeUUIDResponse is the response to a RecordsByScopeUUIDRequest
message RecordsByScopeUUIDResponse {
  string          scope_uuid = 1 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
  string          scope_id = 2 [(gogoproto.moretags) = "yaml:\"scope_id\""];
  repeated Record records  = 3;
}

// RecordsByScopeIDRequest is a request for all of the records in a specific scope by bech32 id or a specific record if a name is given.
message RecordsByScopeIDRequest {
  string scope_id = 1 [(gogoproto.moretags) = "yaml:\"scope_id\""];
  string name     = 2;
}

// RecordsByScopeIDResponse is the response to a RecordsByScopeIDRequest
message RecordsByScopeIDResponse {
  string          scope_uuid = 1 [(gogoproto.moretags) = "yaml:\"scope_uuid\""];
  string          scope_id = 2 [(gogoproto.moretags) = "yaml:\"scope_id\""];
  repeated Record records  = 3;
}

// ScopeSpecificationRequest is used for requesting a scope specification by uuid
message ScopeSpecificationRequest {
  string specification_uuid = 1 [(gogoproto.moretags) = "yaml:\"specification_uuid\""];
}

// ScopeSpecification is the response to a scope specification request.
message ScopeSpecificationResponse {
  ScopeSpecification scope_specification = 1 [(gogoproto.moretags) = "yaml:\"scope_specification\""];
}

// ContractSpecificationRequest is used for requesting a contract specification by uuid
message ContractSpecificationRequest {
  string specification_uuid = 1 [(gogoproto.moretags) = "yaml:\"specification_uuid\""];
}

// ContractSpecificationResponse is the response to a contract specification request.
message ContractSpecificationResponse {
  ContractSpecification contract_specification = 1 [(gogoproto.moretags) = "yaml:\"contract_specification\""];
}
