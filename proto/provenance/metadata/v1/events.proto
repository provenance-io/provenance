syntax = "proto3";
package provenance.metadata.v1;

import "provenance/metadata/v1/scope.proto";
import "provenance/metadata/v1/specification.proto";

option go_package = "github.com/provenance-io/provenance/x/metadata/types";

option java_package        = "io.provenance.metadata.v1";
option java_multiple_files = true;

// EventTxCompleted is an event message indicating that a TX has completed.
message EventTxCompleted {
  // module is the module the TX belongs to.
  string module = 1;
  // endpoint is the rpc endpoint that was just completed.
  string endpoint = 2;
  // senders are the bech32 address strings of the signers of this TX.
  repeated string signers = 3;
}

// EventScopeCreated is an event message indicating a scope has been created.
message EventScopeCreated {
  // scope_addr is the bech32 address string of the scope id that was created.
  string scope_addr = 1;
  // scope is the scope that was created.
  Scope scope = 2;
}

// EventScopeUpdated is an event message indicating a scope has been updated.
message EventScopeUpdated {
  // scope_addr is the bech32 address string of the scope id that was updated.
  string scope_addr = 1;
  // scope is the new on-chain version of the scope.
  Scope scope = 2;
  // scope_replaced is the previous on-chain version of the scope.
  Scope scope_replaced = 3;
}

// EventScopeRemoved is an event message indicating a scope has been removed.
message EventScopeRemoved {
  // scope_addr is the bech32 address string of the scope id that was removed.
  string scope_addr = 1;
  // scope is the scope that was removed.
  Scope scope = 2;
}

// EventSessionCreated is an event message indicating a session has been created.
message EventSessionCreated {
  // session_addr is the bech32 address string of the session id that was created.
  string session_addr = 1;
  // session is the session that was created.
  Session session = 2;
}

// EventSessionUpdated is an event message indicating a session has been updated.
message EventSessionUpdated {
  // session_addr is the bech32 address string of the session id that was updated.
  string session_addr = 1;
  // session is the new on-chain version of the session.
  Session session = 2;
  // session_replaced is the previous on-chain version of the session.
  Session session_replaced = 3;
}

// EventSessionRemoved is an event message indicating a session has been removed.
message EventSessionRemoved {
  // session_addr is the bech32 address string of the session id that was removed.
  string session_addr = 1;
  // session is the session that was removed.
  Session session = 2;
}

// EventRecordCreated is an event message indicating a record has been created.
message EventRecordCreated {
  // record_addr is the bech32 address string of the record id that was created.
  string record_addr = 1;
  // record is the record that was created.
  Record record = 2;
}

// EventRecordUpdated is an event message indicating a record has been updated.
message EventRecordUpdated {
  // record_addr is the bech32 address string of the record id that was updated.
  string record_addr = 1;
  // record is the new on-chain version of the record.
  Record record = 2;
  // record_replaced is the previous on-chain version of the record.
  Record record_replaced = 3;
}

// EventRecordRemoved is an event message indicating a record has been removed.
message EventRecordRemoved {
  // record is the bech32 address string of the record id that was removed.
  string record_addr = 1;
  // record is the record that was removed.
  Record record = 2;
}

// EventScopeSpecificationCreated is an event message indicating a scope specification has been created.
message EventScopeSpecificationCreated {
  // scope_specification_addr is the bech32 address string of the specification id of the scope specification that was
  // created.
  string scope_specification_addr = 1;
  // scope_specification is the scope specification that was created.
  ScopeSpecification scope_specification = 2;
}

// EventScopeSpecificationUpdated is an event message indicating a scope specification has been updated.
message EventScopeSpecificationUpdated {
  // scope_specification_addr is the bech32 address string of the specification id of the scope specification that was
  // updated.
  string scope_specification_addr = 1;
  // scope_specification is the new on-chain version of the scope specification.
  ScopeSpecification scope_specification = 2;
  // scope_specification_replaced is the previous on-chain version of the scope specification.
  Scope scope_specification_replaced = 3;
}

// EventScopeSpecificationRemoved is an event message indicating a scope specification has been removed.
message EventScopeSpecificationRemoved {
  // scope_specification_addr is the bech32 address string of the specification id of the scope specification that was
  // removed.
  string scope_specification_addr = 1;
  // scope_specification is the scope specification that was removed.
  ScopeSpecification scope_specification = 2;
}

// EventContractSpecificationCreated is an event message indicating a contract specification has been created.
message EventContractSpecificationCreated {
  // contract_specification_addr is the bech32 address string of the specification id of the contract specification that
  // was created.
  string contract_specification_addr = 1;
  // contract_specification is the contract specification that was created.
  ContractSpecification contract_specification = 2;
}

// EventContractSpecificationUpdated is an event message indicating a contract specification has been updated.
message EventContractSpecificationUpdated {
  // contract_specification_addr is the bech32 address string of the specification id of the contract specification that
  // was updated.
  string contract_specification_addr = 1;
  // contract_specification is the new on-chain version of the contract specification.
  ContractSpecification contract_specification = 2;
  // contract_specification_replaced is the previous on-chain version of the contract specification.
  ContractSpecification contract_specification_replaced = 3;
}

// EventContractSpecificationRemoved is an event message indicating a contract specification has been removed.
message EventContractSpecificationRemoved {
  // contract_specification_addr is the bech32 address string of the specification id of the contract specification that
  // was removed.
  string contract_specification_addr = 1;
  // contract_specification is the contract specification that was removed.
  ContractSpecification contract_specification = 2;
}

// EventRecordSpecificationCreated is an event message indicating a record specification has been created.
message EventRecordSpecificationCreated {
  // record_specification_addr is the bech32 address string of the specification id of the record specification that was
  // created.
  string record_specification_addr = 1;
  // record_specification is the record specification that was created.
  RecordSpecification record_specification = 2;
}

// EventRecordSpecificationUpdated is an event message indicating a record specification has been updated.
message EventRecordSpecificationUpdated {
  // record_specification_addr is the bech32 address string of the specification id of the record specification that was
  // updated.
  string record_specification_addr = 1;
  // record_specification is the new on-chain version of the record specification.
  RecordSpecification record_specification = 2;
  // record_specification_replaced is the previous on-chain version of the record specification.
  RecordSpecification record_specification_replaced = 3;
}

// EventRecordSpecificationRemoved is an event message indicating a record specification has been removed.
message EventRecordSpecificationRemoved {
  // record_specification_addr is the bech32 address string of the specification id of the record specification that was
  // removed.
  string record_specification_addr = 1;
  // record_specification is the record specification that was removed.
  RecordSpecification record_specification = 2;
}

// EventOSLocatorCreated is an event message indicating an object store locator has been created.
message EventOSLocatorCreated {
  // address is the address in the object store locator that was created.
  string address = 1;
  // uri is the uri in the object store locator that was created.
  string uri = 2;
}

// EventOSLocatorUpdated is an event message indicating an object store locator has been updated.
message EventOSLocatorUpdated {
  // address is the address in the object store locator that was updated.
  string address = 1;
  // uri is the new uri that was just set.
  string uri = 2;
  // uri_replaced is the previous uri for this address (that has now been overwritten).
  string uri_replaced = 3;
}

// EventOSLocatorRemoved is an event message indicating an object store locator has been removed.
message EventOSLocatorRemoved {
  // address is the address in the object store locator that was removed.
  string address = 1;
  // uri is the uri in the object store locator that was removed.
  string uri = 2;
}
