syntax = "proto3";
package provenance.exchange.v1;

option go_package = "github.com/provenance-io/provenance/x/exchange";

option java_package        = "io.provenance.exchange.v1";
option java_multiple_files = true;

import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "provenance/exchange/v1/market.proto";
import "provenance/exchange/v1/orders.proto";
import "provenance/exchange/v1/params.proto";

// Query is the service for exchange module's query endpoints.
service Query {
  // QueryOrderFeeCalc calculates the fees that will be associated with the provided order.
  rpc QueryOrderFeeCalc(QueryOrderFeeCalcRequest) returns (QueryOrderFeeCalcResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/fees/order";
  }

  // QueryGetOrder looks up an order by id.
  rpc QueryGetOrder(QueryGetOrderRequest) returns (QueryGetOrderResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/order/{order_id}";
  }

  // QueryGetMarketOrders looks up the orders in a market.
  rpc QueryGetMarketOrders(QueryGetMarketOrdersRequest) returns (QueryGetMarketOrdersResponse) {
    option (google.api.http) = {
      get: "/provenance/exchange/v1/orders/market/{market_id}"
      additional_bindings: {get: "/provenance/exchange/v1/market/{market_id}/orders"}
    };
  }

  // QueryGetOwnerOrders looks up the orders from the provided owner address.
  rpc QueryGetOwnerOrders(QueryGetOwnerOrdersRequest) returns (QueryGetOwnerOrdersResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/orders/owner/{owner}";
  }

  // QueryGetAssetOrders looks up the orders for a specific asset denom.
  rpc QueryGetAssetOrders(QueryGetAssetOrdersRequest) returns (QueryGetAssetOrdersResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/orders/asset/{asset}";
  }

  // QueryGetAllOrders gets all orders in the exchange module.
  rpc QueryGetAllOrders(QueryGetAllOrdersRequest) returns (QueryGetAllOrdersResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/orders";
  }

  // QueryGetMarket returns all the information and details about a market.
  rpc QueryGetMarket(QueryGetMarketRequest) returns (QueryGetMarketResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/market/{market_id}";
  }

  // QueryGetAllMarkets returns brief information about each market.
  rpc QueryGetAllMarkets(QueryGetAllMarketsRequest) returns (QueryGetAllMarketsResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/markets";
  }

  // QueryParams returns the exchange module parameters.
  rpc QueryParams(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/params";
  }

  // QueryValidateCreateMarket checks the provided MsgGovCreateMarketResponse and returns any errors it might have.
  rpc QueryValidateCreateMarket(QueryValidateCreateMarketRequest) returns (QueryValidateCreateMarketResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/validate/create_market";
  }

  // QueryValidateManageFees checks the provided MsgGovManageFeesRequest and returns any errors that it might have.
  rpc QueryValidateManageFees(QueryValidateManageFeesRequest) returns (QueryValidateManageFeesResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/validate/manage_fees";
  }
}

// QueryOrderFeeCalcRequest is a request message for the QueryOrderFeeCalc endpoint.
// Exactly one of ask_order or bid_order must be provided.
message QueryOrderFeeCalcRequest {
  // ask_order is the ask order to calculate the fees for.
  AskOrder ask_order = 2;
  // bid_order is the bid order to calculate the fees for.
  BidOrder bid_order = 3;
}

// QueryOrderFeeCalcResponse is a response message for the QueryOrderFeeCalc endpoint.
message QueryOrderFeeCalcResponse {
  // creation_fee_options are the order creation flat fee options available for creating the provided order.
  // If it's empty, no order creation fee is required.
  // When creating the order, you should include exactly one of these.
  repeated cosmos.base.v1beta1.Coin creation_fee_options = 1 [(gogoproto.nullable) = false];
  // settlement_flat_fee_options are the settlement flat fee options available for the provided order.
  // If it's empty, no settlement flat fee is required.
  // When creating an order, you should include exactly one of these in the settlement fees field.
  repeated cosmos.base.v1beta1.Coin settlement_flat_fee_options = 2 [(gogoproto.nullable) = false];
  // settlement_ratio_fee_options are the settlement ratio fee options available for the provided order.
  // If it's empty, no settlement ratio fee is required.
  //
  // If the provided order was a bid order, you should include exactly one of these in the settlement fees field.
  // If the flat and ratio options you've chose have the same denom, a single entry should be included with their sum.
  //
  // If the provided order was an ask order, these are purely informational and represent how much will be removed
  // from your price if it settles at that price. If it settles for more, the actual amount will probably be larger.
  repeated cosmos.base.v1beta1.Coin settlement_ratio_fee_options = 3 [(gogoproto.nullable) = false];
}

// QueryGetOrderRequest is a request message for the QueryGetOrder endpoint.
message QueryGetOrderRequest {
  // order_id is the id of the order to look up.
  uint64 order_id = 1;
}

// QueryGetOrderResponse is a response message for the QueryGetOrder endpoint.
message QueryGetOrderResponse {
  // order is the requested order.
  Order order = 1;
}

// QueryGetMarketOrdersRequest is a request message for the QueryGetMarketOrders endpoint.
message QueryGetMarketOrdersRequest {
  // market_id is the id of the market to get all the orders for.
  uint32 market_id = 1;
  // order_type is optional and can limit orders to only "ask" or "bid" orders.
  string order_type = 2;
  // after_order_id is a minimum (exclusive) order id. All results will be strictly greater than this.
  uint64 after_order_id = 3;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// QueryGetMarketOrdersResponse is a response message for the QueryGetMarketOrders endpoint.
message QueryGetMarketOrdersResponse {
  // orders are a page of the orders in the provided market.
  repeated Order orders = 1;

  // pagination is the resulting pagination parameters.
  cosmos.base.query.v1beta1.PageResponse pagination = 99;
}

// QueryGetOwnerOrdersRequest is a request message for the QueryGetOwnerOrders endpoint.
message QueryGetOwnerOrdersRequest {
  // owner is the bech32 address string of the owner to get the orders for.
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // order_type is optional and can limit orders to only "ask" or "bid" orders.
  string order_type = 2;
  // after_order_id is a minimum (exclusive) order id. All results will be strictly greater than this.
  uint64 after_order_id = 3;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// QueryGetOwnerOrdersResponse is a response message for the QueryGetOwnerOrders endpoint.
message QueryGetOwnerOrdersResponse {
  // orders are a page of the orders for the provided address.
  repeated Order orders = 1;

  // pagination is the resulting pagination parameters.
  cosmos.base.query.v1beta1.PageResponse pagination = 99;
}

// QueryGetAssetOrdersRequest is a request message for the QueryGetAssetOrders endpoint.
message QueryGetAssetOrdersRequest {
  // asset is the denom of assets to get orders for.
  string asset = 1;
  // order_type is optional and can limit orders to only "ask" or "bid" orders.
  string order_type = 2;
  // after_order_id is a minimum (exclusive) order id. All results will be strictly greater than this.
  uint64 after_order_id = 3;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// QueryGetAssetOrdersResponse is a response message for the QueryGetAssetOrders endpoint.
message QueryGetAssetOrdersResponse {
  // orders are a page of the orders for the provided asset.
  repeated Order orders = 1;

  // pagination is the resulting pagination parameters.
  cosmos.base.query.v1beta1.PageResponse pagination = 99;
}

// QueryGetAllOrdersRequest is a request message for the QueryGetAllOrders endpoint.
message QueryGetAllOrdersRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// QueryGetAllOrdersResponse is a response message for the QueryGetAllOrders endpoint.
message QueryGetAllOrdersResponse {
  // orders are a page of the all orders.
  repeated Order orders = 1;

  // pagination is the resulting pagination parameters.
  cosmos.base.query.v1beta1.PageResponse pagination = 99;
}

// QueryGetMarketRequest is a request message for the QueryGetMarket endpoint.
message QueryGetMarketRequest {
  // market_id is the id of the market to look up.
  uint32 market_id = 1;
}

// QueryGetMarketResponse is a response message for the QueryGetMarket endpoint.
message QueryGetMarketResponse {
  // address is the bech32 address string of this market's account.
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // market is all information and details of the market.
  Market market = 2;
}

// QueryGetAllMarketsRequest is a request message for the QueryGetAllMarkets endpoint.
message QueryGetAllMarketsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// QueryGetAllMarketsResponse is a response message for the QueryGetAllMarkets endpoint.
message QueryGetAllMarketsResponse {
  // markets are a page of the briefs for all markets.
  repeated MarketBrief markets = 1;

  // pagination is the resulting pagination parameters.
  cosmos.base.query.v1beta1.PageResponse pagination = 99;
}

// QueryParamsRequest is a request message for the QueryParams endpoint.
message QueryParamsRequest {}

// QueryParamsResponse is a response message for the QueryParams endpoint.
message QueryParamsResponse {
  // params are the exchange module parameter values.
  Params params = 1;
}

// QueryValidateCreateMarketRequest is a request message for the QueryValidateCreateMarket endpoint.
message QueryValidateCreateMarketRequest {
  // TODO[1658]: QueryValidateCreateMarketRequest
}
// QueryValidateCreateMarketResponse is a response message for the QueryValidateCreateMarket endpoint.
message QueryValidateCreateMarketResponse {
  // TODO[1658]: QueryValidateCreateMarketResponse
}

// QueryValidateManageFeesRequest is a request message for the QueryValidateManageFees endpoint.
message QueryValidateManageFeesRequest {
  uint32 market_id = 1;
  // TODO[1658]: QueryValidateManageFeesRequest
}
// QueryValidateManageFeesResponse is a response message for the QueryValidateManageFees endpoint.
message QueryValidateManageFeesResponse {
  // TODO[1658]: QueryValidateManageFeesResponse
}
