syntax = "proto3";
package provenance.exchange.v1;

option go_package = "github.com/provenance-io/provenance/x/exchange";

option java_package        = "io.provenance.exchange.v1";
option java_multiple_files = true;

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "provenance/exchange/v1/orders.proto";

// Query is the service for exchange module's query endpoints.
service Query {
  // QueryOrderFeeCalc calculates the fees that will be associated with the provided order.
  rpc QueryOrderFeeCalc(QueryOrderFeeCalcRequest) returns (QueryOrderFeeCalcResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/fees/order";
  }

  // QuerySettlementFeeCalc calculates the fees that will be associated with the provided settlement.
  rpc QuerySettlementFeeCalc(QuerySettlementFeeCalcRequest) returns (QuerySettlementFeeCalcResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/fees/settlement";
  }

  // QueryGetOrder looks up an order by id.
  rpc QueryGetOrder(QueryGetOrderRequest) returns (QueryGetOrderResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/order/{order_id}";
  }

  // QueryGetMarketOrders looks up the orders in a market.
  rpc QueryGetMarketOrders(QueryGetMarketOrdersRequest) returns (QueryGetMarketOrdersResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/market/{market_id}/orders";
  }

  // QueryGetAddressOrders looks up the orders from the provided address.
  rpc QueryGetAddressOrders(QueryGetAddressOrdersRequest) returns (QueryGetAddressOrdersResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/orders/{address}";
  }

  // QueryGetAllOrders gets all orders in the exchange module.
  rpc QueryGetAllOrders(QueryGetAllOrdersRequest) returns (QueryGetAllOrdersResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/orders";
  }

  // QueryMarketInfo returns the information/details about a market.
  rpc QueryMarketInfo(QueryMarketInfoRequest) returns (QueryMarketInfoResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/market/{market_id}";
  }

  // QueryParams returns the exchange module parameters.
  rpc QueryParams(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/params";
  }

  // QueryValidateCreateMarket checks the provided MsgGovCreateMarketResponse and returns any errors it might have.
  rpc QueryValidateCreateMarket(QueryValidateCreateMarketRequest) returns (QueryValidateCreateMarketResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/validate/create_market";
  }

  // QueryValidateManageFees checks the provided MsgGovManageFeesRequest and returns any errors that it might have.
  rpc QueryValidateManageFees(QueryValidateManageFeesRequest) returns (QueryValidateManageFeesResponse) {
    option (google.api.http).get = "/provenance/exchange/v1/market/{market_id}/validate/manage_fees";
  }
}

// QueryOrderFeeCalcRequest is a request message for the QueryOrderFeeCalc endpoint.
// Exactly one of ask_order or bid_order must be provided.
message QueryOrderFeeCalcRequest {
  // ask_order is the ask order to calculate the fees for.
  AskOrder ask_order = 2;
  // bid_order is the bid order to calculate the fees for.
  BidOrder bid_order = 3;
}

// QueryOrderFeeCalcResponse is a response message for the QueryOrderFeeCalc endpoint.
message QueryOrderFeeCalcResponse {
  // creation_fee_options are the order creation flat fee options available for creating the provided order.
  // If it's empty, no order creation fee is required.
  // When creating the order, you should include exactly one of these.
  repeated cosmos.base.v1beta1.Coin creation_fee_options = 1 [(gogoproto.nullable) = false];
  // settlement_flat_fee_options are the settlement flat fee options available for the provided order.
  // If it's empty, no settlement flat fee is required.
  // When creating an order, you should include exactly one of these in the settlement fees field.
  repeated cosmos.base.v1beta1.Coin settlement_flat_fee_options = 2 [(gogoproto.nullable) = false];
  // settlement_ratio_fee_options are the settlement ratio fee options available for the provided order.
  // If it's empty, no settlement ratio fee is required.
  //
  // If the provided order was a bid order, you should include exactly one of these in the settlement fees field.
  // If the flat and ratio options you've chose have the same denom, a single entry should be included with their sum.
  //
  // If the provided order was an ask order, these are purely informational and represent how much will be removed
  // from your price if it settles at that price. If it settles for more, the actual amount will probably be larger.
  repeated cosmos.base.v1beta1.Coin settlement_ratio_fee_options = 3 [(gogoproto.nullable) = false];
}

// QuerySettlementFeeCalcRequest is a request message for the QuerySettlementFeeCalc endpoint.
message QuerySettlementFeeCalcRequest {
  // TODO[1658]: QuerySettlementFeeCalcRequest
}
// QuerySettlementFeeCalcResponse is a response message for the QuerySettlementFeeCalc endpoint.
message QuerySettlementFeeCalcResponse {
  // TODO[1658]: QuerySettlementFeeCalcResponse
}

// QueryGetOrderRequest is a request message for the QueryGetOrder endpoint.
message QueryGetOrderRequest {
  uint64 order_id = 1;
  // TODO[1658]: QueryGetOrderRequest
}
// QueryGetOrderResponse is a response message for the QueryGetOrder endpoint.
message QueryGetOrderResponse {
  // TODO[1658]: QueryGetOrderResponse
}

// QueryGetMarketOrdersRequest is a request message for the QueryGetMarketOrders endpoint.
message QueryGetMarketOrdersRequest {
  uint32 market_id = 1;
  // TODO[1658]: QueryGetMarketOrdersRequest
}
// QueryGetMarketOrdersResponse is a response message for the QueryGetMarketOrders endpoint.
message QueryGetMarketOrdersResponse {
  // TODO[1658]: QueryGetMarketOrdersResponse
}

// QueryGetAddressOrdersRequest is a request message for the QueryGetAddressOrders endpoint.
message QueryGetAddressOrdersRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // TODO[1658]: QueryGetAddressOrdersRequest
}
// QueryGetAddressOrdersResponse is a response message for the QueryGetAddressOrders endpoint.
message QueryGetAddressOrdersResponse {
  // TODO[1658]: QueryGetAddressOrdersResponse
}

// QueryGetAllOrdersRequest is a request message for the QueryGetAllOrders endpoint.
message QueryGetAllOrdersRequest {
  // TODO[1658]: QueryGetAllOrdersRequest
}
// QueryGetAllOrdersResponse is a response message for the QueryGetAllOrders endpoint.
message QueryGetAllOrdersResponse {
  // TODO[1658]: QueryGetAllOrdersResponse
}

// QueryMarketInfoRequest is a request message for the QueryMarketInfo endpoint.
message QueryMarketInfoRequest {
  uint32 market_id = 1;
  // TODO[1658]: QueryMarketInfoRequest
}
// QueryMarketInfoResponse is a response message for the QueryMarketInfo endpoint.
message QueryMarketInfoResponse {
  // TODO[1658]: QueryMarketInfoResponse
}

// QueryParamsRequest is a request message for the QueryParams endpoint.
message QueryParamsRequest {
  // TODO[1658]: QueryParamsRequest
}
// QueryParamsResponse is a response message for the QueryParams endpoint.
message QueryParamsResponse {
  // TODO[1658]: QueryParamsResponse
}

// QueryValidateCreateMarketRequest is a request message for the QueryValidateCreateMarket endpoint.
message QueryValidateCreateMarketRequest {
  // TODO[1658]: QueryValidateCreateMarketRequest
}
// QueryValidateCreateMarketResponse is a response message for the QueryValidateCreateMarket endpoint.
message QueryValidateCreateMarketResponse {
  // TODO[1658]: QueryValidateCreateMarketResponse
}

// QueryValidateManageFeesRequest is a request message for the QueryValidateManageFees endpoint.
message QueryValidateManageFeesRequest {
  uint32 market_id = 1;
  // TODO[1658]: QueryValidateManageFeesRequest
}
// QueryValidateManageFeesResponse is a response message for the QueryValidateManageFees endpoint.
message QueryValidateManageFeesResponse {
  // TODO[1658]: QueryValidateManageFeesResponse
}
