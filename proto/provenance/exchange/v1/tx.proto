syntax = "proto3";
package provenance.exchange.v1;

option go_package = "github.com/provenance-io/provenance/x/exchange";

option java_package        = "io.provenance.exchange.v1";
option java_multiple_files = true;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "provenance/exchange/v1/market.proto";
import "provenance/exchange/v1/orders.proto";
import "provenance/exchange/v1/params.proto";

// Msg is the service for exchange module's tx endpoints.
service Msg {
  // CreateAsk creates an ask order (to sell something you own).
  rpc CreateAsk(MsgCreateAskRequest) returns (MsgCreateAskResponse);

  // CreateBid creates a bid order (to buy something you want).
  rpc CreateBid(MsgCreateBidRequest) returns (MsgCreateBidResponse);

  // CancelOrder cancels an order.
  rpc CancelOrder(MsgCancelOrderRequest) returns (MsgCancelOrderResponse);

  // FillBids uses the assets in your account to fulfill one or more bids (similar to a fill-or-cancel ask).
  rpc FillBids(MsgFillBidsRequest) returns (MsgFillBidsResponse);

  // FillAsks uses the funds in your account to fulfill one or more asks (similar to a fill-or-cancel bid).
  rpc FillAsks(MsgFillAsksRequest) returns (MsgFillAsksResponse);

  // MarketSettle is a market endpoint to trigger the settlement of orders.
  rpc MarketSettle(MsgMarketSettleRequest) returns (MsgMarketSettleResponse);

  // MarketSetOrderExternalID updates an order's external id field.
  rpc MarketSetOrderExternalID(MsgMarketSetOrderExternalIDRequest) returns (MsgMarketSetOrderExternalIDResponse);

  // MarketWithdraw is a market endpoint to withdraw fees that have been collected.
  rpc MarketWithdraw(MsgMarketWithdrawRequest) returns (MsgMarketWithdrawResponse);

  // MarketUpdateDetails is a market endpoint to update its details.
  rpc MarketUpdateDetails(MsgMarketUpdateDetailsRequest) returns (MsgMarketUpdateDetailsResponse);

  // MarketUpdateEnabled is a market endpoint to update whether its accepting orders.
  rpc MarketUpdateEnabled(MsgMarketUpdateEnabledRequest) returns (MsgMarketUpdateEnabledResponse);

  // MarketUpdateUserSettle is a market endpoint to update whether it allows user-initiated settlement.
  rpc MarketUpdateUserSettle(MsgMarketUpdateUserSettleRequest) returns (MsgMarketUpdateUserSettleResponse);

  // MarketManagePermissions is a market endpoint to manage a market's user permissions.
  rpc MarketManagePermissions(MsgMarketManagePermissionsRequest) returns (MsgMarketManagePermissionsResponse);

  // MarketManageReqAttrs is a market endpoint to manage the attributes required to interact with it.
  rpc MarketManageReqAttrs(MsgMarketManageReqAttrsRequest) returns (MsgMarketManageReqAttrsResponse);

  // GovCreateMarket is a governance proposal endpoint for creating a market.
  rpc GovCreateMarket(MsgGovCreateMarketRequest) returns (MsgGovCreateMarketResponse);

  // GovManageFees is a governance proposal endpoint for updating a market's fees.
  rpc GovManageFees(MsgGovManageFeesRequest) returns (MsgGovManageFeesResponse);

  // GovUpdateParams is a governance proposal endpoint for updating the exchange module's params.
  rpc GovUpdateParams(MsgGovUpdateParamsRequest) returns (MsgGovUpdateParamsResponse);
}

// MsgCreateAskRequest is a request message for the CreateAsk endpoint.
message MsgCreateAskRequest {
  option (cosmos.msg.v1.signer) = "ask_order.seller";

  // ask_order is the details of the order being created.
  AskOrder ask_order = 1 [(gogoproto.nullable) = false];
  // order_creation_fee is the fee that is being paid to create this order.
  cosmos.base.v1beta1.Coin order_creation_fee = 2;
}

// MsgCreateAskResponse is a response message for the CreateAsk endpoint.
message MsgCreateAskResponse {
  // order_id is the id of the order created.
  uint64 order_id = 1;
}

// MsgCreateBidRequest is a request message for the CreateBid endpoint.
message MsgCreateBidRequest {
  option (cosmos.msg.v1.signer) = "bid_order.buyer";

  // bid_order is the details of the order being created.
  BidOrder bid_order = 1 [(gogoproto.nullable) = false];
  // order_creation_fee is the fee that is being paid to create this order.
  cosmos.base.v1beta1.Coin order_creation_fee = 2;
}

// MsgCreateBidResponse is a response message for the CreateBid endpoint.
message MsgCreateBidResponse {
  // order_id is the id of the order created.
  uint64 order_id = 1;
}

// MsgCancelOrderRequest is a request message for the CancelOrder endpoint.
message MsgCancelOrderRequest {
  option (cosmos.msg.v1.signer) = "signer";

  // signer is the account requesting the order cancelation.
  // It must be either the order owner (e.g. the buyer or seller), the governance module account address, or an account
  // with cancel permission with the market that the order is in.
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // order_id is the id of the order to cancel.
  uint64 order_id = 2;
}

// MsgCancelOrderResponse is a response message for the CancelOrder endpoint.
message MsgCancelOrderResponse {}

// MsgFillBidsRequest is a request message for the FillBids endpoint.
message MsgFillBidsRequest {
  option (cosmos.msg.v1.signer) = "seller";

  // seller is the address of the account with the assets to sell.
  string seller = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // market_id is the numerical identifier of the market with the bids to fill.
  // All bid orders being filled must be in this market.
  uint32 market_id = 2;
  // total_assets are the things that the seller wishes to sell.
  // It must be the sum of all bid order assets.
  repeated cosmos.base.v1beta1.Coin total_assets = 3
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // bid_order_ids are the ids of the bid orders that you are trying to fill.
  // All ids must be for bid orders, and must be in the same market as the market_id.
  repeated uint64 bid_order_ids = 4;
  // seller_settlement_flat_fee is the flat fee for sellers that will be charged for this settlement.
  cosmos.base.v1beta1.Coin seller_settlement_flat_fee = 5;
  // ask_order_creation_fee is the fee that is being paid to create this order (which is immediately then settled).
  cosmos.base.v1beta1.Coin ask_order_creation_fee = 6;
}

// MsgFillBidsResponse is a response message for the FillBids endpoint.
message MsgFillBidsResponse {}

// MsgFillAsksRequest is a request message for the FillAsks endpoint.
message MsgFillAsksRequest {
  option (cosmos.msg.v1.signer) = "buyer";

  // buyer is the address of the account attempting to buy some assets.
  string buyer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // market_id is the numerical identifier of the market with the asks to fill.
  // All ask orders being filled must be in this market.
  uint32 market_id = 2;
  // total_price is the total amount being spent on some assets.
  // It must be the sum of all ask order prices.
  cosmos.base.v1beta1.Coin total_price = 3 [(gogoproto.nullable) = false];
  // ask_order_ids are the ids of the ask orders that you are trying to fill.
  // All ids must be for ask orders, and must be in the same market as the market_id.
  repeated uint64 ask_order_ids = 4;
  // buyer_settlement_fees are the fees (both flat and proportional) that the buyer will pay (in addition to the price)
  // for this settlement.
  repeated cosmos.base.v1beta1.Coin buyer_settlement_fees = 5
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // bid_order_creation_fee is the fee that is being paid to create this order (which is immediately then settled).
  cosmos.base.v1beta1.Coin bid_order_creation_fee = 6;
}

// MsgFillAsksResponse is a response message for the FillAsks endpoint.
message MsgFillAsksResponse {}

// MsgMarketSettleRequest is a request message for the MarketSettle endpoint.
message MsgMarketSettleRequest {
  option (cosmos.msg.v1.signer) = "admin";

  // admin is the account with "settle" permission requesting this settlement.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // market_id is the numerical identifier of the market to update required attributes for.
  uint32 market_id = 2;

  // ask_order_ids are the ask orders being filled.
  repeated uint64 ask_order_ids = 3;
  // bid_order_ids are the bid orders being filled.
  repeated uint64 bid_order_ids = 4;
  // expect_partial is whether to expect an order to only be partially filled. Set to true to indicate that either
  // the last ask order, or last bid order will be partially filled by this settlement. Set to false to indicate
  // that all provided orders will be filled in full during this settlement.
  bool expect_partial = 5;
}

// MsgMarketSettleResponse is a response message for the MarketSettle endpoint.
message MsgMarketSettleResponse {}

// MsgMarketSetOrderExternalIDRequest is a request message for the MarketSetOrderExternalID endpoint.
message MsgMarketSetOrderExternalIDRequest {
  option (cosmos.msg.v1.signer) = "admin";

  // admin is the account with "set_ids" permission requesting this settlement.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // market_id is the numerical identifier of the market to update required attributes for.
  uint32 market_id = 2;

  // order_id is the numerical identifier of the order to update.
  uint64 order_id = 3;
  // external_id is the new external id to associate with the order. Max length is 100 characters.
  // If the external id is already associated with another order in this market, this update will fail.
  string external_id = 4;
}

// MsgMarketSetOrderExternalIDResponse is a response message for the MarketSetOrderExternalID endpoint.
message MsgMarketSetOrderExternalIDResponse {}

// MsgMarketWithdrawRequest is a request message for the MarketWithdraw endpoint.
message MsgMarketWithdrawRequest {
  option (cosmos.msg.v1.signer) = "admin";

  // admin is the account with withdraw permission requesting the withdrawal.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // market_id is the numerical identifier of the market to withdraw from.
  uint32 market_id = 2;

  // to_address is the address that will receive the funds.
  string to_address = 3;
  // amount is the funds to withdraw.
  repeated cosmos.base.v1beta1.Coin amount = 4
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// MsgMarketWithdrawResponse is a response message for the MarketWithdraw endpoint.
message MsgMarketWithdrawResponse {}

// MsgMarketUpdateDetailsRequest is a request message for the MarketUpdateDetails endpoint.
message MsgMarketUpdateDetailsRequest {
  option (cosmos.msg.v1.signer) = "admin";

  // admin is the account with "update" permission requesting this change.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // market_id is the numerical identifier of the market to update required attributes for.
  uint32 market_id = 2;

  // market_details is some information about this market.
  MarketDetails market_details = 3 [(gogoproto.nullable) = false];
}

// MsgMarketUpdateDetailsResponse is a response message for the MarketUpdateDetails endpoint.
message MsgMarketUpdateDetailsResponse {}

// MsgMarketUpdateEnabledRequest is a request message for the MarketUpdateEnabled endpoint.
message MsgMarketUpdateEnabledRequest {
  option (cosmos.msg.v1.signer) = "admin";

  // admin is the account with "update" permission requesting this change.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // market_id is the numerical identifier of the market to update required attributes for.
  uint32 market_id = 2;

  // accepting_orders is whether this market is allowing orders to be created for it.
  bool accepting_orders = 3;
}

// MsgMarketUpdateEnabledResponse is a response message for the MarketUpdateEnabled endpoint.
message MsgMarketUpdateEnabledResponse {}

// MsgMarketUpdateUserSettleRequest is a request message for the MarketUpdateUserSettle endpoint.
message MsgMarketUpdateUserSettleRequest {
  option (cosmos.msg.v1.signer) = "admin";

  // admin is the account with "update" permission requesting this change.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // market_id is the numerical identifier of the market to update required attributes for.
  uint32 market_id = 2;

  // allow_user_settlement is whether this market allows users to initiate their own settlements.
  // For example, the FillBids and FillAsks endpoints are available if and only if this is true.
  // The MarketSettle endpoint is only available to market actors regardless of the value of this field.
  bool allow_user_settlement = 3;
}

// MsgMarketUpdateUserSettleResponse is a response message for the MarketUpdateUserSettle endpoint.
message MsgMarketUpdateUserSettleResponse {}

// MsgMarketManagePermissionsRequest is a request message for the MarketManagePermissions endpoint.
message MsgMarketManagePermissionsRequest {
  option (cosmos.msg.v1.signer) = "admin";

  // admin is the account with "permissions" permission requesting this change.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // market_id is the numerical identifier of the market to update required attributes for.
  uint32 market_id = 2;

  // revoke_all are addresses that should have all their permissions revoked.
  repeated string revoke_all = 3;
  // to_revoke are the specific permissions to remove for addresses.
  repeated AccessGrant to_revoke = 4 [(gogoproto.nullable) = false];
  // to_grant are the permissions to grant to addresses.
  repeated AccessGrant to_grant = 5 [(gogoproto.nullable) = false];
}

// MsgMarketManagePermissionsResponse is a response message for the MarketManagePermissions endpoint.
message MsgMarketManagePermissionsResponse {}

// MsgMarketManageReqAttrsRequest is a request message for the MarketManageReqAttrs endpoint.
message MsgMarketManageReqAttrsRequest {
  option (cosmos.msg.v1.signer) = "admin";

  // admin is the account with "attributes" permission requesting this change.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // market_id is the numerical identifier of the market to update required attributes for.
  uint32 market_id = 2;

  // create_ask_to_add are the attributes that should now also be required to create an ask order.
  repeated string create_ask_to_add = 3;
  // create_ask_to_remove are the attributes that should no longer be required to create an ask order.
  repeated string create_ask_to_remove = 4;
  // create_bid_to_add are the attributes that should now also be required to create a bid order.
  repeated string create_bid_to_add = 5;
  // create_bid_to_remove are the attributes that should no longer be required to create a bid order.
  repeated string create_bid_to_remove = 6;
}

// MsgMarketManageReqAttrsResponse is a response message for the MarketManageReqAttrs endpoint.
message MsgMarketManageReqAttrsResponse {}

// MsgGovCreateMarketRequest is a request message for the GovCreateMarket endpoint.
message MsgGovCreateMarketRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // authority should be the governance module account address.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // market is the initial market configuration.
  // If the market_id is 0, the next available market_id will be used (once voting ends).
  // If it is not zero, it must not yet be in use when the voting period ends.
  Market market = 2 [(gogoproto.nullable) = false];
}

// MsgGovCreateMarketResponse is a response message for the GovCreateMarket endpoint.
message MsgGovCreateMarketResponse {}

// MsgGovManageFeesRequest is a request message for the GovManageFees endpoint.
message MsgGovManageFeesRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // authority should be the governance module account address.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // market_id is the market id that will get these fee updates.
  uint32 market_id = 2;

  // add_fee_create_ask_flat are the create-ask flat fee options to add.
  repeated cosmos.base.v1beta1.Coin add_fee_create_ask_flat = 3 [(gogoproto.nullable) = false];
  // remove_fee_create_ask_flat are the create-ask flat fee options to remove.
  repeated cosmos.base.v1beta1.Coin remove_fee_create_ask_flat = 4 [(gogoproto.nullable) = false];

  // add_fee_create_bid_flat are the create-bid flat fee options to add.
  repeated cosmos.base.v1beta1.Coin add_fee_create_bid_flat = 5 [(gogoproto.nullable) = false];
  // remove_fee_create_bid_flat are the create-bid flat fee options to remove.
  repeated cosmos.base.v1beta1.Coin remove_fee_create_bid_flat = 6 [(gogoproto.nullable) = false];

  // add_fee_seller_settlement_flat are the seller settlement flat fee options to add.
  repeated cosmos.base.v1beta1.Coin add_fee_seller_settlement_flat = 7 [(gogoproto.nullable) = false];
  // remove_fee_seller_settlement_flat are the seller settlement flat fee options to remove.
  repeated cosmos.base.v1beta1.Coin remove_fee_seller_settlement_flat = 8 [(gogoproto.nullable) = false];

  // add_fee_seller_settlement_ratios are the seller settlement fee ratios to add.
  repeated FeeRatio add_fee_seller_settlement_ratios = 9 [(gogoproto.nullable) = false];
  // remove_fee_seller_settlement_ratios are the seller settlement fee ratios to remove.
  repeated FeeRatio remove_fee_seller_settlement_ratios = 10 [(gogoproto.nullable) = false];

  // add_fee_buyer_settlement_flat are the buyer settlement flat fee options to add.
  repeated cosmos.base.v1beta1.Coin add_fee_buyer_settlement_flat = 11 [(gogoproto.nullable) = false];
  // remove_fee_buyer_settlement_flat are the buyer settlement flat fee options to remove.
  repeated cosmos.base.v1beta1.Coin remove_fee_buyer_settlement_flat = 12 [(gogoproto.nullable) = false];

  // add_fee_buyer_settlement_ratios are the buyer settlement fee ratios to add.
  repeated FeeRatio add_fee_buyer_settlement_ratios = 13 [(gogoproto.nullable) = false];
  // remove_fee_buyer_settlement_ratios are the buyer settlement fee ratios to remove.
  repeated FeeRatio remove_fee_buyer_settlement_ratios = 14 [(gogoproto.nullable) = false];
}

// MsgGovManageFeesResponse is a response message for the GovManageFees endpoint.
message MsgGovManageFeesResponse {}

// MsgGovUpdateParamsRequest is a request message for the GovUpdateParams endpoint.
message MsgGovUpdateParamsRequest {
  option (cosmos.msg.v1.signer) = "authority";

  // authority should be the governance module account address.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params are the new param values to set
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgGovUpdateParamsResponse is a response message for the GovUpdateParams endpoint.
message MsgGovUpdateParamsResponse {}
