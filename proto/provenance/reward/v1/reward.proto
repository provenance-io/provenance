syntax = "proto3";
package provenance.reward.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "provenance/epoch/v1/genesis.proto";

option go_package          = "github.com/provenance-io/provenance/x/reward/types";
option java_package        = "io.provenance.reward.v1";
option java_multiple_files = true;

// RewardProgram
message RewardProgram {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64                   id                      = 1;
  string                   title                   = 2;
  string                   description             = 3;
  string                   distribute_from_address = 4; // community pool for now
  cosmos.base.v1beta1.Coin coin                    = 5 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin max_reward_by_address   = 6
      [(gogoproto.nullable) = false]; // maximum rewards amount per address
  uint64 sub_period_seconds = 7; // EpochInfo defines the type of epoch attributed to this program.(e.g day,week,month)
  google.protobuf.Timestamp program_start_time = 8 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "program_start_time,omitempty",
    (gogoproto.moretags) = "yaml:\"program_start_time,omitempty\""
  ];
  google.protobuf.Timestamp sub_period_end_time = 9 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "epoch_end_time,omitempty",
    (gogoproto.moretags) = "yaml:\"epoch_end_time,omitempty\""
  ];
  uint64                    sub_periods        = 10; // number of epochs this program will last for
  uint64                    current_sub_period = 11; // the current epoch reward program is on
  bool                      started            = 13; // has the rewards program started
  bool                      finished           = 14; // has the rewards program completed
  google.protobuf.Timestamp finished_time      = 15 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "finished_time,omitempty",
    (gogoproto.moretags) = "yaml:\"finished_time,omitempty\""
  ];

  uint64 share_expiration_offset =
      16; // Used to calculate the expiration time of a share in seconds. Currently, it is epoch_end_time + offset

  repeated QualifyingAction qualifying_actions = 17 // The actions that count towards the reward
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"qualifying_actions"];
}

// RewardProgramBalance will display the balance for a distribution address for specific rewards program
message RewardProgramBalance {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64                   reward_program_id    = 1;
  string                   distribution_address = 2;
  cosmos.base.v1beta1.Coin balance              = 3 [(gogoproto.nullable) = false];
  bool funds_claimable = 4; // When rewards program is over and the time for participants to claim funds is over.
                            // Program creator can reclaim their remaining funds.
}

// EpochRewardDistribution, this will updated at the end of every epoch
message EpochRewardDistribution {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  string                   epoch_id           = 1;
  uint64                   reward_program_id  = 2;
  cosmos.base.v1beta1.Coin total_rewards_pool = 3
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"total_rewards_pool\""];
  int64 total_shares = 4;
  bool  epoch_ended  = 5;
}

message AccountState {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64 reward_program_id = 1; // The id of the reward program that this share belongs to
  uint64 sub_period_id     = 2; // The id of the sub period that the share belongs to
  string address           = 3 [(gogoproto.moretags) = "yaml:\"address\""]; // Owner of the share
  uint64 action_counter    = 4; // The number of actions done by this account
}

// Share
message Share {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64 reward_program_id = 1; // The id of the reward program that this share belongs to
  uint64 sub_period_id     = 2; // The id of the sub period that the share belongs to
  string address           = 3 [(gogoproto.moretags) = "yaml:\"address\""]; // Owner of the share
  bool   claimed           = 4;                                             // Share has been claimed

  // Time when share expires
  google.protobuf.Timestamp expire_time = 5 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "expire_time,omitempty",
    (gogoproto.moretags) = "yaml:\"expire_time,omitempty\""
  ];
  int64 amount = 6;
}

message QualifyingAction {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = true;
  oneof type {
    ActionDelegate            delegate            = 1;
    ActionTransferDelegations transferDelegations = 2;
  }
}

// ActionDelegate, accounts that have delegated in an epoch period.
// rule: ActionDelegate " when account delegates in epoch period,
// if above min and below max, increase shares earned for rewards pool by 1.
message ActionDelegate {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64                   minimum_actions                 = 1;
  uint64                   maximum_actions                 = 2;
  cosmos.base.v1beta1.Coin minimum_delegation_amount       = 3;
  cosmos.base.v1beta1.Coin maximum_delegation_amount       = 4;
  string                   minimum_active_stake_percentile = 5
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  string maximum_active_stake_percentile = 6
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}
// accounts that have made transfers, from accounts that have active delegations
// rule: ActionTransferDelegations "When transfer has occurred and the account has an active delegation,
// give it a share of the rewards pool, assuming it has not gone over max value and is above a min value" {
message ActionTransferDelegations {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;
}