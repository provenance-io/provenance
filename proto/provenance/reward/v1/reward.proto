syntax = "proto3";
package provenance.reward.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

option go_package          = "github.com/provenance-io/provenance/x/reward/types";
option java_package        = "io.provenance.reward.v1";
option java_multiple_files = true;

// RewardProgram
message RewardProgram {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;
  enum State {
    PENDING  = 0;
    STARTED  = 1;
    FINISHED = 2;
  }

  uint64                   id                      = 1;
  string                   title                   = 2;
  string                   description             = 3;
  string                   distribute_from_address = 4; // community pool for now (who provides the money)
  cosmos.base.v1beta1.Coin total_reward_pool       = 5 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin max_reward_by_address   = 6
      [(gogoproto.nullable) = false]; // maximum reward per claim per address
  uint64 claim_period_seconds =
      7; // claim_period_seconds defines the type of claim_period attributed to this program.(e.g day,week,month)
  google.protobuf.Timestamp program_start_time = 8 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "program_start_time,omitempty",
    (gogoproto.moretags) = "yaml:\"program_start_time,omitempty\""
  ]; // When the reward program starts
  google.protobuf.Timestamp expected_program_end_time = 9 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "expected_program_end_time,omitempty",
    (gogoproto.moretags) = "yaml:\"expected_program_end_time,omitempty\""
  ]; // Time that the reward program MUST end

  google.protobuf.Timestamp claim_period_end_time = 10 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "claim_period_end_time,omitempty",
    (gogoproto.moretags) = "yaml:\"claim_period_end_time,omitempty\""
  ]; // This can be calculated by us and its when the current claim period ends

  google.protobuf.Timestamp actual_program_end_time = 11 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "finished_time,omitempty",
    (gogoproto.moretags) = "yaml:\"finished_time,omitempty\""
  ]; // when the program actually ended, will be empty at start

  uint64 claim_periods = 12; // number of claim periods this program will run for

  uint64 current_claim_period =
      13; // the current claim_period for the reward program is on(claim periods start at 1 <-- fisrt period)

  State state = 14; // the current state of the reward program

  uint64 share_expiration_offset =
      15; // Used to calculate the expiration time of a share in seconds. Currently, it is epoch_end_time + offset

  repeated QualifyingAction qualifying_actions = 16 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"qualifying_actions"
  ]; // The actions that count towards the reward
}

// RewardProgramBalance will display the balance for a distribution address for specific rewards program
// Money available for claims. How is this program doing.
// Aggregate objects for claims and analytics
// Used for queries
// Reward Program Id - Key
message RewardProgramBalance {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64                   reward_program_id = 1;
  cosmos.base.v1beta1.Coin balance           = 3 [(gogoproto.nullable) = false];
}

// ClaimPeriodRewardDistribution, this will updated at the end of every claim period
// Reward Program Id + Claim Period Id
message ClaimPeriodRewardDistribution {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64                   claim_period_id   = 1; // The id of the claim period that this reward belongs to
  uint64                   reward_program_id = 2; // The id of the reward program that this reward belongs to
  cosmos.base.v1beta1.Coin total_rewards_pool_for_claim_period = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"total_rewards_pool\""
  ]; // The sum of all the granted rewards for this claim period
  cosmos.base.v1beta1.Coin rewards_pool = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"rewards_pool\""
  ];                            // The allocated rewards for this claim period
  int64 total_shares       = 5; // The total number of granted shares for this claim period
  bool  claim_period_ended = 6; // A flag representing if the claim period for this reward has ended
}

message AccountState {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64 reward_program_id = 1; // The id of the reward program that this share belongs to
  uint64 sub_period_id     = 2; // The id of the sub period that the share belongs to
  string address           = 3 [(gogoproto.moretags) = "yaml:\"address\""]; // Owner of the share
  uint64 action_counter    = 4; // The number of actions done by this account
}

// Share
// Reward Program Id + Reward Claim Period Id + Address
message Share {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64 reward_program_id = 1; // The id of the reward program that this share belongs to
  uint64 sub_period_id     = 2; // The id of the sub period that the share belongs to
  string address           = 3 [(gogoproto.moretags) = "yaml:\"address\""]; // Owner of the share
  bool   claimed           = 4;                                             // Remove this

  google.protobuf.Timestamp expire_time = 5 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "expire_time,omitempty",
    (gogoproto.moretags) = "yaml:\"expire_time,omitempty\""
  ]; // Remove this

  int64 amount = 6;
}

message QualifyingAction {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = true;
  oneof type {
    ActionDelegate            delegate            = 1;
    ActionTransferDelegations transferDelegations = 2;
  }
}

// ActionDelegate, accounts that have delegated in an epoch period.
// rule: ActionDelegate " when account delegates in epoch period,
// if above min and below max, increase shares earned for rewards pool by 1.
message ActionDelegate {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64                   minimum_actions                 = 1;
  uint64                   maximum_actions                 = 2;
  cosmos.base.v1beta1.Coin minimum_delegation_amount       = 3;
  cosmos.base.v1beta1.Coin maximum_delegation_amount       = 4;
  string                   minimum_active_stake_percentile = 5
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  string maximum_active_stake_percentile = 6
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}
// accounts that have made transfers, from accounts that have active delegations
// rule: ActionTransferDelegations "When transfer has occurred and the account has an active delegation,
// give it a share of the rewards pool, assuming it has not gone over max value and is above a min value" {
message ActionTransferDelegations {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;
}