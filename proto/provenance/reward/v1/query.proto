syntax = "proto3";
package provenance.reward.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "provenance/reward/v1/reward.proto";

option go_package          = "github.com/provenance-io/provenance/x/reward/types";
option java_package        = "io.provenance.reward.v1";
option java_multiple_files = true;

// Query defines the gRPC querier service for reward module.
service Query {

  // returns RewardProgram by id
  rpc RewardProgramByID(RewardProgramByIDRequest) returns (RewardProgramByIDResponse) {
    option (google.api.http).get = "/provenance/rewards/v1/reward_program_by_id/{id}";
  }
  // returns RewardPrograms both upcoming and active
  rpc RewardPrograms(RewardProgramsRequest) returns (RewardProgramsResponse) {
    option (google.api.http).get = "/provenance/rewards/v1/reward_programs";
  }
  // returns active RewardPrograms
  rpc ActiveRewardPrograms(ActiveRewardProgramsRequest) returns (ActiveRewardProgramsResponse) {
    option (google.api.http).get = "/provenance/rewards/v1/active_reward_programs";
  }

  rpc ModuleAccountBalance(QueryModuleAccountBalanceRequest) returns (QueryModuleAccountBalanceResponse) {
    option (google.api.http).get = "/provenance/rewards/v1/module_account_balance";
  }

  // returns all ClaimPeriodRewardDistributionResponse
  rpc ClaimPeriodRewardDistributions(ClaimPeriodRewardDistributionRequest)
      returns (ClaimPeriodRewardDistributionResponse) {
    option (google.api.http).get = "/provenance/rewards/v1/claim_period_reward_distributions";
  }

  // returns a ClaimPeriodRewardDistribution by rewardId and epochId
  rpc ClaimPeriodRewardDistributionsByID(ClaimPeriodRewardDistributionByIDRequest)
      returns (ClaimPeriodRewardDistributionByIDResponse) {
    option (google.api.http).get =
        "/provenance/rewards/v1/claim_period_reward_distributions/{rewardId}/claimPeriods/{claimPeriodId}";
  }
}

message RewardProgramByIDRequest {
  uint64 id = 1;
}

message RewardProgramByIDResponse {
  RewardProgram reward_program = 1;
}

message RewardProgramsRequest {}

message RewardProgramsResponse {
  repeated RewardProgram reward_programs = 1 [(gogoproto.nullable) = false];
}

message ActiveRewardProgramsRequest {}

message ActiveRewardProgramsResponse {
  repeated RewardProgram reward_programs = 1 [(gogoproto.nullable) = false];
}

// QueryModuleAccountBalanceRequest is the request type for the Query/Params RPC method.
message QueryModuleAccountBalanceRequest {}

// QueryModuleAccountBalanceResponse is the response type for the Query/Params RPC method.
message QueryModuleAccountBalanceResponse {
  // params defines the parameters of the module.
  repeated cosmos.base.v1beta1.Coin moduleAccountBalance = 1 [
    (gogoproto.moretags)     = "yaml:\"coins\"",
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message ClaimPeriodRewardDistributionRequest {}
message ClaimPeriodRewardDistributionResponse {
  repeated ClaimPeriodRewardDistribution claim_period_reward_distribution = 1 [(gogoproto.nullable) = false];
}

message ClaimPeriodRewardDistributionByIDRequest {
  uint64 rewardId      = 1;
  uint64 claimPeriodId = 2;
}

message ClaimPeriodRewardDistributionByIDResponse {
  ClaimPeriodRewardDistribution claim_period_reward_distribution = 1;
}