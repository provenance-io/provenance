syntax = "proto3";
package provenance.reward.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "provenance/reward/v1/reward.proto";

option go_package          = "github.com/provenance-io/provenance/x/reward/types";
option java_package        = "io.provenance.reward.v1";
option java_multiple_files = true;

// Query defines the gRPC querier service for reward module.
service Query {

  // returns RewardProgram by id
  rpc RewardProgramByID(QueryRewardProgramByIDRequest) returns (QueryRewardProgramByIDResponse) {
    option (google.api.http).get = "/provenance/rewards/v1/reward_program_by_id/{id}";
  }
  // returns RewardPrograms both upcoming and active
  rpc RewardPrograms(QueryRewardProgramsRequest) returns (QueryRewardProgramsResponse) {
    option (google.api.http).get = "/provenance/rewards/v1/reward_programs";
  }

  // returns all with pagination QueryClaimPeriodRewardDistributionsRequest
  rpc ClaimPeriodRewardDistributions(QueryClaimPeriodRewardDistributionsRequest)
      returns (QueryClaimPeriodRewardDistributionsResponse) {
    option (google.api.http).get = "/provenance/rewards/v1/claim_period_reward_distributions";
  }

  // returns a ClaimPeriodRewardDistribution by rewardId and claimPeriodId
  rpc ClaimPeriodRewardDistributionsByID(QueryClaimPeriodRewardDistributionByIDRequest)
      returns (QueryClaimPeriodRewardDistributionByIDResponse) {
    option (google.api.http).get =
        "/provenance/rewards/v1/claim_period_reward_distributions/{reward_id}/claimPeriods/{claim_period_id}";
  }

  // returns rewards for an address based on request criteria(all, claimed, claimable etc)
  rpc QueryRewardDistributionsByAddress(QueryRewardsByAddressRequest) returns (QueryAccountByAddressResponse) {
    option (google.api.http).get = "/provenance/rewards/v1/reward_accounts/{address}/{claim_status}";
  }
}

// QueryRewardProgramByIDRequest queries for the Reward Program with an identifier of id
message QueryRewardProgramByIDRequest {
  uint64 id = 1;
}

// QueryRewardProgramByIDResponse contains the requested RewardProgram
message QueryRewardProgramByIDResponse {
  RewardProgram reward_program = 1;
}

// QueryRewardProgramsRequest queries for all RewardPrograms matching the query_type
message QueryRewardProgramsRequest {
  enum QueryType {
    ALL         = 0;
    PENDING     = 1;
    ACTIVE      = 2;
    OUTSTANDING = 3;
    FINISHED    = 4;
  }
  QueryType query_type = 1;
}

// QueryRewardProgramsResponse contains the list of RewardPrograms matching the query
message QueryRewardProgramsResponse {
  repeated RewardProgram reward_programs = 1 [(gogoproto.nullable) = false];
}

// QueryClaimPeriodRewardDistributionsRequest queries for all the ClaimPeriodRewardDistributions with pagination.
message QueryClaimPeriodRewardDistributionsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// QueryClaimPeriodRewardDistributionsResponse returns the list of paginated ClaimPeriodRewardDistributions
message QueryClaimPeriodRewardDistributionsResponse {
  repeated ClaimPeriodRewardDistribution claim_period_reward_distributions = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination                        = 99;
}

// QueryClaimPeriodRewardDistributionByIDRequest queries for a single ClaimPeriodRewardDistribution
message QueryClaimPeriodRewardDistributionByIDRequest {
  uint64 reward_id       = 1;
  uint64 claim_period_id = 2;
}

// QueryClaimPeriodRewardDistributionByIDResponse returns the requested ClaimPeriodRewardDistribution
message QueryClaimPeriodRewardDistributionByIDResponse {
  ClaimPeriodRewardDistribution claim_period_reward_distribution = 1;
}

message QueryRewardsByAddressRequest {
  enum RewardAccountQueryParam {
    ALL         = 0;
    UNCLAIMABLE = 1;
    CLAIMABLE   = 2;
    CLAIMED     = 3;
    EXPIRED     = 4;
  }
  string                                address      = 1;
  RewardAccountQueryParam               claim_status = 2;
  cosmos.base.query.v1beta1.PageRequest pagination   = 99;
}

message QueryAccountByAddressResponse {
  string                                 address              = 1;
  repeated RewardAccountResponse         reward_account_state = 2 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination           = 99;
}

message RewardAccountResponse {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = true;

  uint64                   reward_program_id  = 1; // The id of the reward program that this share belongs to
  cosmos.base.v1beta1.Coin total_reward_claim = 2
      [(gogoproto.nullable) = false];              // total rewards claimed for all eligible claim periods in program
  RewardAccountState.ClaimStatus claim_status = 3; // The status of the claim}
  uint64                         claim_id     = 4;
}
