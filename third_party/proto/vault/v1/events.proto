syntax = "proto3";
package vault.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/provlabs/vault/types";

// EventDeposit is an event emitted when assets are deposited into a vault.
message EventDeposit {
  // caller is the address of the account that initiated the deposit.
  string caller = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // owner is the address of the account that will receive the minted shares.
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // assets is the coins amount string of the underlying assets that were deposited.
  string assets = 3;
  // shares is the coins amount string of the vault shares that were minted.
  string shares = 4;
  // vault_id is the numerical identifier of the vault.
  uint32 vault_id = 5;
}

// EventWithdraw is an event emitted when assets are withdrawn from a vault.
message EventWithdraw {
  // caller is the address of the account that initiated the withdrawal.
  string caller = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // receiver is the address of the account that will receive the underlying assets.
  string receiver = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // owner is the address of the account from which the shares were burned.
  string owner = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // assets is the coins amount string of the underlying assets that were withdrawn.
  string assets = 4;
  // shares is the coins amount string of the vault shares that were burned.
  string shares = 5;
  // vault_id is the numerical identifier of the vault.
  uint32 vault_id = 6;
}

// EventVaultCreated is an event emitted when a vault is created.
message EventVaultCreated {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that manages the vault.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // share_denom is the name of the assets created by the vault used for distribution.
  string share_denom = 3;
  // underlying_asset is the vaultâ€™s primary collateral and valuation/base denomination.
  string underlying_asset = 4;
}

// EventSwapIn is an event emitted when assets are swapped in for vault shares.
message EventSwapIn {
  // owner is the address of the account that initiated the swap.
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // amount_in is the amount of underlying assets that were swapped in.
  string amount_in = 2;
  // shares_received is the amount of vault shares that were minted.
  string shares_received = 3;
  // vault_address is the bech32 address of the vault.
  string vault_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// EventSwapOut is an event emitted when vault shares are swapped out for underlying assets.
message EventSwapOut {
  // owner is the address of the account that initiated the swap.
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // shares_burned is the amount of vault shares that were burned.
  string shares_burned = 2;
  // amount_out is the amount of underlying assets that were sent to the recipient.
  string amount_out = 3;
  // vault_address is the bech32 address of the vault.
  string vault_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// EventVaultReconcile is an event emitted when a vault's interest is reconciled.
message EventVaultReconcile {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // principal_before is the principal amount before applying interest.
  string principal_before = 2;
  // principal_after is the principal amount after applying interest.
  string principal_after = 3;
  // rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing annual interest rate for the period.
  string rate = 4;
  // time is the payout duration in seconds.
  int64 time = 5;
  // interest_earned is the interest amount (can be positive or negative).
  string interest_earned = 6;
}

// EventVaultInterestChange is an event emitted when a vault's interest rate is changed.
message EventVaultInterestChange {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // current_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the actual annual interest rate the vault is using.
  string current_rate = 2;
  // desired_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the the annual interest rate the admin wants to use.
  string desired_rate = 3;
}

// EventInterestDeposit is an event emitted when funds are deposited for paying interest.
message EventInterestDeposit {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that deposited the funds.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // amount is the amount of funds deposited.
  string amount = 3;
}

// EventInterestWithdrawal is an event emitted when unused interest funds are withdrawn.
message EventInterestWithdrawal {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that withdrew the funds.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // amount is the amount of funds withdrawn.
  string amount = 3;
}

// EventToggleSwapIn is an event emitted when swap-in operations are enabled or disabled for a vault.
message EventToggleSwapIn {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that toggled the swap-in operations.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // enabled is the new state of swap-in operations.
  bool enabled = 3;
}

// EventToggleSwapOut is an event emitted when swap-out operations are enabled or disabled for a vault.
message EventToggleSwapOut {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that toggled the swap-out operations.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // enabled is the new state of swap-out operations.
  bool enabled = 3;
}

// EventDepositPrincipalFunds is an event emitted when principal funds are deposited by the admin.
message EventDepositPrincipalFunds {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that deposited the funds.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // amount is the amount of funds deposited.
  string amount = 3;
}

// EventWithdrawPrincipalFunds is an event emitted when principal funds are withdrawn by the admin.
message EventWithdrawPrincipalFunds {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that withdrew the funds.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // amount is the amount of funds withdrawn.
  string amount = 3;
}

// EventMinInterestRateUpdated is emitted when the minimum interest rate is updated.
message EventMinInterestRateUpdated {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that updated the limit.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // min_rate is the newly set minimum annual interest rate as a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%).
  // An empty string "" represents no minimum.
  string min_rate = 3;
}

// EventMaxInterestRateUpdated is emitted when the maximum interest rate is updated.
message EventMaxInterestRateUpdated {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that updated the limit.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // max_rate is the newly set maximum annual interest rate as a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%).
  // An empty string "" represents no maximum.
  string max_rate = 3;
}

// EventSwapOutRequested is emitted when a user successfully queues a swap out.
message EventSwapOutRequested {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1;
  // owner is the bech32 address of the user who initiated the swap out.
  string owner = 2;
  // redeem_denom is the denomination of the asset to be redeemed.
  string redeem_denom = 3;
  // shares is the amount of vault shares the user escrowed for this request.
  string shares = 4;
  // request_id is the unique identifier for this pending swap out request.
  uint64 request_id = 5;
}

// EventSwapOutCompleted is emitted when a pending swap out is successfully processed.
message EventSwapOutCompleted {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1;
  // owner is the bech32 address of the user who received the payout.
  string owner = 2;
  // assets is the amount of assets paid out to the user.
  string assets = 3;
  // request_id is the unique identifier of the swap out request that was completed.
  uint64 request_id = 4;
}

// EventSwapOutRefunded is emitted when a pending swap out fails and the user's
// escrowed shares are returned.
message EventSwapOutRefunded {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1;
  // owner is the bech32 address of the user whose shares were refunded.
  string owner = 2;
  // shares is the amount of vault shares that were returned to the user.
  string shares = 3;
  // request_id is the unique identifier of the swap out request that failed.
  uint64 request_id = 4;
  // reason is a string detailing why the swap out failed.
  string reason = 5;
}

// EventPendingSwapOutExpedited is an event emitted when a pending swap-out is expedited by the admin.
message EventPendingSwapOutExpedited {
  // request_id is the numerical identifier of the pending swap-out.
  uint64 request_id = 1;
  // vault is the bech32 address of the vault.
  string vault = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that expedited the swap-out.
  string admin = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// EventVaultPaused is emitted when a vault is paused.
message EventVaultPaused {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1;
  // admin is the address of the account that paused the vault.
  string admin = 2;
  // reason is the reason for pausing the vault.
  string reason = 3;
  // total_vault_value is the total value of the vault's assets at the time of pausing.
  string total_vault_value = 4;
}

// EventVaultUnpaused is emitted when a vault is unpaused.
message EventVaultUnpaused {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1;
  // admin is the address of the account that unpaused the vault.
  string admin = 2;
  // total_vault_value is the new total value of the vault's assets at the time of unpausing.
  string total_vault_value = 3;
}

// EventBridgeAddressSet is emitted when the bridge address for a vault is configured or updated.
message EventBridgeAddressSet {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that set the bridge address.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bridge_address is the configured external address allowed to mint/burn shares.
  string bridge_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// EventBridgeToggled is emitted when the bridge functionality is enabled or disabled for a vault.
message EventBridgeToggled {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that toggled bridge functionality.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // enabled is the new state of the bridge functionality.
  bool enabled = 3;
}

// EventBridgeMintShares is emitted when shares are minted via the bridge flow.
message EventBridgeMintShares {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bridge is the bech32 address of the bridge signer.
  string bridge = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // shares is the amount of shares minted.
  string shares = 3;
}

// EventBridgeBurnShares is emitted when shares are burned via the bridge flow.
message EventBridgeBurnShares {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bridge is the bech32 address of the bridge signer.
  string bridge = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // shares is the amount of shares burned.
  string shares = 3;
}
