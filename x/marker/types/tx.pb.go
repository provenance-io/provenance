// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/marker/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/x/bank/types"
	github_com_cosmos_cosmos_sdk_x_bank_types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/ibc-go/v8/modules/apps/transfer/types"
	github_com_cosmos_ibc_go_v8_modules_apps_transfer_types "github.com/cosmos/ibc-go/v8/modules/apps/transfer/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgGrantAllowanceRequest validates permission to create a fee grant based on marker admin access. If
// successful a feegrant is recorded where the marker account itself is the grantor
type MsgGrantAllowanceRequest struct {
	Denom         string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Administrator string `protobuf:"bytes,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
	// grantee is the address of the user being granted an allowance of another user's funds.
	Grantee string `protobuf:"bytes,3,opt,name=grantee,proto3" json:"grantee,omitempty"`
	// allowance can be any of basic and filtered fee allowance (fee FeeGrant module).
	Allowance *types.Any `protobuf:"bytes,4,opt,name=allowance,proto3" json:"allowance,omitempty"`
}

func (m *MsgGrantAllowanceRequest) Reset()         { *m = MsgGrantAllowanceRequest{} }
func (m *MsgGrantAllowanceRequest) String() string { return proto.CompactTextString(m) }
func (*MsgGrantAllowanceRequest) ProtoMessage()    {}
func (*MsgGrantAllowanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{0}
}
func (m *MsgGrantAllowanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGrantAllowanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGrantAllowanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGrantAllowanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGrantAllowanceRequest.Merge(m, src)
}
func (m *MsgGrantAllowanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgGrantAllowanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGrantAllowanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGrantAllowanceRequest proto.InternalMessageInfo

func (m *MsgGrantAllowanceRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgGrantAllowanceRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

func (m *MsgGrantAllowanceRequest) GetGrantee() string {
	if m != nil {
		return m.Grantee
	}
	return ""
}

func (m *MsgGrantAllowanceRequest) GetAllowance() *types.Any {
	if m != nil {
		return m.Allowance
	}
	return nil
}

// MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response type.
type MsgGrantAllowanceResponse struct {
}

func (m *MsgGrantAllowanceResponse) Reset()         { *m = MsgGrantAllowanceResponse{} }
func (m *MsgGrantAllowanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGrantAllowanceResponse) ProtoMessage()    {}
func (*MsgGrantAllowanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{1}
}
func (m *MsgGrantAllowanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGrantAllowanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGrantAllowanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGrantAllowanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGrantAllowanceResponse.Merge(m, src)
}
func (m *MsgGrantAllowanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGrantAllowanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGrantAllowanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGrantAllowanceResponse proto.InternalMessageInfo

// MsgAddMarkerRequest defines the Msg/AddMarker request type.
// If being provided as a governance proposal, set the from_address to the gov module's account address.
type MsgAddMarkerRequest struct {
	Amount                 github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
	Manager                string                                  `protobuf:"bytes,3,opt,name=manager,proto3" json:"manager,omitempty"`
	FromAddress            string                                  `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Status                 MarkerStatus                            `protobuf:"varint,5,opt,name=status,proto3,enum=provenance.marker.v1.MarkerStatus" json:"status,omitempty"`
	MarkerType             MarkerType                              `protobuf:"varint,6,opt,name=marker_type,json=markerType,proto3,enum=provenance.marker.v1.MarkerType" json:"marker_type,omitempty"`
	AccessList             []AccessGrant                           `protobuf:"bytes,7,rep,name=access_list,json=accessList,proto3" json:"access_list"`
	SupplyFixed            bool                                    `protobuf:"varint,8,opt,name=supply_fixed,json=supplyFixed,proto3" json:"supply_fixed,omitempty"`
	AllowGovernanceControl bool                                    `protobuf:"varint,9,opt,name=allow_governance_control,json=allowGovernanceControl,proto3" json:"allow_governance_control,omitempty"`
	AllowForcedTransfer    bool                                    `protobuf:"varint,10,opt,name=allow_forced_transfer,json=allowForcedTransfer,proto3" json:"allow_forced_transfer,omitempty"`
	RequiredAttributes     []string                                `protobuf:"bytes,11,rep,name=required_attributes,json=requiredAttributes,proto3" json:"required_attributes,omitempty"`
	UsdCents               uint64                                  `protobuf:"varint,12,opt,name=usd_cents,json=usdCents,proto3" json:"usd_cents,omitempty"` // Deprecated: Do not use.
	Volume                 uint64                                  `protobuf:"varint,13,opt,name=volume,proto3" json:"volume,omitempty"`
	UsdMills               uint64                                  `protobuf:"varint,14,opt,name=usd_mills,json=usdMills,proto3" json:"usd_mills,omitempty"`
}

func (m *MsgAddMarkerRequest) Reset()         { *m = MsgAddMarkerRequest{} }
func (m *MsgAddMarkerRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddMarkerRequest) ProtoMessage()    {}
func (*MsgAddMarkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{2}
}
func (m *MsgAddMarkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMarkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMarkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMarkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMarkerRequest.Merge(m, src)
}
func (m *MsgAddMarkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMarkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMarkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMarkerRequest proto.InternalMessageInfo

func (m *MsgAddMarkerRequest) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *MsgAddMarkerRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgAddMarkerRequest) GetStatus() MarkerStatus {
	if m != nil {
		return m.Status
	}
	return StatusUndefined
}

func (m *MsgAddMarkerRequest) GetMarkerType() MarkerType {
	if m != nil {
		return m.MarkerType
	}
	return MarkerType_Unknown
}

func (m *MsgAddMarkerRequest) GetAccessList() []AccessGrant {
	if m != nil {
		return m.AccessList
	}
	return nil
}

func (m *MsgAddMarkerRequest) GetSupplyFixed() bool {
	if m != nil {
		return m.SupplyFixed
	}
	return false
}

func (m *MsgAddMarkerRequest) GetAllowGovernanceControl() bool {
	if m != nil {
		return m.AllowGovernanceControl
	}
	return false
}

func (m *MsgAddMarkerRequest) GetAllowForcedTransfer() bool {
	if m != nil {
		return m.AllowForcedTransfer
	}
	return false
}

func (m *MsgAddMarkerRequest) GetRequiredAttributes() []string {
	if m != nil {
		return m.RequiredAttributes
	}
	return nil
}

// Deprecated: Do not use.
func (m *MsgAddMarkerRequest) GetUsdCents() uint64 {
	if m != nil {
		return m.UsdCents
	}
	return 0
}

func (m *MsgAddMarkerRequest) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *MsgAddMarkerRequest) GetUsdMills() uint64 {
	if m != nil {
		return m.UsdMills
	}
	return 0
}

// MsgAddMarkerResponse defines the Msg/AddMarker response type
type MsgAddMarkerResponse struct {
}

func (m *MsgAddMarkerResponse) Reset()         { *m = MsgAddMarkerResponse{} }
func (m *MsgAddMarkerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddMarkerResponse) ProtoMessage()    {}
func (*MsgAddMarkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{3}
}
func (m *MsgAddMarkerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMarkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMarkerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMarkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMarkerResponse.Merge(m, src)
}
func (m *MsgAddMarkerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMarkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMarkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMarkerResponse proto.InternalMessageInfo

// MsgAddAccessRequest defines the Msg/AddAccess request type
type MsgAddAccessRequest struct {
	Denom         string        `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Administrator string        `protobuf:"bytes,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
	Access        []AccessGrant `protobuf:"bytes,3,rep,name=access,proto3" json:"access"`
}

func (m *MsgAddAccessRequest) Reset()         { *m = MsgAddAccessRequest{} }
func (m *MsgAddAccessRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddAccessRequest) ProtoMessage()    {}
func (*MsgAddAccessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{4}
}
func (m *MsgAddAccessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAccessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAccessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAccessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAccessRequest.Merge(m, src)
}
func (m *MsgAddAccessRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAccessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAccessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAccessRequest proto.InternalMessageInfo

func (m *MsgAddAccessRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgAddAccessRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

func (m *MsgAddAccessRequest) GetAccess() []AccessGrant {
	if m != nil {
		return m.Access
	}
	return nil
}

// MsgAddAccessResponse defines the Msg/AddAccess response type
type MsgAddAccessResponse struct {
}

func (m *MsgAddAccessResponse) Reset()         { *m = MsgAddAccessResponse{} }
func (m *MsgAddAccessResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAccessResponse) ProtoMessage()    {}
func (*MsgAddAccessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{5}
}
func (m *MsgAddAccessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAccessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAccessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAccessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAccessResponse.Merge(m, src)
}
func (m *MsgAddAccessResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAccessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAccessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAccessResponse proto.InternalMessageInfo

// MsgDeleteAccessRequest defines the Msg/DeleteAccess request type
type MsgDeleteAccessRequest struct {
	Denom          string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Administrator  string `protobuf:"bytes,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
	RemovedAddress string `protobuf:"bytes,3,opt,name=removed_address,json=removedAddress,proto3" json:"removed_address,omitempty"`
}

func (m *MsgDeleteAccessRequest) Reset()         { *m = MsgDeleteAccessRequest{} }
func (m *MsgDeleteAccessRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteAccessRequest) ProtoMessage()    {}
func (*MsgDeleteAccessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{6}
}
func (m *MsgDeleteAccessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteAccessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteAccessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteAccessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteAccessRequest.Merge(m, src)
}
func (m *MsgDeleteAccessRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteAccessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteAccessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteAccessRequest proto.InternalMessageInfo

func (m *MsgDeleteAccessRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgDeleteAccessRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

func (m *MsgDeleteAccessRequest) GetRemovedAddress() string {
	if m != nil {
		return m.RemovedAddress
	}
	return ""
}

// MsgDeleteAccessResponse defines the Msg/DeleteAccess response type
type MsgDeleteAccessResponse struct {
}

func (m *MsgDeleteAccessResponse) Reset()         { *m = MsgDeleteAccessResponse{} }
func (m *MsgDeleteAccessResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteAccessResponse) ProtoMessage()    {}
func (*MsgDeleteAccessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{7}
}
func (m *MsgDeleteAccessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteAccessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteAccessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteAccessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteAccessResponse.Merge(m, src)
}
func (m *MsgDeleteAccessResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteAccessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteAccessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteAccessResponse proto.InternalMessageInfo

// MsgFinalizeRequest defines the Msg/Finalize request type
type MsgFinalizeRequest struct {
	Denom         string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Administrator string `protobuf:"bytes,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
}

func (m *MsgFinalizeRequest) Reset()         { *m = MsgFinalizeRequest{} }
func (m *MsgFinalizeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgFinalizeRequest) ProtoMessage()    {}
func (*MsgFinalizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{8}
}
func (m *MsgFinalizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizeRequest.Merge(m, src)
}
func (m *MsgFinalizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizeRequest proto.InternalMessageInfo

func (m *MsgFinalizeRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgFinalizeRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

// MsgFinalizeResponse defines the Msg/Finalize response type
type MsgFinalizeResponse struct {
}

func (m *MsgFinalizeResponse) Reset()         { *m = MsgFinalizeResponse{} }
func (m *MsgFinalizeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFinalizeResponse) ProtoMessage()    {}
func (*MsgFinalizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{9}
}
func (m *MsgFinalizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizeResponse.Merge(m, src)
}
func (m *MsgFinalizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizeResponse proto.InternalMessageInfo

// MsgActivateRequest defines the Msg/Activate request type
type MsgActivateRequest struct {
	Denom         string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Administrator string `protobuf:"bytes,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
}

func (m *MsgActivateRequest) Reset()         { *m = MsgActivateRequest{} }
func (m *MsgActivateRequest) String() string { return proto.CompactTextString(m) }
func (*MsgActivateRequest) ProtoMessage()    {}
func (*MsgActivateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{10}
}
func (m *MsgActivateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivateRequest.Merge(m, src)
}
func (m *MsgActivateRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivateRequest proto.InternalMessageInfo

func (m *MsgActivateRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgActivateRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

// MsgActivateResponse defines the Msg/Activate response type
type MsgActivateResponse struct {
}

func (m *MsgActivateResponse) Reset()         { *m = MsgActivateResponse{} }
func (m *MsgActivateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgActivateResponse) ProtoMessage()    {}
func (*MsgActivateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{11}
}
func (m *MsgActivateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivateResponse.Merge(m, src)
}
func (m *MsgActivateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivateResponse proto.InternalMessageInfo

// MsgCancelRequest defines the Msg/Cancel request type
type MsgCancelRequest struct {
	Denom         string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Administrator string `protobuf:"bytes,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
}

func (m *MsgCancelRequest) Reset()         { *m = MsgCancelRequest{} }
func (m *MsgCancelRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCancelRequest) ProtoMessage()    {}
func (*MsgCancelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{12}
}
func (m *MsgCancelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelRequest.Merge(m, src)
}
func (m *MsgCancelRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelRequest proto.InternalMessageInfo

func (m *MsgCancelRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgCancelRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

// MsgCancelResponse defines the Msg/Cancel response type
type MsgCancelResponse struct {
}

func (m *MsgCancelResponse) Reset()         { *m = MsgCancelResponse{} }
func (m *MsgCancelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelResponse) ProtoMessage()    {}
func (*MsgCancelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{13}
}
func (m *MsgCancelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelResponse.Merge(m, src)
}
func (m *MsgCancelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelResponse proto.InternalMessageInfo

// MsgDeleteRequest defines the Msg/Delete request type
type MsgDeleteRequest struct {
	Denom         string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Administrator string `protobuf:"bytes,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
}

func (m *MsgDeleteRequest) Reset()         { *m = MsgDeleteRequest{} }
func (m *MsgDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteRequest) ProtoMessage()    {}
func (*MsgDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{14}
}
func (m *MsgDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteRequest.Merge(m, src)
}
func (m *MsgDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteRequest proto.InternalMessageInfo

func (m *MsgDeleteRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgDeleteRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

// MsgDeleteResponse defines the Msg/Delete response type
type MsgDeleteResponse struct {
}

func (m *MsgDeleteResponse) Reset()         { *m = MsgDeleteResponse{} }
func (m *MsgDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteResponse) ProtoMessage()    {}
func (*MsgDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{15}
}
func (m *MsgDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteResponse.Merge(m, src)
}
func (m *MsgDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteResponse proto.InternalMessageInfo

// MsgMintRequest defines the Msg/Mint request type
type MsgMintRequest struct {
	Amount        github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
	Administrator string                                  `protobuf:"bytes,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
}

func (m *MsgMintRequest) Reset()         { *m = MsgMintRequest{} }
func (m *MsgMintRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMintRequest) ProtoMessage()    {}
func (*MsgMintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{16}
}
func (m *MsgMintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintRequest.Merge(m, src)
}
func (m *MsgMintRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintRequest proto.InternalMessageInfo

func (m *MsgMintRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

// MsgMintResponse defines the Msg/Mint response type
type MsgMintResponse struct {
}

func (m *MsgMintResponse) Reset()         { *m = MsgMintResponse{} }
func (m *MsgMintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintResponse) ProtoMessage()    {}
func (*MsgMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{17}
}
func (m *MsgMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintResponse.Merge(m, src)
}
func (m *MsgMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintResponse proto.InternalMessageInfo

// MsgBurnRequest defines the Msg/Burn request type
type MsgBurnRequest struct {
	Amount        github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
	Administrator string                                  `protobuf:"bytes,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
}

func (m *MsgBurnRequest) Reset()         { *m = MsgBurnRequest{} }
func (m *MsgBurnRequest) String() string { return proto.CompactTextString(m) }
func (*MsgBurnRequest) ProtoMessage()    {}
func (*MsgBurnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{18}
}
func (m *MsgBurnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnRequest.Merge(m, src)
}
func (m *MsgBurnRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnRequest proto.InternalMessageInfo

func (m *MsgBurnRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

// MsgBurnResponse defines the Msg/Burn response type
type MsgBurnResponse struct {
}

func (m *MsgBurnResponse) Reset()         { *m = MsgBurnResponse{} }
func (m *MsgBurnResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnResponse) ProtoMessage()    {}
func (*MsgBurnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{19}
}
func (m *MsgBurnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnResponse.Merge(m, src)
}
func (m *MsgBurnResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnResponse proto.InternalMessageInfo

// MsgWithdrawRequest defines the Msg/Withdraw request type
type MsgWithdrawRequest struct {
	Denom         string                                   `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Administrator string                                   `protobuf:"bytes,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
	ToAddress     string                                   `protobuf:"bytes,3,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Amount        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgWithdrawRequest) Reset()         { *m = MsgWithdrawRequest{} }
func (m *MsgWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawRequest) ProtoMessage()    {}
func (*MsgWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{20}
}
func (m *MsgWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawRequest.Merge(m, src)
}
func (m *MsgWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawRequest proto.InternalMessageInfo

func (m *MsgWithdrawRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgWithdrawRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

func (m *MsgWithdrawRequest) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *MsgWithdrawRequest) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// MsgWithdrawResponse defines the Msg/Withdraw response type
type MsgWithdrawResponse struct {
}

func (m *MsgWithdrawResponse) Reset()         { *m = MsgWithdrawResponse{} }
func (m *MsgWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawResponse) ProtoMessage()    {}
func (*MsgWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{21}
}
func (m *MsgWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawResponse.Merge(m, src)
}
func (m *MsgWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawResponse proto.InternalMessageInfo

// MsgTransferRequest defines the Msg/Transfer request type
type MsgTransferRequest struct {
	Amount        github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
	Administrator string                                  `protobuf:"bytes,3,opt,name=administrator,proto3" json:"administrator,omitempty"`
	FromAddress   string                                  `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress     string                                  `protobuf:"bytes,5,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
}

func (m *MsgTransferRequest) Reset()         { *m = MsgTransferRequest{} }
func (m *MsgTransferRequest) String() string { return proto.CompactTextString(m) }
func (*MsgTransferRequest) ProtoMessage()    {}
func (*MsgTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{22}
}
func (m *MsgTransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferRequest.Merge(m, src)
}
func (m *MsgTransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferRequest proto.InternalMessageInfo

func (m *MsgTransferRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

func (m *MsgTransferRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgTransferRequest) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

// MsgTransferResponse defines the Msg/Transfer response type
type MsgTransferResponse struct {
}

func (m *MsgTransferResponse) Reset()         { *m = MsgTransferResponse{} }
func (m *MsgTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferResponse) ProtoMessage()    {}
func (*MsgTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{23}
}
func (m *MsgTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferResponse.Merge(m, src)
}
func (m *MsgTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferResponse proto.InternalMessageInfo

// MsgIbcTransferRequest defines the Msg/IbcTransfer request type for markers.
type MsgIbcTransferRequest struct {
	Transfer      github_com_cosmos_ibc_go_v8_modules_apps_transfer_types.MsgTransfer `protobuf:"bytes,1,opt,name=transfer,proto3,customtype=github.com/cosmos/ibc-go/v8/modules/apps/transfer/types.MsgTransfer" json:"transfer"`
	Administrator string                                                              `protobuf:"bytes,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
}

func (m *MsgIbcTransferRequest) Reset()         { *m = MsgIbcTransferRequest{} }
func (m *MsgIbcTransferRequest) String() string { return proto.CompactTextString(m) }
func (*MsgIbcTransferRequest) ProtoMessage()    {}
func (*MsgIbcTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{24}
}
func (m *MsgIbcTransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIbcTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIbcTransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIbcTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIbcTransferRequest.Merge(m, src)
}
func (m *MsgIbcTransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgIbcTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIbcTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIbcTransferRequest proto.InternalMessageInfo

func (m *MsgIbcTransferRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

// MsgIbcTransferResponse defines the Msg/IbcTransfer response type
type MsgIbcTransferResponse struct {
}

func (m *MsgIbcTransferResponse) Reset()         { *m = MsgIbcTransferResponse{} }
func (m *MsgIbcTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIbcTransferResponse) ProtoMessage()    {}
func (*MsgIbcTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{25}
}
func (m *MsgIbcTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIbcTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIbcTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIbcTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIbcTransferResponse.Merge(m, src)
}
func (m *MsgIbcTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIbcTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIbcTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIbcTransferResponse proto.InternalMessageInfo

// MsgSetDenomMetadataRequest defines the Msg/SetDenomMetadata request type
type MsgSetDenomMetadataRequest struct {
	Metadata      github_com_cosmos_cosmos_sdk_x_bank_types.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,customtype=github.com/cosmos/cosmos-sdk/x/bank/types.Metadata" json:"metadata"`
	Administrator string                                             `protobuf:"bytes,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
}

func (m *MsgSetDenomMetadataRequest) Reset()         { *m = MsgSetDenomMetadataRequest{} }
func (m *MsgSetDenomMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSetDenomMetadataRequest) ProtoMessage()    {}
func (*MsgSetDenomMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{26}
}
func (m *MsgSetDenomMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetDenomMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetDenomMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetDenomMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetDenomMetadataRequest.Merge(m, src)
}
func (m *MsgSetDenomMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetDenomMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetDenomMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetDenomMetadataRequest proto.InternalMessageInfo

func (m *MsgSetDenomMetadataRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

// MsgSetDenomMetadataResponse defines the Msg/SetDenomMetadata response type
type MsgSetDenomMetadataResponse struct {
}

func (m *MsgSetDenomMetadataResponse) Reset()         { *m = MsgSetDenomMetadataResponse{} }
func (m *MsgSetDenomMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetDenomMetadataResponse) ProtoMessage()    {}
func (*MsgSetDenomMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{27}
}
func (m *MsgSetDenomMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetDenomMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetDenomMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetDenomMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetDenomMetadataResponse.Merge(m, src)
}
func (m *MsgSetDenomMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetDenomMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetDenomMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetDenomMetadataResponse proto.InternalMessageInfo

// MsgAddFinalizeActivateMarkerRequest defines the Msg/AddFinalizeActivateMarker request type
type MsgAddFinalizeActivateMarkerRequest struct {
	Amount                 github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
	Manager                string                                  `protobuf:"bytes,3,opt,name=manager,proto3" json:"manager,omitempty"`
	FromAddress            string                                  `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	MarkerType             MarkerType                              `protobuf:"varint,5,opt,name=marker_type,json=markerType,proto3,enum=provenance.marker.v1.MarkerType" json:"marker_type,omitempty"`
	AccessList             []AccessGrant                           `protobuf:"bytes,6,rep,name=access_list,json=accessList,proto3" json:"access_list"`
	SupplyFixed            bool                                    `protobuf:"varint,7,opt,name=supply_fixed,json=supplyFixed,proto3" json:"supply_fixed,omitempty"`
	AllowGovernanceControl bool                                    `protobuf:"varint,8,opt,name=allow_governance_control,json=allowGovernanceControl,proto3" json:"allow_governance_control,omitempty"`
	AllowForcedTransfer    bool                                    `protobuf:"varint,9,opt,name=allow_forced_transfer,json=allowForcedTransfer,proto3" json:"allow_forced_transfer,omitempty"`
	RequiredAttributes     []string                                `protobuf:"bytes,10,rep,name=required_attributes,json=requiredAttributes,proto3" json:"required_attributes,omitempty"`
	UsdCents               uint64                                  `protobuf:"varint,11,opt,name=usd_cents,json=usdCents,proto3" json:"usd_cents,omitempty"` // Deprecated: Do not use.
	Volume                 uint64                                  `protobuf:"varint,12,opt,name=volume,proto3" json:"volume,omitempty"`
	UsdMills               uint64                                  `protobuf:"varint,13,opt,name=usd_mills,json=usdMills,proto3" json:"usd_mills,omitempty"`
}

func (m *MsgAddFinalizeActivateMarkerRequest) Reset()         { *m = MsgAddFinalizeActivateMarkerRequest{} }
func (m *MsgAddFinalizeActivateMarkerRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddFinalizeActivateMarkerRequest) ProtoMessage()    {}
func (*MsgAddFinalizeActivateMarkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{28}
}
func (m *MsgAddFinalizeActivateMarkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddFinalizeActivateMarkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddFinalizeActivateMarkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddFinalizeActivateMarkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddFinalizeActivateMarkerRequest.Merge(m, src)
}
func (m *MsgAddFinalizeActivateMarkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddFinalizeActivateMarkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddFinalizeActivateMarkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddFinalizeActivateMarkerRequest proto.InternalMessageInfo

func (m *MsgAddFinalizeActivateMarkerRequest) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *MsgAddFinalizeActivateMarkerRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgAddFinalizeActivateMarkerRequest) GetMarkerType() MarkerType {
	if m != nil {
		return m.MarkerType
	}
	return MarkerType_Unknown
}

func (m *MsgAddFinalizeActivateMarkerRequest) GetAccessList() []AccessGrant {
	if m != nil {
		return m.AccessList
	}
	return nil
}

func (m *MsgAddFinalizeActivateMarkerRequest) GetSupplyFixed() bool {
	if m != nil {
		return m.SupplyFixed
	}
	return false
}

func (m *MsgAddFinalizeActivateMarkerRequest) GetAllowGovernanceControl() bool {
	if m != nil {
		return m.AllowGovernanceControl
	}
	return false
}

func (m *MsgAddFinalizeActivateMarkerRequest) GetAllowForcedTransfer() bool {
	if m != nil {
		return m.AllowForcedTransfer
	}
	return false
}

func (m *MsgAddFinalizeActivateMarkerRequest) GetRequiredAttributes() []string {
	if m != nil {
		return m.RequiredAttributes
	}
	return nil
}

// Deprecated: Do not use.
func (m *MsgAddFinalizeActivateMarkerRequest) GetUsdCents() uint64 {
	if m != nil {
		return m.UsdCents
	}
	return 0
}

func (m *MsgAddFinalizeActivateMarkerRequest) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *MsgAddFinalizeActivateMarkerRequest) GetUsdMills() uint64 {
	if m != nil {
		return m.UsdMills
	}
	return 0
}

// MsgAddFinalizeActivateMarkerResponse defines the Msg/AddFinalizeActivateMarker response type
type MsgAddFinalizeActivateMarkerResponse struct {
}

func (m *MsgAddFinalizeActivateMarkerResponse) Reset()         { *m = MsgAddFinalizeActivateMarkerResponse{} }
func (m *MsgAddFinalizeActivateMarkerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddFinalizeActivateMarkerResponse) ProtoMessage()    {}
func (*MsgAddFinalizeActivateMarkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{29}
}
func (m *MsgAddFinalizeActivateMarkerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddFinalizeActivateMarkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddFinalizeActivateMarkerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddFinalizeActivateMarkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddFinalizeActivateMarkerResponse.Merge(m, src)
}
func (m *MsgAddFinalizeActivateMarkerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddFinalizeActivateMarkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddFinalizeActivateMarkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddFinalizeActivateMarkerResponse proto.InternalMessageInfo

// MsgSupplyIncreaseProposalRequest defines a governance proposal to administer a marker and increase total supply of
// the marker through minting coin and placing it within the marker or assigning it directly to an account
type MsgSupplyIncreaseProposalRequest struct {
	Amount        github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
	TargetAddress string                                  `protobuf:"bytes,2,opt,name=target_address,json=targetAddress,proto3" json:"target_address,omitempty"`
	Authority     string                                  `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *MsgSupplyIncreaseProposalRequest) Reset()         { *m = MsgSupplyIncreaseProposalRequest{} }
func (m *MsgSupplyIncreaseProposalRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSupplyIncreaseProposalRequest) ProtoMessage()    {}
func (*MsgSupplyIncreaseProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{30}
}
func (m *MsgSupplyIncreaseProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSupplyIncreaseProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSupplyIncreaseProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSupplyIncreaseProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSupplyIncreaseProposalRequest.Merge(m, src)
}
func (m *MsgSupplyIncreaseProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSupplyIncreaseProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSupplyIncreaseProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSupplyIncreaseProposalRequest proto.InternalMessageInfo

func (m *MsgSupplyIncreaseProposalRequest) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

func (m *MsgSupplyIncreaseProposalRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// MsgSupplyIncreaseProposalResponse defines the Msg/SupplyIncreaseProposal response type
type MsgSupplyIncreaseProposalResponse struct {
}

func (m *MsgSupplyIncreaseProposalResponse) Reset()         { *m = MsgSupplyIncreaseProposalResponse{} }
func (m *MsgSupplyIncreaseProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSupplyIncreaseProposalResponse) ProtoMessage()    {}
func (*MsgSupplyIncreaseProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{31}
}
func (m *MsgSupplyIncreaseProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSupplyIncreaseProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSupplyIncreaseProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSupplyIncreaseProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSupplyIncreaseProposalResponse.Merge(m, src)
}
func (m *MsgSupplyIncreaseProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSupplyIncreaseProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSupplyIncreaseProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSupplyIncreaseProposalResponse proto.InternalMessageInfo

// MsgUpdateRequiredAttributesRequest defines a msg to update/add/remove required attributes from a resticted marker
// signer must have transfer authority to change attributes, to update attribute add current to remove list and new to
// add list
type MsgUpdateRequiredAttributesRequest struct {
	// The denomination of the marker to update.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// List of required attributes to remove from marker.
	RemoveRequiredAttributes []string `protobuf:"bytes,2,rep,name=remove_required_attributes,json=removeRequiredAttributes,proto3" json:"remove_required_attributes,omitempty"`
	// List of required attributes to add to marker.
	AddRequiredAttributes []string `protobuf:"bytes,3,rep,name=add_required_attributes,json=addRequiredAttributes,proto3" json:"add_required_attributes,omitempty"`
	// The signer of the message.  Must have transfer authority to marker or be governance module account address.
	TransferAuthority string `protobuf:"bytes,4,opt,name=transfer_authority,json=transferAuthority,proto3" json:"transfer_authority,omitempty"`
}

func (m *MsgUpdateRequiredAttributesRequest) Reset()         { *m = MsgUpdateRequiredAttributesRequest{} }
func (m *MsgUpdateRequiredAttributesRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRequiredAttributesRequest) ProtoMessage()    {}
func (*MsgUpdateRequiredAttributesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{32}
}
func (m *MsgUpdateRequiredAttributesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredAttributesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredAttributesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredAttributesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredAttributesRequest.Merge(m, src)
}
func (m *MsgUpdateRequiredAttributesRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredAttributesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredAttributesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredAttributesRequest proto.InternalMessageInfo

func (m *MsgUpdateRequiredAttributesRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgUpdateRequiredAttributesRequest) GetRemoveRequiredAttributes() []string {
	if m != nil {
		return m.RemoveRequiredAttributes
	}
	return nil
}

func (m *MsgUpdateRequiredAttributesRequest) GetAddRequiredAttributes() []string {
	if m != nil {
		return m.AddRequiredAttributes
	}
	return nil
}

func (m *MsgUpdateRequiredAttributesRequest) GetTransferAuthority() string {
	if m != nil {
		return m.TransferAuthority
	}
	return ""
}

// MsgUpdateRequiredAttributesResponse defines the Msg/UpdateRequiredAttributes response type
type MsgUpdateRequiredAttributesResponse struct {
}

func (m *MsgUpdateRequiredAttributesResponse) Reset()         { *m = MsgUpdateRequiredAttributesResponse{} }
func (m *MsgUpdateRequiredAttributesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRequiredAttributesResponse) ProtoMessage()    {}
func (*MsgUpdateRequiredAttributesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{33}
}
func (m *MsgUpdateRequiredAttributesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredAttributesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredAttributesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredAttributesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredAttributesResponse.Merge(m, src)
}
func (m *MsgUpdateRequiredAttributesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredAttributesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredAttributesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredAttributesResponse proto.InternalMessageInfo

// MsgUpdateForcedTransferRequest defines a msg to update the allow_forced_transfer field of a marker.
// It is only usable via governance proposal.
type MsgUpdateForcedTransferRequest struct {
	// The denomination of the marker to update.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// Whether an admin can transfer restricted coins from a 3rd-party account without their signature.
	AllowForcedTransfer bool `protobuf:"varint,2,opt,name=allow_forced_transfer,json=allowForcedTransfer,proto3" json:"allow_forced_transfer,omitempty"`
	// The signer of this message. Must be the governance module account address.
	Authority string `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *MsgUpdateForcedTransferRequest) Reset()         { *m = MsgUpdateForcedTransferRequest{} }
func (m *MsgUpdateForcedTransferRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateForcedTransferRequest) ProtoMessage()    {}
func (*MsgUpdateForcedTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{34}
}
func (m *MsgUpdateForcedTransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateForcedTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateForcedTransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateForcedTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateForcedTransferRequest.Merge(m, src)
}
func (m *MsgUpdateForcedTransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateForcedTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateForcedTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateForcedTransferRequest proto.InternalMessageInfo

func (m *MsgUpdateForcedTransferRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgUpdateForcedTransferRequest) GetAllowForcedTransfer() bool {
	if m != nil {
		return m.AllowForcedTransfer
	}
	return false
}

func (m *MsgUpdateForcedTransferRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// MsgUpdateForcedTransferResponse defines the Msg/UpdateForcedTransfer response type
type MsgUpdateForcedTransferResponse struct {
}

func (m *MsgUpdateForcedTransferResponse) Reset()         { *m = MsgUpdateForcedTransferResponse{} }
func (m *MsgUpdateForcedTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateForcedTransferResponse) ProtoMessage()    {}
func (*MsgUpdateForcedTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{35}
}
func (m *MsgUpdateForcedTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateForcedTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateForcedTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateForcedTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateForcedTransferResponse.Merge(m, src)
}
func (m *MsgUpdateForcedTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateForcedTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateForcedTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateForcedTransferResponse proto.InternalMessageInfo

// MsgSetAccountDataRequest defines a msg to set/update/delete the account data for a marker.
// Signer must have deposit authority or be a gov proposal.
type MsgSetAccountDataRequest struct {
	// The denomination of the marker to update.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// The desired accountdata value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// The signer of this message. Must have deposit authority or be the governance module account address.
	Signer string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgSetAccountDataRequest) Reset()         { *m = MsgSetAccountDataRequest{} }
func (m *MsgSetAccountDataRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSetAccountDataRequest) ProtoMessage()    {}
func (*MsgSetAccountDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{36}
}
func (m *MsgSetAccountDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetAccountDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetAccountDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetAccountDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetAccountDataRequest.Merge(m, src)
}
func (m *MsgSetAccountDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetAccountDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetAccountDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetAccountDataRequest proto.InternalMessageInfo

func (m *MsgSetAccountDataRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgSetAccountDataRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *MsgSetAccountDataRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgSetAccountDataResponse defines the Msg/SetAccountData response type
type MsgSetAccountDataResponse struct {
}

func (m *MsgSetAccountDataResponse) Reset()         { *m = MsgSetAccountDataResponse{} }
func (m *MsgSetAccountDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetAccountDataResponse) ProtoMessage()    {}
func (*MsgSetAccountDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{37}
}
func (m *MsgSetAccountDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetAccountDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetAccountDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetAccountDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetAccountDataResponse.Merge(m, src)
}
func (m *MsgSetAccountDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetAccountDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetAccountDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetAccountDataResponse proto.InternalMessageInfo

// MsgUpdateSendDenyListRequest defines a msg to add/remove addresses to send deny list for a resticted marker
// signer must have transfer authority
type MsgUpdateSendDenyListRequest struct {
	// The denomination of the marker to update.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// List of bech32 addresses to remove from the deny send list.
	RemoveDeniedAddresses []string `protobuf:"bytes,2,rep,name=remove_denied_addresses,json=removeDeniedAddresses,proto3" json:"remove_denied_addresses,omitempty"`
	// List of bech32 addresses to add to the deny send list.
	AddDeniedAddresses []string `protobuf:"bytes,3,rep,name=add_denied_addresses,json=addDeniedAddresses,proto3" json:"add_denied_addresses,omitempty"`
	// The signer of the message.  Must have admin authority to marker or be governance module account address.
	Authority string `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *MsgUpdateSendDenyListRequest) Reset()         { *m = MsgUpdateSendDenyListRequest{} }
func (m *MsgUpdateSendDenyListRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSendDenyListRequest) ProtoMessage()    {}
func (*MsgUpdateSendDenyListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{38}
}
func (m *MsgUpdateSendDenyListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSendDenyListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSendDenyListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSendDenyListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSendDenyListRequest.Merge(m, src)
}
func (m *MsgUpdateSendDenyListRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSendDenyListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSendDenyListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSendDenyListRequest proto.InternalMessageInfo

func (m *MsgUpdateSendDenyListRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgUpdateSendDenyListRequest) GetRemoveDeniedAddresses() []string {
	if m != nil {
		return m.RemoveDeniedAddresses
	}
	return nil
}

func (m *MsgUpdateSendDenyListRequest) GetAddDeniedAddresses() []string {
	if m != nil {
		return m.AddDeniedAddresses
	}
	return nil
}

func (m *MsgUpdateSendDenyListRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// MsgUpdateSendDenyListResponse defines the Msg/UpdateSendDenyList response type
type MsgUpdateSendDenyListResponse struct {
}

func (m *MsgUpdateSendDenyListResponse) Reset()         { *m = MsgUpdateSendDenyListResponse{} }
func (m *MsgUpdateSendDenyListResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSendDenyListResponse) ProtoMessage()    {}
func (*MsgUpdateSendDenyListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{39}
}
func (m *MsgUpdateSendDenyListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSendDenyListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSendDenyListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSendDenyListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSendDenyListResponse.Merge(m, src)
}
func (m *MsgUpdateSendDenyListResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSendDenyListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSendDenyListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSendDenyListResponse proto.InternalMessageInfo

// MsgAddNetAssetValuesRequest defines the Msg/AddNetAssetValues request type
type MsgAddNetAssetValuesRequest struct {
	Denom          string          `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Administrator  string          `protobuf:"bytes,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
	NetAssetValues []NetAssetValue `protobuf:"bytes,3,rep,name=net_asset_values,json=netAssetValues,proto3" json:"net_asset_values"`
}

func (m *MsgAddNetAssetValuesRequest) Reset()         { *m = MsgAddNetAssetValuesRequest{} }
func (m *MsgAddNetAssetValuesRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddNetAssetValuesRequest) ProtoMessage()    {}
func (*MsgAddNetAssetValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{40}
}
func (m *MsgAddNetAssetValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddNetAssetValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddNetAssetValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddNetAssetValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddNetAssetValuesRequest.Merge(m, src)
}
func (m *MsgAddNetAssetValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddNetAssetValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddNetAssetValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddNetAssetValuesRequest proto.InternalMessageInfo

func (m *MsgAddNetAssetValuesRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgAddNetAssetValuesRequest) GetAdministrator() string {
	if m != nil {
		return m.Administrator
	}
	return ""
}

func (m *MsgAddNetAssetValuesRequest) GetNetAssetValues() []NetAssetValue {
	if m != nil {
		return m.NetAssetValues
	}
	return nil
}

// MsgAddNetAssetValuesResponse defines the Msg/AddNetAssetValue response type
type MsgAddNetAssetValuesResponse struct {
}

func (m *MsgAddNetAssetValuesResponse) Reset()         { *m = MsgAddNetAssetValuesResponse{} }
func (m *MsgAddNetAssetValuesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddNetAssetValuesResponse) ProtoMessage()    {}
func (*MsgAddNetAssetValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb203fb73175ed3, []int{41}
}
func (m *MsgAddNetAssetValuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddNetAssetValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddNetAssetValuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddNetAssetValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddNetAssetValuesResponse.Merge(m, src)
}
func (m *MsgAddNetAssetValuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddNetAssetValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddNetAssetValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddNetAssetValuesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgGrantAllowanceRequest)(nil), "provenance.marker.v1.MsgGrantAllowanceRequest")
	proto.RegisterType((*MsgGrantAllowanceResponse)(nil), "provenance.marker.v1.MsgGrantAllowanceResponse")
	proto.RegisterType((*MsgAddMarkerRequest)(nil), "provenance.marker.v1.MsgAddMarkerRequest")
	proto.RegisterType((*MsgAddMarkerResponse)(nil), "provenance.marker.v1.MsgAddMarkerResponse")
	proto.RegisterType((*MsgAddAccessRequest)(nil), "provenance.marker.v1.MsgAddAccessRequest")
	proto.RegisterType((*MsgAddAccessResponse)(nil), "provenance.marker.v1.MsgAddAccessResponse")
	proto.RegisterType((*MsgDeleteAccessRequest)(nil), "provenance.marker.v1.MsgDeleteAccessRequest")
	proto.RegisterType((*MsgDeleteAccessResponse)(nil), "provenance.marker.v1.MsgDeleteAccessResponse")
	proto.RegisterType((*MsgFinalizeRequest)(nil), "provenance.marker.v1.MsgFinalizeRequest")
	proto.RegisterType((*MsgFinalizeResponse)(nil), "provenance.marker.v1.MsgFinalizeResponse")
	proto.RegisterType((*MsgActivateRequest)(nil), "provenance.marker.v1.MsgActivateRequest")
	proto.RegisterType((*MsgActivateResponse)(nil), "provenance.marker.v1.MsgActivateResponse")
	proto.RegisterType((*MsgCancelRequest)(nil), "provenance.marker.v1.MsgCancelRequest")
	proto.RegisterType((*MsgCancelResponse)(nil), "provenance.marker.v1.MsgCancelResponse")
	proto.RegisterType((*MsgDeleteRequest)(nil), "provenance.marker.v1.MsgDeleteRequest")
	proto.RegisterType((*MsgDeleteResponse)(nil), "provenance.marker.v1.MsgDeleteResponse")
	proto.RegisterType((*MsgMintRequest)(nil), "provenance.marker.v1.MsgMintRequest")
	proto.RegisterType((*MsgMintResponse)(nil), "provenance.marker.v1.MsgMintResponse")
	proto.RegisterType((*MsgBurnRequest)(nil), "provenance.marker.v1.MsgBurnRequest")
	proto.RegisterType((*MsgBurnResponse)(nil), "provenance.marker.v1.MsgBurnResponse")
	proto.RegisterType((*MsgWithdrawRequest)(nil), "provenance.marker.v1.MsgWithdrawRequest")
	proto.RegisterType((*MsgWithdrawResponse)(nil), "provenance.marker.v1.MsgWithdrawResponse")
	proto.RegisterType((*MsgTransferRequest)(nil), "provenance.marker.v1.MsgTransferRequest")
	proto.RegisterType((*MsgTransferResponse)(nil), "provenance.marker.v1.MsgTransferResponse")
	proto.RegisterType((*MsgIbcTransferRequest)(nil), "provenance.marker.v1.MsgIbcTransferRequest")
	proto.RegisterType((*MsgIbcTransferResponse)(nil), "provenance.marker.v1.MsgIbcTransferResponse")
	proto.RegisterType((*MsgSetDenomMetadataRequest)(nil), "provenance.marker.v1.MsgSetDenomMetadataRequest")
	proto.RegisterType((*MsgSetDenomMetadataResponse)(nil), "provenance.marker.v1.MsgSetDenomMetadataResponse")
	proto.RegisterType((*MsgAddFinalizeActivateMarkerRequest)(nil), "provenance.marker.v1.MsgAddFinalizeActivateMarkerRequest")
	proto.RegisterType((*MsgAddFinalizeActivateMarkerResponse)(nil), "provenance.marker.v1.MsgAddFinalizeActivateMarkerResponse")
	proto.RegisterType((*MsgSupplyIncreaseProposalRequest)(nil), "provenance.marker.v1.MsgSupplyIncreaseProposalRequest")
	proto.RegisterType((*MsgSupplyIncreaseProposalResponse)(nil), "provenance.marker.v1.MsgSupplyIncreaseProposalResponse")
	proto.RegisterType((*MsgUpdateRequiredAttributesRequest)(nil), "provenance.marker.v1.MsgUpdateRequiredAttributesRequest")
	proto.RegisterType((*MsgUpdateRequiredAttributesResponse)(nil), "provenance.marker.v1.MsgUpdateRequiredAttributesResponse")
	proto.RegisterType((*MsgUpdateForcedTransferRequest)(nil), "provenance.marker.v1.MsgUpdateForcedTransferRequest")
	proto.RegisterType((*MsgUpdateForcedTransferResponse)(nil), "provenance.marker.v1.MsgUpdateForcedTransferResponse")
	proto.RegisterType((*MsgSetAccountDataRequest)(nil), "provenance.marker.v1.MsgSetAccountDataRequest")
	proto.RegisterType((*MsgSetAccountDataResponse)(nil), "provenance.marker.v1.MsgSetAccountDataResponse")
	proto.RegisterType((*MsgUpdateSendDenyListRequest)(nil), "provenance.marker.v1.MsgUpdateSendDenyListRequest")
	proto.RegisterType((*MsgUpdateSendDenyListResponse)(nil), "provenance.marker.v1.MsgUpdateSendDenyListResponse")
	proto.RegisterType((*MsgAddNetAssetValuesRequest)(nil), "provenance.marker.v1.MsgAddNetAssetValuesRequest")
	proto.RegisterType((*MsgAddNetAssetValuesResponse)(nil), "provenance.marker.v1.MsgAddNetAssetValuesResponse")
}

func init() { proto.RegisterFile("provenance/marker/v1/tx.proto", fileDescriptor_bcb203fb73175ed3) }

var fileDescriptor_bcb203fb73175ed3 = []byte{
	// 1983 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0x4f, 0x6c, 0x1b, 0x59,
	0x19, 0xef, 0xe4, 0x8f, 0x1b, 0x7f, 0x6e, 0xd3, 0xe6, 0xc5, 0x49, 0x26, 0x53, 0xe2, 0x38, 0xee,
	0x3f, 0xef, 0xb2, 0xf1, 0x34, 0x5e, 0x28, 0xdd, 0x08, 0x09, 0xd9, 0x09, 0x2d, 0x15, 0x18, 0xad,
	0x9c, 0x05, 0x04, 0x17, 0x6b, 0x3c, 0xf3, 0x32, 0x1d, 0xc5, 0x9e, 0x71, 0xe7, 0x3d, 0xbb, 0xcd,
	0x4a, 0x5c, 0xe0, 0xb4, 0x27, 0x60, 0x0f, 0x5c, 0xb8, 0x70, 0xe2, 0xb0, 0x07, 0xc4, 0x61, 0x05,
	0x77, 0x4e, 0x2b, 0x24, 0xa4, 0x15, 0x27, 0xc4, 0x61, 0x41, 0xad, 0x04, 0x2b, 0xce, 0x5c, 0xb8,
	0x20, 0xf4, 0xfe, 0xcc, 0x8c, 0xc7, 0x9e, 0x99, 0x24, 0x6d, 0x76, 0x57, 0x3d, 0x25, 0xef, 0x7d,
	0xff, 0x7f, 0xdf, 0xf7, 0xe6, 0x7d, 0xdf, 0x33, 0x6c, 0x0c, 0x7c, 0x6f, 0x84, 0x5d, 0xc3, 0x35,
	0xb1, 0xde, 0x37, 0xfc, 0x23, 0xec, 0xeb, 0xa3, 0x1d, 0x9d, 0x3e, 0xad, 0x0d, 0x7c, 0x8f, 0x7a,
	0xa8, 0x18, 0x91, 0x6b, 0x82, 0x5c, 0x1b, 0xed, 0x68, 0xeb, 0xb6, 0xe7, 0xd9, 0x3d, 0xac, 0x73,
	0x9e, 0xee, 0xf0, 0x50, 0x37, 0xdc, 0x63, 0x21, 0xa0, 0xad, 0x9b, 0x1e, 0xe9, 0x7b, 0xa4, 0xc3,
	0x57, 0xba, 0x58, 0x48, 0x52, 0xd1, 0xf6, 0x6c, 0x4f, 0xec, 0xb3, 0xff, 0xe4, 0x6e, 0x49, 0xf0,
	0xe8, 0x5d, 0x83, 0x60, 0x7d, 0xb4, 0xd3, 0xc5, 0xd4, 0xd8, 0xd1, 0x4d, 0xcf, 0x71, 0xa7, 0xe8,
	0xee, 0x51, 0x48, 0x67, 0x0b, 0x49, 0x5f, 0x93, 0xf4, 0x3e, 0xb1, 0x99, 0xe7, 0x7d, 0x62, 0x4b,
	0xc2, 0x4d, 0xa7, 0x6b, 0xea, 0xc6, 0x60, 0xd0, 0x73, 0x4c, 0x83, 0x3a, 0x9e, 0x4b, 0x74, 0xea,
	0x1b, 0x2e, 0x39, 0x8c, 0x47, 0xa8, 0x6d, 0x25, 0x02, 0x20, 0x63, 0x15, 0x2c, 0xb7, 0x12, 0x59,
	0x0c, 0xd3, 0xc4, 0x84, 0xd8, 0xbe, 0xe1, 0x52, 0xc1, 0x57, 0xf9, 0x83, 0x02, 0x6a, 0x8b, 0xd8,
	0x0f, 0xd8, 0x56, 0xa3, 0xd7, 0xf3, 0x9e, 0x30, 0x89, 0x36, 0x7e, 0x3c, 0xc4, 0x84, 0xa2, 0x22,
	0xcc, 0x5b, 0xd8, 0xf5, 0xfa, 0xaa, 0x52, 0x56, 0xaa, 0xf9, 0xb6, 0x58, 0xa0, 0x1b, 0x70, 0xd9,
	0xb0, 0xfa, 0x8e, 0xeb, 0x10, 0xea, 0x1b, 0xd4, 0xf3, 0xd5, 0x19, 0x4e, 0x8d, 0x6f, 0x22, 0x15,
	0x2e, 0x72, 0x3b, 0x18, 0xab, 0xb3, 0x9c, 0x1e, 0x2c, 0xd1, 0x37, 0x21, 0x6f, 0x04, 0x96, 0xd4,
	0xb9, 0xb2, 0x52, 0x2d, 0xd4, 0x8b, 0x35, 0x91, 0x9d, 0x5a, 0x90, 0x9d, 0x5a, 0xc3, 0x3d, 0x6e,
	0x2e, 0xfd, 0xe9, 0xc3, 0xed, 0xcb, 0xf7, 0x31, 0x0e, 0xfd, 0x7a, 0xd8, 0x8e, 0x24, 0x2b, 0xd7,
	0x60, 0x3d, 0xc1, 0x71, 0x32, 0xf0, 0x5c, 0x82, 0x2b, 0x1f, 0xcc, 0xc3, 0x72, 0x8b, 0xd8, 0x0d,
	0xcb, 0x6a, 0xf1, 0xe0, 0x83, 0x88, 0xba, 0x90, 0x33, 0xfa, 0xde, 0xd0, 0xa5, 0x3c, 0xa4, 0x42,
	0x7d, 0xbd, 0x26, 0xd3, 0xcd, 0x52, 0x59, 0x93, 0xa9, 0xaa, 0xed, 0x79, 0x8e, 0xdb, 0xd4, 0x3f,
	0xfa, 0x64, 0xf3, 0xc2, 0xdf, 0x3e, 0xd9, 0xbc, 0x6d, 0x3b, 0xf4, 0xd1, 0xb0, 0x5b, 0x33, 0xbd,
	0xbe, 0xac, 0x0d, 0xf9, 0x67, 0x9b, 0x58, 0x47, 0x3a, 0x3d, 0x1e, 0x60, 0xc2, 0x05, 0xda, 0x52,
	0x33, 0x8b, 0xbc, 0x6f, 0xb8, 0x86, 0x8d, 0xfd, 0x20, 0x72, 0xb9, 0x44, 0x5b, 0x70, 0xe9, 0xd0,
	0xf7, 0xfa, 0x1d, 0xc3, 0xb2, 0x7c, 0x4c, 0x08, 0x0f, 0x3e, 0xdf, 0x2e, 0xb0, 0xbd, 0x86, 0xd8,
	0x42, 0xbb, 0x90, 0x23, 0xd4, 0xa0, 0x43, 0xa2, 0xce, 0x97, 0x95, 0xea, 0x62, 0xbd, 0x52, 0x4b,
	0xaa, 0xe6, 0x9a, 0x88, 0xea, 0x80, 0x73, 0xb6, 0xa5, 0x04, 0x6a, 0x40, 0x41, 0x70, 0x74, 0x98,
	0x57, 0x6a, 0x8e, 0x2b, 0x28, 0x67, 0x29, 0x78, 0xe7, 0x78, 0x80, 0xdb, 0xd0, 0x0f, 0xff, 0x47,
	0xdf, 0x82, 0x82, 0xa8, 0x91, 0x4e, 0xcf, 0x21, 0x54, 0xbd, 0x58, 0x9e, 0xad, 0x16, 0xea, 0x5b,
	0xc9, 0x2a, 0x1a, 0x9c, 0x91, 0x27, 0xa0, 0x39, 0xc7, 0xc0, 0x6a, 0x83, 0x90, 0xfd, 0x8e, 0x43,
	0x28, 0x8b, 0x95, 0x0c, 0x07, 0x83, 0xde, 0x71, 0xe7, 0xd0, 0x79, 0x8a, 0x2d, 0x75, 0xa1, 0xac,
	0x54, 0x17, 0xda, 0x05, 0xb1, 0x77, 0x9f, 0x6d, 0xa1, 0x7b, 0xa0, 0xf2, 0x74, 0x76, 0x6c, 0x6f,
	0x84, 0x7d, 0xae, 0xbe, 0x63, 0x7a, 0x2e, 0xf5, 0xbd, 0x9e, 0x9a, 0xe7, 0xec, 0xab, 0x9c, 0xfe,
	0x20, 0x24, 0xef, 0x09, 0x2a, 0xaa, 0xc3, 0x8a, 0x90, 0x3c, 0xf4, 0x7c, 0x13, 0x5b, 0x9d, 0xe0,
	0x94, 0xa8, 0xc0, 0xc5, 0x96, 0x39, 0xf1, 0x3e, 0xa7, 0xbd, 0x23, 0x49, 0x48, 0x87, 0x65, 0x1f,
	0x3f, 0x1e, 0x3a, 0x3e, 0xb6, 0x3a, 0x06, 0xa5, 0xbe, 0xd3, 0x1d, 0x52, 0x4c, 0xd4, 0x42, 0x79,
	0xb6, 0x9a, 0x6f, 0xa3, 0x80, 0xd4, 0x08, 0x29, 0x68, 0x13, 0xf2, 0x43, 0x62, 0x75, 0x4c, 0xec,
	0x52, 0xa2, 0x5e, 0x2a, 0x2b, 0xd5, 0xb9, 0xe6, 0x8c, 0xaa, 0xb4, 0x17, 0x86, 0xc4, 0xda, 0x63,
	0x7b, 0x68, 0x15, 0x72, 0x23, 0xaf, 0x37, 0xec, 0x63, 0xf5, 0x32, 0xa3, 0xb6, 0xe5, 0x0a, 0x5d,
	0x13, 0x82, 0x7d, 0xa7, 0xd7, 0x23, 0xea, 0x22, 0x27, 0x31, 0xa1, 0x16, 0x5b, 0xef, 0x2e, 0xfd,
	0xe4, 0x5f, 0xbf, 0x7b, 0x3d, 0x56, 0x06, 0x95, 0x55, 0x28, 0xc6, 0x6b, 0x55, 0x16, 0xf1, 0x6f,
	0x94, 0xa0, 0x88, 0x05, 0xd4, 0xe7, 0x71, 0x2c, 0xbf, 0x01, 0x39, 0x91, 0x24, 0x75, 0xf6, 0x6c,
	0xb9, 0x95, 0x62, 0xbb, 0x88, 0xf9, 0x1f, 0x57, 0x1a, 0x05, 0x10, 0xf8, 0x29, 0x03, 0xf8, 0x85,
	0x02, 0xab, 0x2d, 0x62, 0xef, 0xe3, 0x1e, 0xa6, 0xf8, 0xfc, 0x62, 0xb8, 0x0d, 0x57, 0x7c, 0xdc,
	0xf7, 0x46, 0x2c, 0x91, 0xf2, 0x24, 0x89, 0x83, 0xb6, 0x28, 0xb7, 0xe5, 0x61, 0x4a, 0xf4, 0x75,
	0x1d, 0xd6, 0xa6, 0x5c, 0x92, 0xee, 0x5a, 0x80, 0x5a, 0xc4, 0xbe, 0xef, 0xb8, 0x46, 0xcf, 0x79,
	0xf7, 0x3c, 0x3e, 0x82, 0x89, 0x0e, 0xac, 0xf0, 0xa4, 0x46, 0x56, 0x62, 0xc6, 0x1b, 0x26, 0x75,
	0x46, 0x06, 0xfd, 0x8c, 0x8d, 0x47, 0x56, 0xa4, 0x71, 0x13, 0xae, 0xb6, 0x88, 0xbd, 0xc7, 0x8a,
	0xa0, 0x77, 0x1e, 0xa6, 0x97, 0x99, 0xe9, 0x45, 0x1f, 0x3f, 0x31, 0xfc, 0x30, 0x47, 0x95, 0x65,
	0x58, 0x1a, 0x33, 0x22, 0x2d, 0x77, 0xb9, 0x65, 0x91, 0x8e, 0xcf, 0x2a, 0x68, 0x61, 0x38, 0xb0,
	0x21, 0x0d, 0xff, 0x56, 0x81, 0xc5, 0x16, 0xb1, 0x5b, 0x8e, 0x4b, 0x3f, 0xcf, 0xcb, 0xe1, 0xc5,
	0xa3, 0x58, 0x82, 0x2b, 0xa1, 0xbf, 0xf1, 0x18, 0x9a, 0x43, 0xdf, 0x7d, 0x95, 0x62, 0x10, 0xfe,
	0xca, 0x18, 0x3e, 0x55, 0x78, 0xe1, 0xff, 0xc0, 0xa1, 0x8f, 0x2c, 0xdf, 0x78, 0x72, 0x1e, 0xdf,
	0x87, 0x0d, 0x00, 0xea, 0x4d, 0x7c, 0x1a, 0xf2, 0xd4, 0x0b, 0xae, 0x58, 0x33, 0x84, 0x68, 0x8e,
	0x7f, 0x02, 0x33, 0x20, 0xba, 0xc3, 0x20, 0xfa, 0xe0, 0xef, 0x9b, 0xd5, 0x53, 0x42, 0x44, 0x02,
	0x8c, 0x32, 0x0e, 0x5f, 0x14, 0xa9, 0x44, 0xe0, 0x3f, 0x02, 0x81, 0xe0, 0xa2, 0xfa, 0x42, 0x33,
	0x39, 0x9b, 0x84, 0xe7, 0x29, 0xda, 0x96, 0x38, 0xe4, 0xf3, 0x13, 0x90, 0x67, 0xa0, 0x11, 0x45,
	0x2d, 0xd1, 0xf8, 0xa7, 0x02, 0x2b, 0x2d, 0x62, 0x3f, 0xec, 0x9a, 0x93, 0x80, 0xbc, 0xaf, 0xc0,
	0x42, 0x78, 0xd1, 0x0b, 0x4c, 0x5e, 0xab, 0x39, 0x5d, 0xb3, 0x36, 0xde, 0x30, 0xd7, 0x02, 0x0e,
	0xde, 0xe4, 0x44, 0xfa, 0x9b, 0xdf, 0x96, 0x18, 0xed, 0x4d, 0x63, 0xe4, 0x74, 0xcd, 0x6d, 0xdb,
	0xd3, 0x47, 0xf7, 0xf4, 0xbe, 0x67, 0x0d, 0x7b, 0x98, 0xb0, 0x16, 0x7c, 0xac, 0xf5, 0x16, 0xc0,
	0x8d, 0x3b, 0x1b, 0xfa, 0xf1, 0x12, 0x67, 0x41, 0xe5, 0x77, 0x63, 0x2c, 0x4e, 0x09, 0xc1, 0x9f,
	0x15, 0xd0, 0x5a, 0xc4, 0x3e, 0xc0, 0x74, 0x9f, 0x55, 0x7d, 0x0b, 0x53, 0xc3, 0x32, 0xa8, 0x11,
	0xe0, 0x30, 0x84, 0x85, 0xbe, 0xdc, 0x92, 0x30, 0x6c, 0x44, 0xa5, 0xe1, 0x1e, 0x85, 0xa5, 0x11,
	0xc8, 0x35, 0x77, 0x65, 0xe8, 0xf5, 0xcc, 0xf2, 0x78, 0x2a, 0xc6, 0x15, 0x19, 0x6c, 0x60, 0x33,
	0x34, 0xf5, 0x12, 0x91, 0x6e, 0xc0, 0xb5, 0xc4, 0x70, 0x64, 0xb8, 0xff, 0x9b, 0x83, 0xeb, 0xa2,
	0x7d, 0x08, 0x2e, 0xc5, 0xe0, 0x7e, 0x7a, 0xc5, 0x7a, 0xf7, 0x89, 0xfe, 0x7b, 0xfe, 0xe5, 0xfb,
	0xef, 0xdc, 0xf9, 0xf5, 0xdf, 0x17, 0xcf, 0xd6, 0x7f, 0x2f, 0xbc, 0x58, 0xff, 0x9d, 0x3f, 0x73,
	0xff, 0x0d, 0xa7, 0xeb, 0xbf, 0x0b, 0x99, 0xfd, 0xf7, 0xa5, 0xf4, 0xfe, 0xfb, 0xf2, 0xc9, 0xfd,
	0xf7, 0x2d, 0xb8, 0x91, 0x5d, 0x7f, 0xb2, 0x50, 0xff, 0xab, 0x40, 0x99, 0x15, 0x32, 0x87, 0xf0,
	0xa1, 0x6b, 0xfa, 0xd8, 0x20, 0xf8, 0x6d, 0xdf, 0x1b, 0x78, 0xc4, 0xe8, 0x7d, 0x9e, 0x55, 0x7a,
	0x13, 0x16, 0xa9, 0xe1, 0xdb, 0x98, 0x86, 0xd5, 0x28, 0xcf, 0xa2, 0xd8, 0x0d, 0xea, 0xf1, 0x2e,
	0xe4, 0x8d, 0x21, 0x7d, 0xe4, 0xf9, 0x0e, 0x3d, 0x16, 0xe5, 0xdc, 0x54, 0xff, 0xf2, 0xe1, 0x76,
	0x51, 0x3a, 0x24, 0xd9, 0x0e, 0xa8, 0xef, 0xb8, 0x76, 0x3b, 0x62, 0xdd, 0x45, 0x9f, 0xfe, 0x7a,
	0x53, 0x61, 0x30, 0x45, 0x7b, 0x95, 0xeb, 0xb0, 0x95, 0x11, 0xba, 0x04, 0xe8, 0x97, 0x33, 0x50,
	0x69, 0x11, 0xfb, 0x7b, 0x03, 0x4b, 0xb6, 0xb0, 0xf1, 0x8c, 0x66, 0xdf, 0xed, 0x5f, 0x07, 0x4d,
	0xb4, 0xef, 0x9d, 0xa4, 0x32, 0x99, 0xe1, 0x65, 0xa2, 0x0a, 0x8e, 0x69, 0xd5, 0xe8, 0x2e, 0xac,
	0x19, 0x96, 0x95, 0x28, 0x3a, 0xcb, 0x45, 0x57, 0x0c, 0xcb, 0x4a, 0x90, 0x7b, 0x00, 0x28, 0x28,
	0xde, 0x4e, 0x04, 0xd6, 0xdc, 0x09, 0x60, 0x2d, 0x05, 0x32, 0x8d, 0x10, 0xb4, 0x6b, 0x01, 0x68,
	0x09, 0xfa, 0x2a, 0x37, 0xf9, 0x17, 0x2e, 0x1d, 0x17, 0x89, 0xdf, 0xef, 0x15, 0x28, 0x85, 0x7c,
	0xf1, 0xe3, 0x93, 0x8d, 0x5d, 0xea, 0x79, 0x9c, 0x49, 0x3f, 0x8f, 0xe7, 0x59, 0x1d, 0x5b, 0xb0,
	0x99, 0xea, 0xb7, 0x8c, 0xed, 0x3d, 0xf1, 0xd0, 0x74, 0x80, 0x69, 0xc3, 0x34, 0x59, 0x15, 0xef,
	0x8f, 0x5d, 0x69, 0xc9, 0x51, 0x15, 0x61, 0x7e, 0x64, 0xf4, 0x86, 0x58, 0x56, 0xb7, 0x58, 0xa0,
	0x3b, 0x90, 0x23, 0x8e, 0xed, 0x06, 0x5f, 0xe8, 0x0c, 0xa7, 0x25, 0xdf, 0xee, 0x95, 0xc0, 0x63,
	0xb9, 0x21, 0x9f, 0x8e, 0x26, 0x5d, 0x91, 0x8e, 0xfe, 0x5b, 0x81, 0x2f, 0x85, 0xc1, 0x1c, 0x60,
	0xd7, 0xda, 0xc7, 0xee, 0x31, 0xfb, 0xa4, 0x66, 0x3b, 0x7b, 0x17, 0xd6, 0x64, 0xf9, 0x5a, 0xd8,
	0x75, 0xa2, 0xd1, 0x34, 0xac, 0xdd, 0x15, 0x41, 0xde, 0xe7, 0xd4, 0x46, 0x40, 0x44, 0x77, 0xa0,
	0xc8, 0x0a, 0x77, 0x4a, 0x48, 0x54, 0x2d, 0x32, 0x2c, 0x6b, 0x52, 0x22, 0x96, 0xb8, 0xb9, 0x97,
	0x4b, 0xdc, 0x26, 0x6c, 0xa4, 0xc4, 0x2a, 0xd1, 0xf8, 0xa3, 0xc2, 0x2f, 0xef, 0x86, 0x65, 0x7d,
	0x17, 0xd3, 0x06, 0x21, 0x98, 0x7e, 0x9f, 0x65, 0xe1, 0x5c, 0xe6, 0xf8, 0x03, 0xb8, 0xea, 0xb2,
	0x6f, 0x18, 0xd3, 0xda, 0xe1, 0xc9, 0x0d, 0x5e, 0x25, 0xae, 0x27, 0xdf, 0x78, 0x31, 0x17, 0xe4,
	0x9d, 0xb7, 0xe8, 0xc6, 0xfc, 0x4a, 0x6c, 0x40, 0x4a, 0x3c, 0xa3, 0x09, 0x31, 0x88, 0x20, 0xeb,
	0xbf, 0x42, 0x30, 0xdb, 0x22, 0x36, 0xea, 0xc0, 0x42, 0x70, 0x05, 0xa0, 0x6a, 0xca, 0xbd, 0x3d,
	0xf5, 0x40, 0xa0, 0xbd, 0x76, 0x0a, 0x4e, 0x61, 0x88, 0x19, 0x08, 0xee, 0x96, 0x0c, 0x03, 0x13,
	0x8f, 0x00, 0x19, 0x06, 0x26, 0x07, 0x79, 0xf4, 0x43, 0xc8, 0x89, 0x01, 0x1b, 0xdd, 0x4a, 0x15,
	0x8a, 0x8d, 0xf9, 0xda, 0xed, 0x13, 0xf9, 0x22, 0xd5, 0x62, 0x84, 0xce, 0x50, 0x1d, 0x9b, 0xe3,
	0x33, 0x54, 0xc7, 0x67, 0x71, 0x74, 0x00, 0x73, 0x6c, 0xae, 0x45, 0x37, 0x52, 0x05, 0xc6, 0xc6,
	0x74, 0xed, 0xe6, 0x09, 0x5c, 0x91, 0x52, 0x36, 0x68, 0x66, 0x28, 0x1d, 0x9b, 0x9b, 0x33, 0x94,
	0x8e, 0x4f, 0xab, 0xa8, 0x0b, 0xf9, 0xf0, 0x99, 0x0b, 0x65, 0xe4, 0x65, 0xe2, 0xc9, 0x4e, 0x7b,
	0xfd, 0x34, 0xac, 0xd2, 0xc6, 0x11, 0x5c, 0x1a, 0x7f, 0x9e, 0x42, 0x6f, 0x9c, 0x00, 0x63, 0xdc,
	0xd2, 0xf6, 0x29, 0xb9, 0xa3, 0x8a, 0x0c, 0x06, 0xd2, 0x8c, 0x8a, 0x9c, 0x98, 0xce, 0x33, 0x2a,
	0x72, 0x72, 0xba, 0x95, 0x88, 0x89, 0x4e, 0x2a, 0x1b, 0xb1, 0x58, 0xb7, 0x9f, 0x8d, 0x58, 0xbc,
	0x31, 0x63, 0x41, 0x84, 0xd7, 0x5a, 0x7a, 0x10, 0x13, 0x57, 0x69, 0x46, 0x10, 0x93, 0x97, 0x17,
	0x7a, 0x04, 0x85, 0xb1, 0x41, 0x0d, 0x7d, 0x39, 0x55, 0x72, 0x7a, 0x6c, 0xd5, 0xde, 0x38, 0x1d,
	0xb3, 0xb4, 0xf4, 0x04, 0xae, 0x4e, 0x0e, 0x4a, 0xe8, 0x4e, 0xaa, 0x86, 0x94, 0x11, 0x51, 0xdb,
	0x39, 0x83, 0x84, 0x34, 0xfc, 0x18, 0x16, 0xe3, 0xbf, 0xa5, 0xa0, 0x5a, 0xaa, 0x92, 0xc4, 0x5f,
	0x8b, 0x34, 0xfd, 0xd4, 0xfc, 0xd2, 0xe4, 0xfb, 0x0a, 0xac, 0xa7, 0x76, 0xdd, 0xe8, 0xad, 0xac,
	0x02, 0xc8, 0x9c, 0x14, 0xb5, 0xdd, 0x17, 0x11, 0x95, 0x4e, 0xbd, 0xa7, 0xc0, 0x6a, 0x72, 0x9b,
	0x8b, 0xee, 0xa6, 0xa3, 0x9a, 0x35, 0x12, 0x68, 0x5f, 0x3b, 0xb3, 0x9c, 0xf4, 0xe5, 0x67, 0x0a,
	0xa8, 0x69, 0x4d, 0x23, 0xba, 0x97, 0xaa, 0xf5, 0x84, 0xfe, 0x5b, 0x7b, 0xeb, 0x05, 0x24, 0xa5,
	0x47, 0x3f, 0x55, 0xa0, 0x98, 0xd4, 0xe6, 0xa1, 0xaf, 0x9c, 0xa0, 0x33, 0xb1, 0x9b, 0xd5, 0xbe,
	0x7a, 0x46, 0xa9, 0xa8, 0x56, 0xe3, 0xcd, 0x5b, 0x46, 0xad, 0x26, 0x36, 0x9c, 0x19, 0xb5, 0x9a,
	0xdc, 0x15, 0xa2, 0x1f, 0x03, 0x9a, 0xee, 0x92, 0x50, 0xfd, 0x04, 0xff, 0x13, 0xda, 0x47, 0xed,
	0xcd, 0x33, 0xc9, 0x48, 0xf3, 0xef, 0xc2, 0xd2, 0x54, 0xfb, 0x82, 0x76, 0xb2, 0xca, 0x3c, 0xb1,
	0x5d, 0xd3, 0xea, 0x67, 0x11, 0x11, 0xb6, 0x9b, 0xf6, 0x47, 0xcf, 0x4a, 0xca, 0xc7, 0xcf, 0x4a,
	0xca, 0x3f, 0x9e, 0x95, 0x94, 0x9f, 0x3f, 0x2f, 0x5d, 0xf8, 0xf8, 0x79, 0xe9, 0xc2, 0x5f, 0x9f,
	0x97, 0x2e, 0xc0, 0x9a, 0xe3, 0x25, 0xea, 0x7b, 0x5b, 0xf9, 0xd1, 0xf8, 0x5b, 0x53, 0xc4, 0xb2,
	0xed, 0x78, 0x63, 0x2b, 0xfd, 0x69, 0xf0, 0xd3, 0x34, 0x9f, 0x71, 0xbb, 0x39, 0xfe, 0xeb, 0xef,
	0x9b, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x13, 0xd1, 0x2a, 0xe0, 0x1f, 0x00, 0x00,
}

func (this *MsgSupplyIncreaseProposalRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSupplyIncreaseProposalRequest)
	if !ok {
		that2, ok := that.(MsgSupplyIncreaseProposalRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if this.TargetAddress != that1.TargetAddress {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	return true
}
func (this *MsgUpdateRequiredAttributesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpdateRequiredAttributesRequest)
	if !ok {
		that2, ok := that.(MsgUpdateRequiredAttributesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if len(this.RemoveRequiredAttributes) != len(that1.RemoveRequiredAttributes) {
		return false
	}
	for i := range this.RemoveRequiredAttributes {
		if this.RemoveRequiredAttributes[i] != that1.RemoveRequiredAttributes[i] {
			return false
		}
	}
	if len(this.AddRequiredAttributes) != len(that1.AddRequiredAttributes) {
		return false
	}
	for i := range this.AddRequiredAttributes {
		if this.AddRequiredAttributes[i] != that1.AddRequiredAttributes[i] {
			return false
		}
	}
	if this.TransferAuthority != that1.TransferAuthority {
		return false
	}
	return true
}
func (this *MsgUpdateForcedTransferRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpdateForcedTransferRequest)
	if !ok {
		that2, ok := that.(MsgUpdateForcedTransferRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.AllowForcedTransfer != that1.AllowForcedTransfer {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	return true
}
func (this *MsgSetAccountDataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSetAccountDataRequest)
	if !ok {
		that2, ok := that.(MsgSetAccountDataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Signer != that1.Signer {
		return false
	}
	return true
}
func (this *MsgUpdateSendDenyListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpdateSendDenyListRequest)
	if !ok {
		that2, ok := that.(MsgUpdateSendDenyListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if len(this.RemoveDeniedAddresses) != len(that1.RemoveDeniedAddresses) {
		return false
	}
	for i := range this.RemoveDeniedAddresses {
		if this.RemoveDeniedAddresses[i] != that1.RemoveDeniedAddresses[i] {
			return false
		}
	}
	if len(this.AddDeniedAddresses) != len(that1.AddDeniedAddresses) {
		return false
	}
	for i := range this.AddDeniedAddresses {
		if this.AddDeniedAddresses[i] != that1.AddDeniedAddresses[i] {
			return false
		}
	}
	if this.Authority != that1.Authority {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Finalize
	Finalize(ctx context.Context, in *MsgFinalizeRequest, opts ...grpc.CallOption) (*MsgFinalizeResponse, error)
	// Activate
	Activate(ctx context.Context, in *MsgActivateRequest, opts ...grpc.CallOption) (*MsgActivateResponse, error)
	// Cancel
	Cancel(ctx context.Context, in *MsgCancelRequest, opts ...grpc.CallOption) (*MsgCancelResponse, error)
	// Delete
	Delete(ctx context.Context, in *MsgDeleteRequest, opts ...grpc.CallOption) (*MsgDeleteResponse, error)
	// Mint
	Mint(ctx context.Context, in *MsgMintRequest, opts ...grpc.CallOption) (*MsgMintResponse, error)
	// Burn
	Burn(ctx context.Context, in *MsgBurnRequest, opts ...grpc.CallOption) (*MsgBurnResponse, error)
	// AddAccess
	AddAccess(ctx context.Context, in *MsgAddAccessRequest, opts ...grpc.CallOption) (*MsgAddAccessResponse, error)
	// DeleteAccess
	DeleteAccess(ctx context.Context, in *MsgDeleteAccessRequest, opts ...grpc.CallOption) (*MsgDeleteAccessResponse, error)
	// Withdraw
	Withdraw(ctx context.Context, in *MsgWithdrawRequest, opts ...grpc.CallOption) (*MsgWithdrawResponse, error)
	// AddMarker
	AddMarker(ctx context.Context, in *MsgAddMarkerRequest, opts ...grpc.CallOption) (*MsgAddMarkerResponse, error)
	// Transfer marker denominated coin between accounts
	Transfer(ctx context.Context, in *MsgTransferRequest, opts ...grpc.CallOption) (*MsgTransferResponse, error)
	// Transfer over ibc any marker(including restricted markers) between ibc accounts.
	// The relayer is still needed to accomplish ibc middleware relays.
	IbcTransfer(ctx context.Context, in *MsgIbcTransferRequest, opts ...grpc.CallOption) (*MsgIbcTransferResponse, error)
	// Allows Denom Metadata (see bank module) to be set for the Marker's Denom
	SetDenomMetadata(ctx context.Context, in *MsgSetDenomMetadataRequest, opts ...grpc.CallOption) (*MsgSetDenomMetadataResponse, error)
	// GrantAllowance grants fee allowance to the grantee on the granter's
	// account with the provided expiration time.
	GrantAllowance(ctx context.Context, in *MsgGrantAllowanceRequest, opts ...grpc.CallOption) (*MsgGrantAllowanceResponse, error)
	// AddFinalizeActivateMarker
	AddFinalizeActivateMarker(ctx context.Context, in *MsgAddFinalizeActivateMarkerRequest, opts ...grpc.CallOption) (*MsgAddFinalizeActivateMarkerResponse, error)
	// SupplyIncreaseProposal can only be called via gov proposal
	SupplyIncreaseProposal(ctx context.Context, in *MsgSupplyIncreaseProposalRequest, opts ...grpc.CallOption) (*MsgSupplyIncreaseProposalResponse, error)
	// UpdateRequiredAttributes will only succeed if signer has transfer authority
	UpdateRequiredAttributes(ctx context.Context, in *MsgUpdateRequiredAttributesRequest, opts ...grpc.CallOption) (*MsgUpdateRequiredAttributesResponse, error)
	// UpdateForcedTransfer updates the allow_forced_transfer field of a marker via governance proposal.
	UpdateForcedTransfer(ctx context.Context, in *MsgUpdateForcedTransferRequest, opts ...grpc.CallOption) (*MsgUpdateForcedTransferResponse, error)
	// SetAccountData sets the accountdata for a denom. Signer must have deposit authority.
	SetAccountData(ctx context.Context, in *MsgSetAccountDataRequest, opts ...grpc.CallOption) (*MsgSetAccountDataResponse, error)
	// UpdateSendDenyList will only succeed if signer has admin authority
	UpdateSendDenyList(ctx context.Context, in *MsgUpdateSendDenyListRequest, opts ...grpc.CallOption) (*MsgUpdateSendDenyListResponse, error)
	// AddNetAssetValues set the net asset value for a marker
	AddNetAssetValues(ctx context.Context, in *MsgAddNetAssetValuesRequest, opts ...grpc.CallOption) (*MsgAddNetAssetValuesResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Finalize(ctx context.Context, in *MsgFinalizeRequest, opts ...grpc.CallOption) (*MsgFinalizeResponse, error) {
	out := new(MsgFinalizeResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/Finalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Activate(ctx context.Context, in *MsgActivateRequest, opts ...grpc.CallOption) (*MsgActivateResponse, error) {
	out := new(MsgActivateResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Cancel(ctx context.Context, in *MsgCancelRequest, opts ...grpc.CallOption) (*MsgCancelResponse, error) {
	out := new(MsgCancelResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Delete(ctx context.Context, in *MsgDeleteRequest, opts ...grpc.CallOption) (*MsgDeleteResponse, error) {
	out := new(MsgDeleteResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Mint(ctx context.Context, in *MsgMintRequest, opts ...grpc.CallOption) (*MsgMintResponse, error) {
	out := new(MsgMintResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/Mint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Burn(ctx context.Context, in *MsgBurnRequest, opts ...grpc.CallOption) (*MsgBurnResponse, error) {
	out := new(MsgBurnResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/Burn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAccess(ctx context.Context, in *MsgAddAccessRequest, opts ...grpc.CallOption) (*MsgAddAccessResponse, error) {
	out := new(MsgAddAccessResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/AddAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteAccess(ctx context.Context, in *MsgDeleteAccessRequest, opts ...grpc.CallOption) (*MsgDeleteAccessResponse, error) {
	out := new(MsgDeleteAccessResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/DeleteAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Withdraw(ctx context.Context, in *MsgWithdrawRequest, opts ...grpc.CallOption) (*MsgWithdrawResponse, error) {
	out := new(MsgWithdrawResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddMarker(ctx context.Context, in *MsgAddMarkerRequest, opts ...grpc.CallOption) (*MsgAddMarkerResponse, error) {
	out := new(MsgAddMarkerResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/AddMarker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Transfer(ctx context.Context, in *MsgTransferRequest, opts ...grpc.CallOption) (*MsgTransferResponse, error) {
	out := new(MsgTransferResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IbcTransfer(ctx context.Context, in *MsgIbcTransferRequest, opts ...grpc.CallOption) (*MsgIbcTransferResponse, error) {
	out := new(MsgIbcTransferResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/IbcTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetDenomMetadata(ctx context.Context, in *MsgSetDenomMetadataRequest, opts ...grpc.CallOption) (*MsgSetDenomMetadataResponse, error) {
	out := new(MsgSetDenomMetadataResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/SetDenomMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GrantAllowance(ctx context.Context, in *MsgGrantAllowanceRequest, opts ...grpc.CallOption) (*MsgGrantAllowanceResponse, error) {
	out := new(MsgGrantAllowanceResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/GrantAllowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddFinalizeActivateMarker(ctx context.Context, in *MsgAddFinalizeActivateMarkerRequest, opts ...grpc.CallOption) (*MsgAddFinalizeActivateMarkerResponse, error) {
	out := new(MsgAddFinalizeActivateMarkerResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/AddFinalizeActivateMarker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SupplyIncreaseProposal(ctx context.Context, in *MsgSupplyIncreaseProposalRequest, opts ...grpc.CallOption) (*MsgSupplyIncreaseProposalResponse, error) {
	out := new(MsgSupplyIncreaseProposalResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/SupplyIncreaseProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRequiredAttributes(ctx context.Context, in *MsgUpdateRequiredAttributesRequest, opts ...grpc.CallOption) (*MsgUpdateRequiredAttributesResponse, error) {
	out := new(MsgUpdateRequiredAttributesResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/UpdateRequiredAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateForcedTransfer(ctx context.Context, in *MsgUpdateForcedTransferRequest, opts ...grpc.CallOption) (*MsgUpdateForcedTransferResponse, error) {
	out := new(MsgUpdateForcedTransferResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/UpdateForcedTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetAccountData(ctx context.Context, in *MsgSetAccountDataRequest, opts ...grpc.CallOption) (*MsgSetAccountDataResponse, error) {
	out := new(MsgSetAccountDataResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/SetAccountData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSendDenyList(ctx context.Context, in *MsgUpdateSendDenyListRequest, opts ...grpc.CallOption) (*MsgUpdateSendDenyListResponse, error) {
	out := new(MsgUpdateSendDenyListResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/UpdateSendDenyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddNetAssetValues(ctx context.Context, in *MsgAddNetAssetValuesRequest, opts ...grpc.CallOption) (*MsgAddNetAssetValuesResponse, error) {
	out := new(MsgAddNetAssetValuesResponse)
	err := c.cc.Invoke(ctx, "/provenance.marker.v1.Msg/AddNetAssetValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Finalize
	Finalize(context.Context, *MsgFinalizeRequest) (*MsgFinalizeResponse, error)
	// Activate
	Activate(context.Context, *MsgActivateRequest) (*MsgActivateResponse, error)
	// Cancel
	Cancel(context.Context, *MsgCancelRequest) (*MsgCancelResponse, error)
	// Delete
	Delete(context.Context, *MsgDeleteRequest) (*MsgDeleteResponse, error)
	// Mint
	Mint(context.Context, *MsgMintRequest) (*MsgMintResponse, error)
	// Burn
	Burn(context.Context, *MsgBurnRequest) (*MsgBurnResponse, error)
	// AddAccess
	AddAccess(context.Context, *MsgAddAccessRequest) (*MsgAddAccessResponse, error)
	// DeleteAccess
	DeleteAccess(context.Context, *MsgDeleteAccessRequest) (*MsgDeleteAccessResponse, error)
	// Withdraw
	Withdraw(context.Context, *MsgWithdrawRequest) (*MsgWithdrawResponse, error)
	// AddMarker
	AddMarker(context.Context, *MsgAddMarkerRequest) (*MsgAddMarkerResponse, error)
	// Transfer marker denominated coin between accounts
	Transfer(context.Context, *MsgTransferRequest) (*MsgTransferResponse, error)
	// Transfer over ibc any marker(including restricted markers) between ibc accounts.
	// The relayer is still needed to accomplish ibc middleware relays.
	IbcTransfer(context.Context, *MsgIbcTransferRequest) (*MsgIbcTransferResponse, error)
	// Allows Denom Metadata (see bank module) to be set for the Marker's Denom
	SetDenomMetadata(context.Context, *MsgSetDenomMetadataRequest) (*MsgSetDenomMetadataResponse, error)
	// GrantAllowance grants fee allowance to the grantee on the granter's
	// account with the provided expiration time.
	GrantAllowance(context.Context, *MsgGrantAllowanceRequest) (*MsgGrantAllowanceResponse, error)
	// AddFinalizeActivateMarker
	AddFinalizeActivateMarker(context.Context, *MsgAddFinalizeActivateMarkerRequest) (*MsgAddFinalizeActivateMarkerResponse, error)
	// SupplyIncreaseProposal can only be called via gov proposal
	SupplyIncreaseProposal(context.Context, *MsgSupplyIncreaseProposalRequest) (*MsgSupplyIncreaseProposalResponse, error)
	// UpdateRequiredAttributes will only succeed if signer has transfer authority
	UpdateRequiredAttributes(context.Context, *MsgUpdateRequiredAttributesRequest) (*MsgUpdateRequiredAttributesResponse, error)
	// UpdateForcedTransfer updates the allow_forced_transfer field of a marker via governance proposal.
	UpdateForcedTransfer(context.Context, *MsgUpdateForcedTransferRequest) (*MsgUpdateForcedTransferResponse, error)
	// SetAccountData sets the accountdata for a denom. Signer must have deposit authority.
	SetAccountData(context.Context, *MsgSetAccountDataRequest) (*MsgSetAccountDataResponse, error)
	// UpdateSendDenyList will only succeed if signer has admin authority
	UpdateSendDenyList(context.Context, *MsgUpdateSendDenyListRequest) (*MsgUpdateSendDenyListResponse, error)
	// AddNetAssetValues set the net asset value for a marker
	AddNetAssetValues(context.Context, *MsgAddNetAssetValuesRequest) (*MsgAddNetAssetValuesResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Finalize(ctx context.Context, req *MsgFinalizeRequest) (*MsgFinalizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalize not implemented")
}
func (*UnimplementedMsgServer) Activate(ctx context.Context, req *MsgActivateRequest) (*MsgActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (*UnimplementedMsgServer) Cancel(ctx context.Context, req *MsgCancelRequest) (*MsgCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (*UnimplementedMsgServer) Delete(ctx context.Context, req *MsgDeleteRequest) (*MsgDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedMsgServer) Mint(ctx context.Context, req *MsgMintRequest) (*MsgMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mint not implemented")
}
func (*UnimplementedMsgServer) Burn(ctx context.Context, req *MsgBurnRequest) (*MsgBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Burn not implemented")
}
func (*UnimplementedMsgServer) AddAccess(ctx context.Context, req *MsgAddAccessRequest) (*MsgAddAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccess not implemented")
}
func (*UnimplementedMsgServer) DeleteAccess(ctx context.Context, req *MsgDeleteAccessRequest) (*MsgDeleteAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccess not implemented")
}
func (*UnimplementedMsgServer) Withdraw(ctx context.Context, req *MsgWithdrawRequest) (*MsgWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (*UnimplementedMsgServer) AddMarker(ctx context.Context, req *MsgAddMarkerRequest) (*MsgAddMarkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMarker not implemented")
}
func (*UnimplementedMsgServer) Transfer(ctx context.Context, req *MsgTransferRequest) (*MsgTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedMsgServer) IbcTransfer(ctx context.Context, req *MsgIbcTransferRequest) (*MsgIbcTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcTransfer not implemented")
}
func (*UnimplementedMsgServer) SetDenomMetadata(ctx context.Context, req *MsgSetDenomMetadataRequest) (*MsgSetDenomMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDenomMetadata not implemented")
}
func (*UnimplementedMsgServer) GrantAllowance(ctx context.Context, req *MsgGrantAllowanceRequest) (*MsgGrantAllowanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAllowance not implemented")
}
func (*UnimplementedMsgServer) AddFinalizeActivateMarker(ctx context.Context, req *MsgAddFinalizeActivateMarkerRequest) (*MsgAddFinalizeActivateMarkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFinalizeActivateMarker not implemented")
}
func (*UnimplementedMsgServer) SupplyIncreaseProposal(ctx context.Context, req *MsgSupplyIncreaseProposalRequest) (*MsgSupplyIncreaseProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplyIncreaseProposal not implemented")
}
func (*UnimplementedMsgServer) UpdateRequiredAttributes(ctx context.Context, req *MsgUpdateRequiredAttributesRequest) (*MsgUpdateRequiredAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequiredAttributes not implemented")
}
func (*UnimplementedMsgServer) UpdateForcedTransfer(ctx context.Context, req *MsgUpdateForcedTransferRequest) (*MsgUpdateForcedTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateForcedTransfer not implemented")
}
func (*UnimplementedMsgServer) SetAccountData(ctx context.Context, req *MsgSetAccountDataRequest) (*MsgSetAccountDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountData not implemented")
}
func (*UnimplementedMsgServer) UpdateSendDenyList(ctx context.Context, req *MsgUpdateSendDenyListRequest) (*MsgUpdateSendDenyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSendDenyList not implemented")
}
func (*UnimplementedMsgServer) AddNetAssetValues(ctx context.Context, req *MsgAddNetAssetValuesRequest) (*MsgAddNetAssetValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetAssetValues not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Finalize(ctx, req.(*MsgFinalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgActivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Activate(ctx, req.(*MsgActivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Cancel(ctx, req.(*MsgCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Delete(ctx, req.(*MsgDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Mint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Mint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/Mint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Mint(ctx, req.(*MsgMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Burn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Burn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/Burn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Burn(ctx, req.(*MsgBurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/AddAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAccess(ctx, req.(*MsgAddAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/DeleteAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteAccess(ctx, req.(*MsgDeleteAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Withdraw(ctx, req.(*MsgWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddMarker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddMarkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddMarker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/AddMarker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddMarker(ctx, req.(*MsgAddMarkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Transfer(ctx, req.(*MsgTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IbcTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIbcTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IbcTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/IbcTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IbcTransfer(ctx, req.(*MsgIbcTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetDenomMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetDenomMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetDenomMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/SetDenomMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetDenomMetadata(ctx, req.(*MsgSetDenomMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GrantAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGrantAllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GrantAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/GrantAllowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GrantAllowance(ctx, req.(*MsgGrantAllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddFinalizeActivateMarker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddFinalizeActivateMarkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddFinalizeActivateMarker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/AddFinalizeActivateMarker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddFinalizeActivateMarker(ctx, req.(*MsgAddFinalizeActivateMarkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SupplyIncreaseProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSupplyIncreaseProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SupplyIncreaseProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/SupplyIncreaseProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SupplyIncreaseProposal(ctx, req.(*MsgSupplyIncreaseProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRequiredAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRequiredAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRequiredAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/UpdateRequiredAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRequiredAttributes(ctx, req.(*MsgUpdateRequiredAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateForcedTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateForcedTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateForcedTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/UpdateForcedTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateForcedTransfer(ctx, req.(*MsgUpdateForcedTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetAccountDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/SetAccountData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetAccountData(ctx, req.(*MsgSetAccountDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSendDenyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSendDenyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSendDenyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/UpdateSendDenyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSendDenyList(ctx, req.(*MsgUpdateSendDenyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddNetAssetValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddNetAssetValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddNetAssetValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.marker.v1.Msg/AddNetAssetValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddNetAssetValues(ctx, req.(*MsgAddNetAssetValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.marker.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Finalize",
			Handler:    _Msg_Finalize_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _Msg_Activate_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Msg_Cancel_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Msg_Delete_Handler,
		},
		{
			MethodName: "Mint",
			Handler:    _Msg_Mint_Handler,
		},
		{
			MethodName: "Burn",
			Handler:    _Msg_Burn_Handler,
		},
		{
			MethodName: "AddAccess",
			Handler:    _Msg_AddAccess_Handler,
		},
		{
			MethodName: "DeleteAccess",
			Handler:    _Msg_DeleteAccess_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Msg_Withdraw_Handler,
		},
		{
			MethodName: "AddMarker",
			Handler:    _Msg_AddMarker_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Msg_Transfer_Handler,
		},
		{
			MethodName: "IbcTransfer",
			Handler:    _Msg_IbcTransfer_Handler,
		},
		{
			MethodName: "SetDenomMetadata",
			Handler:    _Msg_SetDenomMetadata_Handler,
		},
		{
			MethodName: "GrantAllowance",
			Handler:    _Msg_GrantAllowance_Handler,
		},
		{
			MethodName: "AddFinalizeActivateMarker",
			Handler:    _Msg_AddFinalizeActivateMarker_Handler,
		},
		{
			MethodName: "SupplyIncreaseProposal",
			Handler:    _Msg_SupplyIncreaseProposal_Handler,
		},
		{
			MethodName: "UpdateRequiredAttributes",
			Handler:    _Msg_UpdateRequiredAttributes_Handler,
		},
		{
			MethodName: "UpdateForcedTransfer",
			Handler:    _Msg_UpdateForcedTransfer_Handler,
		},
		{
			MethodName: "SetAccountData",
			Handler:    _Msg_SetAccountData_Handler,
		},
		{
			MethodName: "UpdateSendDenyList",
			Handler:    _Msg_UpdateSendDenyList_Handler,
		},
		{
			MethodName: "AddNetAssetValues",
			Handler:    _Msg_AddNetAssetValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/marker/v1/tx.proto",
}

func (m *MsgGrantAllowanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGrantAllowanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGrantAllowanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Allowance != nil {
		{
			size, err := m.Allowance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Grantee) > 0 {
		i -= len(m.Grantee)
		copy(dAtA[i:], m.Grantee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Grantee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGrantAllowanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGrantAllowanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGrantAllowanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddMarkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMarkerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMarkerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UsdMills != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UsdMills))
		i--
		dAtA[i] = 0x70
	}
	if m.Volume != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Volume))
		i--
		dAtA[i] = 0x68
	}
	if m.UsdCents != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UsdCents))
		i--
		dAtA[i] = 0x60
	}
	if len(m.RequiredAttributes) > 0 {
		for iNdEx := len(m.RequiredAttributes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequiredAttributes[iNdEx])
			copy(dAtA[i:], m.RequiredAttributes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.RequiredAttributes[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.AllowForcedTransfer {
		i--
		if m.AllowForcedTransfer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.AllowGovernanceControl {
		i--
		if m.AllowGovernanceControl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.SupplyFixed {
		i--
		if m.SupplyFixed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.AccessList) > 0 {
		for iNdEx := len(m.AccessList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MarkerType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarkerType))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgAddMarkerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMarkerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMarkerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddAccessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAccessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAccessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Access) > 0 {
		for iNdEx := len(m.Access) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Access[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAccessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAccessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAccessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteAccessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteAccessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteAccessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemovedAddress) > 0 {
		i -= len(m.RemovedAddress)
		copy(dAtA[i:], m.RemovedAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RemovedAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteAccessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteAccessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteAccessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFinalizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinalizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgActivateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgActivateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgBurnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgIbcTransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIbcTransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIbcTransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Transfer.Size()
		i -= size
		if _, err := m.Transfer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgIbcTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIbcTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIbcTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetDenomMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetDenomMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetDenomMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Metadata.Size()
		i -= size
		if _, err := m.Metadata.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSetDenomMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetDenomMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetDenomMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddFinalizeActivateMarkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddFinalizeActivateMarkerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddFinalizeActivateMarkerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UsdMills != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UsdMills))
		i--
		dAtA[i] = 0x68
	}
	if m.Volume != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Volume))
		i--
		dAtA[i] = 0x60
	}
	if m.UsdCents != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UsdCents))
		i--
		dAtA[i] = 0x58
	}
	if len(m.RequiredAttributes) > 0 {
		for iNdEx := len(m.RequiredAttributes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequiredAttributes[iNdEx])
			copy(dAtA[i:], m.RequiredAttributes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.RequiredAttributes[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.AllowForcedTransfer {
		i--
		if m.AllowForcedTransfer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.AllowGovernanceControl {
		i--
		if m.AllowGovernanceControl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.SupplyFixed {
		i--
		if m.SupplyFixed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.AccessList) > 0 {
		for iNdEx := len(m.AccessList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.MarkerType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarkerType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgAddFinalizeActivateMarkerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddFinalizeActivateMarkerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddFinalizeActivateMarkerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSupplyIncreaseProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSupplyIncreaseProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSupplyIncreaseProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSupplyIncreaseProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSupplyIncreaseProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSupplyIncreaseProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredAttributesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredAttributesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredAttributesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransferAuthority) > 0 {
		i -= len(m.TransferAuthority)
		copy(dAtA[i:], m.TransferAuthority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransferAuthority)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddRequiredAttributes) > 0 {
		for iNdEx := len(m.AddRequiredAttributes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddRequiredAttributes[iNdEx])
			copy(dAtA[i:], m.AddRequiredAttributes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.AddRequiredAttributes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RemoveRequiredAttributes) > 0 {
		for iNdEx := len(m.RemoveRequiredAttributes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RemoveRequiredAttributes[iNdEx])
			copy(dAtA[i:], m.RemoveRequiredAttributes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.RemoveRequiredAttributes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredAttributesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredAttributesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredAttributesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateForcedTransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateForcedTransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateForcedTransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AllowForcedTransfer {
		i--
		if m.AllowForcedTransfer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateForcedTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateForcedTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateForcedTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetAccountDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetAccountDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetAccountDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetAccountDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetAccountDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetAccountDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSendDenyListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSendDenyListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSendDenyListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddDeniedAddresses) > 0 {
		for iNdEx := len(m.AddDeniedAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddDeniedAddresses[iNdEx])
			copy(dAtA[i:], m.AddDeniedAddresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.AddDeniedAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RemoveDeniedAddresses) > 0 {
		for iNdEx := len(m.RemoveDeniedAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RemoveDeniedAddresses[iNdEx])
			copy(dAtA[i:], m.RemoveDeniedAddresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.RemoveDeniedAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSendDenyListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSendDenyListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSendDenyListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddNetAssetValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddNetAssetValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddNetAssetValuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NetAssetValues) > 0 {
		for iNdEx := len(m.NetAssetValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetAssetValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Administrator) > 0 {
		i -= len(m.Administrator)
		copy(dAtA[i:], m.Administrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Administrator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddNetAssetValuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddNetAssetValuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddNetAssetValuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgGrantAllowanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Grantee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Allowance != nil {
		l = m.Allowance.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgGrantAllowanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddMarkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	if m.MarkerType != 0 {
		n += 1 + sovTx(uint64(m.MarkerType))
	}
	if len(m.AccessList) > 0 {
		for _, e := range m.AccessList {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.SupplyFixed {
		n += 2
	}
	if m.AllowGovernanceControl {
		n += 2
	}
	if m.AllowForcedTransfer {
		n += 2
	}
	if len(m.RequiredAttributes) > 0 {
		for _, s := range m.RequiredAttributes {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.UsdCents != 0 {
		n += 1 + sovTx(uint64(m.UsdCents))
	}
	if m.Volume != 0 {
		n += 1 + sovTx(uint64(m.Volume))
	}
	if m.UsdMills != 0 {
		n += 1 + sovTx(uint64(m.UsdMills))
	}
	return n
}

func (m *MsgAddMarkerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddAccessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Access) > 0 {
		for _, e := range m.Access {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddAccessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteAccessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RemovedAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteAccessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFinalizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFinalizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgActivateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgActivateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBurnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgIbcTransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Transfer.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIbcTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetDenomMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetDenomMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddFinalizeActivateMarkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarkerType != 0 {
		n += 1 + sovTx(uint64(m.MarkerType))
	}
	if len(m.AccessList) > 0 {
		for _, e := range m.AccessList {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.SupplyFixed {
		n += 2
	}
	if m.AllowGovernanceControl {
		n += 2
	}
	if m.AllowForcedTransfer {
		n += 2
	}
	if len(m.RequiredAttributes) > 0 {
		for _, s := range m.RequiredAttributes {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.UsdCents != 0 {
		n += 1 + sovTx(uint64(m.UsdCents))
	}
	if m.Volume != 0 {
		n += 1 + sovTx(uint64(m.Volume))
	}
	if m.UsdMills != 0 {
		n += 1 + sovTx(uint64(m.UsdMills))
	}
	return n
}

func (m *MsgAddFinalizeActivateMarkerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSupplyIncreaseProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSupplyIncreaseProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRequiredAttributesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.RemoveRequiredAttributes) > 0 {
		for _, s := range m.RemoveRequiredAttributes {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.AddRequiredAttributes) > 0 {
		for _, s := range m.AddRequiredAttributes {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.TransferAuthority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateRequiredAttributesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateForcedTransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AllowForcedTransfer {
		n += 2
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateForcedTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetAccountDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetAccountDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSendDenyListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.RemoveDeniedAddresses) > 0 {
		for _, s := range m.RemoveDeniedAddresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.AddDeniedAddresses) > 0 {
		for _, s := range m.AddDeniedAddresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSendDenyListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddNetAssetValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Administrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.NetAssetValues) > 0 {
		for _, e := range m.NetAssetValues {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddNetAssetValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgGrantAllowanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGrantAllowanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGrantAllowanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Allowance == nil {
				m.Allowance = &types.Any{}
			}
			if err := m.Allowance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGrantAllowanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGrantAllowanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGrantAllowanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMarkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMarkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMarkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MarkerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerType", wireType)
			}
			m.MarkerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarkerType |= MarkerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessList = append(m.AccessList, AccessGrant{})
			if err := m.AccessList[len(m.AccessList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyFixed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupplyFixed = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowGovernanceControl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowGovernanceControl = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowForcedTransfer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowForcedTransfer = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredAttributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredAttributes = append(m.RequiredAttributes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdCents", wireType)
			}
			m.UsdCents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsdCents |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			m.Volume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volume |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdMills", wireType)
			}
			m.UsdMills = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsdMills |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMarkerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMarkerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMarkerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAccessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAccessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAccessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Access", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Access = append(m.Access, AccessGrant{})
			if err := m.Access[len(m.Access)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAccessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAccessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAccessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteAccessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteAccessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteAccessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteAccessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteAccessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteAccessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgActivateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgActivateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types1.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIbcTransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIbcTransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIbcTransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Transfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIbcTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIbcTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIbcTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetDenomMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetDenomMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetDenomMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetDenomMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetDenomMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetDenomMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddFinalizeActivateMarkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddFinalizeActivateMarkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddFinalizeActivateMarkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerType", wireType)
			}
			m.MarkerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarkerType |= MarkerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessList = append(m.AccessList, AccessGrant{})
			if err := m.AccessList[len(m.AccessList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyFixed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupplyFixed = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowGovernanceControl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowGovernanceControl = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowForcedTransfer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowForcedTransfer = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredAttributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredAttributes = append(m.RequiredAttributes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdCents", wireType)
			}
			m.UsdCents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsdCents |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			m.Volume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volume |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdMills", wireType)
			}
			m.UsdMills = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsdMills |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddFinalizeActivateMarkerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddFinalizeActivateMarkerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddFinalizeActivateMarkerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSupplyIncreaseProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSupplyIncreaseProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSupplyIncreaseProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSupplyIncreaseProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSupplyIncreaseProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSupplyIncreaseProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredAttributesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredAttributesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredAttributesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveRequiredAttributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveRequiredAttributes = append(m.RemoveRequiredAttributes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddRequiredAttributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddRequiredAttributes = append(m.AddRequiredAttributes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAuthority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferAuthority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredAttributesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredAttributesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredAttributesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateForcedTransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateForcedTransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateForcedTransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowForcedTransfer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowForcedTransfer = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateForcedTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateForcedTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateForcedTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetAccountDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetAccountDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetAccountDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetAccountDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetAccountDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetAccountDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSendDenyListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSendDenyListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSendDenyListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveDeniedAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveDeniedAddresses = append(m.RemoveDeniedAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddDeniedAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddDeniedAddresses = append(m.AddDeniedAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSendDenyListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSendDenyListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSendDenyListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddNetAssetValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddNetAssetValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddNetAssetValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Administrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Administrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAssetValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetAssetValues = append(m.NetAssetValues, NetAssetValue{})
			if err := m.NetAssetValues[len(m.NetAssetValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddNetAssetValuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddNetAssetValuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddNetAssetValuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
