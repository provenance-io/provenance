// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/marker/v1/proposals.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/x/bank/types"
	github_com_cosmos_cosmos_sdk_x_bank_types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AddMarkerProposal defines defines a governance proposal to create a new marker
type AddMarkerProposal struct {
	Title                  string                                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description            string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Amount                 github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
	Manager                string                                  `protobuf:"bytes,4,opt,name=manager,proto3" json:"manager,omitempty"`
	Status                 MarkerStatus                            `protobuf:"varint,5,opt,name=status,proto3,enum=provenance.marker.v1.MarkerStatus" json:"status,omitempty"`
	MarkerType             MarkerType                              `protobuf:"varint,6,opt,name=marker_type,json=markerType,proto3,enum=provenance.marker.v1.MarkerType" json:"marker_type,omitempty"`
	AccessList             []AccessGrant                           `protobuf:"bytes,7,rep,name=access_list,json=accessList,proto3" json:"access_list"`
	SupplyFixed            bool                                    `protobuf:"varint,8,opt,name=supply_fixed,json=supplyFixed,proto3" json:"supply_fixed,omitempty"`
	AllowGovernanceControl bool                                    `protobuf:"varint,9,opt,name=allow_governance_control,json=allowGovernanceControl,proto3" json:"allow_governance_control,omitempty"`
	RequiredAttributes     []string                                `protobuf:"bytes,10,rep,name=required_attributes,json=requiredAttributes,proto3" json:"required_attributes,omitempty"`
}

func (m *AddMarkerProposal) Reset()      { *m = AddMarkerProposal{} }
func (*AddMarkerProposal) ProtoMessage() {}
func (*AddMarkerProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_345320af87f4ec37, []int{0}
}
func (m *AddMarkerProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMarkerProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMarkerProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMarkerProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMarkerProposal.Merge(m, src)
}
func (m *AddMarkerProposal) XXX_Size() int {
	return m.Size()
}
func (m *AddMarkerProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMarkerProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AddMarkerProposal proto.InternalMessageInfo

func (m *AddMarkerProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AddMarkerProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AddMarkerProposal) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *AddMarkerProposal) GetStatus() MarkerStatus {
	if m != nil {
		return m.Status
	}
	return StatusUndefined
}

func (m *AddMarkerProposal) GetMarkerType() MarkerType {
	if m != nil {
		return m.MarkerType
	}
	return MarkerType_Unknown
}

func (m *AddMarkerProposal) GetAccessList() []AccessGrant {
	if m != nil {
		return m.AccessList
	}
	return nil
}

func (m *AddMarkerProposal) GetSupplyFixed() bool {
	if m != nil {
		return m.SupplyFixed
	}
	return false
}

func (m *AddMarkerProposal) GetAllowGovernanceControl() bool {
	if m != nil {
		return m.AllowGovernanceControl
	}
	return false
}

func (m *AddMarkerProposal) GetRequiredAttributes() []string {
	if m != nil {
		return m.RequiredAttributes
	}
	return nil
}

// SupplyIncreaseProposal defines a governance proposal to administer a marker and increase total supply of the marker
// through minting coin and placing it within the marker or assigning it directly to an account
type SupplyIncreaseProposal struct {
	Title         string                                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Amount        github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
	TargetAddress string                                  `protobuf:"bytes,4,opt,name=target_address,json=targetAddress,proto3" json:"target_address,omitempty"`
}

func (m *SupplyIncreaseProposal) Reset()      { *m = SupplyIncreaseProposal{} }
func (*SupplyIncreaseProposal) ProtoMessage() {}
func (*SupplyIncreaseProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_345320af87f4ec37, []int{1}
}
func (m *SupplyIncreaseProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplyIncreaseProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupplyIncreaseProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupplyIncreaseProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplyIncreaseProposal.Merge(m, src)
}
func (m *SupplyIncreaseProposal) XXX_Size() int {
	return m.Size()
}
func (m *SupplyIncreaseProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplyIncreaseProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SupplyIncreaseProposal proto.InternalMessageInfo

func (m *SupplyIncreaseProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SupplyIncreaseProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SupplyIncreaseProposal) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

// SupplyDecreaseProposal defines a governance proposal to administer a marker and decrease the total supply through
// burning coin held within the marker
type SupplyDecreaseProposal struct {
	Title       string                                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
}

func (m *SupplyDecreaseProposal) Reset()      { *m = SupplyDecreaseProposal{} }
func (*SupplyDecreaseProposal) ProtoMessage() {}
func (*SupplyDecreaseProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_345320af87f4ec37, []int{2}
}
func (m *SupplyDecreaseProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplyDecreaseProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupplyDecreaseProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupplyDecreaseProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplyDecreaseProposal.Merge(m, src)
}
func (m *SupplyDecreaseProposal) XXX_Size() int {
	return m.Size()
}
func (m *SupplyDecreaseProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplyDecreaseProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SupplyDecreaseProposal proto.InternalMessageInfo

func (m *SupplyDecreaseProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SupplyDecreaseProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// SetAdministratorProposal defines a governance proposal to administer a marker and set administrators with specific
// access on the marker
type SetAdministratorProposal struct {
	Title       string        `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Denom       string        `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Access      []AccessGrant `protobuf:"bytes,4,rep,name=access,proto3" json:"access"`
}

func (m *SetAdministratorProposal) Reset()      { *m = SetAdministratorProposal{} }
func (*SetAdministratorProposal) ProtoMessage() {}
func (*SetAdministratorProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_345320af87f4ec37, []int{3}
}
func (m *SetAdministratorProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetAdministratorProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetAdministratorProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetAdministratorProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetAdministratorProposal.Merge(m, src)
}
func (m *SetAdministratorProposal) XXX_Size() int {
	return m.Size()
}
func (m *SetAdministratorProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SetAdministratorProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SetAdministratorProposal proto.InternalMessageInfo

func (m *SetAdministratorProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SetAdministratorProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SetAdministratorProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *SetAdministratorProposal) GetAccess() []AccessGrant {
	if m != nil {
		return m.Access
	}
	return nil
}

// RemoveAdministratorProposal defines a governance proposal to administer a marker and remove all permissions for a
// given address
type RemoveAdministratorProposal struct {
	Title          string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Denom          string   `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	RemovedAddress []string `protobuf:"bytes,4,rep,name=removed_address,json=removedAddress,proto3" json:"removed_address,omitempty"`
}

func (m *RemoveAdministratorProposal) Reset()      { *m = RemoveAdministratorProposal{} }
func (*RemoveAdministratorProposal) ProtoMessage() {}
func (*RemoveAdministratorProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_345320af87f4ec37, []int{4}
}
func (m *RemoveAdministratorProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveAdministratorProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveAdministratorProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveAdministratorProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveAdministratorProposal.Merge(m, src)
}
func (m *RemoveAdministratorProposal) XXX_Size() int {
	return m.Size()
}
func (m *RemoveAdministratorProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveAdministratorProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveAdministratorProposal proto.InternalMessageInfo

func (m *RemoveAdministratorProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RemoveAdministratorProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RemoveAdministratorProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *RemoveAdministratorProposal) GetRemovedAddress() []string {
	if m != nil {
		return m.RemovedAddress
	}
	return nil
}

// ChangeStatusProposal defines a governance proposal to administer a marker to change its status
type ChangeStatusProposal struct {
	Title       string       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Denom       string       `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	NewStatus   MarkerStatus `protobuf:"varint,4,opt,name=new_status,json=newStatus,proto3,enum=provenance.marker.v1.MarkerStatus" json:"new_status,omitempty"`
}

func (m *ChangeStatusProposal) Reset()      { *m = ChangeStatusProposal{} }
func (*ChangeStatusProposal) ProtoMessage() {}
func (*ChangeStatusProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_345320af87f4ec37, []int{5}
}
func (m *ChangeStatusProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeStatusProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeStatusProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeStatusProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeStatusProposal.Merge(m, src)
}
func (m *ChangeStatusProposal) XXX_Size() int {
	return m.Size()
}
func (m *ChangeStatusProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeStatusProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeStatusProposal proto.InternalMessageInfo

func (m *ChangeStatusProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChangeStatusProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ChangeStatusProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *ChangeStatusProposal) GetNewStatus() MarkerStatus {
	if m != nil {
		return m.NewStatus
	}
	return StatusUndefined
}

// WithdrawEscrowProposal defines a governance proposal to withdraw escrow coins from a marker
type WithdrawEscrowProposal struct {
	Title         string                                   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Denom         string                                   `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	TargetAddress string                                   `protobuf:"bytes,5,opt,name=target_address,json=targetAddress,proto3" json:"target_address,omitempty"`
}

func (m *WithdrawEscrowProposal) Reset()      { *m = WithdrawEscrowProposal{} }
func (*WithdrawEscrowProposal) ProtoMessage() {}
func (*WithdrawEscrowProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_345320af87f4ec37, []int{6}
}
func (m *WithdrawEscrowProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawEscrowProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawEscrowProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawEscrowProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawEscrowProposal.Merge(m, src)
}
func (m *WithdrawEscrowProposal) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawEscrowProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawEscrowProposal.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawEscrowProposal proto.InternalMessageInfo

func (m *WithdrawEscrowProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *WithdrawEscrowProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *WithdrawEscrowProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *WithdrawEscrowProposal) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *WithdrawEscrowProposal) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

// SetDenomMetadataProposal defines a governance proposal to set the metadata for a denom
type SetDenomMetadataProposal struct {
	Title       string                                             `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                                             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Metadata    github_com_cosmos_cosmos_sdk_x_bank_types.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3,customtype=github.com/cosmos/cosmos-sdk/x/bank/types.Metadata" json:"metadata"`
}

func (m *SetDenomMetadataProposal) Reset()      { *m = SetDenomMetadataProposal{} }
func (*SetDenomMetadataProposal) ProtoMessage() {}
func (*SetDenomMetadataProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_345320af87f4ec37, []int{7}
}
func (m *SetDenomMetadataProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDenomMetadataProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDenomMetadataProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDenomMetadataProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDenomMetadataProposal.Merge(m, src)
}
func (m *SetDenomMetadataProposal) XXX_Size() int {
	return m.Size()
}
func (m *SetDenomMetadataProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDenomMetadataProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SetDenomMetadataProposal proto.InternalMessageInfo

func (m *SetDenomMetadataProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SetDenomMetadataProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*AddMarkerProposal)(nil), "provenance.marker.v1.AddMarkerProposal")
	proto.RegisterType((*SupplyIncreaseProposal)(nil), "provenance.marker.v1.SupplyIncreaseProposal")
	proto.RegisterType((*SupplyDecreaseProposal)(nil), "provenance.marker.v1.SupplyDecreaseProposal")
	proto.RegisterType((*SetAdministratorProposal)(nil), "provenance.marker.v1.SetAdministratorProposal")
	proto.RegisterType((*RemoveAdministratorProposal)(nil), "provenance.marker.v1.RemoveAdministratorProposal")
	proto.RegisterType((*ChangeStatusProposal)(nil), "provenance.marker.v1.ChangeStatusProposal")
	proto.RegisterType((*WithdrawEscrowProposal)(nil), "provenance.marker.v1.WithdrawEscrowProposal")
	proto.RegisterType((*SetDenomMetadataProposal)(nil), "provenance.marker.v1.SetDenomMetadataProposal")
}

func init() {
	proto.RegisterFile("provenance/marker/v1/proposals.proto", fileDescriptor_345320af87f4ec37)
}

var fileDescriptor_345320af87f4ec37 = []byte{
	// 779 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcf, 0x6b, 0xdb, 0x48,
	0x14, 0xb6, 0x36, 0xb6, 0x63, 0x8f, 0x77, 0xb3, 0xac, 0xd6, 0x64, 0xb5, 0x59, 0xd6, 0x56, 0xc2,
	0x6e, 0xe3, 0x4b, 0xa4, 0xda, 0xbd, 0x14, 0x5f, 0x8a, 0x9d, 0xb4, 0x69, 0xa1, 0x81, 0xa0, 0x14,
	0x0a, 0xbd, 0x88, 0xb1, 0x34, 0x55, 0x06, 0x5b, 0x33, 0xea, 0xcc, 0xd8, 0x4e, 0xfe, 0x8b, 0x1e,
	0x7b, 0x2a, 0x39, 0xe7, 0x56, 0x7a, 0xef, 0x39, 0xb7, 0xe6, 0x58, 0x7a, 0x48, 0x4b, 0x42, 0xa1,
	0x7f, 0x44, 0x0f, 0x45, 0x33, 0xb2, 0x22, 0x88, 0x31, 0x29, 0x21, 0x85, 0x9c, 0x34, 0xf3, 0xde,
	0xf7, 0x7e, 0x7c, 0xa3, 0xef, 0x0d, 0x03, 0xfe, 0x8b, 0x18, 0x1d, 0x21, 0x02, 0x89, 0x87, 0xec,
	0x10, 0xb2, 0x3e, 0x62, 0xf6, 0xa8, 0x69, 0x47, 0x8c, 0x46, 0x94, 0xc3, 0x01, 0xb7, 0x22, 0x46,
	0x05, 0xd5, 0xab, 0xe7, 0x28, 0x4b, 0xa1, 0xac, 0x51, 0x73, 0xa9, 0x1a, 0xd0, 0x80, 0x4a, 0x80,
	0x1d, 0xaf, 0x14, 0x76, 0xa9, 0xe6, 0x51, 0x1e, 0x52, 0x6e, 0xf7, 0x20, 0xe9, 0xdb, 0xa3, 0x66,
	0x0f, 0x09, 0xd8, 0x94, 0x9b, 0x0b, 0x7e, 0x8e, 0x52, 0xbf, 0x47, 0x31, 0x49, 0xfc, 0xcb, 0x53,
	0x3b, 0x4a, 0xaa, 0x2a, 0xc8, 0xad, 0xa9, 0x10, 0xe8, 0x79, 0x88, 0xf3, 0x80, 0x41, 0x22, 0x14,
	0x6e, 0xe5, 0x30, 0x0f, 0xfe, 0xe8, 0xf8, 0xfe, 0x96, 0x84, 0x6c, 0x27, 0x9c, 0xf4, 0x2a, 0x28,
	0x08, 0x2c, 0x06, 0xc8, 0xd0, 0x4c, 0xad, 0x51, 0x76, 0xd4, 0x46, 0x37, 0x41, 0xc5, 0x47, 0xdc,
	0x63, 0x38, 0x12, 0x98, 0x12, 0xe3, 0x17, 0xe9, 0xcb, 0x9a, 0xf4, 0x1e, 0x28, 0xc2, 0x90, 0x0e,
	0x89, 0x30, 0xe6, 0x4c, 0xad, 0x51, 0x69, 0xfd, 0x6d, 0x29, 0x26, 0x56, 0xcc, 0xc4, 0x4a, 0x98,
	0x58, 0xeb, 0x14, 0x93, 0xae, 0x7d, 0x74, 0x52, 0xcf, 0x7d, 0x3c, 0xa9, 0xaf, 0x06, 0x58, 0xec,
	0x0e, 0x7b, 0x96, 0x47, 0x43, 0x3b, 0xa1, 0xad, 0x3e, 0x6b, 0xdc, 0xef, 0xdb, 0x62, 0x3f, 0x42,
	0x5c, 0x06, 0x38, 0x49, 0x66, 0xdd, 0x00, 0xf3, 0x21, 0x24, 0x30, 0x40, 0xcc, 0xc8, 0xcb, 0x0e,
	0x26, 0x5b, 0xbd, 0x0d, 0x8a, 0x5c, 0x40, 0x31, 0xe4, 0x46, 0xc1, 0xd4, 0x1a, 0x0b, 0xad, 0x15,
	0x6b, 0xda, 0x3f, 0xb1, 0x14, 0xd7, 0x1d, 0x89, 0x74, 0x92, 0x08, 0xbd, 0x03, 0x2a, 0x0a, 0xe1,
	0xc6, 0x25, 0x8d, 0xa2, 0x4c, 0x60, 0xce, 0x4a, 0xf0, 0x64, 0x3f, 0x42, 0x0e, 0x08, 0xd3, 0xb5,
	0xfe, 0x10, 0x54, 0xd4, 0xf9, 0xba, 0x03, 0xcc, 0x85, 0x31, 0x6f, 0xce, 0x35, 0x2a, 0xad, 0xe5,
	0xe9, 0x29, 0x3a, 0x12, 0xb8, 0x19, 0xff, 0x88, 0x6e, 0x3e, 0x3e, 0x09, 0x07, 0xa8, 0xd8, 0xc7,
	0x98, 0x0b, 0x7d, 0x19, 0xfc, 0xca, 0x87, 0x51, 0x34, 0xd8, 0x77, 0x9f, 0xe3, 0x3d, 0xe4, 0x1b,
	0x25, 0x53, 0x6b, 0x94, 0x9c, 0x8a, 0xb2, 0x3d, 0x88, 0x4d, 0xfa, 0x5d, 0x60, 0xc0, 0xc1, 0x80,
	0x8e, 0xdd, 0x80, 0x8e, 0x10, 0x93, 0xe9, 0x5d, 0x8f, 0x12, 0xc1, 0xe8, 0xc0, 0x28, 0x4b, 0xf8,
	0xa2, 0xf4, 0x6f, 0xa6, 0xee, 0x75, 0xe5, 0xd5, 0x6d, 0xf0, 0x27, 0x43, 0x2f, 0x86, 0x98, 0x21,
	0xdf, 0x85, 0x42, 0x30, 0xdc, 0x1b, 0x0a, 0xc4, 0x0d, 0x60, 0xce, 0x35, 0xca, 0x8e, 0x3e, 0x71,
	0x75, 0x52, 0x4f, 0xbb, 0xf4, 0xea, 0xa0, 0x9e, 0xfb, 0x7a, 0x50, 0xd7, 0x56, 0xbe, 0x68, 0x60,
	0x71, 0x47, 0x36, 0xf1, 0x88, 0x78, 0x0c, 0x41, 0x8e, 0x6e, 0x84, 0x62, 0xfe, 0x07, 0x0b, 0x02,
	0xb2, 0x00, 0x09, 0x17, 0xfa, 0x3e, 0x43, 0x9c, 0x27, 0xc2, 0xf9, 0x4d, 0x59, 0x3b, 0xca, 0x98,
	0xe1, 0xf9, 0x2e, 0xe5, 0xb9, 0x81, 0x6e, 0x0e, 0xcf, 0x0c, 0x81, 0xb7, 0x1a, 0x30, 0x76, 0x62,
	0x66, 0x21, 0x26, 0x98, 0x0b, 0x06, 0x05, 0xbd, 0xfa, 0x70, 0x57, 0x41, 0xc1, 0x47, 0x84, 0x86,
	0x92, 0x41, 0xd9, 0x51, 0x1b, 0xfd, 0x1e, 0x28, 0x2a, 0xe5, 0x1a, 0xf9, 0x1f, 0x13, 0x7c, 0x12,
	0x96, 0xe9, 0xfa, 0xb5, 0x06, 0xfe, 0x71, 0x50, 0x48, 0x47, 0xe8, 0x67, 0x34, 0xbe, 0x0a, 0x7e,
	0x67, 0xb2, 0x98, 0x9f, 0x91, 0x45, 0x3c, 0x03, 0x0b, 0x89, 0xf9, 0xa2, 0x2e, 0xde, 0x68, 0xa0,
	0xba, 0xbe, 0x0b, 0x49, 0x80, 0xd4, 0xed, 0x71, 0x4d, 0x9d, 0x75, 0x00, 0x20, 0x68, 0xec, 0x26,
	0x77, 0x59, 0xfe, 0xd2, 0x77, 0x59, 0x99, 0xa0, 0xb1, 0x5a, 0x66, 0x7a, 0xfe, 0xa6, 0x81, 0xc5,
	0xa7, 0x58, 0xec, 0xfa, 0x0c, 0x8e, 0xef, 0x73, 0x8f, 0xd1, 0xf1, 0x35, 0x75, 0xed, 0xa5, 0x0a,
	0x57, 0x42, 0x98, 0xa1, 0xf0, 0xdb, 0xb1, 0x00, 0x0e, 0x3f, 0xd5, 0x1b, 0x97, 0x54, 0x38, 0x9f,
	0x31, 0xca, 0x85, 0xd9, 0xa3, 0xfc, 0x5e, 0x4d, 0xc2, 0x46, 0xdc, 0xe2, 0x16, 0x12, 0xd0, 0x87,
	0x02, 0x5e, 0xf9, 0x00, 0x86, 0xa0, 0x14, 0x26, 0xb9, 0x92, 0x71, 0xfe, 0xf7, 0x9c, 0x2c, 0xe9,
	0xa7, 0x64, 0x27, 0x05, 0xbb, 0xed, 0x64, 0xa4, 0x5b, 0x33, 0x09, 0xef, 0xa9, 0x07, 0x81, 0xe2,
	0x3d, 0x89, 0x75, 0xd2, 0x52, 0xed, 0x7c, 0xcc, 0xaa, 0x1b, 0x1c, 0x9d, 0xd6, 0xb4, 0xe3, 0xd3,
	0x9a, 0xf6, 0xf9, 0xb4, 0xa6, 0xbd, 0x3c, 0xab, 0xe5, 0x8e, 0xcf, 0x6a, 0xb9, 0x0f, 0x67, 0xb5,
	0x1c, 0xf8, 0x0b, 0xd3, 0xa9, 0x2a, 0xd9, 0xd6, 0x9e, 0x65, 0x0b, 0x9f, 0x43, 0xd6, 0x30, 0xcd,
	0xec, 0xec, 0xbd, 0xc9, 0x4b, 0x41, 0x76, 0xd0, 0x2b, 0xca, 0x17, 0xc2, 0x9d, 0xef, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xb7, 0xd2, 0x8a, 0x7f, 0x00, 0x09, 0x00, 0x00,
}

func (this *AddMarkerProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddMarkerProposal)
	if !ok {
		that2, ok := that.(AddMarkerProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if this.Manager != that1.Manager {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.MarkerType != that1.MarkerType {
		return false
	}
	if len(this.AccessList) != len(that1.AccessList) {
		return false
	}
	for i := range this.AccessList {
		if !this.AccessList[i].Equal(&that1.AccessList[i]) {
			return false
		}
	}
	if this.SupplyFixed != that1.SupplyFixed {
		return false
	}
	if this.AllowGovernanceControl != that1.AllowGovernanceControl {
		return false
	}
	if len(this.RequiredAttributes) != len(that1.RequiredAttributes) {
		return false
	}
	for i := range this.RequiredAttributes {
		if this.RequiredAttributes[i] != that1.RequiredAttributes[i] {
			return false
		}
	}
	return true
}
func (this *SupplyIncreaseProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SupplyIncreaseProposal)
	if !ok {
		that2, ok := that.(SupplyIncreaseProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if this.TargetAddress != that1.TargetAddress {
		return false
	}
	return true
}
func (this *SupplyDecreaseProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SupplyDecreaseProposal)
	if !ok {
		that2, ok := that.(SupplyDecreaseProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *SetAdministratorProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetAdministratorProposal)
	if !ok {
		that2, ok := that.(SetAdministratorProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if len(this.Access) != len(that1.Access) {
		return false
	}
	for i := range this.Access {
		if !this.Access[i].Equal(&that1.Access[i]) {
			return false
		}
	}
	return true
}
func (this *RemoveAdministratorProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveAdministratorProposal)
	if !ok {
		that2, ok := that.(RemoveAdministratorProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if len(this.RemovedAddress) != len(that1.RemovedAddress) {
		return false
	}
	for i := range this.RemovedAddress {
		if this.RemovedAddress[i] != that1.RemovedAddress[i] {
			return false
		}
	}
	return true
}
func (this *ChangeStatusProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeStatusProposal)
	if !ok {
		that2, ok := that.(ChangeStatusProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.NewStatus != that1.NewStatus {
		return false
	}
	return true
}
func (this *WithdrawEscrowProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WithdrawEscrowProposal)
	if !ok {
		that2, ok := that.(WithdrawEscrowProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if len(this.Amount) != len(that1.Amount) {
		return false
	}
	for i := range this.Amount {
		if !this.Amount[i].Equal(&that1.Amount[i]) {
			return false
		}
	}
	if this.TargetAddress != that1.TargetAddress {
		return false
	}
	return true
}
func (m *AddMarkerProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMarkerProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMarkerProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequiredAttributes) > 0 {
		for iNdEx := len(m.RequiredAttributes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequiredAttributes[iNdEx])
			copy(dAtA[i:], m.RequiredAttributes[iNdEx])
			i = encodeVarintProposals(dAtA, i, uint64(len(m.RequiredAttributes[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.AllowGovernanceControl {
		i--
		if m.AllowGovernanceControl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.SupplyFixed {
		i--
		if m.SupplyFixed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.AccessList) > 0 {
		for iNdEx := len(m.AccessList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposals(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MarkerType != 0 {
		i = encodeVarintProposals(dAtA, i, uint64(m.MarkerType))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintProposals(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposals(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SupplyIncreaseProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplyIncreaseProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplyIncreaseProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposals(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SupplyDecreaseProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplyDecreaseProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplyDecreaseProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposals(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetAdministratorProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAdministratorProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetAdministratorProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Access) > 0 {
		for iNdEx := len(m.Access) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Access[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposals(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveAdministratorProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveAdministratorProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveAdministratorProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemovedAddress) > 0 {
		for iNdEx := len(m.RemovedAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RemovedAddress[iNdEx])
			copy(dAtA[i:], m.RemovedAddress[iNdEx])
			i = encodeVarintProposals(dAtA, i, uint64(len(m.RemovedAddress[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangeStatusProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeStatusProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeStatusProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewStatus != 0 {
		i = encodeVarintProposals(dAtA, i, uint64(m.NewStatus))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawEscrowProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawEscrowProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawEscrowProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposals(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetDenomMetadataProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDenomMetadataProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDenomMetadataProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Metadata.Size()
		i -= size
		if _, err := m.Metadata.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposals(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposals(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposals(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddMarkerProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovProposals(uint64(l))
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovProposals(uint64(m.Status))
	}
	if m.MarkerType != 0 {
		n += 1 + sovProposals(uint64(m.MarkerType))
	}
	if len(m.AccessList) > 0 {
		for _, e := range m.AccessList {
			l = e.Size()
			n += 1 + l + sovProposals(uint64(l))
		}
	}
	if m.SupplyFixed {
		n += 2
	}
	if m.AllowGovernanceControl {
		n += 2
	}
	if len(m.RequiredAttributes) > 0 {
		for _, s := range m.RequiredAttributes {
			l = len(s)
			n += 1 + l + sovProposals(uint64(l))
		}
	}
	return n
}

func (m *SupplyIncreaseProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovProposals(uint64(l))
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	return n
}

func (m *SupplyDecreaseProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovProposals(uint64(l))
	return n
}

func (m *SetAdministratorProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	if len(m.Access) > 0 {
		for _, e := range m.Access {
			l = e.Size()
			n += 1 + l + sovProposals(uint64(l))
		}
	}
	return n
}

func (m *RemoveAdministratorProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	if len(m.RemovedAddress) > 0 {
		for _, s := range m.RemovedAddress {
			l = len(s)
			n += 1 + l + sovProposals(uint64(l))
		}
	}
	return n
}

func (m *ChangeStatusProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	if m.NewStatus != 0 {
		n += 1 + sovProposals(uint64(m.NewStatus))
	}
	return n
}

func (m *WithdrawEscrowProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovProposals(uint64(l))
		}
	}
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	return n
}

func (m *SetDenomMetadataProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovProposals(uint64(l))
	return n
}

func sovProposals(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposals(x uint64) (n int) {
	return sovProposals(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddMarkerProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMarkerProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMarkerProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MarkerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerType", wireType)
			}
			m.MarkerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarkerType |= MarkerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessList = append(m.AccessList, AccessGrant{})
			if err := m.AccessList[len(m.AccessList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyFixed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupplyFixed = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowGovernanceControl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowGovernanceControl = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredAttributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredAttributes = append(m.RequiredAttributes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupplyIncreaseProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplyIncreaseProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplyIncreaseProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupplyDecreaseProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplyDecreaseProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplyDecreaseProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAdministratorProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAdministratorProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAdministratorProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Access", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Access = append(m.Access, AccessGrant{})
			if err := m.Access[len(m.Access)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveAdministratorProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveAdministratorProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveAdministratorProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedAddress = append(m.RemovedAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeStatusProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeStatusProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeStatusProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			m.NewStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewStatus |= MarkerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawEscrowProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawEscrowProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawEscrowProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDenomMetadataProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDenomMetadataProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDenomMetadataProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposals(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposals
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposals
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposals
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposals        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposals          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposals = fmt.Errorf("proto: unexpected end of group")
)
