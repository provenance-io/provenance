// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/metadata/v1/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventTxCompleted is an event message indicating that a TX has completed.
type EventTxCompleted struct {
	// module is the module the TX belongs to.
	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// endpoint is the rpc endpoint that was just completed.
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// senders are the bech32 address strings of the signers of this TX.
	Signers []string `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *EventTxCompleted) Reset()         { *m = EventTxCompleted{} }
func (m *EventTxCompleted) String() string { return proto.CompactTextString(m) }
func (*EventTxCompleted) ProtoMessage()    {}
func (*EventTxCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{0}
}
func (m *EventTxCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTxCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTxCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTxCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTxCompleted.Merge(m, src)
}
func (m *EventTxCompleted) XXX_Size() int {
	return m.Size()
}
func (m *EventTxCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTxCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventTxCompleted proto.InternalMessageInfo

func (m *EventTxCompleted) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *EventTxCompleted) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *EventTxCompleted) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

// EventScopeCreated is an event message indicating a scope has been created.
type EventScopeCreated struct {
	// scope_addr is the bech32 address string of the scope id that was created.
	ScopeAddr string `protobuf:"bytes,1,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty"`
	// scope is the scope that was created.
	Scope *Scope `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (m *EventScopeCreated) Reset()         { *m = EventScopeCreated{} }
func (m *EventScopeCreated) String() string { return proto.CompactTextString(m) }
func (*EventScopeCreated) ProtoMessage()    {}
func (*EventScopeCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{1}
}
func (m *EventScopeCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventScopeCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventScopeCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventScopeCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventScopeCreated.Merge(m, src)
}
func (m *EventScopeCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventScopeCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventScopeCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventScopeCreated proto.InternalMessageInfo

func (m *EventScopeCreated) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

func (m *EventScopeCreated) GetScope() *Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

// EventScopeUpdated is an event message indicating a scope has been updated.
type EventScopeUpdated struct {
	// scope_addr is the bech32 address string of the scope id that was updated.
	ScopeAddr string `protobuf:"bytes,1,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty"`
	// scope is the new on-chain version of the scope.
	Scope *Scope `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	// scope_replaced is the previous on-chain version of the scope.
	ScopeReplaced *Scope `protobuf:"bytes,3,opt,name=scope_replaced,json=scopeReplaced,proto3" json:"scope_replaced,omitempty"`
}

func (m *EventScopeUpdated) Reset()         { *m = EventScopeUpdated{} }
func (m *EventScopeUpdated) String() string { return proto.CompactTextString(m) }
func (*EventScopeUpdated) ProtoMessage()    {}
func (*EventScopeUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{2}
}
func (m *EventScopeUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventScopeUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventScopeUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventScopeUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventScopeUpdated.Merge(m, src)
}
func (m *EventScopeUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventScopeUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventScopeUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventScopeUpdated proto.InternalMessageInfo

func (m *EventScopeUpdated) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

func (m *EventScopeUpdated) GetScope() *Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *EventScopeUpdated) GetScopeReplaced() *Scope {
	if m != nil {
		return m.ScopeReplaced
	}
	return nil
}

// EventScopeRemoved is an event message indicating a scope has been removed.
type EventScopeRemoved struct {
	// scope_addr is the bech32 address string of the scope id that was removed.
	ScopeAddr string `protobuf:"bytes,1,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty"`
	// scope is the scope that was removed.
	Scope *Scope `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (m *EventScopeRemoved) Reset()         { *m = EventScopeRemoved{} }
func (m *EventScopeRemoved) String() string { return proto.CompactTextString(m) }
func (*EventScopeRemoved) ProtoMessage()    {}
func (*EventScopeRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{3}
}
func (m *EventScopeRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventScopeRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventScopeRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventScopeRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventScopeRemoved.Merge(m, src)
}
func (m *EventScopeRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventScopeRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventScopeRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventScopeRemoved proto.InternalMessageInfo

func (m *EventScopeRemoved) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

func (m *EventScopeRemoved) GetScope() *Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

// EventSessionCreated is an event message indicating a session has been created.
type EventSessionCreated struct {
	// session_addr is the bech32 address string of the session id that was created.
	SessionAddr string `protobuf:"bytes,1,opt,name=session_addr,json=sessionAddr,proto3" json:"session_addr,omitempty"`
	// session is the session that was created.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
}

func (m *EventSessionCreated) Reset()         { *m = EventSessionCreated{} }
func (m *EventSessionCreated) String() string { return proto.CompactTextString(m) }
func (*EventSessionCreated) ProtoMessage()    {}
func (*EventSessionCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{4}
}
func (m *EventSessionCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSessionCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSessionCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSessionCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSessionCreated.Merge(m, src)
}
func (m *EventSessionCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventSessionCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSessionCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventSessionCreated proto.InternalMessageInfo

func (m *EventSessionCreated) GetSessionAddr() string {
	if m != nil {
		return m.SessionAddr
	}
	return ""
}

func (m *EventSessionCreated) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

// EventSessionUpdated is an event message indicating a session has been updated.
type EventSessionUpdated struct {
	// session_addr is the bech32 address string of the session id that was updated.
	SessionAddr string `protobuf:"bytes,1,opt,name=session_addr,json=sessionAddr,proto3" json:"session_addr,omitempty"`
	// session is the new on-chain version of the session.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	// session_replaced is the previous on-chain version of the session.
	SessionReplaced *Session `protobuf:"bytes,3,opt,name=session_replaced,json=sessionReplaced,proto3" json:"session_replaced,omitempty"`
}

func (m *EventSessionUpdated) Reset()         { *m = EventSessionUpdated{} }
func (m *EventSessionUpdated) String() string { return proto.CompactTextString(m) }
func (*EventSessionUpdated) ProtoMessage()    {}
func (*EventSessionUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{5}
}
func (m *EventSessionUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSessionUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSessionUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSessionUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSessionUpdated.Merge(m, src)
}
func (m *EventSessionUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventSessionUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSessionUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventSessionUpdated proto.InternalMessageInfo

func (m *EventSessionUpdated) GetSessionAddr() string {
	if m != nil {
		return m.SessionAddr
	}
	return ""
}

func (m *EventSessionUpdated) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *EventSessionUpdated) GetSessionReplaced() *Session {
	if m != nil {
		return m.SessionReplaced
	}
	return nil
}

// EventSessionRemoved is an event message indicating a session has been removed.
type EventSessionRemoved struct {
	// session_addr is the bech32 address string of the session id that was removed.
	SessionAddr string `protobuf:"bytes,1,opt,name=session_addr,json=sessionAddr,proto3" json:"session_addr,omitempty"`
	// session is the session that was removed.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
}

func (m *EventSessionRemoved) Reset()         { *m = EventSessionRemoved{} }
func (m *EventSessionRemoved) String() string { return proto.CompactTextString(m) }
func (*EventSessionRemoved) ProtoMessage()    {}
func (*EventSessionRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{6}
}
func (m *EventSessionRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSessionRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSessionRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSessionRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSessionRemoved.Merge(m, src)
}
func (m *EventSessionRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventSessionRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSessionRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventSessionRemoved proto.InternalMessageInfo

func (m *EventSessionRemoved) GetSessionAddr() string {
	if m != nil {
		return m.SessionAddr
	}
	return ""
}

func (m *EventSessionRemoved) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

// EventRecordCreated is an event message indicating a record has been created.
type EventRecordCreated struct {
	// record_addr is the bech32 address string of the record id that was created.
	RecordAddr string `protobuf:"bytes,1,opt,name=record_addr,json=recordAddr,proto3" json:"record_addr,omitempty"`
	// record is the record that was created.
	Record *Record `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *EventRecordCreated) Reset()         { *m = EventRecordCreated{} }
func (m *EventRecordCreated) String() string { return proto.CompactTextString(m) }
func (*EventRecordCreated) ProtoMessage()    {}
func (*EventRecordCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{7}
}
func (m *EventRecordCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordCreated.Merge(m, src)
}
func (m *EventRecordCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordCreated proto.InternalMessageInfo

func (m *EventRecordCreated) GetRecordAddr() string {
	if m != nil {
		return m.RecordAddr
	}
	return ""
}

func (m *EventRecordCreated) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

// EventRecordUpdated is an event message indicating a record has been updated.
type EventRecordUpdated struct {
	// record_addr is the bech32 address string of the record id that was updated.
	RecordAddr string `protobuf:"bytes,1,opt,name=record_addr,json=recordAddr,proto3" json:"record_addr,omitempty"`
	// record is the new on-chain version of the record.
	Record *Record `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
	// record_replaced is the previous on-chain version of the record.
	RecordReplaced *Record `protobuf:"bytes,3,opt,name=record_replaced,json=recordReplaced,proto3" json:"record_replaced,omitempty"`
}

func (m *EventRecordUpdated) Reset()         { *m = EventRecordUpdated{} }
func (m *EventRecordUpdated) String() string { return proto.CompactTextString(m) }
func (*EventRecordUpdated) ProtoMessage()    {}
func (*EventRecordUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{8}
}
func (m *EventRecordUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordUpdated.Merge(m, src)
}
func (m *EventRecordUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordUpdated proto.InternalMessageInfo

func (m *EventRecordUpdated) GetRecordAddr() string {
	if m != nil {
		return m.RecordAddr
	}
	return ""
}

func (m *EventRecordUpdated) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *EventRecordUpdated) GetRecordReplaced() *Record {
	if m != nil {
		return m.RecordReplaced
	}
	return nil
}

// EventRecordRemoved is an event message indicating a record has been removed.
type EventRecordRemoved struct {
	// record is the bech32 address string of the record id that was removed.
	RecordAddr string `protobuf:"bytes,1,opt,name=record_addr,json=recordAddr,proto3" json:"record_addr,omitempty"`
	// record is the record that was removed.
	Record *Record `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *EventRecordRemoved) Reset()         { *m = EventRecordRemoved{} }
func (m *EventRecordRemoved) String() string { return proto.CompactTextString(m) }
func (*EventRecordRemoved) ProtoMessage()    {}
func (*EventRecordRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{9}
}
func (m *EventRecordRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordRemoved.Merge(m, src)
}
func (m *EventRecordRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordRemoved proto.InternalMessageInfo

func (m *EventRecordRemoved) GetRecordAddr() string {
	if m != nil {
		return m.RecordAddr
	}
	return ""
}

func (m *EventRecordRemoved) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

// EventScopeSpecificationCreated is an event message indicating a scope specification has been created.
type EventScopeSpecificationCreated struct {
	// scope_specification_addr is the bech32 address string of the specification id of the scope specification that was
	// created.
	ScopeSpecificationAddr string `protobuf:"bytes,1,opt,name=scope_specification_addr,json=scopeSpecificationAddr,proto3" json:"scope_specification_addr,omitempty"`
	// scope_specification is the scope specification that was created.
	ScopeSpecification *ScopeSpecification `protobuf:"bytes,2,opt,name=scope_specification,json=scopeSpecification,proto3" json:"scope_specification,omitempty"`
}

func (m *EventScopeSpecificationCreated) Reset()         { *m = EventScopeSpecificationCreated{} }
func (m *EventScopeSpecificationCreated) String() string { return proto.CompactTextString(m) }
func (*EventScopeSpecificationCreated) ProtoMessage()    {}
func (*EventScopeSpecificationCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{10}
}
func (m *EventScopeSpecificationCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventScopeSpecificationCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventScopeSpecificationCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventScopeSpecificationCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventScopeSpecificationCreated.Merge(m, src)
}
func (m *EventScopeSpecificationCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventScopeSpecificationCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventScopeSpecificationCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventScopeSpecificationCreated proto.InternalMessageInfo

func (m *EventScopeSpecificationCreated) GetScopeSpecificationAddr() string {
	if m != nil {
		return m.ScopeSpecificationAddr
	}
	return ""
}

func (m *EventScopeSpecificationCreated) GetScopeSpecification() *ScopeSpecification {
	if m != nil {
		return m.ScopeSpecification
	}
	return nil
}

// EventScopeSpecificationUpdated is an event message indicating a scope specification has been updated.
type EventScopeSpecificationUpdated struct {
	// scope_specification_addr is the bech32 address string of the specification id of the scope specification that was
	// updated.
	ScopeSpecificationAddr string `protobuf:"bytes,1,opt,name=scope_specification_addr,json=scopeSpecificationAddr,proto3" json:"scope_specification_addr,omitempty"`
	// scope_specification is the new on-chain version of the scope specification.
	ScopeSpecification *ScopeSpecification `protobuf:"bytes,2,opt,name=scope_specification,json=scopeSpecification,proto3" json:"scope_specification,omitempty"`
	// scope_specification_replaced is the previous on-chain version of the scope specification.
	ScopeSpecificationReplaced *Scope `protobuf:"bytes,3,opt,name=scope_specification_replaced,json=scopeSpecificationReplaced,proto3" json:"scope_specification_replaced,omitempty"`
}

func (m *EventScopeSpecificationUpdated) Reset()         { *m = EventScopeSpecificationUpdated{} }
func (m *EventScopeSpecificationUpdated) String() string { return proto.CompactTextString(m) }
func (*EventScopeSpecificationUpdated) ProtoMessage()    {}
func (*EventScopeSpecificationUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{11}
}
func (m *EventScopeSpecificationUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventScopeSpecificationUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventScopeSpecificationUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventScopeSpecificationUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventScopeSpecificationUpdated.Merge(m, src)
}
func (m *EventScopeSpecificationUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventScopeSpecificationUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventScopeSpecificationUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventScopeSpecificationUpdated proto.InternalMessageInfo

func (m *EventScopeSpecificationUpdated) GetScopeSpecificationAddr() string {
	if m != nil {
		return m.ScopeSpecificationAddr
	}
	return ""
}

func (m *EventScopeSpecificationUpdated) GetScopeSpecification() *ScopeSpecification {
	if m != nil {
		return m.ScopeSpecification
	}
	return nil
}

func (m *EventScopeSpecificationUpdated) GetScopeSpecificationReplaced() *Scope {
	if m != nil {
		return m.ScopeSpecificationReplaced
	}
	return nil
}

// EventScopeSpecificationRemoved is an event message indicating a scope specification has been removed.
type EventScopeSpecificationRemoved struct {
	// scope_specification_addr is the bech32 address string of the specification id of the scope specification that was
	// removed.
	ScopeSpecificationAddr string `protobuf:"bytes,1,opt,name=scope_specification_addr,json=scopeSpecificationAddr,proto3" json:"scope_specification_addr,omitempty"`
	// scope_specification is the scope specification that was removed.
	ScopeSpecification *ScopeSpecification `protobuf:"bytes,2,opt,name=scope_specification,json=scopeSpecification,proto3" json:"scope_specification,omitempty"`
}

func (m *EventScopeSpecificationRemoved) Reset()         { *m = EventScopeSpecificationRemoved{} }
func (m *EventScopeSpecificationRemoved) String() string { return proto.CompactTextString(m) }
func (*EventScopeSpecificationRemoved) ProtoMessage()    {}
func (*EventScopeSpecificationRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{12}
}
func (m *EventScopeSpecificationRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventScopeSpecificationRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventScopeSpecificationRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventScopeSpecificationRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventScopeSpecificationRemoved.Merge(m, src)
}
func (m *EventScopeSpecificationRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventScopeSpecificationRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventScopeSpecificationRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventScopeSpecificationRemoved proto.InternalMessageInfo

func (m *EventScopeSpecificationRemoved) GetScopeSpecificationAddr() string {
	if m != nil {
		return m.ScopeSpecificationAddr
	}
	return ""
}

func (m *EventScopeSpecificationRemoved) GetScopeSpecification() *ScopeSpecification {
	if m != nil {
		return m.ScopeSpecification
	}
	return nil
}

// EventContractSpecificationCreated is an event message indicating a contract specification has been created.
type EventContractSpecificationCreated struct {
	// contract_specification_addr is the bech32 address string of the specification id of the contract specification that
	// was created.
	ContractSpecificationAddr string `protobuf:"bytes,1,opt,name=contract_specification_addr,json=contractSpecificationAddr,proto3" json:"contract_specification_addr,omitempty"`
	// contract_specification is the contract specification that was created.
	ContractSpecification *ContractSpecification `protobuf:"bytes,2,opt,name=contract_specification,json=contractSpecification,proto3" json:"contract_specification,omitempty"`
}

func (m *EventContractSpecificationCreated) Reset()         { *m = EventContractSpecificationCreated{} }
func (m *EventContractSpecificationCreated) String() string { return proto.CompactTextString(m) }
func (*EventContractSpecificationCreated) ProtoMessage()    {}
func (*EventContractSpecificationCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{13}
}
func (m *EventContractSpecificationCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventContractSpecificationCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventContractSpecificationCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventContractSpecificationCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventContractSpecificationCreated.Merge(m, src)
}
func (m *EventContractSpecificationCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventContractSpecificationCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventContractSpecificationCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventContractSpecificationCreated proto.InternalMessageInfo

func (m *EventContractSpecificationCreated) GetContractSpecificationAddr() string {
	if m != nil {
		return m.ContractSpecificationAddr
	}
	return ""
}

func (m *EventContractSpecificationCreated) GetContractSpecification() *ContractSpecification {
	if m != nil {
		return m.ContractSpecification
	}
	return nil
}

// EventContractSpecificationUpdated is an event message indicating a contract specification has been updated.
type EventContractSpecificationUpdated struct {
	// contract_specification_addr is the bech32 address string of the specification id of the contract specification that
	// was updated.
	ContractSpecificationAddr string `protobuf:"bytes,1,opt,name=contract_specification_addr,json=contractSpecificationAddr,proto3" json:"contract_specification_addr,omitempty"`
	// contract_specification is the new on-chain version of the contract specification.
	ContractSpecification *ContractSpecification `protobuf:"bytes,2,opt,name=contract_specification,json=contractSpecification,proto3" json:"contract_specification,omitempty"`
	// contract_specification_replaced is the previous on-chain version of the contract specification.
	ContractSpecificationReplaced *ContractSpecification `protobuf:"bytes,3,opt,name=contract_specification_replaced,json=contractSpecificationReplaced,proto3" json:"contract_specification_replaced,omitempty"`
}

func (m *EventContractSpecificationUpdated) Reset()         { *m = EventContractSpecificationUpdated{} }
func (m *EventContractSpecificationUpdated) String() string { return proto.CompactTextString(m) }
func (*EventContractSpecificationUpdated) ProtoMessage()    {}
func (*EventContractSpecificationUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{14}
}
func (m *EventContractSpecificationUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventContractSpecificationUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventContractSpecificationUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventContractSpecificationUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventContractSpecificationUpdated.Merge(m, src)
}
func (m *EventContractSpecificationUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventContractSpecificationUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventContractSpecificationUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventContractSpecificationUpdated proto.InternalMessageInfo

func (m *EventContractSpecificationUpdated) GetContractSpecificationAddr() string {
	if m != nil {
		return m.ContractSpecificationAddr
	}
	return ""
}

func (m *EventContractSpecificationUpdated) GetContractSpecification() *ContractSpecification {
	if m != nil {
		return m.ContractSpecification
	}
	return nil
}

func (m *EventContractSpecificationUpdated) GetContractSpecificationReplaced() *ContractSpecification {
	if m != nil {
		return m.ContractSpecificationReplaced
	}
	return nil
}

// EventContractSpecificationRemoved is an event message indicating a contract specification has been removed.
type EventContractSpecificationRemoved struct {
	// contract_specification_addr is the bech32 address string of the specification id of the contract specification that
	// was removed.
	ContractSpecificationAddr string `protobuf:"bytes,1,opt,name=contract_specification_addr,json=contractSpecificationAddr,proto3" json:"contract_specification_addr,omitempty"`
	// contract_specification is the contract specification that was removed.
	ContractSpecification *ContractSpecification `protobuf:"bytes,2,opt,name=contract_specification,json=contractSpecification,proto3" json:"contract_specification,omitempty"`
}

func (m *EventContractSpecificationRemoved) Reset()         { *m = EventContractSpecificationRemoved{} }
func (m *EventContractSpecificationRemoved) String() string { return proto.CompactTextString(m) }
func (*EventContractSpecificationRemoved) ProtoMessage()    {}
func (*EventContractSpecificationRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{15}
}
func (m *EventContractSpecificationRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventContractSpecificationRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventContractSpecificationRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventContractSpecificationRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventContractSpecificationRemoved.Merge(m, src)
}
func (m *EventContractSpecificationRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventContractSpecificationRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventContractSpecificationRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventContractSpecificationRemoved proto.InternalMessageInfo

func (m *EventContractSpecificationRemoved) GetContractSpecificationAddr() string {
	if m != nil {
		return m.ContractSpecificationAddr
	}
	return ""
}

func (m *EventContractSpecificationRemoved) GetContractSpecification() *ContractSpecification {
	if m != nil {
		return m.ContractSpecification
	}
	return nil
}

// EventRecordSpecificationCreated is an event message indicating a record specification has been created.
type EventRecordSpecificationCreated struct {
	// record_specification_addr is the bech32 address string of the specification id of the record specification that was
	// created.
	RecordSpecificationAddr string `protobuf:"bytes,1,opt,name=record_specification_addr,json=recordSpecificationAddr,proto3" json:"record_specification_addr,omitempty"`
	// record_specification is the record specification that was created.
	RecordSpecification *RecordSpecification `protobuf:"bytes,2,opt,name=record_specification,json=recordSpecification,proto3" json:"record_specification,omitempty"`
}

func (m *EventRecordSpecificationCreated) Reset()         { *m = EventRecordSpecificationCreated{} }
func (m *EventRecordSpecificationCreated) String() string { return proto.CompactTextString(m) }
func (*EventRecordSpecificationCreated) ProtoMessage()    {}
func (*EventRecordSpecificationCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{16}
}
func (m *EventRecordSpecificationCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordSpecificationCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordSpecificationCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordSpecificationCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordSpecificationCreated.Merge(m, src)
}
func (m *EventRecordSpecificationCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordSpecificationCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordSpecificationCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordSpecificationCreated proto.InternalMessageInfo

func (m *EventRecordSpecificationCreated) GetRecordSpecificationAddr() string {
	if m != nil {
		return m.RecordSpecificationAddr
	}
	return ""
}

func (m *EventRecordSpecificationCreated) GetRecordSpecification() *RecordSpecification {
	if m != nil {
		return m.RecordSpecification
	}
	return nil
}

// EventRecordSpecificationUpdated is an event message indicating a record specification has been updated.
type EventRecordSpecificationUpdated struct {
	// record_specification_addr is the bech32 address string of the specification id of the record specification that was
	// updated.
	RecordSpecificationAddr string `protobuf:"bytes,1,opt,name=record_specification_addr,json=recordSpecificationAddr,proto3" json:"record_specification_addr,omitempty"`
	// record_specification is the new on-chain version of the record specification.
	RecordSpecification *RecordSpecification `protobuf:"bytes,2,opt,name=record_specification,json=recordSpecification,proto3" json:"record_specification,omitempty"`
	// record_specification_replaced is the previous on-chain version of the record specification.
	RecordSpecificationReplaced *RecordSpecification `protobuf:"bytes,3,opt,name=record_specification_replaced,json=recordSpecificationReplaced,proto3" json:"record_specification_replaced,omitempty"`
}

func (m *EventRecordSpecificationUpdated) Reset()         { *m = EventRecordSpecificationUpdated{} }
func (m *EventRecordSpecificationUpdated) String() string { return proto.CompactTextString(m) }
func (*EventRecordSpecificationUpdated) ProtoMessage()    {}
func (*EventRecordSpecificationUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{17}
}
func (m *EventRecordSpecificationUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordSpecificationUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordSpecificationUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordSpecificationUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordSpecificationUpdated.Merge(m, src)
}
func (m *EventRecordSpecificationUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordSpecificationUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordSpecificationUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordSpecificationUpdated proto.InternalMessageInfo

func (m *EventRecordSpecificationUpdated) GetRecordSpecificationAddr() string {
	if m != nil {
		return m.RecordSpecificationAddr
	}
	return ""
}

func (m *EventRecordSpecificationUpdated) GetRecordSpecification() *RecordSpecification {
	if m != nil {
		return m.RecordSpecification
	}
	return nil
}

func (m *EventRecordSpecificationUpdated) GetRecordSpecificationReplaced() *RecordSpecification {
	if m != nil {
		return m.RecordSpecificationReplaced
	}
	return nil
}

// EventRecordSpecificationRemoved is an event message indicating a record specification has been removed.
type EventRecordSpecificationRemoved struct {
	// record_specification_addr is the bech32 address string of the specification id of the record specification that was
	// removed.
	RecordSpecificationAddr string `protobuf:"bytes,1,opt,name=record_specification_addr,json=recordSpecificationAddr,proto3" json:"record_specification_addr,omitempty"`
	// record_specification is the record specification that was removed.
	RecordSpecification *RecordSpecification `protobuf:"bytes,2,opt,name=record_specification,json=recordSpecification,proto3" json:"record_specification,omitempty"`
}

func (m *EventRecordSpecificationRemoved) Reset()         { *m = EventRecordSpecificationRemoved{} }
func (m *EventRecordSpecificationRemoved) String() string { return proto.CompactTextString(m) }
func (*EventRecordSpecificationRemoved) ProtoMessage()    {}
func (*EventRecordSpecificationRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{18}
}
func (m *EventRecordSpecificationRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordSpecificationRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordSpecificationRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordSpecificationRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordSpecificationRemoved.Merge(m, src)
}
func (m *EventRecordSpecificationRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordSpecificationRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordSpecificationRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordSpecificationRemoved proto.InternalMessageInfo

func (m *EventRecordSpecificationRemoved) GetRecordSpecificationAddr() string {
	if m != nil {
		return m.RecordSpecificationAddr
	}
	return ""
}

func (m *EventRecordSpecificationRemoved) GetRecordSpecification() *RecordSpecification {
	if m != nil {
		return m.RecordSpecification
	}
	return nil
}

// EventOSLocatorCreated is an event message indicating an object store locator has been created.
type EventOSLocatorCreated struct {
	// address is the address in the object store locator that was created.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// uri is the uri in the object store locator that was created.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (m *EventOSLocatorCreated) Reset()         { *m = EventOSLocatorCreated{} }
func (m *EventOSLocatorCreated) String() string { return proto.CompactTextString(m) }
func (*EventOSLocatorCreated) ProtoMessage()    {}
func (*EventOSLocatorCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{19}
}
func (m *EventOSLocatorCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOSLocatorCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOSLocatorCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOSLocatorCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOSLocatorCreated.Merge(m, src)
}
func (m *EventOSLocatorCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventOSLocatorCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOSLocatorCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventOSLocatorCreated proto.InternalMessageInfo

func (m *EventOSLocatorCreated) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventOSLocatorCreated) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// EventOSLocatorUpdated is an event message indicating an object store locator has been updated.
type EventOSLocatorUpdated struct {
	// address is the address in the object store locator that was updated.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// uri is the new uri that was just set.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// uri_replaced is the previous uri for this address (that has now been overwritten).
	UriReplaced string `protobuf:"bytes,3,opt,name=uri_replaced,json=uriReplaced,proto3" json:"uri_replaced,omitempty"`
}

func (m *EventOSLocatorUpdated) Reset()         { *m = EventOSLocatorUpdated{} }
func (m *EventOSLocatorUpdated) String() string { return proto.CompactTextString(m) }
func (*EventOSLocatorUpdated) ProtoMessage()    {}
func (*EventOSLocatorUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{20}
}
func (m *EventOSLocatorUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOSLocatorUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOSLocatorUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOSLocatorUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOSLocatorUpdated.Merge(m, src)
}
func (m *EventOSLocatorUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventOSLocatorUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOSLocatorUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventOSLocatorUpdated proto.InternalMessageInfo

func (m *EventOSLocatorUpdated) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventOSLocatorUpdated) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *EventOSLocatorUpdated) GetUriReplaced() string {
	if m != nil {
		return m.UriReplaced
	}
	return ""
}

// EventOSLocatorRemoved is an event message indicating an object store locator has been removed.
type EventOSLocatorRemoved struct {
	// address is the address in the object store locator that was removed.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// uri is the uri in the object store locator that was removed.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (m *EventOSLocatorRemoved) Reset()         { *m = EventOSLocatorRemoved{} }
func (m *EventOSLocatorRemoved) String() string { return proto.CompactTextString(m) }
func (*EventOSLocatorRemoved) ProtoMessage()    {}
func (*EventOSLocatorRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{21}
}
func (m *EventOSLocatorRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOSLocatorRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOSLocatorRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOSLocatorRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOSLocatorRemoved.Merge(m, src)
}
func (m *EventOSLocatorRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventOSLocatorRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOSLocatorRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventOSLocatorRemoved proto.InternalMessageInfo

func (m *EventOSLocatorRemoved) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventOSLocatorRemoved) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func init() {
	proto.RegisterType((*EventTxCompleted)(nil), "provenance.metadata.v1.EventTxCompleted")
	proto.RegisterType((*EventScopeCreated)(nil), "provenance.metadata.v1.EventScopeCreated")
	proto.RegisterType((*EventScopeUpdated)(nil), "provenance.metadata.v1.EventScopeUpdated")
	proto.RegisterType((*EventScopeRemoved)(nil), "provenance.metadata.v1.EventScopeRemoved")
	proto.RegisterType((*EventSessionCreated)(nil), "provenance.metadata.v1.EventSessionCreated")
	proto.RegisterType((*EventSessionUpdated)(nil), "provenance.metadata.v1.EventSessionUpdated")
	proto.RegisterType((*EventSessionRemoved)(nil), "provenance.metadata.v1.EventSessionRemoved")
	proto.RegisterType((*EventRecordCreated)(nil), "provenance.metadata.v1.EventRecordCreated")
	proto.RegisterType((*EventRecordUpdated)(nil), "provenance.metadata.v1.EventRecordUpdated")
	proto.RegisterType((*EventRecordRemoved)(nil), "provenance.metadata.v1.EventRecordRemoved")
	proto.RegisterType((*EventScopeSpecificationCreated)(nil), "provenance.metadata.v1.EventScopeSpecificationCreated")
	proto.RegisterType((*EventScopeSpecificationUpdated)(nil), "provenance.metadata.v1.EventScopeSpecificationUpdated")
	proto.RegisterType((*EventScopeSpecificationRemoved)(nil), "provenance.metadata.v1.EventScopeSpecificationRemoved")
	proto.RegisterType((*EventContractSpecificationCreated)(nil), "provenance.metadata.v1.EventContractSpecificationCreated")
	proto.RegisterType((*EventContractSpecificationUpdated)(nil), "provenance.metadata.v1.EventContractSpecificationUpdated")
	proto.RegisterType((*EventContractSpecificationRemoved)(nil), "provenance.metadata.v1.EventContractSpecificationRemoved")
	proto.RegisterType((*EventRecordSpecificationCreated)(nil), "provenance.metadata.v1.EventRecordSpecificationCreated")
	proto.RegisterType((*EventRecordSpecificationUpdated)(nil), "provenance.metadata.v1.EventRecordSpecificationUpdated")
	proto.RegisterType((*EventRecordSpecificationRemoved)(nil), "provenance.metadata.v1.EventRecordSpecificationRemoved")
	proto.RegisterType((*EventOSLocatorCreated)(nil), "provenance.metadata.v1.EventOSLocatorCreated")
	proto.RegisterType((*EventOSLocatorUpdated)(nil), "provenance.metadata.v1.EventOSLocatorUpdated")
	proto.RegisterType((*EventOSLocatorRemoved)(nil), "provenance.metadata.v1.EventOSLocatorRemoved")
}

func init() {
	proto.RegisterFile("provenance/metadata/v1/events.proto", fileDescriptor_476cf6cf9459cf25)
}

var fileDescriptor_476cf6cf9459cf25 = []byte{
	// 772 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x13, 0xd1, 0x92, 0x09, 0xb4, 0x65, 0x4b, 0x83, 0x9b, 0x12, 0xa7, 0x35, 0x97, 0xaa,
	0xa8, 0x89, 0x4a, 0x11, 0x02, 0x0e, 0x48, 0x10, 0x10, 0x12, 0x42, 0x02, 0xb9, 0x70, 0x01, 0x89,
	0xe2, 0xda, 0xdb, 0x62, 0xd1, 0x78, 0xad, 0xb5, 0x13, 0x95, 0x7f, 0xc1, 0x91, 0x3f, 0x01, 0x47,
	0x38, 0x21, 0x38, 0xc2, 0xad, 0x47, 0x8e, 0xa8, 0xfd, 0x23, 0x28, 0xfb, 0xe1, 0xd8, 0xc9, 0x3a,
	0x25, 0x07, 0x4b, 0xe9, 0xad, 0xb3, 0x9e, 0x99, 0xf7, 0x66, 0xde, 0xf3, 0x36, 0x86, 0x6b, 0x01,
	0x25, 0x5d, 0xec, 0xdb, 0xbe, 0x83, 0x9b, 0x6d, 0x1c, 0xd9, 0xae, 0x1d, 0xd9, 0xcd, 0xee, 0x66,
	0x13, 0x77, 0xb1, 0x1f, 0x85, 0x8d, 0x80, 0x92, 0x88, 0xa0, 0x4a, 0x3f, 0xa9, 0x21, 0x93, 0x1a,
	0xdd, 0xcd, 0xaa, 0x99, 0x51, 0x1c, 0x3a, 0x24, 0xc0, 0xbc, 0xb6, 0xba, 0x9e, 0x95, 0x13, 0x60,
	0xc7, 0xdb, 0xf3, 0x1c, 0x3b, 0xf2, 0x88, 0xcf, 0x73, 0xcd, 0xb7, 0x30, 0xff, 0xa8, 0x87, 0xfb,
	0xe2, 0xb0, 0x45, 0xda, 0xc1, 0x01, 0x8e, 0xb0, 0x8b, 0x2a, 0x30, 0xdd, 0x26, 0x6e, 0xe7, 0x00,
	0xeb, 0xda, 0x8a, 0xb6, 0x56, 0xb2, 0x44, 0x84, 0xaa, 0x70, 0x1e, 0xfb, 0x6e, 0x40, 0x3c, 0x3f,
	0xd2, 0x0b, 0xec, 0x49, 0x1c, 0x23, 0x1d, 0x66, 0x42, 0x6f, 0xdf, 0xc7, 0x34, 0xd4, 0x8b, 0x2b,
	0xc5, 0xb5, 0x92, 0x25, 0x43, 0x73, 0x1f, 0x2e, 0x31, 0x84, 0xed, 0x1e, 0xc3, 0x16, 0xc5, 0x76,
	0x0f, 0xa2, 0x06, 0xc0, 0x18, 0xef, 0xd8, 0xae, 0x4b, 0x05, 0x4c, 0x89, 0x9d, 0xdc, 0x77, 0x5d,
	0x8a, 0xb6, 0xe0, 0x1c, 0x0b, 0x18, 0x4c, 0xf9, 0x46, 0xad, 0xa1, 0xde, 0x46, 0x83, 0xf5, 0xb4,
	0x78, 0xae, 0xf9, 0x59, 0x4b, 0x22, 0xbd, 0x0c, 0xdc, 0xbc, 0x90, 0xd0, 0x43, 0x98, 0xe5, 0x3d,
	0x29, 0x0e, 0x0e, 0x6c, 0x07, 0xbb, 0x7a, 0xf1, 0x7f, 0xaa, 0x2f, 0xb2, 0x22, 0x4b, 0xd4, 0xa4,
	0x17, 0x63, 0xe1, 0x36, 0xe9, 0xe6, 0xb4, 0x98, 0x10, 0x16, 0x38, 0x10, 0x0e, 0x43, 0x8f, 0xf8,
	0x52, 0x83, 0x55, 0xb8, 0x10, 0xf2, 0x93, 0x24, 0x58, 0x59, 0x9c, 0x31, 0xb8, 0x3b, 0x30, 0x23,
	0x42, 0x01, 0x58, 0xcf, 0x04, 0xe4, 0x69, 0x96, 0xcc, 0x37, 0x7f, 0x68, 0x69, 0x54, 0xa9, 0x47,
	0xae, 0xa8, 0xe8, 0x09, 0xcc, 0xcb, 0xee, 0x03, 0xda, 0x9c, 0xda, 0x63, 0x4e, 0x14, 0xc6, 0xfa,
	0x0c, 0xac, 0x4d, 0x2a, 0x94, 0xef, 0xda, 0xda, 0x80, 0x18, 0xa8, 0x85, 0x1d, 0x42, 0x5d, 0x29,
	0x55, 0x1d, 0xca, 0x94, 0x1d, 0x24, 0x21, 0x81, 0x1f, 0x31, 0xc4, 0x5b, 0x30, 0xcd, 0x23, 0x01,
	0x68, 0x64, 0x01, 0xf2, 0xbe, 0x96, 0xc8, 0x36, 0xbf, 0x6a, 0x29, 0x3c, 0x29, 0x52, 0x5e, 0x78,
	0xe8, 0x31, 0xcc, 0x89, 0xc6, 0x03, 0xf2, 0x9c, 0xd6, 0x60, 0x96, 0x97, 0xc5, 0xe2, 0xa4, 0xf7,
	0x24, 0xb5, 0xc9, 0x6d, 0x4f, 0xdf, 0x34, 0x30, 0xfa, 0x2f, 0xeb, 0x76, 0xf2, 0x22, 0x95, 0x1a,
	0xdd, 0x06, 0x9d, 0xbf, 0xb9, 0xa9, 0x6b, 0x36, 0x49, 0xa4, 0x12, 0x0e, 0x15, 0x33, 0x52, 0xaf,
	0x61, 0x41, 0x51, 0x29, 0x18, 0xae, 0x8f, 0x7c, 0xc5, 0x53, 0xcd, 0x2c, 0x34, 0x0c, 0x60, 0x7e,
	0x2a, 0x64, 0x32, 0x97, 0x6a, 0x4f, 0x26, 0x73, 0xb4, 0x03, 0x57, 0x55, 0xb4, 0xc6, 0xbb, 0x73,
	0xab, 0xc3, 0x8d, 0x63, 0x0f, 0x8d, 0x10, 0x55, 0x1a, 0x6a, 0x42, 0x45, 0xfd, 0xad, 0xc1, 0x2a,
	0x63, 0xde, 0x22, 0x7e, 0x44, 0x6d, 0x27, 0x52, 0x3a, 0xf2, 0x1e, 0x2c, 0x3b, 0xe2, 0x79, 0x36,
	0xff, 0x25, 0x47, 0xd5, 0x82, 0x8d, 0xe0, 0x42, 0x45, 0x5d, 0x2f, 0xa6, 0xd8, 0xc8, 0x9a, 0x42,
	0xc9, 0xca, 0x5a, 0x54, 0x22, 0x99, 0x3f, 0x0b, 0xa3, 0x66, 0x91, 0x1e, 0x3d, 0x13, 0xb3, 0xa0,
	0x0e, 0xd4, 0x33, 0x58, 0x0e, 0xb8, 0x76, 0x4c, 0xb8, 0x9a, 0x12, 0x2e, 0x36, 0xf2, 0x68, 0x3b,
	0x48, 0x2f, 0x9f, 0x0d, 0x3b, 0x7c, 0xd7, 0xa0, 0x9e, 0xb8, 0xd9, 0x95, 0xc6, 0xbe, 0x0b, 0x4b,
	0xe2, 0x9a, 0xcf, 0x9c, 0xe3, 0x0a, 0x1d, 0x2e, 0x67, 0x53, 0xbc, 0x81, 0xcb, 0xaa, 0x5a, 0x31,
	0xc3, 0xf5, 0xd1, 0xff, 0x0f, 0xd2, 0x13, 0x2c, 0x28, 0x30, 0xcc, 0x2f, 0x85, 0x6c, 0xfe, 0xd2,
	0xcc, 0x13, 0xcc, 0x1f, 0x11, 0xa8, 0x29, 0xb9, 0x0d, 0x18, 0x78, 0x2c, 0xa0, 0x65, 0x05, 0x50,
	0x6c, 0xde, 0x51, 0x82, 0x4b, 0xeb, 0x4e, 0xb2, 0xe0, 0x2d, 0x58, 0x64, 0xf4, 0x9f, 0x6d, 0x3f,
	0x25, 0x8e, 0x1d, 0x11, 0x2a, 0x5d, 0xaa, 0xc3, 0x4c, 0x8f, 0x1f, 0x0e, 0x43, 0x41, 0x51, 0x86,
	0x68, 0x1e, 0x8a, 0x1d, 0xea, 0x89, 0x6f, 0xa8, 0xde, 0x9f, 0xe6, 0xde, 0x60, 0x13, 0x69, 0x95,
	0x31, 0x9a, 0xf4, 0x7e, 0x99, 0x76, 0xa8, 0x97, 0x56, 0xaa, 0x64, 0x95, 0x3b, 0xd4, 0x8b, 0x97,
	0x3d, 0x44, 0x56, 0x6e, 0x78, 0x0c, 0x9c, 0x07, 0xef, 0x7f, 0x1d, 0x1b, 0xda, 0xd1, 0xb1, 0xa1,
	0xfd, 0x3d, 0x36, 0xb4, 0x8f, 0x27, 0xc6, 0xd4, 0xd1, 0x89, 0x31, 0xf5, 0xe7, 0xc4, 0x98, 0x82,
	0x25, 0x8f, 0x64, 0xec, 0xf3, 0xb9, 0xf6, 0xea, 0xe6, 0xbe, 0x17, 0xbd, 0xeb, 0xec, 0x36, 0x1c,
	0xd2, 0x6e, 0xf6, 0x93, 0x36, 0x3c, 0x92, 0x88, 0x9a, 0x87, 0xfd, 0x2f, 0xd6, 0xe8, 0x43, 0x80,
	0xc3, 0xdd, 0x69, 0xf6, 0x9d, 0xba, 0xf5, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x27, 0xe9, 0xd5, 0xb9,
	0x36, 0x0f, 0x00, 0x00,
}

func (m *EventTxCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTxCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTxCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventScopeCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventScopeCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventScopeCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventScopeUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventScopeUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventScopeUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScopeReplaced != nil {
		{
			size, err := m.ScopeReplaced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventScopeRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventScopeRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventScopeRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSessionCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSessionCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSessionCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Session != nil {
		{
			size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionAddr) > 0 {
		i -= len(m.SessionAddr)
		copy(dAtA[i:], m.SessionAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SessionAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSessionUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSessionUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSessionUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionReplaced != nil {
		{
			size, err := m.SessionReplaced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Session != nil {
		{
			size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionAddr) > 0 {
		i -= len(m.SessionAddr)
		copy(dAtA[i:], m.SessionAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SessionAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSessionRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSessionRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSessionRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Session != nil {
		{
			size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionAddr) > 0 {
		i -= len(m.SessionAddr)
		copy(dAtA[i:], m.SessionAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SessionAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecordCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordAddr) > 0 {
		i -= len(m.RecordAddr)
		copy(dAtA[i:], m.RecordAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecordUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordReplaced != nil {
		{
			size, err := m.RecordReplaced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordAddr) > 0 {
		i -= len(m.RecordAddr)
		copy(dAtA[i:], m.RecordAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecordRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordAddr) > 0 {
		i -= len(m.RecordAddr)
		copy(dAtA[i:], m.RecordAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventScopeSpecificationCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventScopeSpecificationCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventScopeSpecificationCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScopeSpecification != nil {
		{
			size, err := m.ScopeSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeSpecificationAddr) > 0 {
		i -= len(m.ScopeSpecificationAddr)
		copy(dAtA[i:], m.ScopeSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventScopeSpecificationUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventScopeSpecificationUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventScopeSpecificationUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScopeSpecificationReplaced != nil {
		{
			size, err := m.ScopeSpecificationReplaced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ScopeSpecification != nil {
		{
			size, err := m.ScopeSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeSpecificationAddr) > 0 {
		i -= len(m.ScopeSpecificationAddr)
		copy(dAtA[i:], m.ScopeSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventScopeSpecificationRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventScopeSpecificationRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventScopeSpecificationRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScopeSpecification != nil {
		{
			size, err := m.ScopeSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeSpecificationAddr) > 0 {
		i -= len(m.ScopeSpecificationAddr)
		copy(dAtA[i:], m.ScopeSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventContractSpecificationCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventContractSpecificationCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventContractSpecificationCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractSpecification != nil {
		{
			size, err := m.ContractSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractSpecificationAddr) > 0 {
		i -= len(m.ContractSpecificationAddr)
		copy(dAtA[i:], m.ContractSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventContractSpecificationUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventContractSpecificationUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventContractSpecificationUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractSpecificationReplaced != nil {
		{
			size, err := m.ContractSpecificationReplaced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ContractSpecification != nil {
		{
			size, err := m.ContractSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractSpecificationAddr) > 0 {
		i -= len(m.ContractSpecificationAddr)
		copy(dAtA[i:], m.ContractSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventContractSpecificationRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventContractSpecificationRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventContractSpecificationRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractSpecification != nil {
		{
			size, err := m.ContractSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractSpecificationAddr) > 0 {
		i -= len(m.ContractSpecificationAddr)
		copy(dAtA[i:], m.ContractSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecordSpecificationCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordSpecificationCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordSpecificationCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordSpecification != nil {
		{
			size, err := m.RecordSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordSpecificationAddr) > 0 {
		i -= len(m.RecordSpecificationAddr)
		copy(dAtA[i:], m.RecordSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecordSpecificationUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordSpecificationUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordSpecificationUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordSpecificationReplaced != nil {
		{
			size, err := m.RecordSpecificationReplaced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RecordSpecification != nil {
		{
			size, err := m.RecordSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordSpecificationAddr) > 0 {
		i -= len(m.RecordSpecificationAddr)
		copy(dAtA[i:], m.RecordSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecordSpecificationRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordSpecificationRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordSpecificationRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordSpecification != nil {
		{
			size, err := m.RecordSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordSpecificationAddr) > 0 {
		i -= len(m.RecordSpecificationAddr)
		copy(dAtA[i:], m.RecordSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOSLocatorCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOSLocatorCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOSLocatorCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOSLocatorUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOSLocatorUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOSLocatorUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UriReplaced) > 0 {
		i -= len(m.UriReplaced)
		copy(dAtA[i:], m.UriReplaced)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.UriReplaced)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOSLocatorRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOSLocatorRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOSLocatorRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventTxCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventScopeCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventScopeUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ScopeReplaced != nil {
		l = m.ScopeReplaced.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventScopeRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSessionCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSessionUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SessionReplaced != nil {
		l = m.SessionReplaced.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSessionRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRecordCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRecordUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RecordReplaced != nil {
		l = m.RecordReplaced.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRecordRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventScopeSpecificationCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ScopeSpecification != nil {
		l = m.ScopeSpecification.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventScopeSpecificationUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ScopeSpecification != nil {
		l = m.ScopeSpecification.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ScopeSpecificationReplaced != nil {
		l = m.ScopeSpecificationReplaced.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventScopeSpecificationRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ScopeSpecification != nil {
		l = m.ScopeSpecification.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventContractSpecificationCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ContractSpecification != nil {
		l = m.ContractSpecification.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventContractSpecificationUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ContractSpecification != nil {
		l = m.ContractSpecification.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ContractSpecificationReplaced != nil {
		l = m.ContractSpecificationReplaced.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventContractSpecificationRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ContractSpecification != nil {
		l = m.ContractSpecification.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRecordSpecificationCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RecordSpecification != nil {
		l = m.RecordSpecification.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRecordSpecificationUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RecordSpecification != nil {
		l = m.RecordSpecification.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RecordSpecificationReplaced != nil {
		l = m.RecordSpecificationReplaced.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRecordSpecificationRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RecordSpecification != nil {
		l = m.RecordSpecification.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOSLocatorCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOSLocatorUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.UriReplaced)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOSLocatorRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventTxCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTxCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTxCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventScopeCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventScopeCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventScopeCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventScopeUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventScopeUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventScopeUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeReplaced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeReplaced == nil {
				m.ScopeReplaced = &Scope{}
			}
			if err := m.ScopeReplaced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventScopeRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventScopeRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventScopeRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSessionCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSessionCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSessionCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSessionUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSessionUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSessionUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionReplaced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionReplaced == nil {
				m.SessionReplaced = &Session{}
			}
			if err := m.SessionReplaced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSessionRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSessionRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSessionRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecordCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecordUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordReplaced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordReplaced == nil {
				m.RecordReplaced = &Record{}
			}
			if err := m.RecordReplaced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecordRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventScopeSpecificationCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventScopeSpecificationCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventScopeSpecificationCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeSpecification == nil {
				m.ScopeSpecification = &ScopeSpecification{}
			}
			if err := m.ScopeSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventScopeSpecificationUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventScopeSpecificationUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventScopeSpecificationUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeSpecification == nil {
				m.ScopeSpecification = &ScopeSpecification{}
			}
			if err := m.ScopeSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecificationReplaced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeSpecificationReplaced == nil {
				m.ScopeSpecificationReplaced = &Scope{}
			}
			if err := m.ScopeSpecificationReplaced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventScopeSpecificationRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventScopeSpecificationRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventScopeSpecificationRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeSpecification == nil {
				m.ScopeSpecification = &ScopeSpecification{}
			}
			if err := m.ScopeSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventContractSpecificationCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventContractSpecificationCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventContractSpecificationCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractSpecification == nil {
				m.ContractSpecification = &ContractSpecification{}
			}
			if err := m.ContractSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventContractSpecificationUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventContractSpecificationUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventContractSpecificationUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractSpecification == nil {
				m.ContractSpecification = &ContractSpecification{}
			}
			if err := m.ContractSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationReplaced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractSpecificationReplaced == nil {
				m.ContractSpecificationReplaced = &ContractSpecification{}
			}
			if err := m.ContractSpecificationReplaced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventContractSpecificationRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventContractSpecificationRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventContractSpecificationRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractSpecification == nil {
				m.ContractSpecification = &ContractSpecification{}
			}
			if err := m.ContractSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecordSpecificationCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordSpecificationCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordSpecificationCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordSpecification == nil {
				m.RecordSpecification = &RecordSpecification{}
			}
			if err := m.RecordSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecordSpecificationUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordSpecificationUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordSpecificationUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordSpecification == nil {
				m.RecordSpecification = &RecordSpecification{}
			}
			if err := m.RecordSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecificationReplaced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordSpecificationReplaced == nil {
				m.RecordSpecificationReplaced = &RecordSpecification{}
			}
			if err := m.RecordSpecificationReplaced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecordSpecificationRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordSpecificationRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordSpecificationRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordSpecification == nil {
				m.RecordSpecification = &RecordSpecification{}
			}
			if err := m.RecordSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOSLocatorCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOSLocatorCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOSLocatorCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOSLocatorUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOSLocatorUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOSLocatorUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriReplaced", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UriReplaced = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOSLocatorRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOSLocatorRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOSLocatorRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
