// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/metadata/v1/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventTxCompleted is an event message indicating that a TX has completed.
type EventTxCompleted struct {
	// module is the module the TX belongs to.
	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// endpoint is the rpc endpoint that was just completed.
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// senders are the bech32 address strings of the signers of this TX.
	Signers []string `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *EventTxCompleted) Reset()         { *m = EventTxCompleted{} }
func (m *EventTxCompleted) String() string { return proto.CompactTextString(m) }
func (*EventTxCompleted) ProtoMessage()    {}
func (*EventTxCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{0}
}
func (m *EventTxCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTxCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTxCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTxCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTxCompleted.Merge(m, src)
}
func (m *EventTxCompleted) XXX_Size() int {
	return m.Size()
}
func (m *EventTxCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTxCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventTxCompleted proto.InternalMessageInfo

func (m *EventTxCompleted) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *EventTxCompleted) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *EventTxCompleted) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

// EventScopeCreated is an event message indicating a scope has been created.
type EventScopeCreated struct {
	// scope_addr is the bech32 address string of the scope id that was created.
	ScopeAddr string `protobuf:"bytes,1,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty"`
}

func (m *EventScopeCreated) Reset()         { *m = EventScopeCreated{} }
func (m *EventScopeCreated) String() string { return proto.CompactTextString(m) }
func (*EventScopeCreated) ProtoMessage()    {}
func (*EventScopeCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{1}
}
func (m *EventScopeCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventScopeCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventScopeCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventScopeCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventScopeCreated.Merge(m, src)
}
func (m *EventScopeCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventScopeCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventScopeCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventScopeCreated proto.InternalMessageInfo

func (m *EventScopeCreated) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

// EventScopeUpdated is an event message indicating a scope has been updated.
type EventScopeUpdated struct {
	// scope_addr is the bech32 address string of the scope id that was updated.
	ScopeAddr string `protobuf:"bytes,1,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty"`
}

func (m *EventScopeUpdated) Reset()         { *m = EventScopeUpdated{} }
func (m *EventScopeUpdated) String() string { return proto.CompactTextString(m) }
func (*EventScopeUpdated) ProtoMessage()    {}
func (*EventScopeUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{2}
}
func (m *EventScopeUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventScopeUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventScopeUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventScopeUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventScopeUpdated.Merge(m, src)
}
func (m *EventScopeUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventScopeUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventScopeUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventScopeUpdated proto.InternalMessageInfo

func (m *EventScopeUpdated) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

// EventScopeRemoved is an event message indicating a scope has been removed.
type EventScopeRemoved struct {
	// scope_addr is the bech32 address string of the scope id that was removed.
	ScopeAddr string `protobuf:"bytes,1,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty"`
}

func (m *EventScopeRemoved) Reset()         { *m = EventScopeRemoved{} }
func (m *EventScopeRemoved) String() string { return proto.CompactTextString(m) }
func (*EventScopeRemoved) ProtoMessage()    {}
func (*EventScopeRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{3}
}
func (m *EventScopeRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventScopeRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventScopeRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventScopeRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventScopeRemoved.Merge(m, src)
}
func (m *EventScopeRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventScopeRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventScopeRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventScopeRemoved proto.InternalMessageInfo

func (m *EventScopeRemoved) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

// EventSessionCreated is an event message indicating a session has been created.
type EventSessionCreated struct {
	// session_addr is the bech32 address string of the session id that was created.
	SessionAddr string `protobuf:"bytes,1,opt,name=session_addr,json=sessionAddr,proto3" json:"session_addr,omitempty"`
	// scope_addr is the bech32 address string of the scope id this session belongs to.
	ScopeAddr string `protobuf:"bytes,2,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty"`
}

func (m *EventSessionCreated) Reset()         { *m = EventSessionCreated{} }
func (m *EventSessionCreated) String() string { return proto.CompactTextString(m) }
func (*EventSessionCreated) ProtoMessage()    {}
func (*EventSessionCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{4}
}
func (m *EventSessionCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSessionCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSessionCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSessionCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSessionCreated.Merge(m, src)
}
func (m *EventSessionCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventSessionCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSessionCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventSessionCreated proto.InternalMessageInfo

func (m *EventSessionCreated) GetSessionAddr() string {
	if m != nil {
		return m.SessionAddr
	}
	return ""
}

func (m *EventSessionCreated) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

// EventSessionUpdated is an event message indicating a session has been updated.
type EventSessionUpdated struct {
	// session_addr is the bech32 address string of the session id that was updated.
	SessionAddr string `protobuf:"bytes,1,opt,name=session_addr,json=sessionAddr,proto3" json:"session_addr,omitempty"`
	// scope_addr is the bech32 address string of the scope id this session belongs to.
	ScopeAddr string `protobuf:"bytes,2,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty"`
}

func (m *EventSessionUpdated) Reset()         { *m = EventSessionUpdated{} }
func (m *EventSessionUpdated) String() string { return proto.CompactTextString(m) }
func (*EventSessionUpdated) ProtoMessage()    {}
func (*EventSessionUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{5}
}
func (m *EventSessionUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSessionUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSessionUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSessionUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSessionUpdated.Merge(m, src)
}
func (m *EventSessionUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventSessionUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSessionUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventSessionUpdated proto.InternalMessageInfo

func (m *EventSessionUpdated) GetSessionAddr() string {
	if m != nil {
		return m.SessionAddr
	}
	return ""
}

func (m *EventSessionUpdated) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

// EventSessionRemoved is an event message indicating a session has been removed.
type EventSessionRemoved struct {
	// session_addr is the bech32 address string of the session id that was removed.
	SessionAddr string `protobuf:"bytes,1,opt,name=session_addr,json=sessionAddr,proto3" json:"session_addr,omitempty"`
	// scope_addr is the bech32 address string of the scope id this session belongs to.
	ScopeAddr string `protobuf:"bytes,2,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty"`
}

func (m *EventSessionRemoved) Reset()         { *m = EventSessionRemoved{} }
func (m *EventSessionRemoved) String() string { return proto.CompactTextString(m) }
func (*EventSessionRemoved) ProtoMessage()    {}
func (*EventSessionRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{6}
}
func (m *EventSessionRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSessionRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSessionRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSessionRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSessionRemoved.Merge(m, src)
}
func (m *EventSessionRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventSessionRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSessionRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventSessionRemoved proto.InternalMessageInfo

func (m *EventSessionRemoved) GetSessionAddr() string {
	if m != nil {
		return m.SessionAddr
	}
	return ""
}

func (m *EventSessionRemoved) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

// EventRecordCreated is an event message indicating a record has been created.
type EventRecordCreated struct {
	// record_addr is the bech32 address string of the record id that was created.
	RecordAddr string `protobuf:"bytes,1,opt,name=record_addr,json=recordAddr,proto3" json:"record_addr,omitempty"`
	// session_addr is the bech32 address string of the session id this record belongs to.
	SessionAddr string `protobuf:"bytes,2,opt,name=session_addr,json=sessionAddr,proto3" json:"session_addr,omitempty"`
	// scope_addr is the bech32 address string of the scope id this record belongs to.
	ScopeAddr string `protobuf:"bytes,3,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty"`
}

func (m *EventRecordCreated) Reset()         { *m = EventRecordCreated{} }
func (m *EventRecordCreated) String() string { return proto.CompactTextString(m) }
func (*EventRecordCreated) ProtoMessage()    {}
func (*EventRecordCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{7}
}
func (m *EventRecordCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordCreated.Merge(m, src)
}
func (m *EventRecordCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordCreated proto.InternalMessageInfo

func (m *EventRecordCreated) GetRecordAddr() string {
	if m != nil {
		return m.RecordAddr
	}
	return ""
}

func (m *EventRecordCreated) GetSessionAddr() string {
	if m != nil {
		return m.SessionAddr
	}
	return ""
}

func (m *EventRecordCreated) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

// EventRecordUpdated is an event message indicating a record has been updated.
type EventRecordUpdated struct {
	// record_addr is the bech32 address string of the record id that was updated.
	RecordAddr string `protobuf:"bytes,1,opt,name=record_addr,json=recordAddr,proto3" json:"record_addr,omitempty"`
	// session_addr is the bech32 address string of the session id this record belongs to.
	SessionAddr string `protobuf:"bytes,2,opt,name=session_addr,json=sessionAddr,proto3" json:"session_addr,omitempty"`
	// scope_addr is the bech32 address string of the scope id this record belongs to.
	ScopeAddr string `protobuf:"bytes,3,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty"`
}

func (m *EventRecordUpdated) Reset()         { *m = EventRecordUpdated{} }
func (m *EventRecordUpdated) String() string { return proto.CompactTextString(m) }
func (*EventRecordUpdated) ProtoMessage()    {}
func (*EventRecordUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{8}
}
func (m *EventRecordUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordUpdated.Merge(m, src)
}
func (m *EventRecordUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordUpdated proto.InternalMessageInfo

func (m *EventRecordUpdated) GetRecordAddr() string {
	if m != nil {
		return m.RecordAddr
	}
	return ""
}

func (m *EventRecordUpdated) GetSessionAddr() string {
	if m != nil {
		return m.SessionAddr
	}
	return ""
}

func (m *EventRecordUpdated) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

// EventRecordRemoved is an event message indicating a record has been removed.
type EventRecordRemoved struct {
	// record is the bech32 address string of the record id that was removed.
	RecordAddr string `protobuf:"bytes,1,opt,name=record_addr,json=recordAddr,proto3" json:"record_addr,omitempty"`
	// session_addr is the bech32 address string of the session id this record belongs to.
	SessionAddr string `protobuf:"bytes,2,opt,name=session_addr,json=sessionAddr,proto3" json:"session_addr,omitempty"`
	// scope_addr is the bech32 address string of the scope id this record belongs to.
	ScopeAddr string `protobuf:"bytes,3,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty"`
}

func (m *EventRecordRemoved) Reset()         { *m = EventRecordRemoved{} }
func (m *EventRecordRemoved) String() string { return proto.CompactTextString(m) }
func (*EventRecordRemoved) ProtoMessage()    {}
func (*EventRecordRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{9}
}
func (m *EventRecordRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordRemoved.Merge(m, src)
}
func (m *EventRecordRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordRemoved proto.InternalMessageInfo

func (m *EventRecordRemoved) GetRecordAddr() string {
	if m != nil {
		return m.RecordAddr
	}
	return ""
}

func (m *EventRecordRemoved) GetSessionAddr() string {
	if m != nil {
		return m.SessionAddr
	}
	return ""
}

func (m *EventRecordRemoved) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

// EventScopeSpecificationCreated is an event message indicating a scope specification has been created.
type EventScopeSpecificationCreated struct {
	// scope_specification_addr is the bech32 address string of the specification id of the scope specification that was
	// created.
	ScopeSpecificationAddr string `protobuf:"bytes,1,opt,name=scope_specification_addr,json=scopeSpecificationAddr,proto3" json:"scope_specification_addr,omitempty"`
}

func (m *EventScopeSpecificationCreated) Reset()         { *m = EventScopeSpecificationCreated{} }
func (m *EventScopeSpecificationCreated) String() string { return proto.CompactTextString(m) }
func (*EventScopeSpecificationCreated) ProtoMessage()    {}
func (*EventScopeSpecificationCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{10}
}
func (m *EventScopeSpecificationCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventScopeSpecificationCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventScopeSpecificationCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventScopeSpecificationCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventScopeSpecificationCreated.Merge(m, src)
}
func (m *EventScopeSpecificationCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventScopeSpecificationCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventScopeSpecificationCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventScopeSpecificationCreated proto.InternalMessageInfo

func (m *EventScopeSpecificationCreated) GetScopeSpecificationAddr() string {
	if m != nil {
		return m.ScopeSpecificationAddr
	}
	return ""
}

// EventScopeSpecificationUpdated is an event message indicating a scope specification has been updated.
type EventScopeSpecificationUpdated struct {
	// scope_specification_addr is the bech32 address string of the specification id of the scope specification that was
	// updated.
	ScopeSpecificationAddr string `protobuf:"bytes,1,opt,name=scope_specification_addr,json=scopeSpecificationAddr,proto3" json:"scope_specification_addr,omitempty"`
}

func (m *EventScopeSpecificationUpdated) Reset()         { *m = EventScopeSpecificationUpdated{} }
func (m *EventScopeSpecificationUpdated) String() string { return proto.CompactTextString(m) }
func (*EventScopeSpecificationUpdated) ProtoMessage()    {}
func (*EventScopeSpecificationUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{11}
}
func (m *EventScopeSpecificationUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventScopeSpecificationUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventScopeSpecificationUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventScopeSpecificationUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventScopeSpecificationUpdated.Merge(m, src)
}
func (m *EventScopeSpecificationUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventScopeSpecificationUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventScopeSpecificationUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventScopeSpecificationUpdated proto.InternalMessageInfo

func (m *EventScopeSpecificationUpdated) GetScopeSpecificationAddr() string {
	if m != nil {
		return m.ScopeSpecificationAddr
	}
	return ""
}

// EventScopeSpecificationRemoved is an event message indicating a scope specification has been removed.
type EventScopeSpecificationRemoved struct {
	// scope_specification_addr is the bech32 address string of the specification id of the scope specification that was
	// removed.
	ScopeSpecificationAddr string `protobuf:"bytes,1,opt,name=scope_specification_addr,json=scopeSpecificationAddr,proto3" json:"scope_specification_addr,omitempty"`
}

func (m *EventScopeSpecificationRemoved) Reset()         { *m = EventScopeSpecificationRemoved{} }
func (m *EventScopeSpecificationRemoved) String() string { return proto.CompactTextString(m) }
func (*EventScopeSpecificationRemoved) ProtoMessage()    {}
func (*EventScopeSpecificationRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{12}
}
func (m *EventScopeSpecificationRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventScopeSpecificationRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventScopeSpecificationRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventScopeSpecificationRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventScopeSpecificationRemoved.Merge(m, src)
}
func (m *EventScopeSpecificationRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventScopeSpecificationRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventScopeSpecificationRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventScopeSpecificationRemoved proto.InternalMessageInfo

func (m *EventScopeSpecificationRemoved) GetScopeSpecificationAddr() string {
	if m != nil {
		return m.ScopeSpecificationAddr
	}
	return ""
}

// EventContractSpecificationCreated is an event message indicating a contract specification has been created.
type EventContractSpecificationCreated struct {
	// contract_specification_addr is the bech32 address string of the specification id of the contract specification that
	// was created.
	ContractSpecificationAddr string `protobuf:"bytes,1,opt,name=contract_specification_addr,json=contractSpecificationAddr,proto3" json:"contract_specification_addr,omitempty"`
}

func (m *EventContractSpecificationCreated) Reset()         { *m = EventContractSpecificationCreated{} }
func (m *EventContractSpecificationCreated) String() string { return proto.CompactTextString(m) }
func (*EventContractSpecificationCreated) ProtoMessage()    {}
func (*EventContractSpecificationCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{13}
}
func (m *EventContractSpecificationCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventContractSpecificationCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventContractSpecificationCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventContractSpecificationCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventContractSpecificationCreated.Merge(m, src)
}
func (m *EventContractSpecificationCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventContractSpecificationCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventContractSpecificationCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventContractSpecificationCreated proto.InternalMessageInfo

func (m *EventContractSpecificationCreated) GetContractSpecificationAddr() string {
	if m != nil {
		return m.ContractSpecificationAddr
	}
	return ""
}

// EventContractSpecificationUpdated is an event message indicating a contract specification has been updated.
type EventContractSpecificationUpdated struct {
	// contract_specification_addr is the bech32 address string of the specification id of the contract specification that
	// was updated.
	ContractSpecificationAddr string `protobuf:"bytes,1,opt,name=contract_specification_addr,json=contractSpecificationAddr,proto3" json:"contract_specification_addr,omitempty"`
}

func (m *EventContractSpecificationUpdated) Reset()         { *m = EventContractSpecificationUpdated{} }
func (m *EventContractSpecificationUpdated) String() string { return proto.CompactTextString(m) }
func (*EventContractSpecificationUpdated) ProtoMessage()    {}
func (*EventContractSpecificationUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{14}
}
func (m *EventContractSpecificationUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventContractSpecificationUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventContractSpecificationUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventContractSpecificationUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventContractSpecificationUpdated.Merge(m, src)
}
func (m *EventContractSpecificationUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventContractSpecificationUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventContractSpecificationUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventContractSpecificationUpdated proto.InternalMessageInfo

func (m *EventContractSpecificationUpdated) GetContractSpecificationAddr() string {
	if m != nil {
		return m.ContractSpecificationAddr
	}
	return ""
}

// EventContractSpecificationRemoved is an event message indicating a contract specification has been removed.
type EventContractSpecificationRemoved struct {
	// contract_specification_addr is the bech32 address string of the specification id of the contract specification that
	// was removed.
	ContractSpecificationAddr string `protobuf:"bytes,1,opt,name=contract_specification_addr,json=contractSpecificationAddr,proto3" json:"contract_specification_addr,omitempty"`
}

func (m *EventContractSpecificationRemoved) Reset()         { *m = EventContractSpecificationRemoved{} }
func (m *EventContractSpecificationRemoved) String() string { return proto.CompactTextString(m) }
func (*EventContractSpecificationRemoved) ProtoMessage()    {}
func (*EventContractSpecificationRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{15}
}
func (m *EventContractSpecificationRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventContractSpecificationRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventContractSpecificationRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventContractSpecificationRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventContractSpecificationRemoved.Merge(m, src)
}
func (m *EventContractSpecificationRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventContractSpecificationRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventContractSpecificationRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventContractSpecificationRemoved proto.InternalMessageInfo

func (m *EventContractSpecificationRemoved) GetContractSpecificationAddr() string {
	if m != nil {
		return m.ContractSpecificationAddr
	}
	return ""
}

// EventRecordSpecificationCreated is an event message indicating a record specification has been created.
type EventRecordSpecificationCreated struct {
	// record_specification_addr is the bech32 address string of the specification id of the record specification that was
	// created.
	RecordSpecificationAddr string `protobuf:"bytes,1,opt,name=record_specification_addr,json=recordSpecificationAddr,proto3" json:"record_specification_addr,omitempty"`
	// contract_specification_addr is the bech32 address string of the contract specification id this record specification
	// belongs to.
	ContractSpecificationAddr string `protobuf:"bytes,2,opt,name=contract_specification_addr,json=contractSpecificationAddr,proto3" json:"contract_specification_addr,omitempty"`
}

func (m *EventRecordSpecificationCreated) Reset()         { *m = EventRecordSpecificationCreated{} }
func (m *EventRecordSpecificationCreated) String() string { return proto.CompactTextString(m) }
func (*EventRecordSpecificationCreated) ProtoMessage()    {}
func (*EventRecordSpecificationCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{16}
}
func (m *EventRecordSpecificationCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordSpecificationCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordSpecificationCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordSpecificationCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordSpecificationCreated.Merge(m, src)
}
func (m *EventRecordSpecificationCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordSpecificationCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordSpecificationCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordSpecificationCreated proto.InternalMessageInfo

func (m *EventRecordSpecificationCreated) GetRecordSpecificationAddr() string {
	if m != nil {
		return m.RecordSpecificationAddr
	}
	return ""
}

func (m *EventRecordSpecificationCreated) GetContractSpecificationAddr() string {
	if m != nil {
		return m.ContractSpecificationAddr
	}
	return ""
}

// EventRecordSpecificationUpdated is an event message indicating a record specification has been updated.
type EventRecordSpecificationUpdated struct {
	// record_specification_addr is the bech32 address string of the specification id of the record specification that was
	// updated.
	RecordSpecificationAddr string `protobuf:"bytes,1,opt,name=record_specification_addr,json=recordSpecificationAddr,proto3" json:"record_specification_addr,omitempty"`
	// contract_specification_addr is the bech32 address string of the contract specification id this record specification
	// belongs to.
	ContractSpecificationAddr string `protobuf:"bytes,2,opt,name=contract_specification_addr,json=contractSpecificationAddr,proto3" json:"contract_specification_addr,omitempty"`
}

func (m *EventRecordSpecificationUpdated) Reset()         { *m = EventRecordSpecificationUpdated{} }
func (m *EventRecordSpecificationUpdated) String() string { return proto.CompactTextString(m) }
func (*EventRecordSpecificationUpdated) ProtoMessage()    {}
func (*EventRecordSpecificationUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{17}
}
func (m *EventRecordSpecificationUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordSpecificationUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordSpecificationUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordSpecificationUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordSpecificationUpdated.Merge(m, src)
}
func (m *EventRecordSpecificationUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordSpecificationUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordSpecificationUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordSpecificationUpdated proto.InternalMessageInfo

func (m *EventRecordSpecificationUpdated) GetRecordSpecificationAddr() string {
	if m != nil {
		return m.RecordSpecificationAddr
	}
	return ""
}

func (m *EventRecordSpecificationUpdated) GetContractSpecificationAddr() string {
	if m != nil {
		return m.ContractSpecificationAddr
	}
	return ""
}

// EventRecordSpecificationRemoved is an event message indicating a record specification has been removed.
type EventRecordSpecificationRemoved struct {
	// record_specification_addr is the bech32 address string of the specification id of the record specification that was
	// removed.
	RecordSpecificationAddr string `protobuf:"bytes,1,opt,name=record_specification_addr,json=recordSpecificationAddr,proto3" json:"record_specification_addr,omitempty"`
	// contract_specification_addr is the bech32 address string of the contract specification id this record specification
	// belongs to.
	ContractSpecificationAddr string `protobuf:"bytes,2,opt,name=contract_specification_addr,json=contractSpecificationAddr,proto3" json:"contract_specification_addr,omitempty"`
}

func (m *EventRecordSpecificationRemoved) Reset()         { *m = EventRecordSpecificationRemoved{} }
func (m *EventRecordSpecificationRemoved) String() string { return proto.CompactTextString(m) }
func (*EventRecordSpecificationRemoved) ProtoMessage()    {}
func (*EventRecordSpecificationRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{18}
}
func (m *EventRecordSpecificationRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecordSpecificationRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecordSpecificationRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecordSpecificationRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecordSpecificationRemoved.Merge(m, src)
}
func (m *EventRecordSpecificationRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventRecordSpecificationRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecordSpecificationRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecordSpecificationRemoved proto.InternalMessageInfo

func (m *EventRecordSpecificationRemoved) GetRecordSpecificationAddr() string {
	if m != nil {
		return m.RecordSpecificationAddr
	}
	return ""
}

func (m *EventRecordSpecificationRemoved) GetContractSpecificationAddr() string {
	if m != nil {
		return m.ContractSpecificationAddr
	}
	return ""
}

// EventOSLocatorCreated is an event message indicating an object store locator has been created.
type EventOSLocatorCreated struct {
	// address is the address in the object store locator that was created.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// uri is the uri in the object store locator that was created.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (m *EventOSLocatorCreated) Reset()         { *m = EventOSLocatorCreated{} }
func (m *EventOSLocatorCreated) String() string { return proto.CompactTextString(m) }
func (*EventOSLocatorCreated) ProtoMessage()    {}
func (*EventOSLocatorCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{19}
}
func (m *EventOSLocatorCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOSLocatorCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOSLocatorCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOSLocatorCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOSLocatorCreated.Merge(m, src)
}
func (m *EventOSLocatorCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventOSLocatorCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOSLocatorCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventOSLocatorCreated proto.InternalMessageInfo

func (m *EventOSLocatorCreated) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventOSLocatorCreated) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// EventOSLocatorUpdated is an event message indicating an object store locator has been updated.
type EventOSLocatorUpdated struct {
	// address is the address in the object store locator that was updated.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// uri is the new uri that was just set.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// uri_replaced is the previous uri for this address (that has now been overwritten).
	UriReplaced string `protobuf:"bytes,3,opt,name=uri_replaced,json=uriReplaced,proto3" json:"uri_replaced,omitempty"`
}

func (m *EventOSLocatorUpdated) Reset()         { *m = EventOSLocatorUpdated{} }
func (m *EventOSLocatorUpdated) String() string { return proto.CompactTextString(m) }
func (*EventOSLocatorUpdated) ProtoMessage()    {}
func (*EventOSLocatorUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{20}
}
func (m *EventOSLocatorUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOSLocatorUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOSLocatorUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOSLocatorUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOSLocatorUpdated.Merge(m, src)
}
func (m *EventOSLocatorUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventOSLocatorUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOSLocatorUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventOSLocatorUpdated proto.InternalMessageInfo

func (m *EventOSLocatorUpdated) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventOSLocatorUpdated) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *EventOSLocatorUpdated) GetUriReplaced() string {
	if m != nil {
		return m.UriReplaced
	}
	return ""
}

// EventOSLocatorRemoved is an event message indicating an object store locator has been removed.
type EventOSLocatorRemoved struct {
	// address is the address in the object store locator that was removed.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// uri is the uri in the object store locator that was removed.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (m *EventOSLocatorRemoved) Reset()         { *m = EventOSLocatorRemoved{} }
func (m *EventOSLocatorRemoved) String() string { return proto.CompactTextString(m) }
func (*EventOSLocatorRemoved) ProtoMessage()    {}
func (*EventOSLocatorRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_476cf6cf9459cf25, []int{21}
}
func (m *EventOSLocatorRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOSLocatorRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOSLocatorRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOSLocatorRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOSLocatorRemoved.Merge(m, src)
}
func (m *EventOSLocatorRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventOSLocatorRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOSLocatorRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventOSLocatorRemoved proto.InternalMessageInfo

func (m *EventOSLocatorRemoved) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventOSLocatorRemoved) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func init() {
	proto.RegisterType((*EventTxCompleted)(nil), "provenance.metadata.v1.EventTxCompleted")
	proto.RegisterType((*EventScopeCreated)(nil), "provenance.metadata.v1.EventScopeCreated")
	proto.RegisterType((*EventScopeUpdated)(nil), "provenance.metadata.v1.EventScopeUpdated")
	proto.RegisterType((*EventScopeRemoved)(nil), "provenance.metadata.v1.EventScopeRemoved")
	proto.RegisterType((*EventSessionCreated)(nil), "provenance.metadata.v1.EventSessionCreated")
	proto.RegisterType((*EventSessionUpdated)(nil), "provenance.metadata.v1.EventSessionUpdated")
	proto.RegisterType((*EventSessionRemoved)(nil), "provenance.metadata.v1.EventSessionRemoved")
	proto.RegisterType((*EventRecordCreated)(nil), "provenance.metadata.v1.EventRecordCreated")
	proto.RegisterType((*EventRecordUpdated)(nil), "provenance.metadata.v1.EventRecordUpdated")
	proto.RegisterType((*EventRecordRemoved)(nil), "provenance.metadata.v1.EventRecordRemoved")
	proto.RegisterType((*EventScopeSpecificationCreated)(nil), "provenance.metadata.v1.EventScopeSpecificationCreated")
	proto.RegisterType((*EventScopeSpecificationUpdated)(nil), "provenance.metadata.v1.EventScopeSpecificationUpdated")
	proto.RegisterType((*EventScopeSpecificationRemoved)(nil), "provenance.metadata.v1.EventScopeSpecificationRemoved")
	proto.RegisterType((*EventContractSpecificationCreated)(nil), "provenance.metadata.v1.EventContractSpecificationCreated")
	proto.RegisterType((*EventContractSpecificationUpdated)(nil), "provenance.metadata.v1.EventContractSpecificationUpdated")
	proto.RegisterType((*EventContractSpecificationRemoved)(nil), "provenance.metadata.v1.EventContractSpecificationRemoved")
	proto.RegisterType((*EventRecordSpecificationCreated)(nil), "provenance.metadata.v1.EventRecordSpecificationCreated")
	proto.RegisterType((*EventRecordSpecificationUpdated)(nil), "provenance.metadata.v1.EventRecordSpecificationUpdated")
	proto.RegisterType((*EventRecordSpecificationRemoved)(nil), "provenance.metadata.v1.EventRecordSpecificationRemoved")
	proto.RegisterType((*EventOSLocatorCreated)(nil), "provenance.metadata.v1.EventOSLocatorCreated")
	proto.RegisterType((*EventOSLocatorUpdated)(nil), "provenance.metadata.v1.EventOSLocatorUpdated")
	proto.RegisterType((*EventOSLocatorRemoved)(nil), "provenance.metadata.v1.EventOSLocatorRemoved")
}

func init() {
	proto.RegisterFile("provenance/metadata/v1/events.proto", fileDescriptor_476cf6cf9459cf25)
}

var fileDescriptor_476cf6cf9459cf25 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0x56, 0xda, 0xe8, 0x2b, 0x87, 0x11, 0x44, 0x49, 0x41, 0x64, 0x5b, 0xb9, 0xec,
	0x42, 0xa2, 0x01, 0x07, 0xc4, 0x01, 0x09, 0x2a, 0x6e, 0x48, 0xa0, 0x14, 0x84, 0xb4, 0xcb, 0xf0,
	0xec, 0xb7, 0x61, 0xd1, 0xc4, 0x91, 0xed, 0x84, 0xf1, 0x2d, 0xf8, 0x02, 0x7c, 0x1f, 0x8e, 0x3b,
	0x72, 0x44, 0xed, 0x17, 0x41, 0x71, 0x63, 0x1a, 0xda, 0x8e, 0xa8, 0x94, 0x0d, 0x6e, 0x79, 0xcf,
	0x7e, 0xbf, 0xff, 0x3f, 0xff, 0x58, 0x91, 0xe1, 0x6e, 0x2a, 0x45, 0x8e, 0x09, 0x49, 0x28, 0x86,
	0x31, 0x6a, 0xc2, 0x88, 0x26, 0x61, 0xbe, 0x1f, 0x62, 0x8e, 0x89, 0x56, 0x41, 0x2a, 0x85, 0x16,
	0x6e, 0x77, 0xb6, 0x29, 0xb0, 0x9b, 0x82, 0x7c, 0xbf, 0xff, 0x0e, 0xb6, 0x9e, 0x17, 0xfb, 0x5e,
	0x9f, 0x0e, 0x44, 0x9c, 0x8e, 0x50, 0x23, 0x73, 0xbb, 0xb0, 0x11, 0x0b, 0x96, 0x8d, 0xd0, 0x73,
	0x76, 0x9c, 0xbd, 0x76, 0x54, 0x56, 0xee, 0x2d, 0xb8, 0x82, 0x09, 0x4b, 0x05, 0x4f, 0xb4, 0xd7,
	0x34, 0x2b, 0x3f, 0x6b, 0xd7, 0x83, 0x4d, 0xc5, 0x4f, 0x12, 0x94, 0xca, 0x6b, 0xed, 0xb4, 0xf6,
	0xda, 0x91, 0x2d, 0xfb, 0xf7, 0xe1, 0x9a, 0x51, 0x18, 0x52, 0x91, 0xe2, 0x40, 0x22, 0x29, 0x24,
	0xee, 0x00, 0xa8, 0xa2, 0x3e, 0x24, 0x8c, 0xc9, 0x52, 0xa6, 0x6d, 0x3a, 0x4f, 0x19, 0x93, 0xbf,
	0xce, 0xbc, 0x49, 0xd9, 0xca, 0x33, 0x11, 0xc6, 0x22, 0xaf, 0x9f, 0x79, 0x0b, 0xd7, 0xa7, 0x33,
	0xa8, 0x14, 0x17, 0x89, 0x75, 0xb7, 0x0b, 0x57, 0xd5, 0xb4, 0x53, 0x9d, 0xeb, 0x94, 0xbd, 0x62,
	0x72, 0x0e, 0xdc, 0xac, 0x01, 0xdb, 0x57, 0xf8, 0xeb, 0x60, 0xfb, 0x9e, 0xeb, 0x83, 0x3f, 0x82,
	0x6b, 0xc0, 0x11, 0x52, 0x21, 0x99, 0x4d, 0x62, 0x1b, 0x3a, 0xd2, 0x34, 0xaa, 0x58, 0x98, 0xb6,
	0x0c, 0x75, 0x5e, 0xb8, 0x59, 0x27, 0xdc, 0xfa, 0xbd, 0xb0, 0x4d, 0xea, 0xd2, 0x85, 0x6d, 0x92,
	0x97, 0x20, 0x7c, 0x00, 0xfe, 0xec, 0xa4, 0x0e, 0x53, 0xa4, 0xfc, 0x98, 0x53, 0xa2, 0x2b, 0x07,
	0xf0, 0x11, 0x78, 0x53, 0x80, 0xaa, 0xae, 0x56, 0x1d, 0x75, 0xd5, 0xc2, 0x70, 0x0d, 0xdb, 0x26,
	0x7b, 0x11, 0x6c, 0x1b, 0xde, 0x9f, 0xb3, 0x29, 0xec, 0x1a, 0xf6, 0x40, 0x24, 0x5a, 0x12, 0xaa,
	0x97, 0xc6, 0xf2, 0x04, 0x6e, 0xd3, 0x72, 0xfd, 0x7c, 0x85, 0x1e, 0x5d, 0x86, 0xa8, 0x17, 0xb1,
	0xf9, 0x5c, 0xa8, 0x88, 0x0d, 0x6a, 0x5d, 0x91, 0x2f, 0x0e, 0x6c, 0x57, 0x0e, 0xef, 0xd2, 0xb4,
	0x1e, 0x43, 0xaf, 0x3c, 0xc9, 0xe7, 0x2a, 0xdc, 0x94, 0x8b, 0xe3, 0xe6, 0x04, 0xd7, 0xf8, 0x6b,
	0xae, 0xe3, 0xcf, 0x06, 0xfd, 0xbf, 0xfa, 0xb3, 0xdf, 0xe8, 0x5f, 0xfa, 0x1b, 0xc0, 0x0d, 0x63,
	0xef, 0xe5, 0xf0, 0x85, 0xa0, 0x44, 0x0b, 0x69, 0x3f, 0xaa, 0x07, 0x9b, 0x05, 0x01, 0x95, 0x2a,
	0x2d, 0xd8, 0xd2, 0xdd, 0x82, 0x56, 0x26, 0x79, 0x89, 0x2e, 0x1e, 0xfb, 0xc7, 0xf3, 0x10, 0x9b,
	0xfc, 0x0a, 0x90, 0xe2, 0x77, 0x97, 0x49, 0x7e, 0x28, 0x31, 0x1d, 0x11, 0x8a, 0xac, 0xfc, 0x9b,
	0x75, 0x32, 0xc9, 0xa3, 0xb2, 0xb5, 0x68, 0xd6, 0x26, 0xb8, 0x82, 0xce, 0xb3, 0x0f, 0x5f, 0xc7,
	0xbe, 0x73, 0x36, 0xf6, 0x9d, 0xef, 0x63, 0xdf, 0xf9, 0x3c, 0xf1, 0x1b, 0x67, 0x13, 0xbf, 0xf1,
	0x6d, 0xe2, 0x37, 0xa0, 0xc7, 0x45, 0xb0, 0xfc, 0xf6, 0xf2, 0xca, 0x39, 0x78, 0x78, 0xc2, 0xf5,
	0xfb, 0xec, 0x28, 0xa0, 0x22, 0x0e, 0x67, 0x9b, 0xee, 0x71, 0x51, 0xa9, 0xc2, 0xd3, 0xd9, 0xbd,
	0x48, 0x7f, 0x4a, 0x51, 0x1d, 0x6d, 0x98, 0x4b, 0xd1, 0x83, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xa1, 0x65, 0xde, 0x30, 0x3b, 0x09, 0x00, 0x00,
}

func (m *EventTxCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTxCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTxCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventScopeCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventScopeCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventScopeCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventScopeUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventScopeUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventScopeUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventScopeRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventScopeRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventScopeRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSessionCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSessionCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSessionCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionAddr) > 0 {
		i -= len(m.SessionAddr)
		copy(dAtA[i:], m.SessionAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SessionAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSessionUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSessionUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSessionUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionAddr) > 0 {
		i -= len(m.SessionAddr)
		copy(dAtA[i:], m.SessionAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SessionAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSessionRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSessionRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSessionRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionAddr) > 0 {
		i -= len(m.SessionAddr)
		copy(dAtA[i:], m.SessionAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SessionAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecordCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionAddr) > 0 {
		i -= len(m.SessionAddr)
		copy(dAtA[i:], m.SessionAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SessionAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordAddr) > 0 {
		i -= len(m.RecordAddr)
		copy(dAtA[i:], m.RecordAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecordUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionAddr) > 0 {
		i -= len(m.SessionAddr)
		copy(dAtA[i:], m.SessionAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SessionAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordAddr) > 0 {
		i -= len(m.RecordAddr)
		copy(dAtA[i:], m.RecordAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecordRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionAddr) > 0 {
		i -= len(m.SessionAddr)
		copy(dAtA[i:], m.SessionAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SessionAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordAddr) > 0 {
		i -= len(m.RecordAddr)
		copy(dAtA[i:], m.RecordAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventScopeSpecificationCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventScopeSpecificationCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventScopeSpecificationCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeSpecificationAddr) > 0 {
		i -= len(m.ScopeSpecificationAddr)
		copy(dAtA[i:], m.ScopeSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventScopeSpecificationUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventScopeSpecificationUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventScopeSpecificationUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeSpecificationAddr) > 0 {
		i -= len(m.ScopeSpecificationAddr)
		copy(dAtA[i:], m.ScopeSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventScopeSpecificationRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventScopeSpecificationRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventScopeSpecificationRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeSpecificationAddr) > 0 {
		i -= len(m.ScopeSpecificationAddr)
		copy(dAtA[i:], m.ScopeSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ScopeSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventContractSpecificationCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventContractSpecificationCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventContractSpecificationCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractSpecificationAddr) > 0 {
		i -= len(m.ContractSpecificationAddr)
		copy(dAtA[i:], m.ContractSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventContractSpecificationUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventContractSpecificationUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventContractSpecificationUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractSpecificationAddr) > 0 {
		i -= len(m.ContractSpecificationAddr)
		copy(dAtA[i:], m.ContractSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventContractSpecificationRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventContractSpecificationRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventContractSpecificationRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractSpecificationAddr) > 0 {
		i -= len(m.ContractSpecificationAddr)
		copy(dAtA[i:], m.ContractSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecordSpecificationCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordSpecificationCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordSpecificationCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractSpecificationAddr) > 0 {
		i -= len(m.ContractSpecificationAddr)
		copy(dAtA[i:], m.ContractSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractSpecificationAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordSpecificationAddr) > 0 {
		i -= len(m.RecordSpecificationAddr)
		copy(dAtA[i:], m.RecordSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecordSpecificationUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordSpecificationUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordSpecificationUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractSpecificationAddr) > 0 {
		i -= len(m.ContractSpecificationAddr)
		copy(dAtA[i:], m.ContractSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractSpecificationAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordSpecificationAddr) > 0 {
		i -= len(m.RecordSpecificationAddr)
		copy(dAtA[i:], m.RecordSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRecordSpecificationRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecordSpecificationRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecordSpecificationRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractSpecificationAddr) > 0 {
		i -= len(m.ContractSpecificationAddr)
		copy(dAtA[i:], m.ContractSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractSpecificationAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordSpecificationAddr) > 0 {
		i -= len(m.RecordSpecificationAddr)
		copy(dAtA[i:], m.RecordSpecificationAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RecordSpecificationAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOSLocatorCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOSLocatorCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOSLocatorCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOSLocatorUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOSLocatorUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOSLocatorUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UriReplaced) > 0 {
		i -= len(m.UriReplaced)
		copy(dAtA[i:], m.UriReplaced)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.UriReplaced)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOSLocatorRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOSLocatorRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOSLocatorRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventTxCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventScopeCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventScopeUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventScopeRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSessionCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSessionUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSessionRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRecordCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SessionAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRecordUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SessionAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRecordRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SessionAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventScopeSpecificationCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventScopeSpecificationUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventScopeSpecificationRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventContractSpecificationCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventContractSpecificationUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventContractSpecificationRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRecordSpecificationCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ContractSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRecordSpecificationUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ContractSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRecordSpecificationRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ContractSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOSLocatorCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOSLocatorUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.UriReplaced)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOSLocatorRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventTxCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTxCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTxCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventScopeCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventScopeCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventScopeCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventScopeUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventScopeUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventScopeUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventScopeRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventScopeRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventScopeRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSessionCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSessionCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSessionCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSessionUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSessionUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSessionUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSessionRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSessionRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSessionRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecordCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecordUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecordRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventScopeSpecificationCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventScopeSpecificationCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventScopeSpecificationCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventScopeSpecificationUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventScopeSpecificationUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventScopeSpecificationUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventScopeSpecificationRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventScopeSpecificationRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventScopeSpecificationRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventContractSpecificationCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventContractSpecificationCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventContractSpecificationCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventContractSpecificationUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventContractSpecificationUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventContractSpecificationUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventContractSpecificationRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventContractSpecificationRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventContractSpecificationRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecordSpecificationCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordSpecificationCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordSpecificationCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecordSpecificationUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordSpecificationUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordSpecificationUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecordSpecificationRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecordSpecificationRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecordSpecificationRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOSLocatorCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOSLocatorCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOSLocatorCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOSLocatorUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOSLocatorUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOSLocatorUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriReplaced", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UriReplaced = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOSLocatorRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOSLocatorRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOSLocatorRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
