// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/metadata/v1/specification.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DefinitionType indicates the required definition type for this value
type DefinitionType int32

const (
	// DEFINITION_TYPE_UNSPECIFIED indicates an unknown/invalid value
	DefinitionType_DEFINITION_TYPE_UNSPECIFIED DefinitionType = 0
	// DEFINITION_TYPE_PROPOSED indicates a proposed value is used here (a record that is not on-chain)
	DefinitionType_DEFINITION_TYPE_PROPOSED DefinitionType = 1
	// DEFINITION_TYPE_RECORD indicates the value must be a reference to a record on chain
	DefinitionType_DEFINITION_TYPE_RECORD DefinitionType = 2
	// DEFINITION_TYPE_RECORD_LIST indicates the value maybe a reference to a collection of values on chain having
	// the same name
	DefinitionType_DEFINITION_TYPE_RECORD_LIST DefinitionType = 3
)

var DefinitionType_name = map[int32]string{
	0: "DEFINITION_TYPE_UNSPECIFIED",
	1: "DEFINITION_TYPE_PROPOSED",
	2: "DEFINITION_TYPE_RECORD",
	3: "DEFINITION_TYPE_RECORD_LIST",
}

var DefinitionType_value = map[string]int32{
	"DEFINITION_TYPE_UNSPECIFIED": 0,
	"DEFINITION_TYPE_PROPOSED":    1,
	"DEFINITION_TYPE_RECORD":      2,
	"DEFINITION_TYPE_RECORD_LIST": 3,
}

func (x DefinitionType) String() string {
	return proto.EnumName(DefinitionType_name, int32(x))
}

func (DefinitionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1e2d1042057ea889, []int{0}
}

// PartyType are the different roles parties on a contract may use
type PartyType int32

const (
	// PARTY_TYPE_UNSPECIFIED is an error condition
	PartyType_PARTY_TYPE_UNSPECIFIED PartyType = 0
	// PARTY_TYPE_ORIGINATOR is an asset originator
	PartyType_PARTY_TYPE_ORIGINATOR PartyType = 1
	// PARTY_TYPE_SERVICER provides debt servicing functions
	PartyType_PARTY_TYPE_SERVICER PartyType = 2
	// PARTY_TYPE_INVESTOR is a generic investor
	PartyType_PARTY_TYPE_INVESTOR PartyType = 3
	// PARTY_TYPE_CUSTODIAN is an entity that provides custodian services for assets
	PartyType_PARTY_TYPE_CUSTODIAN PartyType = 4
	// PARTY_TYPE_OWNER indicates this party is an owner of the item
	PartyType_PARTY_TYPE_OWNER PartyType = 5
	// PARTY_TYPE_AFFILIATE is a party with an affiliate agreement
	PartyType_PARTY_TYPE_AFFILIATE PartyType = 6
	// PARTY_TYPE_OMNIBUS is a special type of party that controls an omnibus bank account
	PartyType_PARTY_TYPE_OMNIBUS PartyType = 7
	// PARTY_TYPE_PROVENANCE is used to indicate this party represents the blockchain or a smart contract action
	PartyType_PARTY_TYPE_PROVENANCE PartyType = 8
)

var PartyType_name = map[int32]string{
	0: "PARTY_TYPE_UNSPECIFIED",
	1: "PARTY_TYPE_ORIGINATOR",
	2: "PARTY_TYPE_SERVICER",
	3: "PARTY_TYPE_INVESTOR",
	4: "PARTY_TYPE_CUSTODIAN",
	5: "PARTY_TYPE_OWNER",
	6: "PARTY_TYPE_AFFILIATE",
	7: "PARTY_TYPE_OMNIBUS",
	8: "PARTY_TYPE_PROVENANCE",
}

var PartyType_value = map[string]int32{
	"PARTY_TYPE_UNSPECIFIED": 0,
	"PARTY_TYPE_ORIGINATOR":  1,
	"PARTY_TYPE_SERVICER":    2,
	"PARTY_TYPE_INVESTOR":    3,
	"PARTY_TYPE_CUSTODIAN":   4,
	"PARTY_TYPE_OWNER":       5,
	"PARTY_TYPE_AFFILIATE":   6,
	"PARTY_TYPE_OMNIBUS":     7,
	"PARTY_TYPE_PROVENANCE":  8,
}

func (x PartyType) String() string {
	return proto.EnumName(PartyType_name, int32(x))
}

func (PartyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1e2d1042057ea889, []int{1}
}

// ScopeSpecification defines the required parties, resources, conditions, and consideration outputs for a contract
type ScopeSpecification struct {
	// unique identifier for this specification on chain
	SpecificationId MetadataAddress `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3,customtype=MetadataAddress" json:"specification_id" yaml:"specification_id"`
	// General information about this scope specification.
	Description *Description `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Addresses of the owners of this scope specification.
	OwnerAddresses []string `protobuf:"bytes,3,rep,name=owner_addresses,json=ownerAddresses,proto3" json:"owner_addresses,omitempty" yaml:"owner_address"`
	// A list of parties that must be present on a scope (and their associated roles)
	PartiesInvolved []PartyType `protobuf:"varint,4,rep,packed,name=parties_involved,json=partiesInvolved,proto3,enum=provenance.metadata.v1.PartyType" json:"parties_involved,omitempty" yaml:"parties_involved"`
	// A list of group specification ids allowed for a scope based on this specification.
	GroupSpecIds []MetadataAddress `protobuf:"bytes,5,rep,name=group_spec_ids,json=groupSpecIds,proto3,customtype=MetadataAddress" json:"group_spec_ids" yaml:"group_spec_ids"`
}

func (m *ScopeSpecification) Reset()         { *m = ScopeSpecification{} }
func (m *ScopeSpecification) String() string { return proto.CompactTextString(m) }
func (*ScopeSpecification) ProtoMessage()    {}
func (*ScopeSpecification) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e2d1042057ea889, []int{0}
}
func (m *ScopeSpecification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeSpecification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeSpecification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeSpecification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeSpecification.Merge(m, src)
}
func (m *ScopeSpecification) XXX_Size() int {
	return m.Size()
}
func (m *ScopeSpecification) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeSpecification.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeSpecification proto.InternalMessageInfo

func (m *ScopeSpecification) GetDescription() *Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *ScopeSpecification) GetOwnerAddresses() []string {
	if m != nil {
		return m.OwnerAddresses
	}
	return nil
}

func (m *ScopeSpecification) GetPartiesInvolved() []PartyType {
	if m != nil {
		return m.PartiesInvolved
	}
	return nil
}

// ContractSpecification defines the required parties, resources, conditions, and consideration outputs for a contract
type ContractSpecification struct {
	// unique identifier for this specification on chain
	SpecificationId MetadataAddress `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3,customtype=MetadataAddress" json:"specification_id" yaml:"specification_id"`
	// Description information for this contract specification
	Description *Description `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Address of the account that owns this specificaiton
	OwnerAddresses []string `protobuf:"bytes,3,rep,name=owner_addresses,json=ownerAddresses,proto3" json:"owner_addresses,omitempty" yaml:"owner_addresses"`
	// a list of party roles that must be fullfilled when signing a transaction for this contract specification
	PartiesInvolved []PartyType `protobuf:"varint,4,rep,packed,name=parties_involved,json=partiesInvolved,proto3,enum=provenance.metadata.v1.PartyType" json:"parties_involved,omitempty" yaml:"parties_involved"`
	// Reference to a metadata record with a hash and type information for the instance of code that will process this group
	//
	// Types that are valid to be assigned to Source:
	//	*ContractSpecification_ResourceId
	//	*ContractSpecification_Hash
	Source isContractSpecification_Source `protobuf_oneof:"source"`
	// name of the class/type of this contract executable
	ClassName string `protobuf:"bytes,7,opt,name=class_name,json=className,proto3" json:"class_name,omitempty" yaml:"class_name"`
	// A list of all the allowed inputs used by operations on this contract
	RegisteredInputs []*InputSpecification `protobuf:"bytes,8,rep,name=registered_inputs,json=registeredInputs,proto3" json:"registered_inputs,omitempty" yaml:"registered_inputs"`
	// a colleciton of checks that must be satisfied against a scope prior to allowing a record to be added under this
	// specification
	ConditionSpecs []*RecordSpecification `protobuf:"bytes,9,rep,name=condition_specs,json=conditionSpecs,proto3" json:"condition_specs,omitempty" yaml:"condition_specs"`
	// a colleciton of method/process specifications that when performed and documented by responsible parties listed
	// above, result in adding a new record to the scope
	RecordSpecs []*RecordSpecification `protobuf:"bytes,10,rep,name=record_specs,json=recordSpecs,proto3" json:"record_specs,omitempty" yaml:"record_specs"`
}

func (m *ContractSpecification) Reset()         { *m = ContractSpecification{} }
func (m *ContractSpecification) String() string { return proto.CompactTextString(m) }
func (*ContractSpecification) ProtoMessage()    {}
func (*ContractSpecification) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e2d1042057ea889, []int{1}
}
func (m *ContractSpecification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractSpecification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractSpecification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractSpecification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpecification.Merge(m, src)
}
func (m *ContractSpecification) XXX_Size() int {
	return m.Size()
}
func (m *ContractSpecification) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpecification.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpecification proto.InternalMessageInfo

type isContractSpecification_Source interface {
	isContractSpecification_Source()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ContractSpecification_ResourceId struct {
	ResourceId MetadataAddress `protobuf:"bytes,5,opt,name=resource_id,json=resourceId,proto3,oneof,customtype=MetadataAddress" json:"resource_id,omitempty" yaml:"resource_id"`
}
type ContractSpecification_Hash struct {
	Hash string `protobuf:"bytes,6,opt,name=hash,proto3,oneof" json:"hash,omitempty"`
}

func (*ContractSpecification_ResourceId) isContractSpecification_Source() {}
func (*ContractSpecification_Hash) isContractSpecification_Source()       {}

func (m *ContractSpecification) GetSource() isContractSpecification_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ContractSpecification) GetDescription() *Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *ContractSpecification) GetOwnerAddresses() []string {
	if m != nil {
		return m.OwnerAddresses
	}
	return nil
}

func (m *ContractSpecification) GetPartiesInvolved() []PartyType {
	if m != nil {
		return m.PartiesInvolved
	}
	return nil
}

func (m *ContractSpecification) GetHash() string {
	if x, ok := m.GetSource().(*ContractSpecification_Hash); ok {
		return x.Hash
	}
	return ""
}

func (m *ContractSpecification) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *ContractSpecification) GetRegisteredInputs() []*InputSpecification {
	if m != nil {
		return m.RegisteredInputs
	}
	return nil
}

func (m *ContractSpecification) GetConditionSpecs() []*RecordSpecification {
	if m != nil {
		return m.ConditionSpecs
	}
	return nil
}

func (m *ContractSpecification) GetRecordSpecs() []*RecordSpecification {
	if m != nil {
		return m.RecordSpecs
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ContractSpecification) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ContractSpecification_ResourceId)(nil),
		(*ContractSpecification_Hash)(nil),
	}
}

// RecordSpecification defines the specification for a Record including allowed/required inputs/outputs
type RecordSpecification struct {
	// unique identifier for this specification on chain
	SpecificationId MetadataAddress `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3,customtype=MetadataAddress" json:"specification_id" yaml:"specification_id"`
	// Name of Record that will be created when this specification is used
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A set of inputs that must be satisified to apply this RecordSpecification and create a Record
	Inputs []*InputSpecification `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// A type name for data associated with this record (typically a class or proto name)
	TypeName string `protobuf:"bytes,4,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty" yaml:"type_name"`
	// Type of result for this record specification
	ResultType DefinitionType `protobuf:"varint,5,opt,name=result_type,json=resultType,proto3,enum=provenance.metadata.v1.DefinitionType" json:"result_type,omitempty" yaml:"result_type"`
}

func (m *RecordSpecification) Reset()         { *m = RecordSpecification{} }
func (m *RecordSpecification) String() string { return proto.CompactTextString(m) }
func (*RecordSpecification) ProtoMessage()    {}
func (*RecordSpecification) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e2d1042057ea889, []int{2}
}
func (m *RecordSpecification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecification.Merge(m, src)
}
func (m *RecordSpecification) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecification) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecification.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecification proto.InternalMessageInfo

func (m *RecordSpecification) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RecordSpecification) GetInputs() []*InputSpecification {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *RecordSpecification) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *RecordSpecification) GetResultType() DefinitionType {
	if m != nil {
		return m.ResultType
	}
	return DefinitionType_DEFINITION_TYPE_UNSPECIFIED
}

// InputSpecification defines a name, type_name, and source reference (either on or off chain) to define an input parameter
type InputSpecification struct {
	// name for this input
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// a type_name (typically a proto name or class_name)
	TypeName string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// source is either on chain (record_id) or off-chain (hash)
	//
	// Types that are valid to be assigned to Source:
	//	*InputSpecification_RecordId
	//	*InputSpecification_Hash
	Source isInputSpecification_Source `protobuf_oneof:"source"`
}

func (m *InputSpecification) Reset()         { *m = InputSpecification{} }
func (m *InputSpecification) String() string { return proto.CompactTextString(m) }
func (*InputSpecification) ProtoMessage()    {}
func (*InputSpecification) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e2d1042057ea889, []int{3}
}
func (m *InputSpecification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputSpecification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputSpecification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputSpecification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputSpecification.Merge(m, src)
}
func (m *InputSpecification) XXX_Size() int {
	return m.Size()
}
func (m *InputSpecification) XXX_DiscardUnknown() {
	xxx_messageInfo_InputSpecification.DiscardUnknown(m)
}

var xxx_messageInfo_InputSpecification proto.InternalMessageInfo

type isInputSpecification_Source interface {
	isInputSpecification_Source()
	MarshalTo([]byte) (int, error)
	Size() int
}

type InputSpecification_RecordId struct {
	RecordId MetadataAddress `protobuf:"bytes,3,opt,name=record_id,json=recordId,proto3,oneof,customtype=MetadataAddress" json:"record_id,omitempty" yaml:"record_id"`
}
type InputSpecification_Hash struct {
	Hash string `protobuf:"bytes,4,opt,name=hash,proto3,oneof" json:"hash,omitempty"`
}

func (*InputSpecification_RecordId) isInputSpecification_Source() {}
func (*InputSpecification_Hash) isInputSpecification_Source()     {}

func (m *InputSpecification) GetSource() isInputSpecification_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *InputSpecification) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InputSpecification) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *InputSpecification) GetHash() string {
	if x, ok := m.GetSource().(*InputSpecification_Hash); ok {
		return x.Hash
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InputSpecification) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InputSpecification_RecordId)(nil),
		(*InputSpecification_Hash)(nil),
	}
}

// Description holds general information that is handy to associate with a structure.
type Description struct {
	// A Name for this thing.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A description of this thing.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// URL to find even more info.
	WebsiteUrl string `protobuf:"bytes,4,opt,name=website_url,json=websiteUrl,proto3" json:"website_url,omitempty" yaml:"website_url"`
	// URL of an icon.
	IconUrl string `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty" yaml:"icon_url"`
}

func (m *Description) Reset()         { *m = Description{} }
func (m *Description) String() string { return proto.CompactTextString(m) }
func (*Description) ProtoMessage()    {}
func (*Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e2d1042057ea889, []int{4}
}
func (m *Description) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Description.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Description.Merge(m, src)
}
func (m *Description) XXX_Size() int {
	return m.Size()
}
func (m *Description) XXX_DiscardUnknown() {
	xxx_messageInfo_Description.DiscardUnknown(m)
}

var xxx_messageInfo_Description proto.InternalMessageInfo

func (m *Description) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Description) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Description) GetWebsiteUrl() string {
	if m != nil {
		return m.WebsiteUrl
	}
	return ""
}

func (m *Description) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func init() {
	proto.RegisterEnum("provenance.metadata.v1.DefinitionType", DefinitionType_name, DefinitionType_value)
	proto.RegisterEnum("provenance.metadata.v1.PartyType", PartyType_name, PartyType_value)
	proto.RegisterType((*ScopeSpecification)(nil), "provenance.metadata.v1.ScopeSpecification")
	proto.RegisterType((*ContractSpecification)(nil), "provenance.metadata.v1.ContractSpecification")
	proto.RegisterType((*RecordSpecification)(nil), "provenance.metadata.v1.RecordSpecification")
	proto.RegisterType((*InputSpecification)(nil), "provenance.metadata.v1.InputSpecification")
	proto.RegisterType((*Description)(nil), "provenance.metadata.v1.Description")
}

func init() {
	proto.RegisterFile("provenance/metadata/v1/specification.proto", fileDescriptor_1e2d1042057ea889)
}

var fileDescriptor_1e2d1042057ea889 = []byte{
	// 1015 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4f, 0x6f, 0xe2, 0x46,
	0x14, 0xc7, 0x31, 0x21, 0x30, 0x44, 0xe0, 0x9d, 0x10, 0xe2, 0x4d, 0x56, 0x98, 0xba, 0x52, 0x4b,
	0x53, 0x15, 0x1a, 0xba, 0x52, 0xa5, 0xde, 0x30, 0x98, 0xae, 0xa5, 0xac, 0x41, 0x03, 0xa4, 0xda,
	0x4a, 0x95, 0xe5, 0xd8, 0xb3, 0xc4, 0x2a, 0xd8, 0x96, 0xc7, 0xb0, 0xcd, 0x77, 0xe8, 0xa1, 0x1f,
	0xa4, 0xfd, 0x0e, 0x3d, 0xee, 0x71, 0x8f, 0x55, 0x0f, 0xd6, 0x2a, 0xf9, 0x04, 0xe5, 0x13, 0x54,
	0x1e, 0xf3, 0xc7, 0xa6, 0x70, 0xd8, 0x43, 0x55, 0xf5, 0x36, 0xef, 0xbd, 0xdf, 0xfb, 0xcd, 0xf3,
	0xfb, 0xbd, 0x37, 0x32, 0xb8, 0x74, 0x3d, 0x67, 0x8e, 0x6d, 0xdd, 0x36, 0x70, 0x63, 0x8a, 0x7d,
	0xdd, 0xd4, 0x7d, 0xbd, 0x31, 0xbf, 0x6a, 0x10, 0x17, 0x1b, 0xd6, 0x6b, 0xcb, 0xd0, 0x7d, 0xcb,
	0xb1, 0xeb, 0xae, 0xe7, 0xf8, 0x0e, 0x2c, 0x6f, 0xb0, 0xf5, 0x15, 0xb6, 0x3e, 0xbf, 0x3a, 0x2f,
	0x8d, 0x9d, 0xb1, 0x43, 0x21, 0x8d, 0xf0, 0x14, 0xa1, 0xc5, 0xdf, 0x59, 0x00, 0x07, 0x86, 0xe3,
	0xe2, 0x41, 0x9c, 0x0a, 0xfe, 0x00, 0xb8, 0x04, 0xb7, 0x66, 0x99, 0x3c, 0x53, 0x65, 0x6a, 0xc7,
	0x52, 0xf3, 0x6d, 0x20, 0xa4, 0xfe, 0x0c, 0x84, 0xe2, 0xcb, 0x25, 0x77, 0xcb, 0x34, 0x3d, 0x4c,
	0xc8, 0x22, 0x10, 0xce, 0xee, 0xf5, 0xe9, 0xe4, 0x1b, 0x71, 0x3b, 0x51, 0x44, 0xc5, 0x84, 0x4b,
	0x31, 0xa1, 0x0c, 0xf2, 0x26, 0x26, 0x86, 0x67, 0xb9, 0xa1, 0x83, 0x3f, 0xa8, 0x32, 0xb5, 0x7c,
	0xf3, 0xe3, 0xfa, 0xee, 0xca, 0xeb, 0x9d, 0x0d, 0x14, 0xc5, 0xf3, 0x60, 0x0b, 0x14, 0x9d, 0x37,
	0x36, 0xf6, 0x34, 0x3d, 0xaa, 0x01, 0x13, 0x9e, 0xad, 0xb2, 0xb5, 0x9c, 0xc4, 0x2f, 0x02, 0xa1,
	0x14, 0x55, 0x93, 0x00, 0x88, 0xa8, 0x40, 0xed, 0xd6, 0x0a, 0x0f, 0x2d, 0xc0, 0xb9, 0xba, 0xe7,
	0x5b, 0x98, 0x68, 0x96, 0x3d, 0x77, 0x26, 0x73, 0x6c, 0xf2, 0xe9, 0x2a, 0x5b, 0x2b, 0x34, 0x3f,
	0xda, 0x57, 0x4e, 0x5f, 0xf7, 0xfc, 0xfb, 0xe1, 0xbd, 0x8b, 0xa5, 0x8b, 0xcd, 0x47, 0x6f, 0x93,
	0x88, 0xa8, 0xb8, 0x74, 0x29, 0x4b, 0x0f, 0xbc, 0x01, 0x85, 0xb1, 0xe7, 0xcc, 0x5c, 0x2d, 0xec,
	0x86, 0x66, 0x99, 0x84, 0x3f, 0xac, 0xb2, 0xb5, 0x63, 0xe9, 0xcb, 0xfd, 0x1d, 0x3d, 0x8d, 0xc8,
	0x93, 0x69, 0x22, 0x3a, 0xa6, 0x8e, 0x50, 0x31, 0xc5, 0x24, 0xe2, 0x63, 0x06, 0x9c, 0xb6, 0x1d,
	0xdb, 0xf7, 0x74, 0xc3, 0xff, 0x3f, 0xaa, 0xd8, 0xde, 0xa7, 0xe2, 0xf9, 0x22, 0x10, 0xca, 0x3b,
	0x54, 0xc4, 0xff, 0xad, 0x8e, 0xd7, 0x20, 0xef, 0x61, 0xe2, 0xcc, 0x3c, 0x03, 0x87, 0x0d, 0x3d,
	0xa4, 0x0d, 0xfd, 0x6c, 0x77, 0x33, 0x61, 0xc4, 0x1a, 0xc3, 0x8b, 0x2f, 0x52, 0x08, 0xac, 0x6c,
	0xc5, 0x84, 0x25, 0x90, 0xbe, 0xd3, 0xc9, 0x1d, 0x9f, 0xa9, 0x32, 0xb5, 0xdc, 0x8b, 0x14, 0xa2,
	0x16, 0x7c, 0x0e, 0x80, 0x31, 0xd1, 0x09, 0xd1, 0x6c, 0x7d, 0x8a, 0xf9, 0xa3, 0x30, 0x26, 0x9d,
	0x2e, 0x02, 0xe1, 0x49, 0xc4, 0xb7, 0x89, 0x89, 0x28, 0x47, 0x0d, 0x55, 0x9f, 0x62, 0x38, 0x03,
	0x4f, 0x3c, 0x3c, 0xb6, 0x88, 0x8f, 0x3d, 0x6c, 0x6a, 0x96, 0xed, 0xce, 0x7c, 0xc2, 0x67, 0xab,
	0x6c, 0x2d, 0xdf, 0xbc, 0xdc, 0xd7, 0x05, 0x25, 0x44, 0x25, 0xc6, 0x46, 0x7a, 0xb6, 0x08, 0x04,
	0x7e, 0x55, 0xf8, 0x16, 0x9d, 0x88, 0xb8, 0x8d, 0x8f, 0xe6, 0x12, 0xe8, 0x82, 0xa2, 0xe1, 0xd8,
	0xa6, 0x45, 0x27, 0x25, 0x1c, 0x12, 0xc2, 0xe7, 0xe8, 0xa5, 0x9f, 0xef, 0xbb, 0x14, 0x61, 0xc3,
	0xf1, 0xcc, 0xe4, 0xad, 0x31, 0xb5, 0xb7, 0xd8, 0x44, 0x54, 0x58, 0x7b, 0xc2, 0x1c, 0x02, 0xc7,
	0xe0, 0xd8, 0xa3, 0x14, 0xcb, 0xeb, 0xc0, 0x87, 0x5f, 0x77, 0xb6, 0x08, 0x84, 0x93, 0xd5, 0x47,
	0x6e, 0xa8, 0x44, 0x94, 0xf7, 0xd6, 0x68, 0x22, 0x65, 0x41, 0x26, 0x52, 0x4a, 0x7c, 0x7f, 0x00,
	0x4e, 0x76, 0xf0, 0xfc, 0xdb, 0x3b, 0x06, 0x41, 0x9a, 0x8e, 0x40, 0xb8, 0x5c, 0x39, 0x44, 0xcf,
	0x50, 0x02, 0x99, 0xa5, 0xb6, 0xec, 0x87, 0x6a, 0x8b, 0x96, 0x99, 0xf0, 0x0a, 0xe4, 0xfc, 0x7b,
	0x17, 0x47, 0xf3, 0x95, 0xa6, 0xf3, 0x55, 0x5a, 0x04, 0x02, 0x17, 0x15, 0xb6, 0x0e, 0x89, 0x28,
	0x1b, 0x9e, 0xe9, 0x74, 0x69, 0x74, 0xee, 0x67, 0x13, 0x5f, 0x0b, 0x5d, 0x74, 0xee, 0x0b, 0xcd,
	0x4f, 0xf6, 0xaf, 0xfb, 0x6b, 0xcb, 0xa6, 0x92, 0xd1, 0x15, 0x2b, 0x27, 0x96, 0x61, 0x45, 0x22,
	0xd2, 0x55, 0x98, 0x4d, 0xfc, 0x10, 0x23, 0xfe, 0xc6, 0x00, 0xf8, 0xcf, 0x92, 0xd7, 0x2d, 0x60,
	0x62, 0x2d, 0xb8, 0x88, 0x97, 0x1f, 0xf5, 0x66, 0x53, 0x68, 0x17, 0xe4, 0x96, 0x92, 0x5a, 0x26,
	0xcf, 0x52, 0x2d, 0x3e, 0xdd, 0xad, 0x03, 0x97, 0x18, 0x80, 0x68, 0x39, 0xb3, 0x91, 0x15, 0x5b,
	0xcd, 0x74, 0x7c, 0x35, 0x63, 0x23, 0xf1, 0x2b, 0x03, 0xf2, 0xb1, 0x57, 0x6d, 0x67, 0xa1, 0xd5,
	0xe4, 0x1b, 0xc9, 0xd2, 0x50, 0xe2, 0xf9, 0xfb, 0x1a, 0xe4, 0xdf, 0xe0, 0x5b, 0x62, 0xf9, 0x58,
	0x9b, 0x79, 0x93, 0xa5, 0x16, 0xb1, 0x76, 0xc5, 0x82, 0x22, 0x02, 0x4b, 0x6b, 0xe4, 0x4d, 0x60,
	0x1d, 0x64, 0x2d, 0xc3, 0xb1, 0x69, 0xd6, 0x21, 0xcd, 0x3a, 0x59, 0x04, 0x42, 0x31, 0xca, 0x5a,
	0x45, 0x44, 0x74, 0x14, 0x1e, 0x47, 0xde, 0xe4, 0xf2, 0x67, 0x06, 0x14, 0x92, 0xaa, 0x40, 0x01,
	0x5c, 0x74, 0xe4, 0xae, 0xa2, 0x2a, 0x43, 0xa5, 0xa7, 0x6a, 0xc3, 0x57, 0x7d, 0x59, 0x1b, 0xa9,
	0x83, 0xbe, 0xdc, 0x56, 0xba, 0x8a, 0xdc, 0xe1, 0x52, 0xf0, 0x19, 0xe0, 0xb7, 0x01, 0x7d, 0xd4,
	0xeb, 0xf7, 0x06, 0x72, 0x87, 0x63, 0xe0, 0x39, 0x28, 0x6f, 0x47, 0x91, 0xdc, 0xee, 0xa1, 0x0e,
	0x77, 0xb0, 0x8b, 0x3a, 0x8a, 0x69, 0xd7, 0xca, 0x60, 0xc8, 0xb1, 0x97, 0x7f, 0x31, 0x20, 0xb7,
	0x7e, 0x82, 0x43, 0xaa, 0x7e, 0x0b, 0x0d, 0x5f, 0xed, 0x2a, 0xe2, 0x29, 0x38, 0x8d, 0xc5, 0x7a,
	0x48, 0xf9, 0x56, 0x51, 0x5b, 0xc3, 0x1e, 0xe2, 0x18, 0x78, 0x06, 0x4e, 0x62, 0xa1, 0x81, 0x8c,
	0x6e, 0x94, 0xb6, 0x8c, 0xb8, 0x83, 0xad, 0x80, 0xa2, 0xde, 0xc8, 0x83, 0x30, 0x83, 0x85, 0x3c,
	0x28, 0xc5, 0x02, 0xed, 0xd1, 0x60, 0xd8, 0xeb, 0x28, 0x2d, 0x95, 0x4b, 0xc3, 0x12, 0xe0, 0xe2,
	0xd7, 0x7c, 0xa7, 0xca, 0x88, 0x3b, 0xdc, 0xc2, 0xb7, 0xba, 0x5d, 0xe5, 0x5a, 0x69, 0x0d, 0x65,
	0x2e, 0x03, 0xcb, 0x00, 0xc6, 0xf1, 0x2f, 0x55, 0x45, 0x1a, 0x0d, 0xb8, 0xa3, 0xad, 0x72, 0xfb,
	0xa8, 0x77, 0x23, 0xab, 0x2d, 0xb5, 0x2d, 0x73, 0x59, 0xe9, 0xc7, 0xb7, 0x0f, 0x15, 0xe6, 0xdd,
	0x43, 0x85, 0x79, 0xff, 0x50, 0x61, 0x7e, 0x79, 0xac, 0xa4, 0xde, 0x3d, 0x56, 0x52, 0x7f, 0x3c,
	0x56, 0x52, 0xe0, 0xa9, 0xe5, 0xec, 0xd9, 0xa4, 0x3e, 0xf3, 0xfd, 0xf3, 0xb1, 0xe5, 0xdf, 0xcd,
	0x6e, 0xeb, 0x86, 0x33, 0x6d, 0x6c, 0x40, 0x5f, 0x58, 0x4e, 0xcc, 0x6a, 0xfc, 0xb4, 0xf9, 0x33,
	0x0c, 0x37, 0x81, 0xdc, 0x66, 0xe8, 0x1f, 0xde, 0x57, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x98,
	0x3a, 0x23, 0x10, 0x3d, 0x0a, 0x00, 0x00,
}

func (m *ScopeSpecification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupSpecIds) > 0 {
		for iNdEx := len(m.GroupSpecIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.GroupSpecIds[iNdEx].Size()
				i -= size
				if _, err := m.GroupSpecIds[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintSpecification(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PartiesInvolved) > 0 {
		dAtA2 := make([]byte, len(m.PartiesInvolved)*10)
		var j1 int
		for _, num := range m.PartiesInvolved {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSpecification(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OwnerAddresses) > 0 {
		for iNdEx := len(m.OwnerAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OwnerAddresses[iNdEx])
			copy(dAtA[i:], m.OwnerAddresses[iNdEx])
			i = encodeVarintSpecification(dAtA, i, uint64(len(m.OwnerAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpecification(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.SpecificationId.Size()
		i -= size
		if _, err := m.SpecificationId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSpecification(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ContractSpecification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecordSpecs) > 0 {
		for iNdEx := len(m.RecordSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpecification(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.ConditionSpecs) > 0 {
		for iNdEx := len(m.ConditionSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConditionSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpecification(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.RegisteredInputs) > 0 {
		for iNdEx := len(m.RegisteredInputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegisteredInputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpecification(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintSpecification(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Source != nil {
		{
			size := m.Source.Size()
			i -= size
			if _, err := m.Source.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.PartiesInvolved) > 0 {
		dAtA5 := make([]byte, len(m.PartiesInvolved)*10)
		var j4 int
		for _, num := range m.PartiesInvolved {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintSpecification(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OwnerAddresses) > 0 {
		for iNdEx := len(m.OwnerAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OwnerAddresses[iNdEx])
			copy(dAtA[i:], m.OwnerAddresses[iNdEx])
			i = encodeVarintSpecification(dAtA, i, uint64(len(m.OwnerAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpecification(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.SpecificationId.Size()
		i -= size
		if _, err := m.SpecificationId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSpecification(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ContractSpecification_ResourceId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecification_ResourceId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	{
		size := m.ResourceId.Size()
		i -= size
		if _, err := m.ResourceId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSpecification(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *ContractSpecification_Hash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecification_Hash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Hash)
	copy(dAtA[i:], m.Hash)
	i = encodeVarintSpecification(dAtA, i, uint64(len(m.Hash)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *RecordSpecification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResultType != 0 {
		i = encodeVarintSpecification(dAtA, i, uint64(m.ResultType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TypeName) > 0 {
		i -= len(m.TypeName)
		copy(dAtA[i:], m.TypeName)
		i = encodeVarintSpecification(dAtA, i, uint64(len(m.TypeName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpecification(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSpecification(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.SpecificationId.Size()
		i -= size
		if _, err := m.SpecificationId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSpecification(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *InputSpecification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size := m.Source.Size()
			i -= size
			if _, err := m.Source.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TypeName) > 0 {
		i -= len(m.TypeName)
		copy(dAtA[i:], m.TypeName)
		i = encodeVarintSpecification(dAtA, i, uint64(len(m.TypeName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSpecification(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InputSpecification_RecordId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputSpecification_RecordId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	{
		size := m.RecordId.Size()
		i -= size
		if _, err := m.RecordId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSpecification(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *InputSpecification_Hash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputSpecification_Hash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Hash)
	copy(dAtA[i:], m.Hash)
	i = encodeVarintSpecification(dAtA, i, uint64(len(m.Hash)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *Description) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Description) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Description) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintSpecification(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WebsiteUrl) > 0 {
		i -= len(m.WebsiteUrl)
		copy(dAtA[i:], m.WebsiteUrl)
		i = encodeVarintSpecification(dAtA, i, uint64(len(m.WebsiteUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintSpecification(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSpecification(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpecification(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpecification(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScopeSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpecificationId.Size()
	n += 1 + l + sovSpecification(uint64(l))
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovSpecification(uint64(l))
	}
	if len(m.OwnerAddresses) > 0 {
		for _, s := range m.OwnerAddresses {
			l = len(s)
			n += 1 + l + sovSpecification(uint64(l))
		}
	}
	if len(m.PartiesInvolved) > 0 {
		l = 0
		for _, e := range m.PartiesInvolved {
			l += sovSpecification(uint64(e))
		}
		n += 1 + sovSpecification(uint64(l)) + l
	}
	if len(m.GroupSpecIds) > 0 {
		for _, e := range m.GroupSpecIds {
			l = e.Size()
			n += 1 + l + sovSpecification(uint64(l))
		}
	}
	return n
}

func (m *ContractSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpecificationId.Size()
	n += 1 + l + sovSpecification(uint64(l))
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovSpecification(uint64(l))
	}
	if len(m.OwnerAddresses) > 0 {
		for _, s := range m.OwnerAddresses {
			l = len(s)
			n += 1 + l + sovSpecification(uint64(l))
		}
	}
	if len(m.PartiesInvolved) > 0 {
		l = 0
		for _, e := range m.PartiesInvolved {
			l += sovSpecification(uint64(e))
		}
		n += 1 + sovSpecification(uint64(l)) + l
	}
	if m.Source != nil {
		n += m.Source.Size()
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovSpecification(uint64(l))
	}
	if len(m.RegisteredInputs) > 0 {
		for _, e := range m.RegisteredInputs {
			l = e.Size()
			n += 1 + l + sovSpecification(uint64(l))
		}
	}
	if len(m.ConditionSpecs) > 0 {
		for _, e := range m.ConditionSpecs {
			l = e.Size()
			n += 1 + l + sovSpecification(uint64(l))
		}
	}
	if len(m.RecordSpecs) > 0 {
		for _, e := range m.RecordSpecs {
			l = e.Size()
			n += 1 + l + sovSpecification(uint64(l))
		}
	}
	return n
}

func (m *ContractSpecification_ResourceId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ResourceId.Size()
	n += 1 + l + sovSpecification(uint64(l))
	return n
}
func (m *ContractSpecification_Hash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	n += 1 + l + sovSpecification(uint64(l))
	return n
}
func (m *RecordSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpecificationId.Size()
	n += 1 + l + sovSpecification(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpecification(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovSpecification(uint64(l))
		}
	}
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovSpecification(uint64(l))
	}
	if m.ResultType != 0 {
		n += 1 + sovSpecification(uint64(m.ResultType))
	}
	return n
}

func (m *InputSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpecification(uint64(l))
	}
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovSpecification(uint64(l))
	}
	if m.Source != nil {
		n += m.Source.Size()
	}
	return n
}

func (m *InputSpecification_RecordId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RecordId.Size()
	n += 1 + l + sovSpecification(uint64(l))
	return n
}
func (m *InputSpecification_Hash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	n += 1 + l + sovSpecification(uint64(l))
	return n
}
func (m *Description) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpecification(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSpecification(uint64(l))
	}
	l = len(m.WebsiteUrl)
	if l > 0 {
		n += 1 + l + sovSpecification(uint64(l))
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovSpecification(uint64(l))
	}
	return n
}

func sovSpecification(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpecification(x uint64) (n int) {
	return sovSpecification(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ScopeSpecification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeSpecification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeSpecification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecificationId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddresses = append(m.OwnerAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v PartyType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecification
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PartyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PartiesInvolved = append(m.PartiesInvolved, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecification
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSpecification
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSpecification
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.PartiesInvolved) == 0 {
					m.PartiesInvolved = make([]PartyType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PartyType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpecification
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PartyType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PartiesInvolved = append(m.PartiesInvolved, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PartiesInvolved", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSpecIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v MetadataAddress
			m.GroupSpecIds = append(m.GroupSpecIds, v)
			if err := m.GroupSpecIds[len(m.GroupSpecIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpecification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpecification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractSpecification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractSpecification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractSpecification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecificationId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddresses = append(m.OwnerAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v PartyType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecification
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PartyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PartiesInvolved = append(m.PartiesInvolved, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecification
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSpecification
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSpecification
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.PartiesInvolved) == 0 {
					m.PartiesInvolved = make([]PartyType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PartyType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpecification
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PartyType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PartiesInvolved = append(m.PartiesInvolved, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PartiesInvolved", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var vv MetadataAddress
			v := &vv
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &ContractSpecification_ResourceId{*v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = &ContractSpecification_Hash{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredInputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredInputs = append(m.RegisteredInputs, &InputSpecification{})
			if err := m.RegisteredInputs[len(m.RegisteredInputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConditionSpecs = append(m.ConditionSpecs, &RecordSpecification{})
			if err := m.ConditionSpecs[len(m.ConditionSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecs = append(m.RecordSpecs, &RecordSpecification{})
			if err := m.RecordSpecs[len(m.RecordSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpecification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpecification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecificationId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &InputSpecification{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultType", wireType)
			}
			m.ResultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultType |= DefinitionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpecification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpecification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputSpecification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputSpecification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputSpecification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var vv MetadataAddress
			v := &vv
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &InputSpecification_RecordId{*v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = &InputSpecification_Hash{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpecification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpecification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Description) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Description: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Description: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpecification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpecification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpecification(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpecification
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpecification
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpecification
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpecification
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpecification
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpecification        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpecification          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpecification = fmt.Errorf("proto: unexpected end of group")
)
