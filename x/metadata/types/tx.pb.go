// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/metadata/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	p8e "github.com/provenance-io/provenance/x/metadata/types/p8e"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgWriteScopeRequest is the request type for the Msg/WriteScope RPC method.
type MsgWriteScopeRequest struct {
	// scope is the Scope you want added or updated.
	Scope Scope `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope"`
	// signers is the list of address of those signing this request.
	Signers []string `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
	// scope_uuid is an optional uuid string, e.g. "91978ba2-5f35-459a-86a7-feca1b0512e0"
	// If provided, it will be used to generate the MetadataAddress for the scope which will override the scope_id in the
	// provided scope. If not provided (or it is an empty string), nothing special happens.
	// If there is a value in scope.scope_id that is different from the one created from this uuid, an error is returned.
	ScopeUuid string `protobuf:"bytes,3,opt,name=scope_uuid,json=scopeUuid,proto3" json:"scope_uuid,omitempty" yaml:"scope_uuid"`
	// spec_uuid is an optional scope specification uuid string, e.g. "dc83ea70-eacd-40fe-9adf-1cf6148bf8a2"
	// If provided, it will be used to generate the MetadataAddress for the scope specification which will override the
	// specification_id in the provided scope. If not provided (or it is an empty string), nothing special happens.
	// If there is a value in scope.specification_id that is different from the one created from this uuid, an error is
	// returned.
	SpecUuid string `protobuf:"bytes,4,opt,name=spec_uuid,json=specUuid,proto3" json:"spec_uuid,omitempty" yaml:"spec_uuid"`
}

func (m *MsgWriteScopeRequest) Reset()         { *m = MsgWriteScopeRequest{} }
func (m *MsgWriteScopeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWriteScopeRequest) ProtoMessage()    {}
func (*MsgWriteScopeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{0}
}
func (m *MsgWriteScopeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteScopeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteScopeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteScopeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteScopeRequest.Merge(m, src)
}
func (m *MsgWriteScopeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteScopeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteScopeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteScopeRequest proto.InternalMessageInfo

// MsgWriteScopeResponse is the response type for the Msg/WriteScope RPC method.
type MsgWriteScopeResponse struct {
	// scope_id_info contains information about the id/address of the scope that was added or updated.
	ScopeIdInfo *ScopeIdInfo `protobuf:"bytes,1,opt,name=scope_id_info,json=scopeIdInfo,proto3" json:"scope_id_info,omitempty" yaml:"scope_id_info"`
}

func (m *MsgWriteScopeResponse) Reset()         { *m = MsgWriteScopeResponse{} }
func (m *MsgWriteScopeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWriteScopeResponse) ProtoMessage()    {}
func (*MsgWriteScopeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{1}
}
func (m *MsgWriteScopeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteScopeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteScopeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteScopeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteScopeResponse.Merge(m, src)
}
func (m *MsgWriteScopeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteScopeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteScopeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteScopeResponse proto.InternalMessageInfo

func (m *MsgWriteScopeResponse) GetScopeIdInfo() *ScopeIdInfo {
	if m != nil {
		return m.ScopeIdInfo
	}
	return nil
}

// MsgDeleteScopeRequest is the request type for the Msg/DeleteScope RPC method.
type MsgDeleteScopeRequest struct {
	// Unique ID for the scope to delete
	ScopeId MetadataAddress `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3,customtype=MetadataAddress" json:"scope_id" yaml:"scope_id"`
	Signers []string        `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgDeleteScopeRequest) Reset()         { *m = MsgDeleteScopeRequest{} }
func (m *MsgDeleteScopeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteScopeRequest) ProtoMessage()    {}
func (*MsgDeleteScopeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{2}
}
func (m *MsgDeleteScopeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteScopeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteScopeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteScopeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteScopeRequest.Merge(m, src)
}
func (m *MsgDeleteScopeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteScopeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteScopeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteScopeRequest proto.InternalMessageInfo

// MsgDeleteScopeResponse is the response type for the Msg/DeleteScope RPC method.
type MsgDeleteScopeResponse struct {
}

func (m *MsgDeleteScopeResponse) Reset()         { *m = MsgDeleteScopeResponse{} }
func (m *MsgDeleteScopeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteScopeResponse) ProtoMessage()    {}
func (*MsgDeleteScopeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{3}
}
func (m *MsgDeleteScopeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteScopeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteScopeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteScopeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteScopeResponse.Merge(m, src)
}
func (m *MsgDeleteScopeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteScopeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteScopeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteScopeResponse proto.InternalMessageInfo

// MsgAddScopeDataAccessRequest is the request to add data access AccAddress to scope
type MsgAddScopeDataAccessRequest struct {
	// scope MetadataAddress for updating data access
	ScopeId MetadataAddress `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3,customtype=MetadataAddress" json:"scope_id" yaml:"scope_id"`
	// AccAddress addresses to be added to scope
	DataAccess []string `protobuf:"bytes,2,rep,name=data_access,json=dataAccess,proto3" json:"data_access,omitempty" yaml:"data_access"`
	// signers is the list of address of those signing this request.
	Signers []string `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgAddScopeDataAccessRequest) Reset()         { *m = MsgAddScopeDataAccessRequest{} }
func (m *MsgAddScopeDataAccessRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddScopeDataAccessRequest) ProtoMessage()    {}
func (*MsgAddScopeDataAccessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{4}
}
func (m *MsgAddScopeDataAccessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddScopeDataAccessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddScopeDataAccessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddScopeDataAccessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddScopeDataAccessRequest.Merge(m, src)
}
func (m *MsgAddScopeDataAccessRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddScopeDataAccessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddScopeDataAccessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddScopeDataAccessRequest proto.InternalMessageInfo

// MsgAddScopeDataAccessResponse is the response for adding data access AccAddress to scope
type MsgAddScopeDataAccessResponse struct {
}

func (m *MsgAddScopeDataAccessResponse) Reset()         { *m = MsgAddScopeDataAccessResponse{} }
func (m *MsgAddScopeDataAccessResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddScopeDataAccessResponse) ProtoMessage()    {}
func (*MsgAddScopeDataAccessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{5}
}
func (m *MsgAddScopeDataAccessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddScopeDataAccessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddScopeDataAccessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddScopeDataAccessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddScopeDataAccessResponse.Merge(m, src)
}
func (m *MsgAddScopeDataAccessResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddScopeDataAccessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddScopeDataAccessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddScopeDataAccessResponse proto.InternalMessageInfo

// MsgDeleteScopeDataAccessRequest is the request to remove data access AccAddress to scope
type MsgDeleteScopeDataAccessRequest struct {
	// scope MetadataAddress for removing data access
	ScopeId MetadataAddress `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3,customtype=MetadataAddress" json:"scope_id" yaml:"scope_id"`
	// AccAddress address to be removed from scope
	DataAccess []string `protobuf:"bytes,2,rep,name=data_access,json=dataAccess,proto3" json:"data_access,omitempty" yaml:"data_access"`
	// signers is the list of address of those signing this request.
	Signers []string `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgDeleteScopeDataAccessRequest) Reset()         { *m = MsgDeleteScopeDataAccessRequest{} }
func (m *MsgDeleteScopeDataAccessRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteScopeDataAccessRequest) ProtoMessage()    {}
func (*MsgDeleteScopeDataAccessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{6}
}
func (m *MsgDeleteScopeDataAccessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteScopeDataAccessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteScopeDataAccessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteScopeDataAccessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteScopeDataAccessRequest.Merge(m, src)
}
func (m *MsgDeleteScopeDataAccessRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteScopeDataAccessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteScopeDataAccessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteScopeDataAccessRequest proto.InternalMessageInfo

// MsgDeleteScopeDataAccessResponse is the response from removing data access AccAddress to scope
type MsgDeleteScopeDataAccessResponse struct {
}

func (m *MsgDeleteScopeDataAccessResponse) Reset()         { *m = MsgDeleteScopeDataAccessResponse{} }
func (m *MsgDeleteScopeDataAccessResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteScopeDataAccessResponse) ProtoMessage()    {}
func (*MsgDeleteScopeDataAccessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{7}
}
func (m *MsgDeleteScopeDataAccessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteScopeDataAccessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteScopeDataAccessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteScopeDataAccessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteScopeDataAccessResponse.Merge(m, src)
}
func (m *MsgDeleteScopeDataAccessResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteScopeDataAccessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteScopeDataAccessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteScopeDataAccessResponse proto.InternalMessageInfo

// MsgAddScopeOwnerRequest is the request to add owner AccAddress to scope
type MsgAddScopeOwnerRequest struct {
	// scope MetadataAddress for updating data access
	ScopeId MetadataAddress `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3,customtype=MetadataAddress" json:"scope_id" yaml:"scope_id"`
	// owner parties to add to the scope
	Owners []Party `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners" yaml:"owners"`
	// signers is the list of address of those signing this request.
	Signers []string `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgAddScopeOwnerRequest) Reset()         { *m = MsgAddScopeOwnerRequest{} }
func (m *MsgAddScopeOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddScopeOwnerRequest) ProtoMessage()    {}
func (*MsgAddScopeOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{8}
}
func (m *MsgAddScopeOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddScopeOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddScopeOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddScopeOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddScopeOwnerRequest.Merge(m, src)
}
func (m *MsgAddScopeOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddScopeOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddScopeOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddScopeOwnerRequest proto.InternalMessageInfo

// MsgAddScopeOwnerResponse is the response for adding owner AccAddresses to scope
type MsgAddScopeOwnerResponse struct {
}

func (m *MsgAddScopeOwnerResponse) Reset()         { *m = MsgAddScopeOwnerResponse{} }
func (m *MsgAddScopeOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddScopeOwnerResponse) ProtoMessage()    {}
func (*MsgAddScopeOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{9}
}
func (m *MsgAddScopeOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddScopeOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddScopeOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddScopeOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddScopeOwnerResponse.Merge(m, src)
}
func (m *MsgAddScopeOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddScopeOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddScopeOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddScopeOwnerResponse proto.InternalMessageInfo

// MsgDeleteScopeOwnerRequest is the request to remove owner AccAddresses to scope
type MsgDeleteScopeOwnerRequest struct {
	// scope MetadataAddress for removing data access
	ScopeId MetadataAddress `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3,customtype=MetadataAddress" json:"scope_id" yaml:"scope_id"`
	// AccAddress owner addresses to be removed from scope
	Owners []string `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners,omitempty" yaml:"owners"`
	// signers is the list of address of those signing this request.
	Signers []string `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgDeleteScopeOwnerRequest) Reset()         { *m = MsgDeleteScopeOwnerRequest{} }
func (m *MsgDeleteScopeOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteScopeOwnerRequest) ProtoMessage()    {}
func (*MsgDeleteScopeOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{10}
}
func (m *MsgDeleteScopeOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteScopeOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteScopeOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteScopeOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteScopeOwnerRequest.Merge(m, src)
}
func (m *MsgDeleteScopeOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteScopeOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteScopeOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteScopeOwnerRequest proto.InternalMessageInfo

// MsgDeleteScopeOwnerResponse is the response from removing owner AccAddress to scope
type MsgDeleteScopeOwnerResponse struct {
}

func (m *MsgDeleteScopeOwnerResponse) Reset()         { *m = MsgDeleteScopeOwnerResponse{} }
func (m *MsgDeleteScopeOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteScopeOwnerResponse) ProtoMessage()    {}
func (*MsgDeleteScopeOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{11}
}
func (m *MsgDeleteScopeOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteScopeOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteScopeOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteScopeOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteScopeOwnerResponse.Merge(m, src)
}
func (m *MsgDeleteScopeOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteScopeOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteScopeOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteScopeOwnerResponse proto.InternalMessageInfo

// MsgUpdateValueOwnersRequest is the request to update the value owner addresses in one or more scopes.
type MsgUpdateValueOwnersRequest struct {
	// scope_ids are the scope metadata addresses of all scopes to be updated.
	ScopeIds []MetadataAddress `protobuf:"bytes,1,rep,name=scope_ids,json=scopeIds,proto3,customtype=MetadataAddress" json:"scope_ids" yaml:"scope_ids"`
	// value_owner_address is the address of the new value owner for the provided scopes.
	ValueOwnerAddress string `protobuf:"bytes,2,opt,name=value_owner_address,json=valueOwnerAddress,proto3" json:"value_owner_address,omitempty" yaml:"value_owner_address"`
	// signers is the list of addresses of those signing this request.
	Signers []string `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgUpdateValueOwnersRequest) Reset()         { *m = MsgUpdateValueOwnersRequest{} }
func (m *MsgUpdateValueOwnersRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateValueOwnersRequest) ProtoMessage()    {}
func (*MsgUpdateValueOwnersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{12}
}
func (m *MsgUpdateValueOwnersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateValueOwnersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateValueOwnersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateValueOwnersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateValueOwnersRequest.Merge(m, src)
}
func (m *MsgUpdateValueOwnersRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateValueOwnersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateValueOwnersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateValueOwnersRequest proto.InternalMessageInfo

// MsgUpdateValueOwnersResponse is the response from updating value owner addresses in one or more scopes.
type MsgUpdateValueOwnersResponse struct {
}

func (m *MsgUpdateValueOwnersResponse) Reset()         { *m = MsgUpdateValueOwnersResponse{} }
func (m *MsgUpdateValueOwnersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateValueOwnersResponse) ProtoMessage()    {}
func (*MsgUpdateValueOwnersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{13}
}
func (m *MsgUpdateValueOwnersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateValueOwnersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateValueOwnersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateValueOwnersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateValueOwnersResponse.Merge(m, src)
}
func (m *MsgUpdateValueOwnersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateValueOwnersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateValueOwnersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateValueOwnersResponse proto.InternalMessageInfo

// MsgMigrateValueOwnerRequest is the request to migrate all scopes with one value owner to another value owner.
type MsgMigrateValueOwnerRequest struct {
	// existing is the value owner address that is being migrated.
	Existing string `protobuf:"bytes,1,opt,name=existing,proto3" json:"existing,omitempty"`
	// proposed is the new value owner address for all of existing's scopes.
	Proposed string `protobuf:"bytes,2,opt,name=proposed,proto3" json:"proposed,omitempty"`
	// signers is the list of addresses of those signing this request.
	Signers []string `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgMigrateValueOwnerRequest) Reset()         { *m = MsgMigrateValueOwnerRequest{} }
func (m *MsgMigrateValueOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMigrateValueOwnerRequest) ProtoMessage()    {}
func (*MsgMigrateValueOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{14}
}
func (m *MsgMigrateValueOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMigrateValueOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMigrateValueOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMigrateValueOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMigrateValueOwnerRequest.Merge(m, src)
}
func (m *MsgMigrateValueOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMigrateValueOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMigrateValueOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMigrateValueOwnerRequest proto.InternalMessageInfo

// MsgMigrateValueOwnerResponse is the response from migrating a value owner address.
type MsgMigrateValueOwnerResponse struct {
}

func (m *MsgMigrateValueOwnerResponse) Reset()         { *m = MsgMigrateValueOwnerResponse{} }
func (m *MsgMigrateValueOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMigrateValueOwnerResponse) ProtoMessage()    {}
func (*MsgMigrateValueOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{15}
}
func (m *MsgMigrateValueOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMigrateValueOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMigrateValueOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMigrateValueOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMigrateValueOwnerResponse.Merge(m, src)
}
func (m *MsgMigrateValueOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMigrateValueOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMigrateValueOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMigrateValueOwnerResponse proto.InternalMessageInfo

// MsgWriteSessionRequest is the request type for the Msg/WriteSession RPC method.
type MsgWriteSessionRequest struct {
	// session is the Session you want added or updated.
	Session Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session"`
	// signers is the list of address of those signing this request.
	Signers []string `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
	// SessionIDComponents is an optional (alternate) way of defining what the session_id should be in the provided
	// session. If provided, it must have both a scope and session_uuid. Those components will be used to create the
	// MetadataAddress for the session which will override the session_id in the provided session. If not provided (or
	// all empty), nothing special happens.
	// If there is a value in session.session_id that is different from the one created from these components, an error is
	// returned.
	SessionIdComponents *SessionIdComponents `protobuf:"bytes,3,opt,name=session_id_components,json=sessionIdComponents,proto3" json:"session_id_components,omitempty" yaml:"session_id_components"`
	// spec_uuid is an optional contract specification uuid string, e.g. "def6bc0a-c9dd-4874-948f-5206e6060a84"
	// If provided, it will be used to generate the MetadataAddress for the contract specification which will override the
	// specification_id in the provided session. If not provided (or it is an empty string), nothing special happens.
	// If there is a value in session.specification_id that is different from the one created from this uuid, an error is
	// returned.
	SpecUuid string `protobuf:"bytes,4,opt,name=spec_uuid,json=specUuid,proto3" json:"spec_uuid,omitempty" yaml:"spec_uuid"`
}

func (m *MsgWriteSessionRequest) Reset()         { *m = MsgWriteSessionRequest{} }
func (m *MsgWriteSessionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWriteSessionRequest) ProtoMessage()    {}
func (*MsgWriteSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{16}
}
func (m *MsgWriteSessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteSessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteSessionRequest.Merge(m, src)
}
func (m *MsgWriteSessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteSessionRequest proto.InternalMessageInfo

// SessionIDComponents contains fields for the components that make up a session id.
type SessionIdComponents struct {
	// scope is used to define the scope this session belongs to.
	//
	// Types that are valid to be assigned to ScopeIdentifier:
	//	*SessionIdComponents_ScopeUuid
	//	*SessionIdComponents_ScopeAddr
	ScopeIdentifier isSessionIdComponents_ScopeIdentifier `protobuf_oneof:"scope_identifier"`
	// session_uuid is a uuid string for identifying this session, e.g. "5803f8bc-6067-4eb5-951f-2121671c2ec0"
	SessionUuid string `protobuf:"bytes,3,opt,name=session_uuid,json=sessionUuid,proto3" json:"session_uuid,omitempty" yaml:"session_uuid"`
}

func (m *SessionIdComponents) Reset()         { *m = SessionIdComponents{} }
func (m *SessionIdComponents) String() string { return proto.CompactTextString(m) }
func (*SessionIdComponents) ProtoMessage()    {}
func (*SessionIdComponents) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{17}
}
func (m *SessionIdComponents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionIdComponents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionIdComponents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionIdComponents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionIdComponents.Merge(m, src)
}
func (m *SessionIdComponents) XXX_Size() int {
	return m.Size()
}
func (m *SessionIdComponents) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionIdComponents.DiscardUnknown(m)
}

var xxx_messageInfo_SessionIdComponents proto.InternalMessageInfo

type isSessionIdComponents_ScopeIdentifier interface {
	isSessionIdComponents_ScopeIdentifier()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SessionIdComponents_ScopeUuid struct {
	ScopeUuid string `protobuf:"bytes,1,opt,name=scope_uuid,json=scopeUuid,proto3,oneof" json:"scope_uuid,omitempty" yaml:"scope_uuid"`
}
type SessionIdComponents_ScopeAddr struct {
	ScopeAddr string `protobuf:"bytes,2,opt,name=scope_addr,json=scopeAddr,proto3,oneof" json:"scope_addr,omitempty" yaml:"scope_addr"`
}

func (*SessionIdComponents_ScopeUuid) isSessionIdComponents_ScopeIdentifier() {}
func (*SessionIdComponents_ScopeAddr) isSessionIdComponents_ScopeIdentifier() {}

func (m *SessionIdComponents) GetScopeIdentifier() isSessionIdComponents_ScopeIdentifier {
	if m != nil {
		return m.ScopeIdentifier
	}
	return nil
}

func (m *SessionIdComponents) GetScopeUuid() string {
	if x, ok := m.GetScopeIdentifier().(*SessionIdComponents_ScopeUuid); ok {
		return x.ScopeUuid
	}
	return ""
}

func (m *SessionIdComponents) GetScopeAddr() string {
	if x, ok := m.GetScopeIdentifier().(*SessionIdComponents_ScopeAddr); ok {
		return x.ScopeAddr
	}
	return ""
}

func (m *SessionIdComponents) GetSessionUuid() string {
	if m != nil {
		return m.SessionUuid
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SessionIdComponents) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SessionIdComponents_ScopeUuid)(nil),
		(*SessionIdComponents_ScopeAddr)(nil),
	}
}

// MsgWriteSessionResponse is the response type for the Msg/WriteSession RPC method.
type MsgWriteSessionResponse struct {
	// session_id_info contains information about the id/address of the session that was added or updated.
	SessionIdInfo *SessionIdInfo `protobuf:"bytes,1,opt,name=session_id_info,json=sessionIdInfo,proto3" json:"session_id_info,omitempty" yaml:"session_id_info"`
}

func (m *MsgWriteSessionResponse) Reset()         { *m = MsgWriteSessionResponse{} }
func (m *MsgWriteSessionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWriteSessionResponse) ProtoMessage()    {}
func (*MsgWriteSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{18}
}
func (m *MsgWriteSessionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteSessionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteSessionResponse.Merge(m, src)
}
func (m *MsgWriteSessionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteSessionResponse proto.InternalMessageInfo

func (m *MsgWriteSessionResponse) GetSessionIdInfo() *SessionIdInfo {
	if m != nil {
		return m.SessionIdInfo
	}
	return nil
}

// MsgWriteRecordRequest is the request type for the Msg/WriteRecord RPC method.
type MsgWriteRecordRequest struct {
	// record is the Record you want added or updated.
	Record Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record"`
	// signers is the list of address of those signing this request.
	Signers []string `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
	// SessionIDComponents is an optional (alternate) way of defining what the session_id should be in the provided
	// record. If provided, it must have both a scope and session_uuid. Those components will be used to create the
	// MetadataAddress for the session which will override the session_id in the provided record. If not provided (or
	// all empty), nothing special happens.
	// If there is a value in record.session_id that is different from the one created from these components, an error is
	// returned.
	SessionIdComponents *SessionIdComponents `protobuf:"bytes,3,opt,name=session_id_components,json=sessionIdComponents,proto3" json:"session_id_components,omitempty" yaml:"session_id_components"`
	// contract_spec_uuid is an optional contract specification uuid string, e.g. "def6bc0a-c9dd-4874-948f-5206e6060a84"
	// If provided, it will be combined with the record name to generate the MetadataAddress for the record specification
	// which will override the specification_id in the provided record. If not provided (or it is an empty string),
	// nothing special happens.
	// If there is a value in record.specification_id that is different from the one created from this uuid and
	// record.name, an error is returned.
	ContractSpecUuid string `protobuf:"bytes,4,opt,name=contract_spec_uuid,json=contractSpecUuid,proto3" json:"contract_spec_uuid,omitempty" yaml:"contract_spec_uuid"`
	// parties is the list of parties involved with this record.
	// Deprecated: This field is ignored. The parties are identified in the session and as signers.
	Parties []Party `protobuf:"bytes,5,rep,name=parties,proto3" json:"parties"`
}

func (m *MsgWriteRecordRequest) Reset()         { *m = MsgWriteRecordRequest{} }
func (m *MsgWriteRecordRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWriteRecordRequest) ProtoMessage()    {}
func (*MsgWriteRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{19}
}
func (m *MsgWriteRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteRecordRequest.Merge(m, src)
}
func (m *MsgWriteRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteRecordRequest proto.InternalMessageInfo

// MsgWriteRecordResponse is the response type for the Msg/WriteRecord RPC method.
type MsgWriteRecordResponse struct {
	// record_id_info contains information about the id/address of the record that was added or updated.
	RecordIdInfo *RecordIdInfo `protobuf:"bytes,1,opt,name=record_id_info,json=recordIdInfo,proto3" json:"record_id_info,omitempty" yaml:"record_id_info"`
}

func (m *MsgWriteRecordResponse) Reset()         { *m = MsgWriteRecordResponse{} }
func (m *MsgWriteRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWriteRecordResponse) ProtoMessage()    {}
func (*MsgWriteRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{20}
}
func (m *MsgWriteRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteRecordResponse.Merge(m, src)
}
func (m *MsgWriteRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteRecordResponse proto.InternalMessageInfo

func (m *MsgWriteRecordResponse) GetRecordIdInfo() *RecordIdInfo {
	if m != nil {
		return m.RecordIdInfo
	}
	return nil
}

// MsgDeleteRecordRequest is the request type for the Msg/DeleteRecord RPC method.
type MsgDeleteRecordRequest struct {
	RecordId MetadataAddress `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3,customtype=MetadataAddress" json:"record_id" yaml:"record_id"`
	Signers  []string        `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgDeleteRecordRequest) Reset()         { *m = MsgDeleteRecordRequest{} }
func (m *MsgDeleteRecordRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteRecordRequest) ProtoMessage()    {}
func (*MsgDeleteRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{21}
}
func (m *MsgDeleteRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteRecordRequest.Merge(m, src)
}
func (m *MsgDeleteRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteRecordRequest proto.InternalMessageInfo

// MsgDeleteRecordResponse is the response type for the Msg/DeleteRecord RPC method.
type MsgDeleteRecordResponse struct {
}

func (m *MsgDeleteRecordResponse) Reset()         { *m = MsgDeleteRecordResponse{} }
func (m *MsgDeleteRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteRecordResponse) ProtoMessage()    {}
func (*MsgDeleteRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{22}
}
func (m *MsgDeleteRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteRecordResponse.Merge(m, src)
}
func (m *MsgDeleteRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteRecordResponse proto.InternalMessageInfo

// MsgWriteScopeSpecificationRequest is the request type for the Msg/WriteScopeSpecification RPC method.
type MsgWriteScopeSpecificationRequest struct {
	// specification is the ScopeSpecification you want added or updated.
	Specification ScopeSpecification `protobuf:"bytes,1,opt,name=specification,proto3" json:"specification"`
	// signers is the list of address of those signing this request.
	Signers []string `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
	// spec_uuid is an optional scope specification uuid string, e.g. "dc83ea70-eacd-40fe-9adf-1cf6148bf8a2"
	// If provided, it will be used to generate the MetadataAddress for the scope specification which will override the
	// specification_id in the provided specification. If not provided (or it is an empty string), nothing special
	// happens.
	// If there is a value in specification.specification_id that is different from the one created from this uuid, an
	// error is returned.
	SpecUuid string `protobuf:"bytes,3,opt,name=spec_uuid,json=specUuid,proto3" json:"spec_uuid,omitempty" yaml:"spec_uuid"`
}

func (m *MsgWriteScopeSpecificationRequest) Reset()         { *m = MsgWriteScopeSpecificationRequest{} }
func (m *MsgWriteScopeSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWriteScopeSpecificationRequest) ProtoMessage()    {}
func (*MsgWriteScopeSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{23}
}
func (m *MsgWriteScopeSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteScopeSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteScopeSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteScopeSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteScopeSpecificationRequest.Merge(m, src)
}
func (m *MsgWriteScopeSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteScopeSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteScopeSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteScopeSpecificationRequest proto.InternalMessageInfo

// MsgWriteScopeSpecificationResponse is the response type for the Msg/WriteScopeSpecification RPC method.
type MsgWriteScopeSpecificationResponse struct {
	// scope_spec_id_info contains information about the id/address of the scope specification that was added or updated.
	ScopeSpecIdInfo *ScopeSpecIdInfo `protobuf:"bytes,1,opt,name=scope_spec_id_info,json=scopeSpecIdInfo,proto3" json:"scope_spec_id_info,omitempty" yaml:"scope_spec_id_info"`
}

func (m *MsgWriteScopeSpecificationResponse) Reset()         { *m = MsgWriteScopeSpecificationResponse{} }
func (m *MsgWriteScopeSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWriteScopeSpecificationResponse) ProtoMessage()    {}
func (*MsgWriteScopeSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{24}
}
func (m *MsgWriteScopeSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteScopeSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteScopeSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteScopeSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteScopeSpecificationResponse.Merge(m, src)
}
func (m *MsgWriteScopeSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteScopeSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteScopeSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteScopeSpecificationResponse proto.InternalMessageInfo

func (m *MsgWriteScopeSpecificationResponse) GetScopeSpecIdInfo() *ScopeSpecIdInfo {
	if m != nil {
		return m.ScopeSpecIdInfo
	}
	return nil
}

// MsgDeleteScopeSpecificationRequest is the request type for the Msg/DeleteScopeSpecification RPC method.
type MsgDeleteScopeSpecificationRequest struct {
	// MetadataAddress for the scope specification to delete.
	SpecificationId MetadataAddress `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3,customtype=MetadataAddress" json:"specification_id" yaml:"specification_id"`
	Signers         []string        `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgDeleteScopeSpecificationRequest) Reset()         { *m = MsgDeleteScopeSpecificationRequest{} }
func (m *MsgDeleteScopeSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteScopeSpecificationRequest) ProtoMessage()    {}
func (*MsgDeleteScopeSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{25}
}
func (m *MsgDeleteScopeSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteScopeSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteScopeSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteScopeSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteScopeSpecificationRequest.Merge(m, src)
}
func (m *MsgDeleteScopeSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteScopeSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteScopeSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteScopeSpecificationRequest proto.InternalMessageInfo

// MsgDeleteScopeSpecificationResponse is the response type for the Msg/DeleteScopeSpecification RPC method.
type MsgDeleteScopeSpecificationResponse struct {
}

func (m *MsgDeleteScopeSpecificationResponse) Reset()         { *m = MsgDeleteScopeSpecificationResponse{} }
func (m *MsgDeleteScopeSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteScopeSpecificationResponse) ProtoMessage()    {}
func (*MsgDeleteScopeSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{26}
}
func (m *MsgDeleteScopeSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteScopeSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteScopeSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteScopeSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteScopeSpecificationResponse.Merge(m, src)
}
func (m *MsgDeleteScopeSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteScopeSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteScopeSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteScopeSpecificationResponse proto.InternalMessageInfo

// MsgWriteContractSpecificationRequest is the request type for the Msg/WriteContractSpecification RPC method.
type MsgWriteContractSpecificationRequest struct {
	// specification is the ContractSpecification you want added or updated.
	Specification ContractSpecification `protobuf:"bytes,1,opt,name=specification,proto3" json:"specification"`
	// signers is the list of address of those signing this request.
	Signers []string `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
	// spec_uuid is an optional contract specification uuid string, e.g. "def6bc0a-c9dd-4874-948f-5206e6060a84"
	// If provided, it will be used to generate the MetadataAddress for the contract specification which will override the
	// specification_id in the provided specification. If not provided (or it is an empty string), nothing special
	// happens.
	// If there is a value in specification.specification_id that is different from the one created from this uuid, an
	// error is returned.
	SpecUuid string `protobuf:"bytes,3,opt,name=spec_uuid,json=specUuid,proto3" json:"spec_uuid,omitempty" yaml:"spec_uuid"`
}

func (m *MsgWriteContractSpecificationRequest) Reset()         { *m = MsgWriteContractSpecificationRequest{} }
func (m *MsgWriteContractSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWriteContractSpecificationRequest) ProtoMessage()    {}
func (*MsgWriteContractSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{27}
}
func (m *MsgWriteContractSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteContractSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteContractSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteContractSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteContractSpecificationRequest.Merge(m, src)
}
func (m *MsgWriteContractSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteContractSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteContractSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteContractSpecificationRequest proto.InternalMessageInfo

// MsgWriteContractSpecificationResponse is the response type for the Msg/WriteContractSpecification RPC method.
type MsgWriteContractSpecificationResponse struct {
	// contract_spec_id_info contains information about the id/address of the contract specification that was added or
	// updated.
	ContractSpecIdInfo *ContractSpecIdInfo `protobuf:"bytes,1,opt,name=contract_spec_id_info,json=contractSpecIdInfo,proto3" json:"contract_spec_id_info,omitempty" yaml:"contract_spec_id_info"`
}

func (m *MsgWriteContractSpecificationResponse) Reset()         { *m = MsgWriteContractSpecificationResponse{} }
func (m *MsgWriteContractSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWriteContractSpecificationResponse) ProtoMessage()    {}
func (*MsgWriteContractSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{28}
}
func (m *MsgWriteContractSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteContractSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteContractSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteContractSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteContractSpecificationResponse.Merge(m, src)
}
func (m *MsgWriteContractSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteContractSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteContractSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteContractSpecificationResponse proto.InternalMessageInfo

func (m *MsgWriteContractSpecificationResponse) GetContractSpecIdInfo() *ContractSpecIdInfo {
	if m != nil {
		return m.ContractSpecIdInfo
	}
	return nil
}

// MsgAddContractSpecToScopeSpecRequest is the request type for the Msg/AddContractSpecToScopeSpec RPC method.
type MsgAddContractSpecToScopeSpecRequest struct {
	// MetadataAddress for the contract specification to add.
	ContractSpecificationId MetadataAddress `protobuf:"bytes,1,opt,name=contract_specification_id,json=contractSpecificationId,proto3,customtype=MetadataAddress" json:"contract_specification_id" yaml:"specification_id"`
	// MetadataAddress for the scope specification to add contract specification to.
	ScopeSpecificationId MetadataAddress `protobuf:"bytes,2,opt,name=scope_specification_id,json=scopeSpecificationId,proto3,customtype=MetadataAddress" json:"scope_specification_id" yaml:"specification_id"`
	Signers              []string        `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgAddContractSpecToScopeSpecRequest) Reset()         { *m = MsgAddContractSpecToScopeSpecRequest{} }
func (m *MsgAddContractSpecToScopeSpecRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddContractSpecToScopeSpecRequest) ProtoMessage()    {}
func (*MsgAddContractSpecToScopeSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{29}
}
func (m *MsgAddContractSpecToScopeSpecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddContractSpecToScopeSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddContractSpecToScopeSpecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddContractSpecToScopeSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddContractSpecToScopeSpecRequest.Merge(m, src)
}
func (m *MsgAddContractSpecToScopeSpecRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddContractSpecToScopeSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddContractSpecToScopeSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddContractSpecToScopeSpecRequest proto.InternalMessageInfo

// MsgAddContractSpecToScopeSpecResponse is the response type for the Msg/AddContractSpecToScopeSpec RPC method.
type MsgAddContractSpecToScopeSpecResponse struct {
}

func (m *MsgAddContractSpecToScopeSpecResponse) Reset()         { *m = MsgAddContractSpecToScopeSpecResponse{} }
func (m *MsgAddContractSpecToScopeSpecResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddContractSpecToScopeSpecResponse) ProtoMessage()    {}
func (*MsgAddContractSpecToScopeSpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{30}
}
func (m *MsgAddContractSpecToScopeSpecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddContractSpecToScopeSpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddContractSpecToScopeSpecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddContractSpecToScopeSpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddContractSpecToScopeSpecResponse.Merge(m, src)
}
func (m *MsgAddContractSpecToScopeSpecResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddContractSpecToScopeSpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddContractSpecToScopeSpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddContractSpecToScopeSpecResponse proto.InternalMessageInfo

// MsgDeleteContractSpecFromScopeSpecRequest is the request type for the Msg/DeleteContractSpecFromScopeSpec RPC method.
type MsgDeleteContractSpecFromScopeSpecRequest struct {
	// MetadataAddress for the contract specification to add.
	ContractSpecificationId MetadataAddress `protobuf:"bytes,1,opt,name=contract_specification_id,json=contractSpecificationId,proto3,customtype=MetadataAddress" json:"contract_specification_id" yaml:"specification_id"`
	// MetadataAddress for the scope specification to add contract specification to.
	ScopeSpecificationId MetadataAddress `protobuf:"bytes,2,opt,name=scope_specification_id,json=scopeSpecificationId,proto3,customtype=MetadataAddress" json:"scope_specification_id" yaml:"specification_id"`
	Signers              []string        `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgDeleteContractSpecFromScopeSpecRequest) Reset() {
	*m = MsgDeleteContractSpecFromScopeSpecRequest{}
}
func (m *MsgDeleteContractSpecFromScopeSpecRequest) String() string {
	return proto.CompactTextString(m)
}
func (*MsgDeleteContractSpecFromScopeSpecRequest) ProtoMessage() {}
func (*MsgDeleteContractSpecFromScopeSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{31}
}
func (m *MsgDeleteContractSpecFromScopeSpecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteContractSpecFromScopeSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteContractSpecFromScopeSpecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteContractSpecFromScopeSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteContractSpecFromScopeSpecRequest.Merge(m, src)
}
func (m *MsgDeleteContractSpecFromScopeSpecRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteContractSpecFromScopeSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteContractSpecFromScopeSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteContractSpecFromScopeSpecRequest proto.InternalMessageInfo

// MsgDeleteContractSpecFromScopeSpecResponse is the response type for the Msg/DeleteContractSpecFromScopeSpec RPC
// method.
type MsgDeleteContractSpecFromScopeSpecResponse struct {
}

func (m *MsgDeleteContractSpecFromScopeSpecResponse) Reset() {
	*m = MsgDeleteContractSpecFromScopeSpecResponse{}
}
func (m *MsgDeleteContractSpecFromScopeSpecResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgDeleteContractSpecFromScopeSpecResponse) ProtoMessage() {}
func (*MsgDeleteContractSpecFromScopeSpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{32}
}
func (m *MsgDeleteContractSpecFromScopeSpecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteContractSpecFromScopeSpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteContractSpecFromScopeSpecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteContractSpecFromScopeSpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteContractSpecFromScopeSpecResponse.Merge(m, src)
}
func (m *MsgDeleteContractSpecFromScopeSpecResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteContractSpecFromScopeSpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteContractSpecFromScopeSpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteContractSpecFromScopeSpecResponse proto.InternalMessageInfo

// MsgDeleteContractSpecificationRequest is the request type for the Msg/DeleteContractSpecification RPC method.
type MsgDeleteContractSpecificationRequest struct {
	// MetadataAddress for the contract specification to delete.
	SpecificationId MetadataAddress `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3,customtype=MetadataAddress" json:"specification_id" yaml:"specification_id"`
	Signers         []string        `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgDeleteContractSpecificationRequest) Reset()         { *m = MsgDeleteContractSpecificationRequest{} }
func (m *MsgDeleteContractSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteContractSpecificationRequest) ProtoMessage()    {}
func (*MsgDeleteContractSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{33}
}
func (m *MsgDeleteContractSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteContractSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteContractSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteContractSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteContractSpecificationRequest.Merge(m, src)
}
func (m *MsgDeleteContractSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteContractSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteContractSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteContractSpecificationRequest proto.InternalMessageInfo

// MsgDeleteContractSpecificationResponse is the response type for the Msg/DeleteContractSpecification RPC method.
type MsgDeleteContractSpecificationResponse struct {
}

func (m *MsgDeleteContractSpecificationResponse) Reset() {
	*m = MsgDeleteContractSpecificationResponse{}
}
func (m *MsgDeleteContractSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteContractSpecificationResponse) ProtoMessage()    {}
func (*MsgDeleteContractSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{34}
}
func (m *MsgDeleteContractSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteContractSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteContractSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteContractSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteContractSpecificationResponse.Merge(m, src)
}
func (m *MsgDeleteContractSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteContractSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteContractSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteContractSpecificationResponse proto.InternalMessageInfo

// MsgWriteRecordSpecificationRequest is the request type for the Msg/WriteRecordSpecification RPC method.
type MsgWriteRecordSpecificationRequest struct {
	// specification is the RecordSpecification you want added or updated.
	Specification RecordSpecification `protobuf:"bytes,1,opt,name=specification,proto3" json:"specification"`
	// signers is the list of address of those signing this request.
	Signers []string `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
	// contract_spec_uuid is an optional contract specification uuid string, e.g. "def6bc0a-c9dd-4874-948f-5206e6060a84"
	// If provided, it will be combined with the record specification name to generate the MetadataAddress for the record
	// specification which will override the specification_id in the provided specification. If not provided (or it is an
	// empty string), nothing special happens.
	// If there is a value in specification.specification_id that is different from the one created from this uuid and
	// specification.name, an error is returned.
	ContractSpecUuid string `protobuf:"bytes,3,opt,name=contract_spec_uuid,json=contractSpecUuid,proto3" json:"contract_spec_uuid,omitempty" yaml:"contract_spec_uuid"`
}

func (m *MsgWriteRecordSpecificationRequest) Reset()         { *m = MsgWriteRecordSpecificationRequest{} }
func (m *MsgWriteRecordSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWriteRecordSpecificationRequest) ProtoMessage()    {}
func (*MsgWriteRecordSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{35}
}
func (m *MsgWriteRecordSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteRecordSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteRecordSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteRecordSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteRecordSpecificationRequest.Merge(m, src)
}
func (m *MsgWriteRecordSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteRecordSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteRecordSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteRecordSpecificationRequest proto.InternalMessageInfo

// MsgWriteRecordSpecificationResponse is the response type for the Msg/WriteRecordSpecification RPC method.
type MsgWriteRecordSpecificationResponse struct {
	// record_spec_id_info contains information about the id/address of the record specification that was added or
	// updated.
	RecordSpecIdInfo *RecordSpecIdInfo `protobuf:"bytes,1,opt,name=record_spec_id_info,json=recordSpecIdInfo,proto3" json:"record_spec_id_info,omitempty" yaml:"record_spec_id_info"`
}

func (m *MsgWriteRecordSpecificationResponse) Reset()         { *m = MsgWriteRecordSpecificationResponse{} }
func (m *MsgWriteRecordSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWriteRecordSpecificationResponse) ProtoMessage()    {}
func (*MsgWriteRecordSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{36}
}
func (m *MsgWriteRecordSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteRecordSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteRecordSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteRecordSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteRecordSpecificationResponse.Merge(m, src)
}
func (m *MsgWriteRecordSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteRecordSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteRecordSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteRecordSpecificationResponse proto.InternalMessageInfo

func (m *MsgWriteRecordSpecificationResponse) GetRecordSpecIdInfo() *RecordSpecIdInfo {
	if m != nil {
		return m.RecordSpecIdInfo
	}
	return nil
}

// MsgDeleteRecordSpecificationRequest is the request type for the Msg/DeleteRecordSpecification RPC method.
type MsgDeleteRecordSpecificationRequest struct {
	// MetadataAddress for the record specification to delete.
	SpecificationId MetadataAddress `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3,customtype=MetadataAddress" json:"specification_id" yaml:"specification_id"`
	Signers         []string        `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgDeleteRecordSpecificationRequest) Reset()         { *m = MsgDeleteRecordSpecificationRequest{} }
func (m *MsgDeleteRecordSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteRecordSpecificationRequest) ProtoMessage()    {}
func (*MsgDeleteRecordSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{37}
}
func (m *MsgDeleteRecordSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteRecordSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteRecordSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteRecordSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteRecordSpecificationRequest.Merge(m, src)
}
func (m *MsgDeleteRecordSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteRecordSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteRecordSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteRecordSpecificationRequest proto.InternalMessageInfo

// MsgDeleteRecordSpecificationResponse is the response type for the Msg/DeleteRecordSpecification RPC method.
type MsgDeleteRecordSpecificationResponse struct {
}

func (m *MsgDeleteRecordSpecificationResponse) Reset()         { *m = MsgDeleteRecordSpecificationResponse{} }
func (m *MsgDeleteRecordSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteRecordSpecificationResponse) ProtoMessage()    {}
func (*MsgDeleteRecordSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{38}
}
func (m *MsgDeleteRecordSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteRecordSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteRecordSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteRecordSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteRecordSpecificationResponse.Merge(m, src)
}
func (m *MsgDeleteRecordSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteRecordSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteRecordSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteRecordSpecificationResponse proto.InternalMessageInfo

// MsgBindOSLocatorRequest is the request type for the Msg/BindOSLocator RPC method.
type MsgBindOSLocatorRequest struct {
	// The object locator to bind the address to bind to the URI.
	Locator ObjectStoreLocator `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator"`
}

func (m *MsgBindOSLocatorRequest) Reset()         { *m = MsgBindOSLocatorRequest{} }
func (m *MsgBindOSLocatorRequest) String() string { return proto.CompactTextString(m) }
func (*MsgBindOSLocatorRequest) ProtoMessage()    {}
func (*MsgBindOSLocatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{39}
}
func (m *MsgBindOSLocatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBindOSLocatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBindOSLocatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBindOSLocatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBindOSLocatorRequest.Merge(m, src)
}
func (m *MsgBindOSLocatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgBindOSLocatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBindOSLocatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBindOSLocatorRequest proto.InternalMessageInfo

// MsgBindOSLocatorResponse is the response type for the Msg/BindOSLocator RPC method.
type MsgBindOSLocatorResponse struct {
	Locator ObjectStoreLocator `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator"`
}

func (m *MsgBindOSLocatorResponse) Reset()         { *m = MsgBindOSLocatorResponse{} }
func (m *MsgBindOSLocatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBindOSLocatorResponse) ProtoMessage()    {}
func (*MsgBindOSLocatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{40}
}
func (m *MsgBindOSLocatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBindOSLocatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBindOSLocatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBindOSLocatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBindOSLocatorResponse.Merge(m, src)
}
func (m *MsgBindOSLocatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBindOSLocatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBindOSLocatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBindOSLocatorResponse proto.InternalMessageInfo

func (m *MsgBindOSLocatorResponse) GetLocator() ObjectStoreLocator {
	if m != nil {
		return m.Locator
	}
	return ObjectStoreLocator{}
}

// MsgDeleteOSLocatorRequest is the request type for the Msg/DeleteOSLocator RPC method.
type MsgDeleteOSLocatorRequest struct {
	// The record being removed
	Locator ObjectStoreLocator `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator"`
}

func (m *MsgDeleteOSLocatorRequest) Reset()         { *m = MsgDeleteOSLocatorRequest{} }
func (m *MsgDeleteOSLocatorRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteOSLocatorRequest) ProtoMessage()    {}
func (*MsgDeleteOSLocatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{41}
}
func (m *MsgDeleteOSLocatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteOSLocatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteOSLocatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteOSLocatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteOSLocatorRequest.Merge(m, src)
}
func (m *MsgDeleteOSLocatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteOSLocatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteOSLocatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteOSLocatorRequest proto.InternalMessageInfo

// MsgDeleteOSLocatorResponse is the response type for the Msg/DeleteOSLocator RPC method.
type MsgDeleteOSLocatorResponse struct {
	Locator ObjectStoreLocator `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator"`
}

func (m *MsgDeleteOSLocatorResponse) Reset()         { *m = MsgDeleteOSLocatorResponse{} }
func (m *MsgDeleteOSLocatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteOSLocatorResponse) ProtoMessage()    {}
func (*MsgDeleteOSLocatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{42}
}
func (m *MsgDeleteOSLocatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteOSLocatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteOSLocatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteOSLocatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteOSLocatorResponse.Merge(m, src)
}
func (m *MsgDeleteOSLocatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteOSLocatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteOSLocatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteOSLocatorResponse proto.InternalMessageInfo

func (m *MsgDeleteOSLocatorResponse) GetLocator() ObjectStoreLocator {
	if m != nil {
		return m.Locator
	}
	return ObjectStoreLocator{}
}

// MsgModifyOSLocatorRequest is the request type for the Msg/ModifyOSLocator RPC method.
type MsgModifyOSLocatorRequest struct {
	// The object locator to bind the address to bind to the URI.
	Locator ObjectStoreLocator `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator"`
}

func (m *MsgModifyOSLocatorRequest) Reset()         { *m = MsgModifyOSLocatorRequest{} }
func (m *MsgModifyOSLocatorRequest) String() string { return proto.CompactTextString(m) }
func (*MsgModifyOSLocatorRequest) ProtoMessage()    {}
func (*MsgModifyOSLocatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{43}
}
func (m *MsgModifyOSLocatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModifyOSLocatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModifyOSLocatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModifyOSLocatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModifyOSLocatorRequest.Merge(m, src)
}
func (m *MsgModifyOSLocatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgModifyOSLocatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModifyOSLocatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModifyOSLocatorRequest proto.InternalMessageInfo

// MsgModifyOSLocatorResponse is the response type for the Msg/ModifyOSLocator RPC method.
type MsgModifyOSLocatorResponse struct {
	Locator ObjectStoreLocator `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator"`
}

func (m *MsgModifyOSLocatorResponse) Reset()         { *m = MsgModifyOSLocatorResponse{} }
func (m *MsgModifyOSLocatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgModifyOSLocatorResponse) ProtoMessage()    {}
func (*MsgModifyOSLocatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{44}
}
func (m *MsgModifyOSLocatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModifyOSLocatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModifyOSLocatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModifyOSLocatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModifyOSLocatorResponse.Merge(m, src)
}
func (m *MsgModifyOSLocatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgModifyOSLocatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModifyOSLocatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModifyOSLocatorResponse proto.InternalMessageInfo

func (m *MsgModifyOSLocatorResponse) GetLocator() ObjectStoreLocator {
	if m != nil {
		return m.Locator
	}
	return ObjectStoreLocator{}
}

// MsgSetAccountDataRequest is the request to set/update/delete a scope's account data.
type MsgSetAccountDataRequest struct {
	// The identifier to associate the data with.
	// Currently, only scope ids are supported.
	MetadataAddr MetadataAddress `protobuf:"bytes,1,opt,name=metadata_addr,json=metadataAddr,proto3,customtype=MetadataAddress" json:"metadata_addr" yaml:"metadata_addr"`
	// The desired accountdata value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// The signers of this message. Must fulfill owner requirements of the scope.
	Signers []string `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgSetAccountDataRequest) Reset()         { *m = MsgSetAccountDataRequest{} }
func (m *MsgSetAccountDataRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSetAccountDataRequest) ProtoMessage()    {}
func (*MsgSetAccountDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{45}
}
func (m *MsgSetAccountDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetAccountDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetAccountDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetAccountDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetAccountDataRequest.Merge(m, src)
}
func (m *MsgSetAccountDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetAccountDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetAccountDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetAccountDataRequest proto.InternalMessageInfo

// MsgSetAccountDataResponse is the response from setting/updating/deleting a scope's account data.
type MsgSetAccountDataResponse struct {
}

func (m *MsgSetAccountDataResponse) Reset()         { *m = MsgSetAccountDataResponse{} }
func (m *MsgSetAccountDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetAccountDataResponse) ProtoMessage()    {}
func (*MsgSetAccountDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{46}
}
func (m *MsgSetAccountDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetAccountDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetAccountDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetAccountDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetAccountDataResponse.Merge(m, src)
}
func (m *MsgSetAccountDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetAccountDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetAccountDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetAccountDataResponse proto.InternalMessageInfo

// MsgWriteP8eContractSpecRequest has been deprecated and is no longer usable.
// Deprecated: This message is no longer part of any endpoint and cannot be used for anything.
//
// Deprecated: Do not use.
type MsgWriteP8EContractSpecRequest struct {
	Contractspec p8e.ContractSpec `protobuf:"bytes,1,opt,name=contractspec,proto3" json:"contractspec"`
	Signers      []string         `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *MsgWriteP8EContractSpecRequest) Reset()         { *m = MsgWriteP8EContractSpecRequest{} }
func (m *MsgWriteP8EContractSpecRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWriteP8EContractSpecRequest) ProtoMessage()    {}
func (*MsgWriteP8EContractSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{47}
}
func (m *MsgWriteP8EContractSpecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteP8EContractSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteP8EContractSpecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteP8EContractSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteP8EContractSpecRequest.Merge(m, src)
}
func (m *MsgWriteP8EContractSpecRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteP8EContractSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteP8EContractSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteP8EContractSpecRequest proto.InternalMessageInfo

// MsgWriteP8eContractSpecResponse  has been deprecated and is no longer usable.
// Deprecated: This message is no longer part of any endpoint and cannot be used for anything.
//
// Deprecated: Do not use.
type MsgWriteP8EContractSpecResponse struct {
	ContractSpecIdInfo *ContractSpecIdInfo `protobuf:"bytes,1,opt,name=contract_spec_id_info,json=contractSpecIdInfo,proto3" json:"contract_spec_id_info,omitempty" yaml:"contract_spec_id_info"`
	RecordSpecIdInfos  []*RecordSpecIdInfo `protobuf:"bytes,2,rep,name=record_spec_id_infos,json=recordSpecIdInfos,proto3" json:"record_spec_id_infos,omitempty" yaml:"record_spec_id_infos"`
}

func (m *MsgWriteP8EContractSpecResponse) Reset()         { *m = MsgWriteP8EContractSpecResponse{} }
func (m *MsgWriteP8EContractSpecResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWriteP8EContractSpecResponse) ProtoMessage()    {}
func (*MsgWriteP8EContractSpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{48}
}
func (m *MsgWriteP8EContractSpecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteP8EContractSpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteP8EContractSpecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteP8EContractSpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteP8EContractSpecResponse.Merge(m, src)
}
func (m *MsgWriteP8EContractSpecResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteP8EContractSpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteP8EContractSpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteP8EContractSpecResponse proto.InternalMessageInfo

// MsgP8eMemorializeContractRequest  has been deprecated and is no longer usable.
// Deprecated: This message is no longer part of any endpoint and cannot be used for anything.
//
// Deprecated: Do not use.
type MsgP8EMemorializeContractRequest struct {
	ScopeId              string            `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`
	GroupId              string            `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ScopeSpecificationId string            `protobuf:"bytes,3,opt,name=scope_specification_id,json=scopeSpecificationId,proto3" json:"scope_specification_id,omitempty"`
	Recitals             *p8e.Recitals     `protobuf:"bytes,4,opt,name=recitals,proto3" json:"recitals,omitempty"`
	Contract             *p8e.Contract     `protobuf:"bytes,5,opt,name=contract,proto3" json:"contract,omitempty"`
	Signatures           *p8e.SignatureSet `protobuf:"bytes,6,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Invoker              string            `protobuf:"bytes,7,opt,name=invoker,proto3" json:"invoker,omitempty"`
}

func (m *MsgP8EMemorializeContractRequest) Reset()         { *m = MsgP8EMemorializeContractRequest{} }
func (m *MsgP8EMemorializeContractRequest) String() string { return proto.CompactTextString(m) }
func (*MsgP8EMemorializeContractRequest) ProtoMessage()    {}
func (*MsgP8EMemorializeContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{49}
}
func (m *MsgP8EMemorializeContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgP8EMemorializeContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgP8EMemorializeContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgP8EMemorializeContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgP8EMemorializeContractRequest.Merge(m, src)
}
func (m *MsgP8EMemorializeContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgP8EMemorializeContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgP8EMemorializeContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgP8EMemorializeContractRequest proto.InternalMessageInfo

// MsgP8eMemorializeContractResponse  has been deprecated and is no longer usable.
// Deprecated: This message is no longer part of any endpoint and cannot be used for anything.
//
// Deprecated: Do not use.
type MsgP8EMemorializeContractResponse struct {
	ScopeIdInfo   *ScopeIdInfo    `protobuf:"bytes,1,opt,name=scope_id_info,json=scopeIdInfo,proto3" json:"scope_id_info,omitempty" yaml:"scope_id_info"`
	SessionIdInfo *SessionIdInfo  `protobuf:"bytes,2,opt,name=session_id_info,json=sessionIdInfo,proto3" json:"session_id_info,omitempty" yaml:"session_id_info"`
	RecordIdInfos []*RecordIdInfo `protobuf:"bytes,3,rep,name=record_id_infos,json=recordIdInfos,proto3" json:"record_id_infos,omitempty" yaml:"record_id_infos"`
}

func (m *MsgP8EMemorializeContractResponse) Reset()         { *m = MsgP8EMemorializeContractResponse{} }
func (m *MsgP8EMemorializeContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgP8EMemorializeContractResponse) ProtoMessage()    {}
func (*MsgP8EMemorializeContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a3a0892f91e3036, []int{50}
}
func (m *MsgP8EMemorializeContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgP8EMemorializeContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgP8EMemorializeContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgP8EMemorializeContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgP8EMemorializeContractResponse.Merge(m, src)
}
func (m *MsgP8EMemorializeContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgP8EMemorializeContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgP8EMemorializeContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgP8EMemorializeContractResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgWriteScopeRequest)(nil), "provenance.metadata.v1.MsgWriteScopeRequest")
	proto.RegisterType((*MsgWriteScopeResponse)(nil), "provenance.metadata.v1.MsgWriteScopeResponse")
	proto.RegisterType((*MsgDeleteScopeRequest)(nil), "provenance.metadata.v1.MsgDeleteScopeRequest")
	proto.RegisterType((*MsgDeleteScopeResponse)(nil), "provenance.metadata.v1.MsgDeleteScopeResponse")
	proto.RegisterType((*MsgAddScopeDataAccessRequest)(nil), "provenance.metadata.v1.MsgAddScopeDataAccessRequest")
	proto.RegisterType((*MsgAddScopeDataAccessResponse)(nil), "provenance.metadata.v1.MsgAddScopeDataAccessResponse")
	proto.RegisterType((*MsgDeleteScopeDataAccessRequest)(nil), "provenance.metadata.v1.MsgDeleteScopeDataAccessRequest")
	proto.RegisterType((*MsgDeleteScopeDataAccessResponse)(nil), "provenance.metadata.v1.MsgDeleteScopeDataAccessResponse")
	proto.RegisterType((*MsgAddScopeOwnerRequest)(nil), "provenance.metadata.v1.MsgAddScopeOwnerRequest")
	proto.RegisterType((*MsgAddScopeOwnerResponse)(nil), "provenance.metadata.v1.MsgAddScopeOwnerResponse")
	proto.RegisterType((*MsgDeleteScopeOwnerRequest)(nil), "provenance.metadata.v1.MsgDeleteScopeOwnerRequest")
	proto.RegisterType((*MsgDeleteScopeOwnerResponse)(nil), "provenance.metadata.v1.MsgDeleteScopeOwnerResponse")
	proto.RegisterType((*MsgUpdateValueOwnersRequest)(nil), "provenance.metadata.v1.MsgUpdateValueOwnersRequest")
	proto.RegisterType((*MsgUpdateValueOwnersResponse)(nil), "provenance.metadata.v1.MsgUpdateValueOwnersResponse")
	proto.RegisterType((*MsgMigrateValueOwnerRequest)(nil), "provenance.metadata.v1.MsgMigrateValueOwnerRequest")
	proto.RegisterType((*MsgMigrateValueOwnerResponse)(nil), "provenance.metadata.v1.MsgMigrateValueOwnerResponse")
	proto.RegisterType((*MsgWriteSessionRequest)(nil), "provenance.metadata.v1.MsgWriteSessionRequest")
	proto.RegisterType((*SessionIdComponents)(nil), "provenance.metadata.v1.SessionIdComponents")
	proto.RegisterType((*MsgWriteSessionResponse)(nil), "provenance.metadata.v1.MsgWriteSessionResponse")
	proto.RegisterType((*MsgWriteRecordRequest)(nil), "provenance.metadata.v1.MsgWriteRecordRequest")
	proto.RegisterType((*MsgWriteRecordResponse)(nil), "provenance.metadata.v1.MsgWriteRecordResponse")
	proto.RegisterType((*MsgDeleteRecordRequest)(nil), "provenance.metadata.v1.MsgDeleteRecordRequest")
	proto.RegisterType((*MsgDeleteRecordResponse)(nil), "provenance.metadata.v1.MsgDeleteRecordResponse")
	proto.RegisterType((*MsgWriteScopeSpecificationRequest)(nil), "provenance.metadata.v1.MsgWriteScopeSpecificationRequest")
	proto.RegisterType((*MsgWriteScopeSpecificationResponse)(nil), "provenance.metadata.v1.MsgWriteScopeSpecificationResponse")
	proto.RegisterType((*MsgDeleteScopeSpecificationRequest)(nil), "provenance.metadata.v1.MsgDeleteScopeSpecificationRequest")
	proto.RegisterType((*MsgDeleteScopeSpecificationResponse)(nil), "provenance.metadata.v1.MsgDeleteScopeSpecificationResponse")
	proto.RegisterType((*MsgWriteContractSpecificationRequest)(nil), "provenance.metadata.v1.MsgWriteContractSpecificationRequest")
	proto.RegisterType((*MsgWriteContractSpecificationResponse)(nil), "provenance.metadata.v1.MsgWriteContractSpecificationResponse")
	proto.RegisterType((*MsgAddContractSpecToScopeSpecRequest)(nil), "provenance.metadata.v1.MsgAddContractSpecToScopeSpecRequest")
	proto.RegisterType((*MsgAddContractSpecToScopeSpecResponse)(nil), "provenance.metadata.v1.MsgAddContractSpecToScopeSpecResponse")
	proto.RegisterType((*MsgDeleteContractSpecFromScopeSpecRequest)(nil), "provenance.metadata.v1.MsgDeleteContractSpecFromScopeSpecRequest")
	proto.RegisterType((*MsgDeleteContractSpecFromScopeSpecResponse)(nil), "provenance.metadata.v1.MsgDeleteContractSpecFromScopeSpecResponse")
	proto.RegisterType((*MsgDeleteContractSpecificationRequest)(nil), "provenance.metadata.v1.MsgDeleteContractSpecificationRequest")
	proto.RegisterType((*MsgDeleteContractSpecificationResponse)(nil), "provenance.metadata.v1.MsgDeleteContractSpecificationResponse")
	proto.RegisterType((*MsgWriteRecordSpecificationRequest)(nil), "provenance.metadata.v1.MsgWriteRecordSpecificationRequest")
	proto.RegisterType((*MsgWriteRecordSpecificationResponse)(nil), "provenance.metadata.v1.MsgWriteRecordSpecificationResponse")
	proto.RegisterType((*MsgDeleteRecordSpecificationRequest)(nil), "provenance.metadata.v1.MsgDeleteRecordSpecificationRequest")
	proto.RegisterType((*MsgDeleteRecordSpecificationResponse)(nil), "provenance.metadata.v1.MsgDeleteRecordSpecificationResponse")
	proto.RegisterType((*MsgBindOSLocatorRequest)(nil), "provenance.metadata.v1.MsgBindOSLocatorRequest")
	proto.RegisterType((*MsgBindOSLocatorResponse)(nil), "provenance.metadata.v1.MsgBindOSLocatorResponse")
	proto.RegisterType((*MsgDeleteOSLocatorRequest)(nil), "provenance.metadata.v1.MsgDeleteOSLocatorRequest")
	proto.RegisterType((*MsgDeleteOSLocatorResponse)(nil), "provenance.metadata.v1.MsgDeleteOSLocatorResponse")
	proto.RegisterType((*MsgModifyOSLocatorRequest)(nil), "provenance.metadata.v1.MsgModifyOSLocatorRequest")
	proto.RegisterType((*MsgModifyOSLocatorResponse)(nil), "provenance.metadata.v1.MsgModifyOSLocatorResponse")
	proto.RegisterType((*MsgSetAccountDataRequest)(nil), "provenance.metadata.v1.MsgSetAccountDataRequest")
	proto.RegisterType((*MsgSetAccountDataResponse)(nil), "provenance.metadata.v1.MsgSetAccountDataResponse")
	proto.RegisterType((*MsgWriteP8EContractSpecRequest)(nil), "provenance.metadata.v1.MsgWriteP8eContractSpecRequest")
	proto.RegisterType((*MsgWriteP8EContractSpecResponse)(nil), "provenance.metadata.v1.MsgWriteP8eContractSpecResponse")
	proto.RegisterType((*MsgP8EMemorializeContractRequest)(nil), "provenance.metadata.v1.MsgP8eMemorializeContractRequest")
	proto.RegisterType((*MsgP8EMemorializeContractResponse)(nil), "provenance.metadata.v1.MsgP8eMemorializeContractResponse")
}

func init() { proto.RegisterFile("provenance/metadata/v1/tx.proto", fileDescriptor_3a3a0892f91e3036) }

var fileDescriptor_3a3a0892f91e3036 = []byte{
	// 2233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xdd, 0x6f, 0x1c, 0x57,
	0x15, 0xf7, 0x5d, 0x37, 0xb6, 0xf7, 0xd8, 0xae, 0xed, 0xeb, 0xaf, 0xf5, 0xa4, 0xd9, 0x31, 0xd3,
	0xa4, 0x75, 0x9d, 0xc6, 0x8b, 0x5d, 0x43, 0x5d, 0x37, 0x01, 0xbc, 0x0d, 0x28, 0x86, 0x9a, 0x44,
	0xe3, 0x7e, 0x08, 0x24, 0x64, 0x4d, 0x76, 0xae, 0x37, 0x43, 0xed, 0x9d, 0xed, 0xcc, 0xac, 0xf3,
	0x81, 0xa0, 0xaa, 0x84, 0x10, 0xaa, 0x84, 0x54, 0x09, 0xa9, 0xa2, 0x12, 0x42, 0x79, 0x42, 0x91,
	0x80, 0x3e, 0x22, 0xfe, 0x02, 0x54, 0xde, 0xf2, 0x02, 0x42, 0x08, 0x2d, 0x28, 0x79, 0x81, 0xd7,
	0xfd, 0x03, 0x10, 0x9a, 0x7b, 0xef, 0xcc, 0xdc, 0xbb, 0x3b, 0x5f, 0xeb, 0x24, 0x56, 0x90, 0x78,
	0x88, 0x94, 0xd9, 0x39, 0x5f, 0xbf, 0x73, 0xcf, 0x3d, 0xf7, 0xcc, 0xef, 0x1a, 0xd4, 0xa6, 0x63,
	0x1f, 0x91, 0x86, 0xd1, 0xa8, 0x91, 0xca, 0x21, 0xf1, 0x0c, 0xd3, 0xf0, 0x8c, 0xca, 0xd1, 0x6a,
	0xc5, 0xbb, 0xb5, 0xd2, 0x74, 0x6c, 0xcf, 0xc6, 0x73, 0x91, 0xc0, 0x4a, 0x20, 0xb0, 0x72, 0xb4,
	0xaa, 0xcc, 0xd4, 0xed, 0xba, 0x4d, 0x45, 0x2a, 0xfe, 0xff, 0x98, 0xb4, 0x72, 0x2e, 0xc1, 0x5c,
	0xa8, 0xc9, 0xc4, 0x96, 0x12, 0xc4, 0xec, 0xeb, 0xdf, 0x27, 0x35, 0xcf, 0xf5, 0x6c, 0x87, 0x70,
	0xc9, 0xb3, 0x09, 0x92, 0xcd, 0x0d, 0xe2, 0xff, 0xe3, 0x52, 0x5a, 0x82, 0x94, 0x5b, 0xb3, 0x9b,
	0x81, 0xcc, 0x72, 0x92, 0x4c, 0x93, 0xd4, 0xac, 0x7d, 0xab, 0x66, 0x78, 0x96, 0xdd, 0x60, 0xb2,
	0xda, 0x03, 0x04, 0x33, 0x3b, 0x6e, 0xfd, 0x5d, 0xc7, 0xf2, 0xc8, 0xae, 0x6f, 0x43, 0x27, 0xef,
	0xb7, 0x88, 0xeb, 0xe1, 0xd7, 0xe0, 0x14, 0xb5, 0x59, 0x42, 0x8b, 0x68, 0x69, 0x74, 0xed, 0xcc,
	0x4a, 0x7c, 0x76, 0x56, 0xa8, 0x52, 0xf5, 0x99, 0xcf, 0xdb, 0xea, 0x80, 0xce, 0x34, 0x70, 0x09,
	0x86, 0x5d, 0xab, 0xde, 0x20, 0x8e, 0x5b, 0x2a, 0x2c, 0x0e, 0x2e, 0x15, 0xf5, 0xe0, 0x11, 0xaf,
	0x03, 0x50, 0x91, 0xbd, 0x56, 0xcb, 0x32, 0x4b, 0x83, 0x8b, 0x68, 0xa9, 0x58, 0x9d, 0xed, 0xb4,
	0xd5, 0xa9, 0xdb, 0xc6, 0xe1, 0xc1, 0xa6, 0x16, 0xbd, 0xd3, 0xf4, 0x22, 0x7d, 0x78, 0xbb, 0x65,
	0x99, 0x78, 0x15, 0x8a, 0x7e, 0xe8, 0x4c, 0xe9, 0x19, 0xaa, 0x34, 0xd3, 0x69, 0xab, 0x93, 0x5c,
	0x29, 0x78, 0xa5, 0xe9, 0x23, 0xfe, 0xff, 0x7d, 0x95, 0xcd, 0xb1, 0x9f, 0xde, 0x55, 0x07, 0x7e,
	0x71, 0x57, 0x45, 0xff, 0xba, 0xab, 0x0e, 0x68, 0x77, 0x60, 0xb6, 0x0b, 0xa3, 0xdb, 0xb4, 0x1b,
	0x2e, 0xc1, 0x06, 0x8c, 0x33, 0x9f, 0x96, 0xb9, 0x67, 0x35, 0xf6, 0x6d, 0x0e, 0xf6, 0xf9, 0x54,
	0xb0, 0xdb, 0xe6, 0x76, 0x63, 0xdf, 0xae, 0x96, 0x3a, 0x6d, 0x75, 0x46, 0x8c, 0x9b, 0xdb, 0xd0,
	0xf4, 0x51, 0x37, 0x12, 0xd3, 0x7e, 0x82, 0xa8, 0xf3, 0xcb, 0xe4, 0x80, 0x74, 0x65, 0xf8, 0xeb,
	0x30, 0x12, 0x28, 0x52, 0xbf, 0x63, 0xd5, 0x65, 0x3f, 0x8b, 0x7f, 0x6b, 0xab, 0x13, 0x3b, 0xdc,
	0xe7, 0x96, 0x69, 0x3a, 0xc4, 0x75, 0x3b, 0x6d, 0x75, 0x42, 0xf6, 0xa4, 0xe9, 0xc3, 0xdc, 0x49,
	0x72, 0xb6, 0xbb, 0x92, 0x50, 0x82, 0xb9, 0xee, 0x38, 0x58, 0x16, 0xb4, 0x3f, 0x22, 0x78, 0x6e,
	0xc7, 0xad, 0x6f, 0x99, 0x26, 0xfd, 0xfd, 0xb2, 0xef, 0xb8, 0x56, 0x23, 0xae, 0xfb, 0x98, 0x23,
	0x7d, 0x15, 0x46, 0x7d, 0xd1, 0x3d, 0x83, 0x1a, 0x67, 0xd1, 0x56, 0xe7, 0x3a, 0x6d, 0x15, 0x33,
	0x15, 0xe1, 0xa5, 0xa6, 0x83, 0x19, 0x86, 0x21, 0x42, 0x1c, 0x4c, 0x83, 0xa8, 0xc2, 0x99, 0x04,
	0x1c, 0x1c, 0xe9, 0x9f, 0x10, 0xa8, 0x72, 0x12, 0xfe, 0x77, 0xc1, 0x6a, 0xb0, 0x98, 0x0c, 0x85,
	0xe3, 0xfd, 0x0b, 0x82, 0x79, 0x21, 0x23, 0x57, 0x6f, 0x36, 0x88, 0xf3, 0x98, 0x71, 0xbe, 0x09,
	0x43, 0xf6, 0xcd, 0xb0, 0xfa, 0x52, 0x1a, 0xc5, 0x35, 0xc3, 0xf1, 0x6e, 0x57, 0x67, 0x7d, 0x1f,
	0x9d, 0xb6, 0x3a, 0xce, 0x0c, 0x32, 0x55, 0x4d, 0xe7, 0x36, 0x72, 0x83, 0x57, 0xa0, 0xd4, 0x8b,
	0x8b, 0x83, 0xfe, 0x3d, 0x02, 0x45, 0xce, 0xcc, 0x93, 0xc0, 0xfd, 0x92, 0x84, 0xbb, 0x58, 0x9d,
	0x7a, 0x74, 0x50, 0x67, 0xe0, 0x74, 0x6c, 0xdc, 0x1c, 0xd7, 0x3f, 0x10, 0x7d, 0xff, 0x76, 0xd3,
	0x34, 0x3c, 0xf2, 0x8e, 0x71, 0xd0, 0x62, 0xef, 0xc3, 0xc2, 0xbd, 0x02, 0xc5, 0x20, 0x4e, 0xb7,
	0x84, 0x16, 0x07, 0x97, 0xc6, 0xaa, 0xe7, 0x93, 0x91, 0x4d, 0xca, 0xc8, 0x5c, 0xbf, 0x7b, 0x32,
	0x68, 0x2e, 0xfe, 0x36, 0x4c, 0x1f, 0xf9, 0xf6, 0xf7, 0x28, 0x80, 0x3d, 0x83, 0x29, 0x95, 0x0a,
	0xb4, 0xf5, 0x96, 0x3b, 0x6d, 0x55, 0x61, 0xca, 0x31, 0x42, 0x9a, 0x3e, 0x75, 0x14, 0x86, 0xc6,
	0xbd, 0xe5, 0x4e, 0x40, 0x99, 0xf6, 0xa1, 0x18, 0x80, 0x3c, 0x03, 0x3f, 0xa4, 0x09, 0xd8, 0xb1,
	0xea, 0x8e, 0x24, 0x10, 0x24, 0x40, 0x81, 0x11, 0x72, 0xcb, 0x72, 0x3d, 0xab, 0x51, 0xa7, 0x2b,
	0x5b, 0xd4, 0xc3, 0x67, 0xff, 0x5d, 0xd3, 0xb1, 0x9b, 0xb6, 0x4b, 0x4c, 0x86, 0x43, 0x0f, 0x9f,
	0xfb, 0x0c, 0x2f, 0xc6, 0x3d, 0x0f, 0xef, 0x0f, 0x05, 0xda, 0x62, 0xd9, 0x39, 0x43, 0x5c, 0xd7,
	0xb2, 0x1b, 0x41, 0x68, 0x5f, 0x85, 0x61, 0x97, 0xfd, 0xc2, 0x8f, 0x18, 0x35, 0xf1, 0x88, 0x61,
	0x62, 0xfc, 0x44, 0x0d, 0xb4, 0x52, 0xce, 0xd4, 0x0f, 0x11, 0xcc, 0x72, 0x29, 0xff, 0x08, 0xaa,
	0xd9, 0x87, 0x4d, 0xbb, 0x41, 0x1a, 0x9e, 0x4b, 0xcf, 0xd7, 0xd1, 0xb5, 0xf3, 0x19, 0x9e, 0xb6,
	0xcd, 0x37, 0x42, 0x95, 0xea, 0x62, 0xa7, 0xad, 0x3e, 0xc7, 0x2b, 0x23, 0xce, 0xa6, 0xa6, 0x4f,
	0xbb, 0xbd, 0x6a, 0x8f, 0x7e, 0x42, 0xff, 0x19, 0xc1, 0x74, 0x4c, 0x3c, 0xf8, 0xcb, 0xd2, 0xc0,
	0x80, 0x52, 0x06, 0x86, 0x2b, 0x03, 0xe2, 0xc8, 0x10, 0xea, 0xf9, 0x65, 0xc9, 0x0b, 0xb7, 0x47,
	0xcf, 0x7f, 0x17, 0xe9, 0xf9, 0xc5, 0x8a, 0x37, 0x61, 0x2c, 0xc0, 0x2d, 0x8c, 0x28, 0xf3, 0x9d,
	0xb6, 0x3a, 0x2d, 0x67, 0x85, 0xc1, 0x19, 0xe5, 0x8f, 0xbe, 0xcf, 0x2a, 0x86, 0xc9, 0x60, 0x37,
	0x91, 0x86, 0x67, 0xed, 0x5b, 0xc4, 0xd1, 0x7e, 0xcc, 0x1a, 0xb0, 0x5c, 0x12, 0x7c, 0xf8, 0xb0,
	0x60, 0x42, 0xc8, 0xb1, 0x30, 0x7e, 0x9c, 0xcb, 0x5c, 0x31, 0x3a, 0x80, 0x28, 0x9d, 0xb6, 0x3a,
	0xd7, 0xb3, 0x56, 0x6c, 0x04, 0x19, 0x77, 0x45, 0x51, 0xed, 0x67, 0x83, 0xd1, 0x04, 0xa4, 0x93,
	0x9a, 0xed, 0x98, 0x41, 0x61, 0x5e, 0x84, 0x21, 0x87, 0xfe, 0xc0, 0x7d, 0x97, 0x93, 0x7c, 0x33,
	0x35, 0x5e, 0x96, 0x5c, 0xe7, 0x29, 0xaf, 0xca, 0x6f, 0x01, 0xae, 0xd9, 0x0d, 0xcf, 0x31, 0x6a,
	0xde, 0x5e, 0x77, 0x79, 0x9e, 0xe9, 0xb4, 0xd5, 0x05, 0x66, 0xb2, 0x57, 0x46, 0xd3, 0x27, 0x83,
	0x1f, 0x77, 0x79, 0xbd, 0xe2, 0x4b, 0x30, 0xdc, 0x34, 0x1c, 0xcf, 0x22, 0x6e, 0xe9, 0x54, 0x9e,
	0x83, 0x8e, 0xef, 0x5f, 0xae, 0xd3, 0x55, 0xee, 0x1f, 0x44, 0x8d, 0x22, 0x58, 0x0e, 0x5e, 0x14,
	0x04, 0x9e, 0x65, 0xb9, 0xed, 0xaa, 0x89, 0xb3, 0xe9, 0xeb, 0xc2, 0x4b, 0x62, 0xa1, 0xd3, 0x56,
	0x67, 0x19, 0x2a, 0xd9, 0x8a, 0xa6, 0x8f, 0x39, 0x82, 0xa0, 0xf6, 0x11, 0x12, 0xa6, 0x41, 0xb9,
	0x22, 0xae, 0x40, 0x31, 0xd4, 0xe5, 0x07, 0x64, 0xf6, 0x31, 0x12, 0x6a, 0x68, 0xfa, 0x48, 0xe0,
	0x28, 0xf7, 0x64, 0xba, 0x40, 0xf7, 0x88, 0x1c, 0x4b, 0x34, 0xc0, 0x7c, 0x41, 0x1a, 0xdd, 0x77,
	0xc5, 0x6f, 0x98, 0x20, 0xe4, 0x77, 0x60, 0x5c, 0xfa, 0xb6, 0xe1, 0x39, 0x5b, 0x4e, 0x1d, 0xe3,
	0x25, 0x4b, 0x7c, 0xb9, 0x64, 0x33, 0x29, 0xe5, 0x2d, 0x35, 0xbc, 0xc1, 0x63, 0x34, 0xbc, 0x4f,
	0x11, 0x68, 0x69, 0xc0, 0x78, 0x39, 0xb8, 0x80, 0x59, 0x4f, 0xa1, 0x26, 0xe5, 0x92, 0x78, 0x31,
	0x13, 0x1e, 0xaf, 0x0a, 0xa1, 0xd6, 0x7b, 0x8d, 0x69, 0xfa, 0x84, 0x2b, 0xcb, 0x6b, 0xbf, 0x61,
	0xb1, 0x09, 0x83, 0x48, 0x6c, 0xd6, 0xbf, 0x07, 0x93, 0x52, 0xba, 0xa2, 0x7a, 0x59, 0x4b, 0xae,
	0x97, 0xf9, 0x28, 0x43, 0xa2, 0xa2, 0x1f, 0x85, 0xf8, 0x53, 0x1f, 0xd5, 0x73, 0x0e, 0x9e, 0x4f,
	0x0d, 0x96, 0x57, 0xd2, 0xdf, 0x11, 0x9c, 0x0d, 0x12, 0xfe, 0x86, 0xb0, 0xb9, 0x7b, 0x60, 0x7d,
	0x27, 0xbe, 0x98, 0x2e, 0x24, 0x65, 0x3b, 0xd6, 0xd8, 0x89, 0xd7, 0xd3, 0x3d, 0x04, 0xe7, 0x32,
	0xe0, 0xf1, 0x92, 0xfa, 0x00, 0x66, 0xe5, 0x8e, 0x27, 0x57, 0xd5, 0x72, 0x1e, 0x9c, 0xbc, 0xb0,
	0x84, 0xbe, 0x1c, 0x6b, 0x52, 0xd3, 0x71, 0xad, 0x47, 0x4b, 0xbb, 0x57, 0xa0, 0x2b, 0xb1, 0x65,
	0x9a, 0xa2, 0xc9, 0xb7, 0xec, 0x70, 0xf1, 0x82, 0x95, 0x68, 0xc0, 0x82, 0x64, 0xf6, 0x31, 0x55,
	0xda, 0x7c, 0x2d, 0x2e, 0x3f, 0xdb, 0x26, 0xbe, 0x01, 0x73, 0xd1, 0xfe, 0x90, 0x9c, 0x15, 0x8e,
	0xed, 0x6c, 0xc6, 0xed, 0x29, 0xc9, 0xed, 0xfc, 0x13, 0xe7, 0x8b, 0x74, 0x51, 0xd3, 0x32, 0xc5,
	0xab, 0xfb, 0x77, 0x05, 0x78, 0x29, 0xdc, 0x05, 0xa2, 0xf0, 0x37, 0x1c, 0xfb, 0xf0, 0xff, 0x89,
	0xed, 0x49, 0xec, 0xcb, 0xb0, 0x9c, 0x27, 0x5d, 0x3c, 0xbb, 0x9f, 0xb1, 0xcd, 0xd5, 0x2b, 0xfe,
	0xb4, 0xf6, 0xc4, 0x25, 0x78, 0x21, 0x2b, 0x5e, 0x0e, 0xad, 0x23, 0x9c, 0x43, 0xec, 0xec, 0x8d,
	0xc5, 0xf5, 0x6e, 0x7c, 0x53, 0x3c, 0x9f, 0x3e, 0x95, 0x3c, 0x52, 0x4b, 0x8c, 0x9f, 0xde, 0x06,
	0x8f, 0x35, 0xbd, 0x75, 0xa5, 0xe7, 0x57, 0x88, 0x9e, 0x19, 0xc9, 0xa0, 0x79, 0xab, 0xbc, 0x09,
	0xd3, 0x7c, 0xb0, 0x89, 0x69, 0x94, 0x4b, 0xd9, 0xd8, 0x79, 0x9b, 0x14, 0xbe, 0x98, 0x63, 0xcc,
	0x69, 0xfa, 0xa4, 0xd3, 0xa5, 0xa1, 0xfd, 0x16, 0x09, 0x87, 0x5a, 0xca, 0xb2, 0x3c, 0x25, 0xe5,
	0xf6, 0x02, 0x6d, 0xe8, 0x29, 0xd1, 0xf2, 0x62, 0xb3, 0xe9, 0xa0, 0x57, 0xb5, 0x1a, 0xe6, 0xd5,
	0xdd, 0x37, 0xed, 0x9a, 0xe1, 0xd9, 0xe1, 0xb7, 0xfb, 0x37, 0x61, 0xf8, 0x80, 0xfd, 0x92, 0x75,
	0x0e, 0x5d, 0xa5, 0xcc, 0xf9, 0xae, 0x67, 0x3b, 0x84, 0xdb, 0x08, 0x66, 0x6d, 0x6e, 0x60, 0x73,
	0xc4, 0x0f, 0x8e, 0x06, 0xb6, 0x4f, 0x69, 0xa2, 0x2e, 0x87, 0x7c, 0x71, 0x1f, 0xa3, 0x47, 0xed,
	0x7d, 0x58, 0x08, 0x13, 0x70, 0x42, 0xd0, 0x6e, 0x08, 0x24, 0xd7, 0x49, 0x80, 0xdb, 0xb1, 0x4d,
	0x6b, 0xff, 0xf6, 0x89, 0x82, 0xeb, 0x71, 0xf9, 0x04, 0xc0, 0x7d, 0x86, 0x68, 0x89, 0xec, 0x12,
	0x6f, 0xab, 0x56, 0xb3, 0x5b, 0x0d, 0xef, 0xb2, 0xe1, 0x19, 0x01, 0xb8, 0xb7, 0x60, 0x3c, 0xb0,
	0xc6, 0x88, 0x04, 0xb6, 0xb7, 0x2a, 0xc9, 0x7b, 0x8b, 0x5f, 0x08, 0x48, 0x5a, 0x9a, 0x3e, 0x76,
	0x28, 0x08, 0xe2, 0x19, 0x38, 0x45, 0x29, 0x32, 0xce, 0x43, 0xb1, 0x87, 0xdc, 0x27, 0xd7, 0x69,
	0xba, 0x1a, 0xdd, 0xf1, 0xf2, 0x0d, 0xf6, 0x09, 0x82, 0x72, 0xd0, 0xd8, 0xae, 0x6d, 0x48, 0xad,
	0x3f, 0xc0, 0xa4, 0xc3, 0x58, 0xd0, 0x1d, 0xfd, 0xed, 0x9e, 0xd5, 0xcc, 0x9a, 0x1b, 0x44, 0x9a,
	0xfc, 0x78, 0xfe, 0x24, 0x1b, 0x29, 0x7d, 0x62, 0xc8, 0x8f, 0xbd, 0x84, 0xb4, 0x5f, 0x17, 0x28,
	0xf1, 0x1e, 0x1f, 0xd8, 0x53, 0x32, 0x98, 0xe2, 0x3b, 0x30, 0x13, 0xd3, 0x9f, 0x03, 0x62, 0x3b,
	0x7f, 0xbf, 0x57, 0x3b, 0x6d, 0xf5, 0x74, 0x62, 0xbf, 0x77, 0x35, 0x7d, 0xaa, 0xbb, 0xe1, 0x47,
	0x89, 0xfa, 0x4f, 0x81, 0xd2, 0xfa, 0xd7, 0x36, 0xc8, 0x0e, 0x39, 0xb4, 0x1d, 0xcb, 0x38, 0xb0,
	0xee, 0x84, 0xe9, 0x0a, 0xd6, 0x70, 0xa1, 0x8b, 0xc2, 0x2e, 0x46, 0xb4, 0xf4, 0x02, 0x8c, 0xd4,
	0x1d, 0xbb, 0xd5, 0x0c, 0x86, 0xab, 0xa2, 0x3e, 0x4c, 0x9f, 0xb7, 0x4d, 0xbc, 0x9e, 0x38, 0x85,
	0xd1, 0x43, 0x35, 0x61, 0xa2, 0xfa, 0x1a, 0xf8, 0x1f, 0xf4, 0x96, 0x67, 0x1c, 0xb8, 0x94, 0x3a,
	0x49, 0xa1, 0x22, 0xfc, 0x5a, 0xd1, 0xb9, 0xac, 0x1e, 0x6a, 0xf9, 0x16, 0x82, 0x64, 0x97, 0x4e,
	0x65, 0x5b, 0x08, 0xc1, 0x86, 0x5a, 0xf8, 0x0a, 0x80, 0x5f, 0x50, 0x86, 0xd7, 0x72, 0x88, 0x5b,
	0x1a, 0xca, 0xae, 0xd8, 0xdd, 0x40, 0x7a, 0x97, 0x78, 0xba, 0xa0, 0xeb, 0x57, 0xaa, 0xd5, 0x38,
	0xb2, 0xdf, 0x23, 0x4e, 0x69, 0x98, 0x65, 0x87, 0x3f, 0x86, 0x0b, 0xf0, 0xb0, 0x40, 0x19, 0x87,
	0xa4, 0x05, 0x38, 0xb1, 0x8b, 0xc3, 0x38, 0x7a, 0xb0, 0xf0, 0x64, 0xe8, 0x41, 0x7c, 0x03, 0x26,
	0x64, 0xba, 0x88, 0xf5, 0xa0, 0xbc, 0xac, 0x93, 0xe0, 0xa9, 0xcb, 0x8c, 0xa6, 0x8f, 0x8b, 0xb4,
	0x53, 0x58, 0xe6, 0x6b, 0xff, 0x9e, 0x87, 0xc1, 0x1d, 0xb7, 0x8e, 0x2d, 0x80, 0x88, 0x02, 0xc1,
	0x2f, 0x27, 0xb9, 0x8b, 0xbb, 0xa1, 0x56, 0x2e, 0xe4, 0x94, 0xe6, 0x4b, 0x76, 0x00, 0xa3, 0x02,
	0x49, 0x80, 0xd3, 0xb4, 0x7b, 0x2f, 0x6b, 0x95, 0x95, 0xbc, 0xe2, 0xdc, 0xdb, 0x87, 0x08, 0x70,
	0xef, 0x45, 0x24, 0x5e, 0x4f, 0x31, 0x93, 0x78, 0xff, 0xaa, 0x7c, 0xa9, 0x4f, 0x2d, 0x1e, 0xc3,
	0x47, 0x08, 0x66, 0x63, 0xef, 0x07, 0xf1, 0xab, 0xf9, 0xd0, 0xf4, 0x46, 0xb2, 0xd1, 0xbf, 0x22,
	0x0f, 0xc6, 0x81, 0x71, 0xe9, 0xba, 0x0e, 0x57, 0x72, 0x80, 0x12, 0xaf, 0x77, 0x94, 0x2f, 0xe6,
	0x57, 0xe0, 0x3e, 0x7f, 0x00, 0x93, 0xdd, 0xb7, 0x69, 0x78, 0x2d, 0x1f, 0x02, 0xc9, 0xf3, 0x2b,
	0x7d, 0xe9, 0x70, 0xe7, 0x3f, 0x82, 0xa9, 0x9e, 0x9b, 0x2c, 0x9c, 0x66, 0x29, 0xe9, 0x62, 0x4f,
	0x59, 0xef, 0x4f, 0x29, 0xf2, 0xdf, 0x73, 0x55, 0x95, 0xea, 0x3f, 0xe9, 0x5e, 0x2d, 0xd5, 0x7f,
	0xe2, 0x6d, 0x18, 0xb6, 0x61, 0x4c, 0xbc, 0xf6, 0xc0, 0x2b, 0x99, 0xdb, 0x55, 0xba, 0x32, 0x53,
	0x2a, 0xb9, 0xe5, 0xa3, 0x0d, 0x2e, 0x7c, 0xd1, 0xe1, 0xcc, 0xf6, 0x20, 0xd1, 0xde, 0xca, 0x4a,
	0x5e, 0xf1, 0x08, 0x9e, 0xf8, 0xc1, 0x83, 0xb3, 0x1b, 0x84, 0xec, 0xaf, 0x92, 0x5b, 0x9e, 0x3b,
	0xfc, 0x18, 0xc1, 0x7c, 0x02, 0x5d, 0x8c, 0x5f, 0xcb, 0xd5, 0x0a, 0xe3, 0x3e, 0x21, 0x95, 0xcd,
	0xe3, 0xa8, 0xf2, 0x90, 0x7e, 0x8e, 0xa0, 0x94, 0x44, 0xbc, 0xe2, 0xcd, 0x7c, 0x9b, 0x26, 0x36,
	0xa8, 0xd7, 0x8f, 0xa5, 0xcb, 0xa3, 0xfa, 0x14, 0x81, 0x92, 0xcc, 0x83, 0xe2, 0x8b, 0x59, 0x80,
	0xd3, 0x08, 0x1e, 0xe5, 0xd2, 0x31, 0xb5, 0x79, 0x6c, 0xbf, 0x44, 0x70, 0x3a, 0x85, 0x96, 0xc1,
	0x97, 0x32, 0x81, 0xa7, 0x46, 0xf7, 0x95, 0xe3, 0xaa, 0x0b, 0xa9, 0x4b, 0x66, 0x1b, 0x53, 0x53,
	0x97, 0x49, 0xe7, 0xa6, 0xa6, 0x2e, 0x9b, 0xe2, 0xc4, 0xf7, 0x10, 0xa8, 0x19, 0x84, 0x1d, 0xde,
	0xea, 0x0b, 0x7f, 0x1c, 0x37, 0xaa, 0x54, 0x1f, 0xc5, 0x84, 0xb0, 0x2f, 0x92, 0xc8, 0x25, 0xbc,
	0x99, 0xaf, 0xd1, 0xf4, 0xbd, 0x2f, 0x32, 0xd9, 0xac, 0x4f, 0x10, 0x2c, 0x24, 0x72, 0x34, 0xf8,
	0xf5, 0x9c, 0xfd, 0x28, 0x36, 0xae, 0x8b, 0xc7, 0x53, 0x8e, 0x46, 0x03, 0x89, 0xa2, 0x49, 0x1d,
	0x0d, 0xe2, 0xd8, 0xa3, 0xd4, 0xd1, 0x20, 0x9e, 0xfd, 0xb9, 0x05, 0x13, 0x5d, 0xdc, 0x09, 0x5e,
	0xcd, 0x04, 0xd1, 0xe3, 0x77, 0xad, 0x1f, 0x95, 0xc8, 0x73, 0x17, 0xb1, 0x91, 0xea, 0x39, 0x9e,
	0x77, 0x49, 0xf5, 0x9c, 0xc4, 0x9b, 0xb4, 0xe0, 0x59, 0x99, 0x37, 0xc0, 0x69, 0x79, 0x8b, 0xa5,
	0x44, 0x94, 0xd5, 0x3e, 0x34, 0x98, 0xdb, 0xea, 0x7b, 0x9f, 0x3f, 0x28, 0xa3, 0xfb, 0x0f, 0xca,
	0xe8, 0x9f, 0x0f, 0xca, 0xe8, 0xe3, 0x87, 0xe5, 0x81, 0xfb, 0x0f, 0xcb, 0x03, 0x7f, 0x7d, 0x58,
	0x1e, 0x80, 0x05, 0xcb, 0x4e, 0x30, 0x77, 0x0d, 0x7d, 0x77, 0xbd, 0x6e, 0x79, 0x37, 0x5a, 0xd7,
	0x57, 0x6a, 0xf6, 0x61, 0x25, 0x12, 0xba, 0x60, 0xd9, 0xc2, 0x53, 0xe5, 0x56, 0xf4, 0x07, 0xae,
	0xde, 0xed, 0x26, 0x71, 0xaf, 0x0f, 0xd1, 0x3f, 0x6b, 0x7d, 0xe5, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x3c, 0x58, 0xfd, 0xe8, 0xee, 0x2b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// WriteScope adds or updates a scope.
	WriteScope(ctx context.Context, in *MsgWriteScopeRequest, opts ...grpc.CallOption) (*MsgWriteScopeResponse, error)
	// DeleteScope deletes a scope and all associated Records, Sessions.
	DeleteScope(ctx context.Context, in *MsgDeleteScopeRequest, opts ...grpc.CallOption) (*MsgDeleteScopeResponse, error)
	// AddScopeDataAccess adds data access AccAddress to scope
	AddScopeDataAccess(ctx context.Context, in *MsgAddScopeDataAccessRequest, opts ...grpc.CallOption) (*MsgAddScopeDataAccessResponse, error)
	// DeleteScopeDataAccess removes data access AccAddress from scope
	DeleteScopeDataAccess(ctx context.Context, in *MsgDeleteScopeDataAccessRequest, opts ...grpc.CallOption) (*MsgDeleteScopeDataAccessResponse, error)
	// AddScopeOwner adds new owner parties to a scope
	AddScopeOwner(ctx context.Context, in *MsgAddScopeOwnerRequest, opts ...grpc.CallOption) (*MsgAddScopeOwnerResponse, error)
	// DeleteScopeOwner removes owner parties (by addresses) from a scope
	DeleteScopeOwner(ctx context.Context, in *MsgDeleteScopeOwnerRequest, opts ...grpc.CallOption) (*MsgDeleteScopeOwnerResponse, error)
	// UpdateValueOwners sets the value owner of one or more scopes.
	UpdateValueOwners(ctx context.Context, in *MsgUpdateValueOwnersRequest, opts ...grpc.CallOption) (*MsgUpdateValueOwnersResponse, error)
	// MigrateValueOwner updates all scopes that have one value owner to have a another value owner.
	MigrateValueOwner(ctx context.Context, in *MsgMigrateValueOwnerRequest, opts ...grpc.CallOption) (*MsgMigrateValueOwnerResponse, error)
	// WriteSession adds or updates a session context.
	WriteSession(ctx context.Context, in *MsgWriteSessionRequest, opts ...grpc.CallOption) (*MsgWriteSessionResponse, error)
	// WriteRecord adds or updates a record.
	WriteRecord(ctx context.Context, in *MsgWriteRecordRequest, opts ...grpc.CallOption) (*MsgWriteRecordResponse, error)
	// DeleteRecord deletes a record.
	DeleteRecord(ctx context.Context, in *MsgDeleteRecordRequest, opts ...grpc.CallOption) (*MsgDeleteRecordResponse, error)
	// WriteScopeSpecification adds or updates a scope specification.
	WriteScopeSpecification(ctx context.Context, in *MsgWriteScopeSpecificationRequest, opts ...grpc.CallOption) (*MsgWriteScopeSpecificationResponse, error)
	// DeleteScopeSpecification deletes a scope specification.
	DeleteScopeSpecification(ctx context.Context, in *MsgDeleteScopeSpecificationRequest, opts ...grpc.CallOption) (*MsgDeleteScopeSpecificationResponse, error)
	// WriteContractSpecification adds or updates a contract specification.
	WriteContractSpecification(ctx context.Context, in *MsgWriteContractSpecificationRequest, opts ...grpc.CallOption) (*MsgWriteContractSpecificationResponse, error)
	// DeleteContractSpecification deletes a contract specification.
	DeleteContractSpecification(ctx context.Context, in *MsgDeleteContractSpecificationRequest, opts ...grpc.CallOption) (*MsgDeleteContractSpecificationResponse, error)
	// AddContractSpecToScopeSpec adds contract specification to a scope specification.
	AddContractSpecToScopeSpec(ctx context.Context, in *MsgAddContractSpecToScopeSpecRequest, opts ...grpc.CallOption) (*MsgAddContractSpecToScopeSpecResponse, error)
	// DeleteContractSpecFromScopeSpec deletes a contract specification from a scope specification.
	DeleteContractSpecFromScopeSpec(ctx context.Context, in *MsgDeleteContractSpecFromScopeSpecRequest, opts ...grpc.CallOption) (*MsgDeleteContractSpecFromScopeSpecResponse, error)
	// WriteRecordSpecification adds or updates a record specification.
	WriteRecordSpecification(ctx context.Context, in *MsgWriteRecordSpecificationRequest, opts ...grpc.CallOption) (*MsgWriteRecordSpecificationResponse, error)
	// DeleteRecordSpecification deletes a record specification.
	DeleteRecordSpecification(ctx context.Context, in *MsgDeleteRecordSpecificationRequest, opts ...grpc.CallOption) (*MsgDeleteRecordSpecificationResponse, error)
	// BindOSLocator binds an owner address to a uri.
	BindOSLocator(ctx context.Context, in *MsgBindOSLocatorRequest, opts ...grpc.CallOption) (*MsgBindOSLocatorResponse, error)
	// DeleteOSLocator deletes an existing ObjectStoreLocator record.
	DeleteOSLocator(ctx context.Context, in *MsgDeleteOSLocatorRequest, opts ...grpc.CallOption) (*MsgDeleteOSLocatorResponse, error)
	// ModifyOSLocator updates an ObjectStoreLocator record by the current owner.
	ModifyOSLocator(ctx context.Context, in *MsgModifyOSLocatorRequest, opts ...grpc.CallOption) (*MsgModifyOSLocatorResponse, error)
	// SetAccountData associates some basic data with a metadata address.
	// Currently, only scope ids are supported.
	SetAccountData(ctx context.Context, in *MsgSetAccountDataRequest, opts ...grpc.CallOption) (*MsgSetAccountDataResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) WriteScope(ctx context.Context, in *MsgWriteScopeRequest, opts ...grpc.CallOption) (*MsgWriteScopeResponse, error) {
	out := new(MsgWriteScopeResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/WriteScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteScope(ctx context.Context, in *MsgDeleteScopeRequest, opts ...grpc.CallOption) (*MsgDeleteScopeResponse, error) {
	out := new(MsgDeleteScopeResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/DeleteScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddScopeDataAccess(ctx context.Context, in *MsgAddScopeDataAccessRequest, opts ...grpc.CallOption) (*MsgAddScopeDataAccessResponse, error) {
	out := new(MsgAddScopeDataAccessResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/AddScopeDataAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteScopeDataAccess(ctx context.Context, in *MsgDeleteScopeDataAccessRequest, opts ...grpc.CallOption) (*MsgDeleteScopeDataAccessResponse, error) {
	out := new(MsgDeleteScopeDataAccessResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/DeleteScopeDataAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddScopeOwner(ctx context.Context, in *MsgAddScopeOwnerRequest, opts ...grpc.CallOption) (*MsgAddScopeOwnerResponse, error) {
	out := new(MsgAddScopeOwnerResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/AddScopeOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteScopeOwner(ctx context.Context, in *MsgDeleteScopeOwnerRequest, opts ...grpc.CallOption) (*MsgDeleteScopeOwnerResponse, error) {
	out := new(MsgDeleteScopeOwnerResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/DeleteScopeOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateValueOwners(ctx context.Context, in *MsgUpdateValueOwnersRequest, opts ...grpc.CallOption) (*MsgUpdateValueOwnersResponse, error) {
	out := new(MsgUpdateValueOwnersResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/UpdateValueOwners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MigrateValueOwner(ctx context.Context, in *MsgMigrateValueOwnerRequest, opts ...grpc.CallOption) (*MsgMigrateValueOwnerResponse, error) {
	out := new(MsgMigrateValueOwnerResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/MigrateValueOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WriteSession(ctx context.Context, in *MsgWriteSessionRequest, opts ...grpc.CallOption) (*MsgWriteSessionResponse, error) {
	out := new(MsgWriteSessionResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/WriteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WriteRecord(ctx context.Context, in *MsgWriteRecordRequest, opts ...grpc.CallOption) (*MsgWriteRecordResponse, error) {
	out := new(MsgWriteRecordResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/WriteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteRecord(ctx context.Context, in *MsgDeleteRecordRequest, opts ...grpc.CallOption) (*MsgDeleteRecordResponse, error) {
	out := new(MsgDeleteRecordResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/DeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WriteScopeSpecification(ctx context.Context, in *MsgWriteScopeSpecificationRequest, opts ...grpc.CallOption) (*MsgWriteScopeSpecificationResponse, error) {
	out := new(MsgWriteScopeSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/WriteScopeSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteScopeSpecification(ctx context.Context, in *MsgDeleteScopeSpecificationRequest, opts ...grpc.CallOption) (*MsgDeleteScopeSpecificationResponse, error) {
	out := new(MsgDeleteScopeSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/DeleteScopeSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WriteContractSpecification(ctx context.Context, in *MsgWriteContractSpecificationRequest, opts ...grpc.CallOption) (*MsgWriteContractSpecificationResponse, error) {
	out := new(MsgWriteContractSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/WriteContractSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteContractSpecification(ctx context.Context, in *MsgDeleteContractSpecificationRequest, opts ...grpc.CallOption) (*MsgDeleteContractSpecificationResponse, error) {
	out := new(MsgDeleteContractSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/DeleteContractSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddContractSpecToScopeSpec(ctx context.Context, in *MsgAddContractSpecToScopeSpecRequest, opts ...grpc.CallOption) (*MsgAddContractSpecToScopeSpecResponse, error) {
	out := new(MsgAddContractSpecToScopeSpecResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/AddContractSpecToScopeSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteContractSpecFromScopeSpec(ctx context.Context, in *MsgDeleteContractSpecFromScopeSpecRequest, opts ...grpc.CallOption) (*MsgDeleteContractSpecFromScopeSpecResponse, error) {
	out := new(MsgDeleteContractSpecFromScopeSpecResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/DeleteContractSpecFromScopeSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WriteRecordSpecification(ctx context.Context, in *MsgWriteRecordSpecificationRequest, opts ...grpc.CallOption) (*MsgWriteRecordSpecificationResponse, error) {
	out := new(MsgWriteRecordSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/WriteRecordSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteRecordSpecification(ctx context.Context, in *MsgDeleteRecordSpecificationRequest, opts ...grpc.CallOption) (*MsgDeleteRecordSpecificationResponse, error) {
	out := new(MsgDeleteRecordSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/DeleteRecordSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BindOSLocator(ctx context.Context, in *MsgBindOSLocatorRequest, opts ...grpc.CallOption) (*MsgBindOSLocatorResponse, error) {
	out := new(MsgBindOSLocatorResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/BindOSLocator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteOSLocator(ctx context.Context, in *MsgDeleteOSLocatorRequest, opts ...grpc.CallOption) (*MsgDeleteOSLocatorResponse, error) {
	out := new(MsgDeleteOSLocatorResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/DeleteOSLocator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ModifyOSLocator(ctx context.Context, in *MsgModifyOSLocatorRequest, opts ...grpc.CallOption) (*MsgModifyOSLocatorResponse, error) {
	out := new(MsgModifyOSLocatorResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/ModifyOSLocator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetAccountData(ctx context.Context, in *MsgSetAccountDataRequest, opts ...grpc.CallOption) (*MsgSetAccountDataResponse, error) {
	out := new(MsgSetAccountDataResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Msg/SetAccountData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// WriteScope adds or updates a scope.
	WriteScope(context.Context, *MsgWriteScopeRequest) (*MsgWriteScopeResponse, error)
	// DeleteScope deletes a scope and all associated Records, Sessions.
	DeleteScope(context.Context, *MsgDeleteScopeRequest) (*MsgDeleteScopeResponse, error)
	// AddScopeDataAccess adds data access AccAddress to scope
	AddScopeDataAccess(context.Context, *MsgAddScopeDataAccessRequest) (*MsgAddScopeDataAccessResponse, error)
	// DeleteScopeDataAccess removes data access AccAddress from scope
	DeleteScopeDataAccess(context.Context, *MsgDeleteScopeDataAccessRequest) (*MsgDeleteScopeDataAccessResponse, error)
	// AddScopeOwner adds new owner parties to a scope
	AddScopeOwner(context.Context, *MsgAddScopeOwnerRequest) (*MsgAddScopeOwnerResponse, error)
	// DeleteScopeOwner removes owner parties (by addresses) from a scope
	DeleteScopeOwner(context.Context, *MsgDeleteScopeOwnerRequest) (*MsgDeleteScopeOwnerResponse, error)
	// UpdateValueOwners sets the value owner of one or more scopes.
	UpdateValueOwners(context.Context, *MsgUpdateValueOwnersRequest) (*MsgUpdateValueOwnersResponse, error)
	// MigrateValueOwner updates all scopes that have one value owner to have a another value owner.
	MigrateValueOwner(context.Context, *MsgMigrateValueOwnerRequest) (*MsgMigrateValueOwnerResponse, error)
	// WriteSession adds or updates a session context.
	WriteSession(context.Context, *MsgWriteSessionRequest) (*MsgWriteSessionResponse, error)
	// WriteRecord adds or updates a record.
	WriteRecord(context.Context, *MsgWriteRecordRequest) (*MsgWriteRecordResponse, error)
	// DeleteRecord deletes a record.
	DeleteRecord(context.Context, *MsgDeleteRecordRequest) (*MsgDeleteRecordResponse, error)
	// WriteScopeSpecification adds or updates a scope specification.
	WriteScopeSpecification(context.Context, *MsgWriteScopeSpecificationRequest) (*MsgWriteScopeSpecificationResponse, error)
	// DeleteScopeSpecification deletes a scope specification.
	DeleteScopeSpecification(context.Context, *MsgDeleteScopeSpecificationRequest) (*MsgDeleteScopeSpecificationResponse, error)
	// WriteContractSpecification adds or updates a contract specification.
	WriteContractSpecification(context.Context, *MsgWriteContractSpecificationRequest) (*MsgWriteContractSpecificationResponse, error)
	// DeleteContractSpecification deletes a contract specification.
	DeleteContractSpecification(context.Context, *MsgDeleteContractSpecificationRequest) (*MsgDeleteContractSpecificationResponse, error)
	// AddContractSpecToScopeSpec adds contract specification to a scope specification.
	AddContractSpecToScopeSpec(context.Context, *MsgAddContractSpecToScopeSpecRequest) (*MsgAddContractSpecToScopeSpecResponse, error)
	// DeleteContractSpecFromScopeSpec deletes a contract specification from a scope specification.
	DeleteContractSpecFromScopeSpec(context.Context, *MsgDeleteContractSpecFromScopeSpecRequest) (*MsgDeleteContractSpecFromScopeSpecResponse, error)
	// WriteRecordSpecification adds or updates a record specification.
	WriteRecordSpecification(context.Context, *MsgWriteRecordSpecificationRequest) (*MsgWriteRecordSpecificationResponse, error)
	// DeleteRecordSpecification deletes a record specification.
	DeleteRecordSpecification(context.Context, *MsgDeleteRecordSpecificationRequest) (*MsgDeleteRecordSpecificationResponse, error)
	// BindOSLocator binds an owner address to a uri.
	BindOSLocator(context.Context, *MsgBindOSLocatorRequest) (*MsgBindOSLocatorResponse, error)
	// DeleteOSLocator deletes an existing ObjectStoreLocator record.
	DeleteOSLocator(context.Context, *MsgDeleteOSLocatorRequest) (*MsgDeleteOSLocatorResponse, error)
	// ModifyOSLocator updates an ObjectStoreLocator record by the current owner.
	ModifyOSLocator(context.Context, *MsgModifyOSLocatorRequest) (*MsgModifyOSLocatorResponse, error)
	// SetAccountData associates some basic data with a metadata address.
	// Currently, only scope ids are supported.
	SetAccountData(context.Context, *MsgSetAccountDataRequest) (*MsgSetAccountDataResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) WriteScope(ctx context.Context, req *MsgWriteScopeRequest) (*MsgWriteScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteScope not implemented")
}
func (*UnimplementedMsgServer) DeleteScope(ctx context.Context, req *MsgDeleteScopeRequest) (*MsgDeleteScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScope not implemented")
}
func (*UnimplementedMsgServer) AddScopeDataAccess(ctx context.Context, req *MsgAddScopeDataAccessRequest) (*MsgAddScopeDataAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScopeDataAccess not implemented")
}
func (*UnimplementedMsgServer) DeleteScopeDataAccess(ctx context.Context, req *MsgDeleteScopeDataAccessRequest) (*MsgDeleteScopeDataAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScopeDataAccess not implemented")
}
func (*UnimplementedMsgServer) AddScopeOwner(ctx context.Context, req *MsgAddScopeOwnerRequest) (*MsgAddScopeOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScopeOwner not implemented")
}
func (*UnimplementedMsgServer) DeleteScopeOwner(ctx context.Context, req *MsgDeleteScopeOwnerRequest) (*MsgDeleteScopeOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScopeOwner not implemented")
}
func (*UnimplementedMsgServer) UpdateValueOwners(ctx context.Context, req *MsgUpdateValueOwnersRequest) (*MsgUpdateValueOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValueOwners not implemented")
}
func (*UnimplementedMsgServer) MigrateValueOwner(ctx context.Context, req *MsgMigrateValueOwnerRequest) (*MsgMigrateValueOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateValueOwner not implemented")
}
func (*UnimplementedMsgServer) WriteSession(ctx context.Context, req *MsgWriteSessionRequest) (*MsgWriteSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteSession not implemented")
}
func (*UnimplementedMsgServer) WriteRecord(ctx context.Context, req *MsgWriteRecordRequest) (*MsgWriteRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteRecord not implemented")
}
func (*UnimplementedMsgServer) DeleteRecord(ctx context.Context, req *MsgDeleteRecordRequest) (*MsgDeleteRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (*UnimplementedMsgServer) WriteScopeSpecification(ctx context.Context, req *MsgWriteScopeSpecificationRequest) (*MsgWriteScopeSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteScopeSpecification not implemented")
}
func (*UnimplementedMsgServer) DeleteScopeSpecification(ctx context.Context, req *MsgDeleteScopeSpecificationRequest) (*MsgDeleteScopeSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScopeSpecification not implemented")
}
func (*UnimplementedMsgServer) WriteContractSpecification(ctx context.Context, req *MsgWriteContractSpecificationRequest) (*MsgWriteContractSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteContractSpecification not implemented")
}
func (*UnimplementedMsgServer) DeleteContractSpecification(ctx context.Context, req *MsgDeleteContractSpecificationRequest) (*MsgDeleteContractSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContractSpecification not implemented")
}
func (*UnimplementedMsgServer) AddContractSpecToScopeSpec(ctx context.Context, req *MsgAddContractSpecToScopeSpecRequest) (*MsgAddContractSpecToScopeSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContractSpecToScopeSpec not implemented")
}
func (*UnimplementedMsgServer) DeleteContractSpecFromScopeSpec(ctx context.Context, req *MsgDeleteContractSpecFromScopeSpecRequest) (*MsgDeleteContractSpecFromScopeSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContractSpecFromScopeSpec not implemented")
}
func (*UnimplementedMsgServer) WriteRecordSpecification(ctx context.Context, req *MsgWriteRecordSpecificationRequest) (*MsgWriteRecordSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteRecordSpecification not implemented")
}
func (*UnimplementedMsgServer) DeleteRecordSpecification(ctx context.Context, req *MsgDeleteRecordSpecificationRequest) (*MsgDeleteRecordSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecordSpecification not implemented")
}
func (*UnimplementedMsgServer) BindOSLocator(ctx context.Context, req *MsgBindOSLocatorRequest) (*MsgBindOSLocatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindOSLocator not implemented")
}
func (*UnimplementedMsgServer) DeleteOSLocator(ctx context.Context, req *MsgDeleteOSLocatorRequest) (*MsgDeleteOSLocatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOSLocator not implemented")
}
func (*UnimplementedMsgServer) ModifyOSLocator(ctx context.Context, req *MsgModifyOSLocatorRequest) (*MsgModifyOSLocatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyOSLocator not implemented")
}
func (*UnimplementedMsgServer) SetAccountData(ctx context.Context, req *MsgSetAccountDataRequest) (*MsgSetAccountDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountData not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_WriteScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWriteScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WriteScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/WriteScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WriteScope(ctx, req.(*MsgWriteScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/DeleteScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteScope(ctx, req.(*MsgDeleteScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddScopeDataAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddScopeDataAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddScopeDataAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/AddScopeDataAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddScopeDataAccess(ctx, req.(*MsgAddScopeDataAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteScopeDataAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteScopeDataAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteScopeDataAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/DeleteScopeDataAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteScopeDataAccess(ctx, req.(*MsgDeleteScopeDataAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddScopeOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddScopeOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddScopeOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/AddScopeOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddScopeOwner(ctx, req.(*MsgAddScopeOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteScopeOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteScopeOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteScopeOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/DeleteScopeOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteScopeOwner(ctx, req.(*MsgDeleteScopeOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateValueOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateValueOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateValueOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/UpdateValueOwners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateValueOwners(ctx, req.(*MsgUpdateValueOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MigrateValueOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMigrateValueOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MigrateValueOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/MigrateValueOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MigrateValueOwner(ctx, req.(*MsgMigrateValueOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WriteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWriteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WriteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/WriteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WriteSession(ctx, req.(*MsgWriteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WriteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWriteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WriteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/WriteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WriteRecord(ctx, req.(*MsgWriteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteRecord(ctx, req.(*MsgDeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WriteScopeSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWriteScopeSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WriteScopeSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/WriteScopeSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WriteScopeSpecification(ctx, req.(*MsgWriteScopeSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteScopeSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteScopeSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteScopeSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/DeleteScopeSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteScopeSpecification(ctx, req.(*MsgDeleteScopeSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WriteContractSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWriteContractSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WriteContractSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/WriteContractSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WriteContractSpecification(ctx, req.(*MsgWriteContractSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteContractSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteContractSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteContractSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/DeleteContractSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteContractSpecification(ctx, req.(*MsgDeleteContractSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddContractSpecToScopeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddContractSpecToScopeSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddContractSpecToScopeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/AddContractSpecToScopeSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddContractSpecToScopeSpec(ctx, req.(*MsgAddContractSpecToScopeSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteContractSpecFromScopeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteContractSpecFromScopeSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteContractSpecFromScopeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/DeleteContractSpecFromScopeSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteContractSpecFromScopeSpec(ctx, req.(*MsgDeleteContractSpecFromScopeSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WriteRecordSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWriteRecordSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WriteRecordSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/WriteRecordSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WriteRecordSpecification(ctx, req.(*MsgWriteRecordSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteRecordSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteRecordSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteRecordSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/DeleteRecordSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteRecordSpecification(ctx, req.(*MsgDeleteRecordSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BindOSLocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBindOSLocatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BindOSLocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/BindOSLocator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BindOSLocator(ctx, req.(*MsgBindOSLocatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteOSLocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteOSLocatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteOSLocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/DeleteOSLocator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteOSLocator(ctx, req.(*MsgDeleteOSLocatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ModifyOSLocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgModifyOSLocatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ModifyOSLocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/ModifyOSLocator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ModifyOSLocator(ctx, req.(*MsgModifyOSLocatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetAccountDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Msg/SetAccountData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetAccountData(ctx, req.(*MsgSetAccountDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.metadata.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteScope",
			Handler:    _Msg_WriteScope_Handler,
		},
		{
			MethodName: "DeleteScope",
			Handler:    _Msg_DeleteScope_Handler,
		},
		{
			MethodName: "AddScopeDataAccess",
			Handler:    _Msg_AddScopeDataAccess_Handler,
		},
		{
			MethodName: "DeleteScopeDataAccess",
			Handler:    _Msg_DeleteScopeDataAccess_Handler,
		},
		{
			MethodName: "AddScopeOwner",
			Handler:    _Msg_AddScopeOwner_Handler,
		},
		{
			MethodName: "DeleteScopeOwner",
			Handler:    _Msg_DeleteScopeOwner_Handler,
		},
		{
			MethodName: "UpdateValueOwners",
			Handler:    _Msg_UpdateValueOwners_Handler,
		},
		{
			MethodName: "MigrateValueOwner",
			Handler:    _Msg_MigrateValueOwner_Handler,
		},
		{
			MethodName: "WriteSession",
			Handler:    _Msg_WriteSession_Handler,
		},
		{
			MethodName: "WriteRecord",
			Handler:    _Msg_WriteRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _Msg_DeleteRecord_Handler,
		},
		{
			MethodName: "WriteScopeSpecification",
			Handler:    _Msg_WriteScopeSpecification_Handler,
		},
		{
			MethodName: "DeleteScopeSpecification",
			Handler:    _Msg_DeleteScopeSpecification_Handler,
		},
		{
			MethodName: "WriteContractSpecification",
			Handler:    _Msg_WriteContractSpecification_Handler,
		},
		{
			MethodName: "DeleteContractSpecification",
			Handler:    _Msg_DeleteContractSpecification_Handler,
		},
		{
			MethodName: "AddContractSpecToScopeSpec",
			Handler:    _Msg_AddContractSpecToScopeSpec_Handler,
		},
		{
			MethodName: "DeleteContractSpecFromScopeSpec",
			Handler:    _Msg_DeleteContractSpecFromScopeSpec_Handler,
		},
		{
			MethodName: "WriteRecordSpecification",
			Handler:    _Msg_WriteRecordSpecification_Handler,
		},
		{
			MethodName: "DeleteRecordSpecification",
			Handler:    _Msg_DeleteRecordSpecification_Handler,
		},
		{
			MethodName: "BindOSLocator",
			Handler:    _Msg_BindOSLocator_Handler,
		},
		{
			MethodName: "DeleteOSLocator",
			Handler:    _Msg_DeleteOSLocator_Handler,
		},
		{
			MethodName: "ModifyOSLocator",
			Handler:    _Msg_ModifyOSLocator_Handler,
		},
		{
			MethodName: "SetAccountData",
			Handler:    _Msg_SetAccountData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/metadata/v1/tx.proto",
}

func (m *MsgWriteScopeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteScopeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteScopeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecUuid) > 0 {
		i -= len(m.SpecUuid)
		copy(dAtA[i:], m.SpecUuid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SpecUuid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ScopeUuid) > 0 {
		i -= len(m.ScopeUuid)
		copy(dAtA[i:], m.ScopeUuid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ScopeUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgWriteScopeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteScopeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteScopeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScopeIdInfo != nil {
		{
			size, err := m.ScopeIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteScopeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteScopeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteScopeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.ScopeId.Size()
		i -= size
		if _, err := m.ScopeId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeleteScopeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteScopeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteScopeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddScopeDataAccessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddScopeDataAccessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddScopeDataAccessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DataAccess) > 0 {
		for iNdEx := len(m.DataAccess) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataAccess[iNdEx])
			copy(dAtA[i:], m.DataAccess[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DataAccess[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.ScopeId.Size()
		i -= size
		if _, err := m.ScopeId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgAddScopeDataAccessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddScopeDataAccessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddScopeDataAccessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteScopeDataAccessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteScopeDataAccessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteScopeDataAccessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DataAccess) > 0 {
		for iNdEx := len(m.DataAccess) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataAccess[iNdEx])
			copy(dAtA[i:], m.DataAccess[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DataAccess[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.ScopeId.Size()
		i -= size
		if _, err := m.ScopeId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeleteScopeDataAccessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteScopeDataAccessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteScopeDataAccessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddScopeOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddScopeOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddScopeOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Owners) > 0 {
		for iNdEx := len(m.Owners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Owners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.ScopeId.Size()
		i -= size
		if _, err := m.ScopeId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgAddScopeOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddScopeOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddScopeOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteScopeOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteScopeOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteScopeOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Owners) > 0 {
		for iNdEx := len(m.Owners) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Owners[iNdEx])
			copy(dAtA[i:], m.Owners[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Owners[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.ScopeId.Size()
		i -= size
		if _, err := m.ScopeId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeleteScopeOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteScopeOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteScopeOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateValueOwnersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateValueOwnersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateValueOwnersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ValueOwnerAddress) > 0 {
		i -= len(m.ValueOwnerAddress)
		copy(dAtA[i:], m.ValueOwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValueOwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeIds) > 0 {
		for iNdEx := len(m.ScopeIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ScopeIds[iNdEx].Size()
				i -= size
				if _, err := m.ScopeIds[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateValueOwnersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateValueOwnersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateValueOwnersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMigrateValueOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMigrateValueOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMigrateValueOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Proposed) > 0 {
		i -= len(m.Proposed)
		copy(dAtA[i:], m.Proposed)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposed)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Existing) > 0 {
		i -= len(m.Existing)
		copy(dAtA[i:], m.Existing)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Existing)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMigrateValueOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMigrateValueOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMigrateValueOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWriteSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteSessionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecUuid) > 0 {
		i -= len(m.SpecUuid)
		copy(dAtA[i:], m.SpecUuid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SpecUuid)))
		i--
		dAtA[i] = 0x22
	}
	if m.SessionIdComponents != nil {
		{
			size, err := m.SessionIdComponents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SessionIdComponents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionIdComponents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionIdComponents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionUuid) > 0 {
		i -= len(m.SessionUuid)
		copy(dAtA[i:], m.SessionUuid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ScopeIdentifier != nil {
		{
			size := m.ScopeIdentifier.Size()
			i -= size
			if _, err := m.ScopeIdentifier.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SessionIdComponents_ScopeUuid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionIdComponents_ScopeUuid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ScopeUuid)
	copy(dAtA[i:], m.ScopeUuid)
	i = encodeVarintTx(dAtA, i, uint64(len(m.ScopeUuid)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *SessionIdComponents_ScopeAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionIdComponents_ScopeAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ScopeAddr)
	copy(dAtA[i:], m.ScopeAddr)
	i = encodeVarintTx(dAtA, i, uint64(len(m.ScopeAddr)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *MsgWriteSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteSessionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionIdInfo != nil {
		{
			size, err := m.SessionIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWriteRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parties) > 0 {
		for iNdEx := len(m.Parties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ContractSpecUuid) > 0 {
		i -= len(m.ContractSpecUuid)
		copy(dAtA[i:], m.ContractSpecUuid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractSpecUuid)))
		i--
		dAtA[i] = 0x22
	}
	if m.SessionIdComponents != nil {
		{
			size, err := m.SessionIdComponents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgWriteRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordIdInfo != nil {
		{
			size, err := m.RecordIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.RecordId.Size()
		i -= size
		if _, err := m.RecordId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeleteRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWriteScopeSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteScopeSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteScopeSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecUuid) > 0 {
		i -= len(m.SpecUuid)
		copy(dAtA[i:], m.SpecUuid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SpecUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Specification.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgWriteScopeSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteScopeSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteScopeSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScopeSpecIdInfo != nil {
		{
			size, err := m.ScopeSpecIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteScopeSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteScopeSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteScopeSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.SpecificationId.Size()
		i -= size
		if _, err := m.SpecificationId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeleteScopeSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteScopeSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteScopeSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWriteContractSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteContractSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteContractSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecUuid) > 0 {
		i -= len(m.SpecUuid)
		copy(dAtA[i:], m.SpecUuid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SpecUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Specification.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgWriteContractSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteContractSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteContractSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractSpecIdInfo != nil {
		{
			size, err := m.ContractSpecIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddContractSpecToScopeSpecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddContractSpecToScopeSpecRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddContractSpecToScopeSpecRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.ScopeSpecificationId.Size()
		i -= size
		if _, err := m.ScopeSpecificationId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ContractSpecificationId.Size()
		i -= size
		if _, err := m.ContractSpecificationId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgAddContractSpecToScopeSpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddContractSpecToScopeSpecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddContractSpecToScopeSpecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteContractSpecFromScopeSpecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteContractSpecFromScopeSpecRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteContractSpecFromScopeSpecRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.ScopeSpecificationId.Size()
		i -= size
		if _, err := m.ScopeSpecificationId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ContractSpecificationId.Size()
		i -= size
		if _, err := m.ContractSpecificationId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeleteContractSpecFromScopeSpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteContractSpecFromScopeSpecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteContractSpecFromScopeSpecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteContractSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteContractSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteContractSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.SpecificationId.Size()
		i -= size
		if _, err := m.SpecificationId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeleteContractSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteContractSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteContractSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWriteRecordSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteRecordSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteRecordSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractSpecUuid) > 0 {
		i -= len(m.ContractSpecUuid)
		copy(dAtA[i:], m.ContractSpecUuid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractSpecUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Specification.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgWriteRecordSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteRecordSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteRecordSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordSpecIdInfo != nil {
		{
			size, err := m.RecordSpecIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteRecordSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteRecordSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteRecordSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.SpecificationId.Size()
		i -= size
		if _, err := m.SpecificationId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeleteRecordSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteRecordSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteRecordSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBindOSLocatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBindOSLocatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBindOSLocatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Locator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgBindOSLocatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBindOSLocatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBindOSLocatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Locator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeleteOSLocatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteOSLocatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteOSLocatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Locator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeleteOSLocatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteOSLocatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteOSLocatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Locator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgModifyOSLocatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModifyOSLocatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModifyOSLocatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Locator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgModifyOSLocatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModifyOSLocatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModifyOSLocatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Locator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSetAccountDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetAccountDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetAccountDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.MetadataAddr.Size()
		i -= size
		if _, err := m.MetadataAddr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSetAccountDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetAccountDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetAccountDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWriteP8EContractSpecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteP8EContractSpecRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteP8EContractSpecRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Contractspec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgWriteP8EContractSpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteP8EContractSpecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteP8EContractSpecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecordSpecIdInfos) > 0 {
		for iNdEx := len(m.RecordSpecIdInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordSpecIdInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ContractSpecIdInfo != nil {
		{
			size, err := m.ContractSpecIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgP8EMemorializeContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgP8EMemorializeContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgP8EMemorializeContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Invoker) > 0 {
		i -= len(m.Invoker)
		copy(dAtA[i:], m.Invoker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Invoker)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Signatures != nil {
		{
			size, err := m.Signatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Contract != nil {
		{
			size, err := m.Contract.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Recitals != nil {
		{
			size, err := m.Recitals.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ScopeSpecificationId) > 0 {
		i -= len(m.ScopeSpecificationId)
		copy(dAtA[i:], m.ScopeSpecificationId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ScopeSpecificationId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgP8EMemorializeContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgP8EMemorializeContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgP8EMemorializeContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecordIdInfos) > 0 {
		for iNdEx := len(m.RecordIdInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordIdInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SessionIdInfo != nil {
		{
			size, err := m.SessionIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ScopeIdInfo != nil {
		{
			size, err := m.ScopeIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgWriteScopeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Scope.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.ScopeUuid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SpecUuid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWriteScopeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScopeIdInfo != nil {
		l = m.ScopeIdInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteScopeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ScopeId.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDeleteScopeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddScopeDataAccessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ScopeId.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.DataAccess) > 0 {
		for _, s := range m.DataAccess {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddScopeDataAccessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteScopeDataAccessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ScopeId.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.DataAccess) > 0 {
		for _, s := range m.DataAccess {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDeleteScopeDataAccessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddScopeOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ScopeId.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Owners) > 0 {
		for _, e := range m.Owners {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddScopeOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteScopeOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ScopeId.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Owners) > 0 {
		for _, s := range m.Owners {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDeleteScopeOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateValueOwnersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScopeIds) > 0 {
		for _, e := range m.ScopeIds {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.ValueOwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateValueOwnersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMigrateValueOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Existing)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Proposed)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMigrateValueOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWriteSessionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Session.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.SessionIdComponents != nil {
		l = m.SessionIdComponents.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SpecUuid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *SessionIdComponents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScopeIdentifier != nil {
		n += m.ScopeIdentifier.Size()
	}
	l = len(m.SessionUuid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *SessionIdComponents_ScopeUuid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeUuid)
	n += 1 + l + sovTx(uint64(l))
	return n
}
func (m *SessionIdComponents_ScopeAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeAddr)
	n += 1 + l + sovTx(uint64(l))
	return n
}
func (m *MsgWriteSessionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionIdInfo != nil {
		l = m.SessionIdInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWriteRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Record.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.SessionIdComponents != nil {
		l = m.SessionIdComponents.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractSpecUuid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Parties) > 0 {
		for _, e := range m.Parties {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgWriteRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordIdInfo != nil {
		l = m.RecordIdInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RecordId.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDeleteRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWriteScopeSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Specification.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.SpecUuid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWriteScopeSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScopeSpecIdInfo != nil {
		l = m.ScopeSpecIdInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteScopeSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpecificationId.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDeleteScopeSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWriteContractSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Specification.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.SpecUuid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWriteContractSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractSpecIdInfo != nil {
		l = m.ContractSpecIdInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddContractSpecToScopeSpecRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ContractSpecificationId.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ScopeSpecificationId.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddContractSpecToScopeSpecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteContractSpecFromScopeSpecRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ContractSpecificationId.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ScopeSpecificationId.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDeleteContractSpecFromScopeSpecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteContractSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpecificationId.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDeleteContractSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWriteRecordSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Specification.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.ContractSpecUuid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWriteRecordSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordSpecIdInfo != nil {
		l = m.RecordSpecIdInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteRecordSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpecificationId.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDeleteRecordSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBindOSLocatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Locator.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBindOSLocatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Locator.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDeleteOSLocatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Locator.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDeleteOSLocatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Locator.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgModifyOSLocatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Locator.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgModifyOSLocatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Locator.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetAccountDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MetadataAddr.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetAccountDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWriteP8EContractSpecRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Contractspec.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgWriteP8EContractSpecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractSpecIdInfo != nil {
		l = m.ContractSpecIdInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.RecordSpecIdInfos) > 0 {
		for _, e := range m.RecordSpecIdInfos {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgP8EMemorializeContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ScopeSpecificationId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Recitals != nil {
		l = m.Recitals.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Contract != nil {
		l = m.Contract.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Signatures != nil {
		l = m.Signatures.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Invoker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgP8EMemorializeContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScopeIdInfo != nil {
		l = m.ScopeIdInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SessionIdInfo != nil {
		l = m.SessionIdInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.RecordIdInfos) > 0 {
		for _, e := range m.RecordIdInfos {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgWriteScopeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteScopeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteScopeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteScopeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteScopeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteScopeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeIdInfo == nil {
				m.ScopeIdInfo = &ScopeIdInfo{}
			}
			if err := m.ScopeIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteScopeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteScopeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteScopeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScopeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteScopeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteScopeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteScopeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddScopeDataAccessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddScopeDataAccessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddScopeDataAccessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScopeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataAccess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataAccess = append(m.DataAccess, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddScopeDataAccessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddScopeDataAccessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddScopeDataAccessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteScopeDataAccessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteScopeDataAccessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteScopeDataAccessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScopeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataAccess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataAccess = append(m.DataAccess, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteScopeDataAccessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteScopeDataAccessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteScopeDataAccessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddScopeOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddScopeOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddScopeOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScopeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owners = append(m.Owners, Party{})
			if err := m.Owners[len(m.Owners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddScopeOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddScopeOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddScopeOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteScopeOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteScopeOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteScopeOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScopeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owners = append(m.Owners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteScopeOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteScopeOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteScopeOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateValueOwnersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateValueOwnersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateValueOwnersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v MetadataAddress
			m.ScopeIds = append(m.ScopeIds, v)
			if err := m.ScopeIds[len(m.ScopeIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueOwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueOwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateValueOwnersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateValueOwnersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateValueOwnersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMigrateValueOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMigrateValueOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMigrateValueOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Existing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Existing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMigrateValueOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMigrateValueOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMigrateValueOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionIdComponents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionIdComponents == nil {
				m.SessionIdComponents = &SessionIdComponents{}
			}
			if err := m.SessionIdComponents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionIdComponents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionIdComponents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionIdComponents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeIdentifier = &SessionIdComponents_ScopeUuid{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeIdentifier = &SessionIdComponents_ScopeAddr{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionIdInfo == nil {
				m.SessionIdInfo = &SessionIdInfo{}
			}
			if err := m.SessionIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionIdComponents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionIdComponents == nil {
				m.SessionIdComponents = &SessionIdComponents{}
			}
			if err := m.SessionIdComponents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parties = append(m.Parties, Party{})
			if err := m.Parties[len(m.Parties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordIdInfo == nil {
				m.RecordIdInfo = &RecordIdInfo{}
			}
			if err := m.RecordIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecordId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteScopeSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteScopeSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteScopeSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Specification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Specification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteScopeSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteScopeSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteScopeSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeSpecIdInfo == nil {
				m.ScopeSpecIdInfo = &ScopeSpecIdInfo{}
			}
			if err := m.ScopeSpecIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteScopeSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteScopeSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteScopeSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecificationId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteScopeSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteScopeSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteScopeSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteContractSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteContractSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteContractSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Specification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Specification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteContractSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteContractSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteContractSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractSpecIdInfo == nil {
				m.ContractSpecIdInfo = &ContractSpecIdInfo{}
			}
			if err := m.ContractSpecIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddContractSpecToScopeSpecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddContractSpecToScopeSpecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddContractSpecToScopeSpecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContractSpecificationId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScopeSpecificationId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddContractSpecToScopeSpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddContractSpecToScopeSpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddContractSpecToScopeSpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteContractSpecFromScopeSpecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteContractSpecFromScopeSpecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteContractSpecFromScopeSpecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContractSpecificationId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScopeSpecificationId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteContractSpecFromScopeSpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteContractSpecFromScopeSpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteContractSpecFromScopeSpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteContractSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteContractSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteContractSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecificationId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteContractSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteContractSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteContractSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteRecordSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteRecordSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteRecordSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Specification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Specification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteRecordSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteRecordSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteRecordSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordSpecIdInfo == nil {
				m.RecordSpecIdInfo = &RecordSpecIdInfo{}
			}
			if err := m.RecordSpecIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteRecordSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteRecordSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteRecordSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecificationId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteRecordSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteRecordSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteRecordSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBindOSLocatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBindOSLocatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBindOSLocatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBindOSLocatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBindOSLocatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBindOSLocatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteOSLocatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteOSLocatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteOSLocatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteOSLocatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteOSLocatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteOSLocatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModifyOSLocatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModifyOSLocatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModifyOSLocatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModifyOSLocatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModifyOSLocatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModifyOSLocatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetAccountDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetAccountDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetAccountDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MetadataAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetAccountDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetAccountDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetAccountDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteP8EContractSpecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteP8eContractSpecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteP8eContractSpecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contractspec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Contractspec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteP8EContractSpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteP8eContractSpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteP8eContractSpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractSpecIdInfo == nil {
				m.ContractSpecIdInfo = &ContractSpecIdInfo{}
			}
			if err := m.ContractSpecIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecIdInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecIdInfos = append(m.RecordSpecIdInfos, &RecordSpecIdInfo{})
			if err := m.RecordSpecIdInfos[len(m.RecordSpecIdInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgP8EMemorializeContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgP8eMemorializeContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgP8eMemorializeContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeSpecificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recitals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recitals == nil {
				m.Recitals = &p8e.Recitals{}
			}
			if err := m.Recitals.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contract == nil {
				m.Contract = &p8e.Contract{}
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signatures == nil {
				m.Signatures = &p8e.SignatureSet{}
			}
			if err := m.Signatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invoker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgP8EMemorializeContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgP8eMemorializeContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgP8eMemorializeContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeIdInfo == nil {
				m.ScopeIdInfo = &ScopeIdInfo{}
			}
			if err := m.ScopeIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionIdInfo == nil {
				m.SessionIdInfo = &SessionIdInfo{}
			}
			if err := m.SessionIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordIdInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordIdInfos = append(m.RecordIdInfos, &RecordIdInfo{})
			if err := m.RecordIdInfos[len(m.RecordIdInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
