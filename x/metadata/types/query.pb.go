// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/metadata/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

func (m *QueryParamsRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// request is a copy of the request that generated these results.
	Request *QueryParamsRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *QueryParamsResponse) GetRequest() *QueryParamsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ScopeRequest is the request type for the Query/Scope RPC method.
type ScopeRequest struct {
	// scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.
	// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
	ScopeId string `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
	// session_addr is a bech32 session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
	SessionAddr string `protobuf:"bytes,2,opt,name=session_addr,json=sessionAddr,proto3" json:"session_addr,omitempty" yaml:"session_addr"`
	// record_addr is a bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
	RecordAddr string `protobuf:"bytes,3,opt,name=record_addr,json=recordAddr,proto3" json:"record_addr,omitempty" yaml:"record_addr"`
	// include_sessions is a flag for whether to include the sessions of the scope in the response.
	IncludeSessions bool `protobuf:"varint,10,opt,name=include_sessions,json=includeSessions,proto3" json:"include_sessions,omitempty" yaml:"include_sessions"`
	// include_records is a flag for whether to include the records of the scope in the response.
	IncludeRecords bool `protobuf:"varint,11,opt,name=include_records,json=includeRecords,proto3" json:"include_records,omitempty" yaml:"include_records"`
	// exclude_id_info is a flag for whether to exclude the id info from the response.
	ExcludeIdInfo bool `protobuf:"varint,12,opt,name=exclude_id_info,json=excludeIdInfo,proto3" json:"exclude_id_info,omitempty" yaml:"exclude_id_info"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
}

func (m *ScopeRequest) Reset()         { *m = ScopeRequest{} }
func (m *ScopeRequest) String() string { return proto.CompactTextString(m) }
func (*ScopeRequest) ProtoMessage()    {}
func (*ScopeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{2}
}
func (m *ScopeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeRequest.Merge(m, src)
}
func (m *ScopeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScopeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeRequest proto.InternalMessageInfo

func (m *ScopeRequest) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *ScopeRequest) GetSessionAddr() string {
	if m != nil {
		return m.SessionAddr
	}
	return ""
}

func (m *ScopeRequest) GetRecordAddr() string {
	if m != nil {
		return m.RecordAddr
	}
	return ""
}

func (m *ScopeRequest) GetIncludeSessions() bool {
	if m != nil {
		return m.IncludeSessions
	}
	return false
}

func (m *ScopeRequest) GetIncludeRecords() bool {
	if m != nil {
		return m.IncludeRecords
	}
	return false
}

func (m *ScopeRequest) GetExcludeIdInfo() bool {
	if m != nil {
		return m.ExcludeIdInfo
	}
	return false
}

func (m *ScopeRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

// ScopeResponse is the response type for the Query/Scope RPC method.
type ScopeResponse struct {
	// scope is the wrapped scope result.
	Scope *ScopeWrapper `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// sessions is any number of wrapped sessions in this scope (if requested).
	Sessions []*SessionWrapper `protobuf:"bytes,2,rep,name=sessions,proto3" json:"sessions,omitempty" yaml:"sessions,omitempty"`
	// records is any number of wrapped records in this scope (if requested).
	Records []*RecordWrapper `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty" yaml:"records,omitempty"`
	// request is a copy of the request that generated these results.
	Request *ScopeRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *ScopeResponse) Reset()         { *m = ScopeResponse{} }
func (m *ScopeResponse) String() string { return proto.CompactTextString(m) }
func (*ScopeResponse) ProtoMessage()    {}
func (*ScopeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{3}
}
func (m *ScopeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeResponse.Merge(m, src)
}
func (m *ScopeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScopeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeResponse proto.InternalMessageInfo

func (m *ScopeResponse) GetScope() *ScopeWrapper {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *ScopeResponse) GetSessions() []*SessionWrapper {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *ScopeResponse) GetRecords() []*RecordWrapper {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *ScopeResponse) GetRequest() *ScopeRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SessionWrapper contains a single scope and its uuid.
type ScopeWrapper struct {
	// scope is the on-chain scope message.
	Scope *Scope `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// scope_id_info contains information about the id/address of the scope.
	ScopeIdInfo *ScopeIdInfo `protobuf:"bytes,2,opt,name=scope_id_info,json=scopeIdInfo,proto3" json:"scope_id_info,omitempty" yaml:"scope_id_info"`
	// scope_spec_id_info contains information about the id/address of the scope specification.
	ScopeSpecIdInfo *ScopeSpecIdInfo `protobuf:"bytes,3,opt,name=scope_spec_id_info,json=scopeSpecIdInfo,proto3" json:"scope_spec_id_info,omitempty" yaml:"scope_spec_id_info"`
}

func (m *ScopeWrapper) Reset()         { *m = ScopeWrapper{} }
func (m *ScopeWrapper) String() string { return proto.CompactTextString(m) }
func (*ScopeWrapper) ProtoMessage()    {}
func (*ScopeWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{4}
}
func (m *ScopeWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeWrapper.Merge(m, src)
}
func (m *ScopeWrapper) XXX_Size() int {
	return m.Size()
}
func (m *ScopeWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeWrapper proto.InternalMessageInfo

func (m *ScopeWrapper) GetScope() *Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *ScopeWrapper) GetScopeIdInfo() *ScopeIdInfo {
	if m != nil {
		return m.ScopeIdInfo
	}
	return nil
}

func (m *ScopeWrapper) GetScopeSpecIdInfo() *ScopeSpecIdInfo {
	if m != nil {
		return m.ScopeSpecIdInfo
	}
	return nil
}

// ScopesAllRequest is the request type for the Query/ScopesAll RPC method.
type ScopesAllRequest struct {
	// exclude_id_info is a flag for whether to exclude the id info from the response.
	ExcludeIdInfo bool `protobuf:"varint,12,opt,name=exclude_id_info,json=excludeIdInfo,proto3" json:"exclude_id_info,omitempty" yaml:"exclude_id_info"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ScopesAllRequest) Reset()         { *m = ScopesAllRequest{} }
func (m *ScopesAllRequest) String() string { return proto.CompactTextString(m) }
func (*ScopesAllRequest) ProtoMessage()    {}
func (*ScopesAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{5}
}
func (m *ScopesAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopesAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopesAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopesAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopesAllRequest.Merge(m, src)
}
func (m *ScopesAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScopesAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopesAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScopesAllRequest proto.InternalMessageInfo

func (m *ScopesAllRequest) GetExcludeIdInfo() bool {
	if m != nil {
		return m.ExcludeIdInfo
	}
	return false
}

func (m *ScopesAllRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

func (m *ScopesAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ScopesAllResponse is the response type for the Query/ScopesAll RPC method.
type ScopesAllResponse struct {
	// scopes are the wrapped scopes.
	Scopes []*ScopeWrapper `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// request is a copy of the request that generated these results.
	Request *ScopesAllRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ScopesAllResponse) Reset()         { *m = ScopesAllResponse{} }
func (m *ScopesAllResponse) String() string { return proto.CompactTextString(m) }
func (*ScopesAllResponse) ProtoMessage()    {}
func (*ScopesAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{6}
}
func (m *ScopesAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopesAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopesAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopesAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopesAllResponse.Merge(m, src)
}
func (m *ScopesAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScopesAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopesAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScopesAllResponse proto.InternalMessageInfo

func (m *ScopesAllResponse) GetScopes() []*ScopeWrapper {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *ScopesAllResponse) GetRequest() *ScopesAllRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ScopesAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// SessionsRequest is the request type for the Query/Sessions RPC method.
type SessionsRequest struct {
	// scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.
	// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
	ScopeId string `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
	// session_id can either be a uuid, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. This can only be a uuid if a scope_id is also
	// provided.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" yaml:"session_id"`
	// record_addr is a bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
	RecordAddr string `protobuf:"bytes,3,opt,name=record_addr,json=recordAddr,proto3" json:"record_addr,omitempty" yaml:"record_addr"`
	// record_name is the name of the record to find the session for in the provided scope.
	RecordName string `protobuf:"bytes,4,opt,name=record_name,json=recordName,proto3" json:"record_name,omitempty" yaml:"record_name"`
	// include_scope is a flag for whether to include the scope containing these sessions in the response.
	IncludeScope bool `protobuf:"varint,10,opt,name=include_scope,json=includeScope,proto3" json:"include_scope,omitempty" yaml:"include_scope"`
	// include_records is a flag for whether to include the records of these sessions in the response.
	IncludeRecords bool `protobuf:"varint,11,opt,name=include_records,json=includeRecords,proto3" json:"include_records,omitempty" yaml:"include_records"`
	// exclude_id_info is a flag for whether to exclude the id info from the response.
	ExcludeIdInfo bool `protobuf:"varint,12,opt,name=exclude_id_info,json=excludeIdInfo,proto3" json:"exclude_id_info,omitempty" yaml:"exclude_id_info"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
}

func (m *SessionsRequest) Reset()         { *m = SessionsRequest{} }
func (m *SessionsRequest) String() string { return proto.CompactTextString(m) }
func (*SessionsRequest) ProtoMessage()    {}
func (*SessionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{7}
}
func (m *SessionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionsRequest.Merge(m, src)
}
func (m *SessionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SessionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionsRequest proto.InternalMessageInfo

func (m *SessionsRequest) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *SessionsRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SessionsRequest) GetRecordAddr() string {
	if m != nil {
		return m.RecordAddr
	}
	return ""
}

func (m *SessionsRequest) GetRecordName() string {
	if m != nil {
		return m.RecordName
	}
	return ""
}

func (m *SessionsRequest) GetIncludeScope() bool {
	if m != nil {
		return m.IncludeScope
	}
	return false
}

func (m *SessionsRequest) GetIncludeRecords() bool {
	if m != nil {
		return m.IncludeRecords
	}
	return false
}

func (m *SessionsRequest) GetExcludeIdInfo() bool {
	if m != nil {
		return m.ExcludeIdInfo
	}
	return false
}

func (m *SessionsRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

// SessionsResponse is the response type for the Query/Sessions RPC method.
type SessionsResponse struct {
	// scope is the wrapped scope that holds these sessions (if requested).
	Scope *ScopeWrapper `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty" yaml:"scope,omitempty"`
	// sessions is any number of wrapped session results.
	Sessions []*SessionWrapper `protobuf:"bytes,2,rep,name=sessions,proto3" json:"sessions,omitempty"`
	// records is any number of wrapped records contained in these sessions (if requested).
	Records []*RecordWrapper `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty" yaml:"records,omitempty"`
	// request is a copy of the request that generated these results.
	Request *SessionsRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *SessionsResponse) Reset()         { *m = SessionsResponse{} }
func (m *SessionsResponse) String() string { return proto.CompactTextString(m) }
func (*SessionsResponse) ProtoMessage()    {}
func (*SessionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{8}
}
func (m *SessionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionsResponse.Merge(m, src)
}
func (m *SessionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *SessionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SessionsResponse proto.InternalMessageInfo

func (m *SessionsResponse) GetScope() *ScopeWrapper {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *SessionsResponse) GetSessions() []*SessionWrapper {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *SessionsResponse) GetRecords() []*RecordWrapper {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *SessionsResponse) GetRequest() *SessionsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SessionWrapper contains a single session and some extra identifiers for it.
type SessionWrapper struct {
	// session is the on-chain session message.
	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// session_id_info contains information about the id/address of the session.
	SessionIdInfo *SessionIdInfo `protobuf:"bytes,2,opt,name=session_id_info,json=sessionIdInfo,proto3" json:"session_id_info,omitempty" yaml:"session_id_info"`
	// contract_spec_id_info contains information about the id/address of the contract specification.
	ContractSpecIdInfo *ContractSpecIdInfo `protobuf:"bytes,3,opt,name=contract_spec_id_info,json=contractSpecIdInfo,proto3" json:"contract_spec_id_info,omitempty" yaml:"contract_spec_id_info"`
}

func (m *SessionWrapper) Reset()         { *m = SessionWrapper{} }
func (m *SessionWrapper) String() string { return proto.CompactTextString(m) }
func (*SessionWrapper) ProtoMessage()    {}
func (*SessionWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{9}
}
func (m *SessionWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionWrapper.Merge(m, src)
}
func (m *SessionWrapper) XXX_Size() int {
	return m.Size()
}
func (m *SessionWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_SessionWrapper proto.InternalMessageInfo

func (m *SessionWrapper) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *SessionWrapper) GetSessionIdInfo() *SessionIdInfo {
	if m != nil {
		return m.SessionIdInfo
	}
	return nil
}

func (m *SessionWrapper) GetContractSpecIdInfo() *ContractSpecIdInfo {
	if m != nil {
		return m.ContractSpecIdInfo
	}
	return nil
}

// SessionsAllRequest is the request type for the Query/SessionsAll RPC method.
type SessionsAllRequest struct {
	// exclude_id_info is a flag for whether to exclude the id info from the response.
	ExcludeIdInfo bool `protobuf:"varint,12,opt,name=exclude_id_info,json=excludeIdInfo,proto3" json:"exclude_id_info,omitempty" yaml:"exclude_id_info"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *SessionsAllRequest) Reset()         { *m = SessionsAllRequest{} }
func (m *SessionsAllRequest) String() string { return proto.CompactTextString(m) }
func (*SessionsAllRequest) ProtoMessage()    {}
func (*SessionsAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{10}
}
func (m *SessionsAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionsAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionsAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionsAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionsAllRequest.Merge(m, src)
}
func (m *SessionsAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *SessionsAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionsAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionsAllRequest proto.InternalMessageInfo

func (m *SessionsAllRequest) GetExcludeIdInfo() bool {
	if m != nil {
		return m.ExcludeIdInfo
	}
	return false
}

func (m *SessionsAllRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

func (m *SessionsAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// SessionsAllResponse is the response type for the Query/SessionsAll RPC method.
type SessionsAllResponse struct {
	// sessions are the wrapped sessions.
	Sessions []*SessionWrapper `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	// request is a copy of the request that generated these results.
	Request *SessionsAllRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *SessionsAllResponse) Reset()         { *m = SessionsAllResponse{} }
func (m *SessionsAllResponse) String() string { return proto.CompactTextString(m) }
func (*SessionsAllResponse) ProtoMessage()    {}
func (*SessionsAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{11}
}
func (m *SessionsAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionsAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionsAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionsAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionsAllResponse.Merge(m, src)
}
func (m *SessionsAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *SessionsAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionsAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SessionsAllResponse proto.InternalMessageInfo

func (m *SessionsAllResponse) GetSessions() []*SessionWrapper {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *SessionsAllResponse) GetRequest() *SessionsAllRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SessionsAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// RecordsRequest is the request type for the Query/Records RPC method.
type RecordsRequest struct {
	// record_addr is a bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
	RecordAddr string `protobuf:"bytes,1,opt,name=record_addr,json=recordAddr,proto3" json:"record_addr,omitempty" yaml:"record_addr"`
	// scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.
	// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
	ScopeId string `protobuf:"bytes,2,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
	// session_id can either be a uuid, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. This can only be a uuid if a scope_id is also
	// provided.
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" yaml:"session_id"`
	// name is the name of the record to look for
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// include_scope is a flag for whether to include the the scope containing these records in the response.
	IncludeScope bool `protobuf:"varint,10,opt,name=include_scope,json=includeScope,proto3" json:"include_scope,omitempty" yaml:"include_scope"`
	// include_sessions is a flag for whether to include the sessions containing these records in the response.
	IncludeSessions bool `protobuf:"varint,11,opt,name=include_sessions,json=includeSessions,proto3" json:"include_sessions,omitempty" yaml:"include_sessions"`
	// exclude_id_info is a flag for whether to exclude the id info from the response.
	ExcludeIdInfo bool `protobuf:"varint,12,opt,name=exclude_id_info,json=excludeIdInfo,proto3" json:"exclude_id_info,omitempty" yaml:"exclude_id_info"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
}

func (m *RecordsRequest) Reset()         { *m = RecordsRequest{} }
func (m *RecordsRequest) String() string { return proto.CompactTextString(m) }
func (*RecordsRequest) ProtoMessage()    {}
func (*RecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{12}
}
func (m *RecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordsRequest.Merge(m, src)
}
func (m *RecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordsRequest proto.InternalMessageInfo

func (m *RecordsRequest) GetRecordAddr() string {
	if m != nil {
		return m.RecordAddr
	}
	return ""
}

func (m *RecordsRequest) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *RecordsRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *RecordsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RecordsRequest) GetIncludeScope() bool {
	if m != nil {
		return m.IncludeScope
	}
	return false
}

func (m *RecordsRequest) GetIncludeSessions() bool {
	if m != nil {
		return m.IncludeSessions
	}
	return false
}

func (m *RecordsRequest) GetExcludeIdInfo() bool {
	if m != nil {
		return m.ExcludeIdInfo
	}
	return false
}

func (m *RecordsRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

// RecordsResponse is the response type for the Query/Records RPC method.
type RecordsResponse struct {
	// scope is the wrapped scope that holds these records (if requested).
	Scope *ScopeWrapper `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty" yaml:"scope,omitempty"`
	// sessions is any number of wrapped sessions that hold these records (if requested).
	Sessions []*SessionWrapper `protobuf:"bytes,2,rep,name=sessions,proto3" json:"sessions,omitempty" yaml:"sessions,omitempty"`
	// records is any number of wrapped record results.
	Records []*RecordWrapper `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	// request is a copy of the request that generated these results.
	Request *RecordsRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *RecordsResponse) Reset()         { *m = RecordsResponse{} }
func (m *RecordsResponse) String() string { return proto.CompactTextString(m) }
func (*RecordsResponse) ProtoMessage()    {}
func (*RecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{13}
}
func (m *RecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordsResponse.Merge(m, src)
}
func (m *RecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordsResponse proto.InternalMessageInfo

func (m *RecordsResponse) GetScope() *ScopeWrapper {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *RecordsResponse) GetSessions() []*SessionWrapper {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *RecordsResponse) GetRecords() []*RecordWrapper {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *RecordsResponse) GetRequest() *RecordsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RecordWrapper contains a single record and some extra identifiers for it.
type RecordWrapper struct {
	// record is the on-chain record message.
	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	// record_id_info contains information about the id/address of the record.
	RecordIdInfo *RecordIdInfo `protobuf:"bytes,2,opt,name=record_id_info,json=recordIdInfo,proto3" json:"record_id_info,omitempty" yaml:"record_id_info"`
	// record_spec_id_info contains information about the id/address of the record specification.
	RecordSpecIdInfo *RecordSpecIdInfo `protobuf:"bytes,3,opt,name=record_spec_id_info,json=recordSpecIdInfo,proto3" json:"record_spec_id_info,omitempty" yaml:"record_spec_id_info"`
}

func (m *RecordWrapper) Reset()         { *m = RecordWrapper{} }
func (m *RecordWrapper) String() string { return proto.CompactTextString(m) }
func (*RecordWrapper) ProtoMessage()    {}
func (*RecordWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{14}
}
func (m *RecordWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordWrapper.Merge(m, src)
}
func (m *RecordWrapper) XXX_Size() int {
	return m.Size()
}
func (m *RecordWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_RecordWrapper proto.InternalMessageInfo

func (m *RecordWrapper) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *RecordWrapper) GetRecordIdInfo() *RecordIdInfo {
	if m != nil {
		return m.RecordIdInfo
	}
	return nil
}

func (m *RecordWrapper) GetRecordSpecIdInfo() *RecordSpecIdInfo {
	if m != nil {
		return m.RecordSpecIdInfo
	}
	return nil
}

// RecordsAllRequest is the request type for the Query/RecordsAll RPC method.
type RecordsAllRequest struct {
	// exclude_id_info is a flag for whether to exclude the id info from the response.
	ExcludeIdInfo bool `protobuf:"varint,12,opt,name=exclude_id_info,json=excludeIdInfo,proto3" json:"exclude_id_info,omitempty" yaml:"exclude_id_info"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *RecordsAllRequest) Reset()         { *m = RecordsAllRequest{} }
func (m *RecordsAllRequest) String() string { return proto.CompactTextString(m) }
func (*RecordsAllRequest) ProtoMessage()    {}
func (*RecordsAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{15}
}
func (m *RecordsAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordsAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordsAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordsAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordsAllRequest.Merge(m, src)
}
func (m *RecordsAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordsAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordsAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordsAllRequest proto.InternalMessageInfo

func (m *RecordsAllRequest) GetExcludeIdInfo() bool {
	if m != nil {
		return m.ExcludeIdInfo
	}
	return false
}

func (m *RecordsAllRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

func (m *RecordsAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// RecordsAllResponse is the response type for the Query/RecordsAll RPC method.
type RecordsAllResponse struct {
	// records are the wrapped records.
	Records []*RecordWrapper `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	// request is a copy of the request that generated these results.
	Request *RecordsAllRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *RecordsAllResponse) Reset()         { *m = RecordsAllResponse{} }
func (m *RecordsAllResponse) String() string { return proto.CompactTextString(m) }
func (*RecordsAllResponse) ProtoMessage()    {}
func (*RecordsAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{16}
}
func (m *RecordsAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordsAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordsAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordsAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordsAllResponse.Merge(m, src)
}
func (m *RecordsAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordsAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordsAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordsAllResponse proto.InternalMessageInfo

func (m *RecordsAllResponse) GetRecords() []*RecordWrapper {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *RecordsAllResponse) GetRequest() *RecordsAllRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RecordsAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OwnershipRequest is the request type for the Query/Ownership RPC method.
type OwnershipRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OwnershipRequest) Reset()         { *m = OwnershipRequest{} }
func (m *OwnershipRequest) String() string { return proto.CompactTextString(m) }
func (*OwnershipRequest) ProtoMessage()    {}
func (*OwnershipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{17}
}
func (m *OwnershipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnershipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnershipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnershipRequest.Merge(m, src)
}
func (m *OwnershipRequest) XXX_Size() int {
	return m.Size()
}
func (m *OwnershipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OwnershipRequest proto.InternalMessageInfo

func (m *OwnershipRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *OwnershipRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

func (m *OwnershipRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OwnershipResponse is the response type for the Query/Ownership RPC method.
type OwnershipResponse struct {
	// A list of scope ids (uuid) associated with the given address.
	ScopeUuids []string `protobuf:"bytes,1,rep,name=scope_uuids,json=scopeUuids,proto3" json:"scope_uuids,omitempty" yaml:"scope_uuids"`
	// request is a copy of the request that generated these results.
	Request *OwnershipRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OwnershipResponse) Reset()         { *m = OwnershipResponse{} }
func (m *OwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*OwnershipResponse) ProtoMessage()    {}
func (*OwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{18}
}
func (m *OwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnershipResponse.Merge(m, src)
}
func (m *OwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *OwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OwnershipResponse proto.InternalMessageInfo

func (m *OwnershipResponse) GetScopeUuids() []string {
	if m != nil {
		return m.ScopeUuids
	}
	return nil
}

func (m *OwnershipResponse) GetRequest() *OwnershipRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *OwnershipResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ValueOwnershipRequest is the request type for the Query/ValueOwnership RPC method.
type ValueOwnershipRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ValueOwnershipRequest) Reset()         { *m = ValueOwnershipRequest{} }
func (m *ValueOwnershipRequest) String() string { return proto.CompactTextString(m) }
func (*ValueOwnershipRequest) ProtoMessage()    {}
func (*ValueOwnershipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{19}
}
func (m *ValueOwnershipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueOwnershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueOwnershipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueOwnershipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueOwnershipRequest.Merge(m, src)
}
func (m *ValueOwnershipRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValueOwnershipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueOwnershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValueOwnershipRequest proto.InternalMessageInfo

func (m *ValueOwnershipRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ValueOwnershipRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

func (m *ValueOwnershipRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ValueOwnershipResponse is the response type for the Query/ValueOwnership RPC method.
type ValueOwnershipResponse struct {
	// A list of scope ids (uuid) associated with the given address.
	ScopeUuids []string `protobuf:"bytes,1,rep,name=scope_uuids,json=scopeUuids,proto3" json:"scope_uuids,omitempty" yaml:"scope_uuids"`
	// request is a copy of the request that generated these results.
	Request *ValueOwnershipRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ValueOwnershipResponse) Reset()         { *m = ValueOwnershipResponse{} }
func (m *ValueOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*ValueOwnershipResponse) ProtoMessage()    {}
func (*ValueOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{20}
}
func (m *ValueOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueOwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueOwnershipResponse.Merge(m, src)
}
func (m *ValueOwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValueOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValueOwnershipResponse proto.InternalMessageInfo

func (m *ValueOwnershipResponse) GetScopeUuids() []string {
	if m != nil {
		return m.ScopeUuids
	}
	return nil
}

func (m *ValueOwnershipResponse) GetRequest() *ValueOwnershipRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ValueOwnershipResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ScopeSpecificationRequest is the request type for the Query/ScopeSpecification RPC method.
type ScopeSpecificationRequest struct {
	// specification_id can either be a uuid, e.g. dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope specification
	// address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
	SpecificationId string `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3" json:"specification_id,omitempty" yaml:"specification_id"`
	// include_contract_specs is a flag for whether to include the contract specifications of the scope specification in
	// the response.
	IncludeContractSpecs bool `protobuf:"varint,10,opt,name=include_contract_specs,json=includeContractSpecs,proto3" json:"include_contract_specs,omitempty" yaml:"include_contract_specs"`
	// include_record_specs is a flag for whether to include the record specifications of the scope specification in the
	// response.
	IncludeRecordSpecs bool `protobuf:"varint,11,opt,name=include_record_specs,json=includeRecordSpecs,proto3" json:"include_record_specs,omitempty" yaml:"include_record_specs"`
	// exclude_id_info is a flag for whether to exclude the id info from the response.
	ExcludeIdInfo bool `protobuf:"varint,12,opt,name=exclude_id_info,json=excludeIdInfo,proto3" json:"exclude_id_info,omitempty" yaml:"exclude_id_info"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
}

func (m *ScopeSpecificationRequest) Reset()         { *m = ScopeSpecificationRequest{} }
func (m *ScopeSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*ScopeSpecificationRequest) ProtoMessage()    {}
func (*ScopeSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{21}
}
func (m *ScopeSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeSpecificationRequest.Merge(m, src)
}
func (m *ScopeSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScopeSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeSpecificationRequest proto.InternalMessageInfo

func (m *ScopeSpecificationRequest) GetSpecificationId() string {
	if m != nil {
		return m.SpecificationId
	}
	return ""
}

func (m *ScopeSpecificationRequest) GetIncludeContractSpecs() bool {
	if m != nil {
		return m.IncludeContractSpecs
	}
	return false
}

func (m *ScopeSpecificationRequest) GetIncludeRecordSpecs() bool {
	if m != nil {
		return m.IncludeRecordSpecs
	}
	return false
}

func (m *ScopeSpecificationRequest) GetExcludeIdInfo() bool {
	if m != nil {
		return m.ExcludeIdInfo
	}
	return false
}

func (m *ScopeSpecificationRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

// ScopeSpecificationResponse is the response type for the Query/ScopeSpecification RPC method.
type ScopeSpecificationResponse struct {
	// scope_specification is the wrapped scope specification.
	ScopeSpecification *ScopeSpecificationWrapper `protobuf:"bytes,1,opt,name=scope_specification,json=scopeSpecification,proto3" json:"scope_specification,omitempty" yaml:"scope_specification"`
	// contract_specs is any number of wrapped contract specifications in this scope specification (if requested).
	ContractSpecs []*ContractSpecificationWrapper `protobuf:"bytes,2,rep,name=contract_specs,json=contractSpecs,proto3" json:"contract_specs,omitempty" yaml:"contract_specs,omitempty"`
	// record_specs is any number of wrapped record specifications in this scope specification (if requested).
	RecordSpecs []*RecordSpecificationWrapper `protobuf:"bytes,3,rep,name=record_specs,json=recordSpecs,proto3" json:"record_specs,omitempty" yaml:"record_specs,omitempty"`
	// request is a copy of the request that generated these results.
	Request *ScopeSpecificationRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *ScopeSpecificationResponse) Reset()         { *m = ScopeSpecificationResponse{} }
func (m *ScopeSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*ScopeSpecificationResponse) ProtoMessage()    {}
func (*ScopeSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{22}
}
func (m *ScopeSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeSpecificationResponse.Merge(m, src)
}
func (m *ScopeSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScopeSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeSpecificationResponse proto.InternalMessageInfo

func (m *ScopeSpecificationResponse) GetScopeSpecification() *ScopeSpecificationWrapper {
	if m != nil {
		return m.ScopeSpecification
	}
	return nil
}

func (m *ScopeSpecificationResponse) GetContractSpecs() []*ContractSpecificationWrapper {
	if m != nil {
		return m.ContractSpecs
	}
	return nil
}

func (m *ScopeSpecificationResponse) GetRecordSpecs() []*RecordSpecificationWrapper {
	if m != nil {
		return m.RecordSpecs
	}
	return nil
}

func (m *ScopeSpecificationResponse) GetRequest() *ScopeSpecificationRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ScopeSpecificationWrapper contains a single scope specification and some extra identifiers for it.
type ScopeSpecificationWrapper struct {
	// specification is the on-chain scope specification message.
	Specification *ScopeSpecification `protobuf:"bytes,1,opt,name=specification,proto3" json:"specification,omitempty"`
	// scope_spec_id_info contains information about the id/address of the scope specification.
	ScopeSpecIdInfo *ScopeSpecIdInfo `protobuf:"bytes,2,opt,name=scope_spec_id_info,json=scopeSpecIdInfo,proto3" json:"scope_spec_id_info,omitempty" yaml:"scope_spec_id_info"`
}

func (m *ScopeSpecificationWrapper) Reset()         { *m = ScopeSpecificationWrapper{} }
func (m *ScopeSpecificationWrapper) String() string { return proto.CompactTextString(m) }
func (*ScopeSpecificationWrapper) ProtoMessage()    {}
func (*ScopeSpecificationWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{23}
}
func (m *ScopeSpecificationWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeSpecificationWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeSpecificationWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeSpecificationWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeSpecificationWrapper.Merge(m, src)
}
func (m *ScopeSpecificationWrapper) XXX_Size() int {
	return m.Size()
}
func (m *ScopeSpecificationWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeSpecificationWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeSpecificationWrapper proto.InternalMessageInfo

func (m *ScopeSpecificationWrapper) GetSpecification() *ScopeSpecification {
	if m != nil {
		return m.Specification
	}
	return nil
}

func (m *ScopeSpecificationWrapper) GetScopeSpecIdInfo() *ScopeSpecIdInfo {
	if m != nil {
		return m.ScopeSpecIdInfo
	}
	return nil
}

// ScopeSpecificationsAllRequest is the request type for the Query/ScopeSpecificationsAll RPC method.
type ScopeSpecificationsAllRequest struct {
	// exclude_id_info is a flag for whether to exclude the id info from the response.
	ExcludeIdInfo bool `protobuf:"varint,12,opt,name=exclude_id_info,json=excludeIdInfo,proto3" json:"exclude_id_info,omitempty" yaml:"exclude_id_info"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ScopeSpecificationsAllRequest) Reset()         { *m = ScopeSpecificationsAllRequest{} }
func (m *ScopeSpecificationsAllRequest) String() string { return proto.CompactTextString(m) }
func (*ScopeSpecificationsAllRequest) ProtoMessage()    {}
func (*ScopeSpecificationsAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{24}
}
func (m *ScopeSpecificationsAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeSpecificationsAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeSpecificationsAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeSpecificationsAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeSpecificationsAllRequest.Merge(m, src)
}
func (m *ScopeSpecificationsAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScopeSpecificationsAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeSpecificationsAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeSpecificationsAllRequest proto.InternalMessageInfo

func (m *ScopeSpecificationsAllRequest) GetExcludeIdInfo() bool {
	if m != nil {
		return m.ExcludeIdInfo
	}
	return false
}

func (m *ScopeSpecificationsAllRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

func (m *ScopeSpecificationsAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ScopeSpecificationsAllResponse is the response type for the Query/ScopeSpecificationsAll RPC method.
type ScopeSpecificationsAllResponse struct {
	// scope_specifications are the wrapped scope specifications.
	ScopeSpecifications []*ScopeSpecificationWrapper `protobuf:"bytes,1,rep,name=scope_specifications,json=scopeSpecifications,proto3" json:"scope_specifications,omitempty" yaml:"scope_specifications"`
	// request is a copy of the request that generated these results.
	Request *ScopeSpecificationsAllRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ScopeSpecificationsAllResponse) Reset()         { *m = ScopeSpecificationsAllResponse{} }
func (m *ScopeSpecificationsAllResponse) String() string { return proto.CompactTextString(m) }
func (*ScopeSpecificationsAllResponse) ProtoMessage()    {}
func (*ScopeSpecificationsAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{25}
}
func (m *ScopeSpecificationsAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeSpecificationsAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeSpecificationsAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeSpecificationsAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeSpecificationsAllResponse.Merge(m, src)
}
func (m *ScopeSpecificationsAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScopeSpecificationsAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeSpecificationsAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeSpecificationsAllResponse proto.InternalMessageInfo

func (m *ScopeSpecificationsAllResponse) GetScopeSpecifications() []*ScopeSpecificationWrapper {
	if m != nil {
		return m.ScopeSpecifications
	}
	return nil
}

func (m *ScopeSpecificationsAllResponse) GetRequest() *ScopeSpecificationsAllRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ScopeSpecificationsAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ContractSpecificationRequest is the request type for the Query/ContractSpecification RPC method.
type ContractSpecificationRequest struct {
	// specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract specification
	// address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.
	// It can also be a record specification address, e.g.
	// recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
	SpecificationId string `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3" json:"specification_id,omitempty" yaml:"specification_id"`
	// include_record_specs is a flag for whether to include the the record specifications of this contract specification
	// in the response.
	IncludeRecordSpecs bool `protobuf:"varint,10,opt,name=include_record_specs,json=includeRecordSpecs,proto3" json:"include_record_specs,omitempty" yaml:"include_record_specs"`
	// exclude_id_info is a flag for whether to exclude the id info from the response.
	ExcludeIdInfo bool `protobuf:"varint,12,opt,name=exclude_id_info,json=excludeIdInfo,proto3" json:"exclude_id_info,omitempty" yaml:"exclude_id_info"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
}

func (m *ContractSpecificationRequest) Reset()         { *m = ContractSpecificationRequest{} }
func (m *ContractSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*ContractSpecificationRequest) ProtoMessage()    {}
func (*ContractSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{26}
}
func (m *ContractSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpecificationRequest.Merge(m, src)
}
func (m *ContractSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContractSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpecificationRequest proto.InternalMessageInfo

func (m *ContractSpecificationRequest) GetSpecificationId() string {
	if m != nil {
		return m.SpecificationId
	}
	return ""
}

func (m *ContractSpecificationRequest) GetIncludeRecordSpecs() bool {
	if m != nil {
		return m.IncludeRecordSpecs
	}
	return false
}

func (m *ContractSpecificationRequest) GetExcludeIdInfo() bool {
	if m != nil {
		return m.ExcludeIdInfo
	}
	return false
}

func (m *ContractSpecificationRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

// ContractSpecificationResponse is the response type for the Query/ContractSpecification RPC method.
type ContractSpecificationResponse struct {
	// contract_specification is the wrapped contract specification.
	ContractSpecification *ContractSpecificationWrapper `protobuf:"bytes,1,opt,name=contract_specification,json=contractSpecification,proto3" json:"contract_specification,omitempty" yaml:"contract_specification"`
	// record_specifications is any number or wrapped record specifications associated with this contract_specification
	// (if requested).
	RecordSpecifications []*RecordSpecificationWrapper `protobuf:"bytes,3,rep,name=record_specifications,json=recordSpecifications,proto3" json:"record_specifications,omitempty" yaml:"record_specifications,omitempty"`
	// request is a copy of the request that generated these results.
	Request *ContractSpecificationRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *ContractSpecificationResponse) Reset()         { *m = ContractSpecificationResponse{} }
func (m *ContractSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*ContractSpecificationResponse) ProtoMessage()    {}
func (*ContractSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{27}
}
func (m *ContractSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpecificationResponse.Merge(m, src)
}
func (m *ContractSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *ContractSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpecificationResponse proto.InternalMessageInfo

func (m *ContractSpecificationResponse) GetContractSpecification() *ContractSpecificationWrapper {
	if m != nil {
		return m.ContractSpecification
	}
	return nil
}

func (m *ContractSpecificationResponse) GetRecordSpecifications() []*RecordSpecificationWrapper {
	if m != nil {
		return m.RecordSpecifications
	}
	return nil
}

func (m *ContractSpecificationResponse) GetRequest() *ContractSpecificationRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ContractSpecificationWrapper contains a single contract specification and some extra identifiers for it.
type ContractSpecificationWrapper struct {
	// specification is the on-chain contract specification message.
	Specification *ContractSpecification `protobuf:"bytes,1,opt,name=specification,proto3" json:"specification,omitempty"`
	// contract_spec_id_info contains information about the id/address of the contract specification.
	ContractSpecIdInfo *ContractSpecIdInfo `protobuf:"bytes,2,opt,name=contract_spec_id_info,json=contractSpecIdInfo,proto3" json:"contract_spec_id_info,omitempty" yaml:"contract_spec_id_info"`
}

func (m *ContractSpecificationWrapper) Reset()         { *m = ContractSpecificationWrapper{} }
func (m *ContractSpecificationWrapper) String() string { return proto.CompactTextString(m) }
func (*ContractSpecificationWrapper) ProtoMessage()    {}
func (*ContractSpecificationWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{28}
}
func (m *ContractSpecificationWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractSpecificationWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractSpecificationWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractSpecificationWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpecificationWrapper.Merge(m, src)
}
func (m *ContractSpecificationWrapper) XXX_Size() int {
	return m.Size()
}
func (m *ContractSpecificationWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpecificationWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpecificationWrapper proto.InternalMessageInfo

func (m *ContractSpecificationWrapper) GetSpecification() *ContractSpecification {
	if m != nil {
		return m.Specification
	}
	return nil
}

func (m *ContractSpecificationWrapper) GetContractSpecIdInfo() *ContractSpecIdInfo {
	if m != nil {
		return m.ContractSpecIdInfo
	}
	return nil
}

// ContractSpecificationsAllRequest is the request type for the Query/ContractSpecificationsAll RPC method.
type ContractSpecificationsAllRequest struct {
	// exclude_id_info is a flag for whether to exclude the id info from the response.
	ExcludeIdInfo bool `protobuf:"varint,12,opt,name=exclude_id_info,json=excludeIdInfo,proto3" json:"exclude_id_info,omitempty" yaml:"exclude_id_info"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ContractSpecificationsAllRequest) Reset()         { *m = ContractSpecificationsAllRequest{} }
func (m *ContractSpecificationsAllRequest) String() string { return proto.CompactTextString(m) }
func (*ContractSpecificationsAllRequest) ProtoMessage()    {}
func (*ContractSpecificationsAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{29}
}
func (m *ContractSpecificationsAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractSpecificationsAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractSpecificationsAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractSpecificationsAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpecificationsAllRequest.Merge(m, src)
}
func (m *ContractSpecificationsAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContractSpecificationsAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpecificationsAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpecificationsAllRequest proto.InternalMessageInfo

func (m *ContractSpecificationsAllRequest) GetExcludeIdInfo() bool {
	if m != nil {
		return m.ExcludeIdInfo
	}
	return false
}

func (m *ContractSpecificationsAllRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

func (m *ContractSpecificationsAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ContractSpecificationsAllResponse is the response type for the Query/ContractSpecificationsAll RPC method.
type ContractSpecificationsAllResponse struct {
	// contract_specifications are the wrapped contract specifications.
	ContractSpecifications []*ContractSpecificationWrapper `protobuf:"bytes,1,rep,name=contract_specifications,json=contractSpecifications,proto3" json:"contract_specifications,omitempty" yaml:"contract_specifications"`
	// request is a copy of the request that generated these results.
	Request *ContractSpecificationsAllRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ContractSpecificationsAllResponse) Reset()         { *m = ContractSpecificationsAllResponse{} }
func (m *ContractSpecificationsAllResponse) String() string { return proto.CompactTextString(m) }
func (*ContractSpecificationsAllResponse) ProtoMessage()    {}
func (*ContractSpecificationsAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{30}
}
func (m *ContractSpecificationsAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractSpecificationsAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractSpecificationsAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractSpecificationsAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpecificationsAllResponse.Merge(m, src)
}
func (m *ContractSpecificationsAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *ContractSpecificationsAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpecificationsAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpecificationsAllResponse proto.InternalMessageInfo

func (m *ContractSpecificationsAllResponse) GetContractSpecifications() []*ContractSpecificationWrapper {
	if m != nil {
		return m.ContractSpecifications
	}
	return nil
}

func (m *ContractSpecificationsAllResponse) GetRequest() *ContractSpecificationsAllRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ContractSpecificationsAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// RecordSpecificationsForContractSpecificationRequest is the request type for the
// Query/RecordSpecificationsForContractSpecification RPC method.
type RecordSpecificationsForContractSpecificationRequest struct {
	// specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract specification
	// address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.
	// It can also be a record specification address, e.g.
	// recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
	SpecificationId string `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3" json:"specification_id,omitempty" yaml:"specification_id"`
	// exclude_id_info is a flag for whether to exclude the id info from the response.
	ExcludeIdInfo bool `protobuf:"varint,12,opt,name=exclude_id_info,json=excludeIdInfo,proto3" json:"exclude_id_info,omitempty" yaml:"exclude_id_info"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
}

func (m *RecordSpecificationsForContractSpecificationRequest) Reset() {
	*m = RecordSpecificationsForContractSpecificationRequest{}
}
func (m *RecordSpecificationsForContractSpecificationRequest) String() string {
	return proto.CompactTextString(m)
}
func (*RecordSpecificationsForContractSpecificationRequest) ProtoMessage() {}
func (*RecordSpecificationsForContractSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{31}
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationsForContractSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationsForContractSpecificationRequest.Merge(m, src)
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationsForContractSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationsForContractSpecificationRequest proto.InternalMessageInfo

func (m *RecordSpecificationsForContractSpecificationRequest) GetSpecificationId() string {
	if m != nil {
		return m.SpecificationId
	}
	return ""
}

func (m *RecordSpecificationsForContractSpecificationRequest) GetExcludeIdInfo() bool {
	if m != nil {
		return m.ExcludeIdInfo
	}
	return false
}

func (m *RecordSpecificationsForContractSpecificationRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

// RecordSpecificationsForContractSpecificationResponse is the response type for the
// Query/RecordSpecificationsForContractSpecification RPC method.
type RecordSpecificationsForContractSpecificationResponse struct {
	// record_specifications is any number of wrapped record specifications associated with this contract_specification.
	RecordSpecifications []*RecordSpecificationWrapper `protobuf:"bytes,1,rep,name=record_specifications,json=recordSpecifications,proto3" json:"record_specifications,omitempty" yaml:"record_specifications"`
	// contract_specification_uuid is the uuid of this contract specification.
	ContractSpecificationUuid string `protobuf:"bytes,2,opt,name=contract_specification_uuid,json=contractSpecificationUuid,proto3" json:"contract_specification_uuid,omitempty" yaml:"contract_specification_uuid"`
	// contract_specification_addr is the contract specification address as a bech32 encoded string.
	ContractSpecificationAddr string `protobuf:"bytes,3,opt,name=contract_specification_addr,json=contractSpecificationAddr,proto3" json:"contract_specification_addr,omitempty" yaml:"contract_specification_addr"`
	// request is a copy of the request that generated these results.
	Request *RecordSpecificationsForContractSpecificationRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *RecordSpecificationsForContractSpecificationResponse) Reset() {
	*m = RecordSpecificationsForContractSpecificationResponse{}
}
func (m *RecordSpecificationsForContractSpecificationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*RecordSpecificationsForContractSpecificationResponse) ProtoMessage() {}
func (*RecordSpecificationsForContractSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{32}
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationsForContractSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationsForContractSpecificationResponse.Merge(m, src)
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationsForContractSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationsForContractSpecificationResponse proto.InternalMessageInfo

func (m *RecordSpecificationsForContractSpecificationResponse) GetRecordSpecifications() []*RecordSpecificationWrapper {
	if m != nil {
		return m.RecordSpecifications
	}
	return nil
}

func (m *RecordSpecificationsForContractSpecificationResponse) GetContractSpecificationUuid() string {
	if m != nil {
		return m.ContractSpecificationUuid
	}
	return ""
}

func (m *RecordSpecificationsForContractSpecificationResponse) GetContractSpecificationAddr() string {
	if m != nil {
		return m.ContractSpecificationAddr
	}
	return ""
}

func (m *RecordSpecificationsForContractSpecificationResponse) GetRequest() *RecordSpecificationsForContractSpecificationRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RecordSpecificationRequest is the request type for the Query/RecordSpecification RPC method.
type RecordSpecificationRequest struct {
	// specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract specification
	// address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.
	// It can also be a record specification address, e.g.
	// recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
	SpecificationId string `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3" json:"specification_id,omitempty" yaml:"specification_id"`
	// name is the name of the record to look up.
	// It is required if the specification_id is a uuid or contract specification address.
	// It is ignored if the specification_id is a record specification address.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// exclude_id_info is a flag for whether to exclude the id info from the response.
	ExcludeIdInfo bool `protobuf:"varint,12,opt,name=exclude_id_info,json=excludeIdInfo,proto3" json:"exclude_id_info,omitempty" yaml:"exclude_id_info"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
}

func (m *RecordSpecificationRequest) Reset()         { *m = RecordSpecificationRequest{} }
func (m *RecordSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*RecordSpecificationRequest) ProtoMessage()    {}
func (*RecordSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{33}
}
func (m *RecordSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationRequest.Merge(m, src)
}
func (m *RecordSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationRequest proto.InternalMessageInfo

func (m *RecordSpecificationRequest) GetSpecificationId() string {
	if m != nil {
		return m.SpecificationId
	}
	return ""
}

func (m *RecordSpecificationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RecordSpecificationRequest) GetExcludeIdInfo() bool {
	if m != nil {
		return m.ExcludeIdInfo
	}
	return false
}

func (m *RecordSpecificationRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

// RecordSpecificationResponse is the response type for the Query/RecordSpecification RPC method.
type RecordSpecificationResponse struct {
	// record_specification is the wrapped record specification.
	RecordSpecification *RecordSpecificationWrapper `protobuf:"bytes,1,opt,name=record_specification,json=recordSpecification,proto3" json:"record_specification,omitempty" yaml:"record_specification"`
	// request is a copy of the request that generated these results.
	Request *RecordSpecificationRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *RecordSpecificationResponse) Reset()         { *m = RecordSpecificationResponse{} }
func (m *RecordSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*RecordSpecificationResponse) ProtoMessage()    {}
func (*RecordSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{34}
}
func (m *RecordSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationResponse.Merge(m, src)
}
func (m *RecordSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationResponse proto.InternalMessageInfo

func (m *RecordSpecificationResponse) GetRecordSpecification() *RecordSpecificationWrapper {
	if m != nil {
		return m.RecordSpecification
	}
	return nil
}

func (m *RecordSpecificationResponse) GetRequest() *RecordSpecificationRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RecordSpecificationWrapper contains a single record specification and some extra identifiers for it.
type RecordSpecificationWrapper struct {
	// specification is the on-chain record specification message.
	Specification *RecordSpecification `protobuf:"bytes,1,opt,name=specification,proto3" json:"specification,omitempty"`
	// record_spec_id_info contains information about the id/address of the record specification.
	RecordSpecIdInfo *RecordSpecIdInfo `protobuf:"bytes,2,opt,name=record_spec_id_info,json=recordSpecIdInfo,proto3" json:"record_spec_id_info,omitempty" yaml:"record_spec_id_info"`
}

func (m *RecordSpecificationWrapper) Reset()         { *m = RecordSpecificationWrapper{} }
func (m *RecordSpecificationWrapper) String() string { return proto.CompactTextString(m) }
func (*RecordSpecificationWrapper) ProtoMessage()    {}
func (*RecordSpecificationWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{35}
}
func (m *RecordSpecificationWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationWrapper.Merge(m, src)
}
func (m *RecordSpecificationWrapper) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationWrapper proto.InternalMessageInfo

func (m *RecordSpecificationWrapper) GetSpecification() *RecordSpecification {
	if m != nil {
		return m.Specification
	}
	return nil
}

func (m *RecordSpecificationWrapper) GetRecordSpecIdInfo() *RecordSpecIdInfo {
	if m != nil {
		return m.RecordSpecIdInfo
	}
	return nil
}

// RecordSpecificationsAllRequest is the request type for the Query/RecordSpecificationsAll RPC method.
type RecordSpecificationsAllRequest struct {
	// exclude_id_info is a flag for whether to exclude the id info from the response.
	ExcludeIdInfo bool `protobuf:"varint,12,opt,name=exclude_id_info,json=excludeIdInfo,proto3" json:"exclude_id_info,omitempty" yaml:"exclude_id_info"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *RecordSpecificationsAllRequest) Reset()         { *m = RecordSpecificationsAllRequest{} }
func (m *RecordSpecificationsAllRequest) String() string { return proto.CompactTextString(m) }
func (*RecordSpecificationsAllRequest) ProtoMessage()    {}
func (*RecordSpecificationsAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{36}
}
func (m *RecordSpecificationsAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationsAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationsAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationsAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationsAllRequest.Merge(m, src)
}
func (m *RecordSpecificationsAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationsAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationsAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationsAllRequest proto.InternalMessageInfo

func (m *RecordSpecificationsAllRequest) GetExcludeIdInfo() bool {
	if m != nil {
		return m.ExcludeIdInfo
	}
	return false
}

func (m *RecordSpecificationsAllRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

func (m *RecordSpecificationsAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// RecordSpecificationsAllResponse is the response type for the Query/RecordSpecificationsAll RPC method.
type RecordSpecificationsAllResponse struct {
	// record_specifications are the wrapped record specifications.
	RecordSpecifications []*RecordSpecificationWrapper `protobuf:"bytes,1,rep,name=record_specifications,json=recordSpecifications,proto3" json:"record_specifications,omitempty" yaml:"record_specifications"`
	// request is a copy of the request that generated these results.
	Request *RecordSpecificationsAllRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *RecordSpecificationsAllResponse) Reset()         { *m = RecordSpecificationsAllResponse{} }
func (m *RecordSpecificationsAllResponse) String() string { return proto.CompactTextString(m) }
func (*RecordSpecificationsAllResponse) ProtoMessage()    {}
func (*RecordSpecificationsAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{37}
}
func (m *RecordSpecificationsAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationsAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationsAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationsAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationsAllResponse.Merge(m, src)
}
func (m *RecordSpecificationsAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationsAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationsAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationsAllResponse proto.InternalMessageInfo

func (m *RecordSpecificationsAllResponse) GetRecordSpecifications() []*RecordSpecificationWrapper {
	if m != nil {
		return m.RecordSpecifications
	}
	return nil
}

func (m *RecordSpecificationsAllResponse) GetRequest() *RecordSpecificationsAllRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RecordSpecificationsAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// GetByAddrRequest is the request type for the Query/GetByAddr RPC method.
type GetByAddrRequest struct {
	// ids are the metadata addresses of the things to look up.
	Addrs []string `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (m *GetByAddrRequest) Reset()         { *m = GetByAddrRequest{} }
func (m *GetByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*GetByAddrRequest) ProtoMessage()    {}
func (*GetByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{38}
}
func (m *GetByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByAddrRequest.Merge(m, src)
}
func (m *GetByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetByAddrRequest proto.InternalMessageInfo

func (m *GetByAddrRequest) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

// GetByAddrResponse is the response type for the Query/GetByAddr RPC method.
type GetByAddrResponse struct {
	// scopes contains any scopes that were requested and found.
	Scopes []*Scope `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty" yaml:"scopes,omitempty"`
	// sessions contains any sessions that were requested and found.
	Sessions []*Session `protobuf:"bytes,2,rep,name=sessions,proto3" json:"sessions,omitempty" yaml:"sessions,omitempty"`
	// records contains any records that were requested and found.
	Records []*Record `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty" yaml:"records,omitempty"`
	// scope_specs contains any scope specifications that were requested and found.
	ScopeSpecs []*ScopeSpecification `protobuf:"bytes,4,rep,name=scope_specs,json=scopeSpecs,proto3" json:"scope_specs,omitempty" yaml:"scope_specs,omitempty"`
	// contract_specs contains any contract specifications that were requested and found.
	ContractSpecs []*ContractSpecification `protobuf:"bytes,5,rep,name=contract_specs,json=contractSpecs,proto3" json:"contract_specs,omitempty" yaml:"contract_specs,omitempty"`
	// record_specs contains any record specifications that were requested and found.
	RecordSpecs []*RecordSpecification `protobuf:"bytes,6,rep,name=record_specs,json=recordSpecs,proto3" json:"record_specs,omitempty" yaml:"record_specs,omitempty"`
	// not_found contains any addrs requested but not found.
	NotFound []string `protobuf:"bytes,7,rep,name=not_found,json=notFound,proto3" json:"not_found,omitempty" yaml:"not_found,omitempty"`
}

func (m *GetByAddrResponse) Reset()         { *m = GetByAddrResponse{} }
func (m *GetByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*GetByAddrResponse) ProtoMessage()    {}
func (*GetByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{39}
}
func (m *GetByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByAddrResponse.Merge(m, src)
}
func (m *GetByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetByAddrResponse proto.InternalMessageInfo

func (m *GetByAddrResponse) GetScopes() []*Scope {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *GetByAddrResponse) GetSessions() []*Session {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *GetByAddrResponse) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *GetByAddrResponse) GetScopeSpecs() []*ScopeSpecification {
	if m != nil {
		return m.ScopeSpecs
	}
	return nil
}

func (m *GetByAddrResponse) GetContractSpecs() []*ContractSpecification {
	if m != nil {
		return m.ContractSpecs
	}
	return nil
}

func (m *GetByAddrResponse) GetRecordSpecs() []*RecordSpecification {
	if m != nil {
		return m.RecordSpecs
	}
	return nil
}

func (m *GetByAddrResponse) GetNotFound() []string {
	if m != nil {
		return m.NotFound
	}
	return nil
}

// OSLocatorParamsRequest is the request type for the Query/OSLocatorParams RPC method.
type OSLocatorParamsRequest struct {
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
}

func (m *OSLocatorParamsRequest) Reset()         { *m = OSLocatorParamsRequest{} }
func (m *OSLocatorParamsRequest) String() string { return proto.CompactTextString(m) }
func (*OSLocatorParamsRequest) ProtoMessage()    {}
func (*OSLocatorParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{40}
}
func (m *OSLocatorParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorParamsRequest.Merge(m, src)
}
func (m *OSLocatorParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorParamsRequest proto.InternalMessageInfo

func (m *OSLocatorParamsRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

// OSLocatorParamsResponse is the response type for the Query/OSLocatorParams RPC method.
type OSLocatorParamsResponse struct {
	// params defines the parameters of the module.
	Params OSLocatorParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// request is a copy of the request that generated these results.
	Request *OSLocatorParamsRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *OSLocatorParamsResponse) Reset()         { *m = OSLocatorParamsResponse{} }
func (m *OSLocatorParamsResponse) String() string { return proto.CompactTextString(m) }
func (*OSLocatorParamsResponse) ProtoMessage()    {}
func (*OSLocatorParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{41}
}
func (m *OSLocatorParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorParamsResponse.Merge(m, src)
}
func (m *OSLocatorParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorParamsResponse proto.InternalMessageInfo

func (m *OSLocatorParamsResponse) GetParams() OSLocatorParams {
	if m != nil {
		return m.Params
	}
	return OSLocatorParams{}
}

func (m *OSLocatorParamsResponse) GetRequest() *OSLocatorParamsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// OSLocatorRequest is the request type for the Query/OSLocator RPC method.
type OSLocatorRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
}

func (m *OSLocatorRequest) Reset()         { *m = OSLocatorRequest{} }
func (m *OSLocatorRequest) String() string { return proto.CompactTextString(m) }
func (*OSLocatorRequest) ProtoMessage()    {}
func (*OSLocatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{42}
}
func (m *OSLocatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorRequest.Merge(m, src)
}
func (m *OSLocatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorRequest proto.InternalMessageInfo

func (m *OSLocatorRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *OSLocatorRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

// OSLocatorResponse is the response type for the Query/OSLocator RPC method.
type OSLocatorResponse struct {
	Locator *ObjectStoreLocator `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator,omitempty"`
	// request is a copy of the request that generated these results.
	Request *OSLocatorRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *OSLocatorResponse) Reset()         { *m = OSLocatorResponse{} }
func (m *OSLocatorResponse) String() string { return proto.CompactTextString(m) }
func (*OSLocatorResponse) ProtoMessage()    {}
func (*OSLocatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{43}
}
func (m *OSLocatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorResponse.Merge(m, src)
}
func (m *OSLocatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorResponse proto.InternalMessageInfo

func (m *OSLocatorResponse) GetLocator() *ObjectStoreLocator {
	if m != nil {
		return m.Locator
	}
	return nil
}

func (m *OSLocatorResponse) GetRequest() *OSLocatorRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// OSLocatorsByURIRequest is the request type for the Query/OSLocatorsByURI RPC method.
type OSLocatorsByURIRequest struct {
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OSLocatorsByURIRequest) Reset()         { *m = OSLocatorsByURIRequest{} }
func (m *OSLocatorsByURIRequest) String() string { return proto.CompactTextString(m) }
func (*OSLocatorsByURIRequest) ProtoMessage()    {}
func (*OSLocatorsByURIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{44}
}
func (m *OSLocatorsByURIRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorsByURIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorsByURIRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorsByURIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorsByURIRequest.Merge(m, src)
}
func (m *OSLocatorsByURIRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorsByURIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorsByURIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorsByURIRequest proto.InternalMessageInfo

func (m *OSLocatorsByURIRequest) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *OSLocatorsByURIRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

func (m *OSLocatorsByURIRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OSLocatorsByURIResponse is the response type for the Query/OSLocatorsByURI RPC method.
type OSLocatorsByURIResponse struct {
	Locators []ObjectStoreLocator `protobuf:"bytes,1,rep,name=locators,proto3" json:"locators"`
	// request is a copy of the request that generated these results.
	Request *OSLocatorsByURIRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OSLocatorsByURIResponse) Reset()         { *m = OSLocatorsByURIResponse{} }
func (m *OSLocatorsByURIResponse) String() string { return proto.CompactTextString(m) }
func (*OSLocatorsByURIResponse) ProtoMessage()    {}
func (*OSLocatorsByURIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{45}
}
func (m *OSLocatorsByURIResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorsByURIResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorsByURIResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorsByURIResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorsByURIResponse.Merge(m, src)
}
func (m *OSLocatorsByURIResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorsByURIResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorsByURIResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorsByURIResponse proto.InternalMessageInfo

func (m *OSLocatorsByURIResponse) GetLocators() []ObjectStoreLocator {
	if m != nil {
		return m.Locators
	}
	return nil
}

func (m *OSLocatorsByURIResponse) GetRequest() *OSLocatorsByURIRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *OSLocatorsByURIResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OSLocatorsByScopeRequest is the request type for the Query/OSLocatorsByScope RPC method.
type OSLocatorsByScopeRequest struct {
	ScopeId string `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
}

func (m *OSLocatorsByScopeRequest) Reset()         { *m = OSLocatorsByScopeRequest{} }
func (m *OSLocatorsByScopeRequest) String() string { return proto.CompactTextString(m) }
func (*OSLocatorsByScopeRequest) ProtoMessage()    {}
func (*OSLocatorsByScopeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{46}
}
func (m *OSLocatorsByScopeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorsByScopeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorsByScopeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorsByScopeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorsByScopeRequest.Merge(m, src)
}
func (m *OSLocatorsByScopeRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorsByScopeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorsByScopeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorsByScopeRequest proto.InternalMessageInfo

func (m *OSLocatorsByScopeRequest) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *OSLocatorsByScopeRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

// OSLocatorsByScopeResponse is the response type for the Query/OSLocatorsByScope RPC method.
type OSLocatorsByScopeResponse struct {
	Locators []ObjectStoreLocator `protobuf:"bytes,1,rep,name=locators,proto3" json:"locators"`
	// request is a copy of the request that generated these results.
	Request *OSLocatorsByScopeRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *OSLocatorsByScopeResponse) Reset()         { *m = OSLocatorsByScopeResponse{} }
func (m *OSLocatorsByScopeResponse) String() string { return proto.CompactTextString(m) }
func (*OSLocatorsByScopeResponse) ProtoMessage()    {}
func (*OSLocatorsByScopeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{47}
}
func (m *OSLocatorsByScopeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorsByScopeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorsByScopeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorsByScopeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorsByScopeResponse.Merge(m, src)
}
func (m *OSLocatorsByScopeResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorsByScopeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorsByScopeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorsByScopeResponse proto.InternalMessageInfo

func (m *OSLocatorsByScopeResponse) GetLocators() []ObjectStoreLocator {
	if m != nil {
		return m.Locators
	}
	return nil
}

func (m *OSLocatorsByScopeResponse) GetRequest() *OSLocatorsByScopeRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// OSAllLocatorsRequest is the request type for the Query/OSAllLocators RPC method.
type OSAllLocatorsRequest struct {
	// include_request is a flag for whether to include this request in your result.
	IncludeRequest bool `protobuf:"varint,98,opt,name=include_request,json=includeRequest,proto3" json:"include_request,omitempty" yaml:"include_request"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OSAllLocatorsRequest) Reset()         { *m = OSAllLocatorsRequest{} }
func (m *OSAllLocatorsRequest) String() string { return proto.CompactTextString(m) }
func (*OSAllLocatorsRequest) ProtoMessage()    {}
func (*OSAllLocatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{48}
}
func (m *OSAllLocatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSAllLocatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSAllLocatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSAllLocatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSAllLocatorsRequest.Merge(m, src)
}
func (m *OSAllLocatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSAllLocatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSAllLocatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSAllLocatorsRequest proto.InternalMessageInfo

func (m *OSAllLocatorsRequest) GetIncludeRequest() bool {
	if m != nil {
		return m.IncludeRequest
	}
	return false
}

func (m *OSAllLocatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OSAllLocatorsResponse is the response type for the Query/OSAllLocators RPC method.
type OSAllLocatorsResponse struct {
	Locators []ObjectStoreLocator `protobuf:"bytes,1,rep,name=locators,proto3" json:"locators"`
	// request is a copy of the request that generated these results.
	Request *OSAllLocatorsRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OSAllLocatorsResponse) Reset()         { *m = OSAllLocatorsResponse{} }
func (m *OSAllLocatorsResponse) String() string { return proto.CompactTextString(m) }
func (*OSAllLocatorsResponse) ProtoMessage()    {}
func (*OSAllLocatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{49}
}
func (m *OSAllLocatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSAllLocatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSAllLocatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSAllLocatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSAllLocatorsResponse.Merge(m, src)
}
func (m *OSAllLocatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSAllLocatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSAllLocatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSAllLocatorsResponse proto.InternalMessageInfo

func (m *OSAllLocatorsResponse) GetLocators() []ObjectStoreLocator {
	if m != nil {
		return m.Locators
	}
	return nil
}

func (m *OSAllLocatorsResponse) GetRequest() *OSAllLocatorsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *OSAllLocatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// AccountDataRequest is the request type for the Query/AccountData RPC method.
type AccountDataRequest struct {
	// The metadata address to look up.
	// Currently, only scope ids are supported.
	MetadataAddr MetadataAddress `protobuf:"bytes,1,opt,name=metadata_addr,json=metadataAddr,proto3,customtype=MetadataAddress" json:"metadata_addr" yaml:"scope_id"`
}

func (m *AccountDataRequest) Reset()         { *m = AccountDataRequest{} }
func (m *AccountDataRequest) String() string { return proto.CompactTextString(m) }
func (*AccountDataRequest) ProtoMessage()    {}
func (*AccountDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{50}
}
func (m *AccountDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDataRequest.Merge(m, src)
}
func (m *AccountDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDataRequest proto.InternalMessageInfo

// AccountDataResponse is the response type for the Query/AccountData RPC method.
type AccountDataResponse struct {
	// The accountdata for the requested metadata address.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *AccountDataResponse) Reset()         { *m = AccountDataResponse{} }
func (m *AccountDataResponse) String() string { return proto.CompactTextString(m) }
func (*AccountDataResponse) ProtoMessage()    {}
func (*AccountDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{51}
}
func (m *AccountDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDataResponse.Merge(m, src)
}
func (m *AccountDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDataResponse proto.InternalMessageInfo

func (m *AccountDataResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// QueryNetAssetValuesRequest is the request type for the Query/NetAssetValues method.
type QueryScopeNetAssetValuesRequest struct {
	// scopeid metadata address
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryScopeNetAssetValuesRequest) Reset()         { *m = QueryScopeNetAssetValuesRequest{} }
func (m *QueryScopeNetAssetValuesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryScopeNetAssetValuesRequest) ProtoMessage()    {}
func (*QueryScopeNetAssetValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{52}
}
func (m *QueryScopeNetAssetValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryScopeNetAssetValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryScopeNetAssetValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryScopeNetAssetValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryScopeNetAssetValuesRequest.Merge(m, src)
}
func (m *QueryScopeNetAssetValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryScopeNetAssetValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryScopeNetAssetValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryScopeNetAssetValuesRequest proto.InternalMessageInfo

func (m *QueryScopeNetAssetValuesRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryNetAssetValuesRequest is the response type for the Query/NetAssetValues method.
type QueryScopeNetAssetValuesResponse struct {
	// net asset values for scope
	NetAssetValues []NetAssetValue `protobuf:"bytes,1,rep,name=net_asset_values,json=netAssetValues,proto3" json:"net_asset_values"`
}

func (m *QueryScopeNetAssetValuesResponse) Reset()         { *m = QueryScopeNetAssetValuesResponse{} }
func (m *QueryScopeNetAssetValuesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryScopeNetAssetValuesResponse) ProtoMessage()    {}
func (*QueryScopeNetAssetValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{53}
}
func (m *QueryScopeNetAssetValuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryScopeNetAssetValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryScopeNetAssetValuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryScopeNetAssetValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryScopeNetAssetValuesResponse.Merge(m, src)
}
func (m *QueryScopeNetAssetValuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryScopeNetAssetValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryScopeNetAssetValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryScopeNetAssetValuesResponse proto.InternalMessageInfo

func (m *QueryScopeNetAssetValuesResponse) GetNetAssetValues() []NetAssetValue {
	if m != nil {
		return m.NetAssetValues
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "provenance.metadata.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "provenance.metadata.v1.QueryParamsResponse")
	proto.RegisterType((*ScopeRequest)(nil), "provenance.metadata.v1.ScopeRequest")
	proto.RegisterType((*ScopeResponse)(nil), "provenance.metadata.v1.ScopeResponse")
	proto.RegisterType((*ScopeWrapper)(nil), "provenance.metadata.v1.ScopeWrapper")
	proto.RegisterType((*ScopesAllRequest)(nil), "provenance.metadata.v1.ScopesAllRequest")
	proto.RegisterType((*ScopesAllResponse)(nil), "provenance.metadata.v1.ScopesAllResponse")
	proto.RegisterType((*SessionsRequest)(nil), "provenance.metadata.v1.SessionsRequest")
	proto.RegisterType((*SessionsResponse)(nil), "provenance.metadata.v1.SessionsResponse")
	proto.RegisterType((*SessionWrapper)(nil), "provenance.metadata.v1.SessionWrapper")
	proto.RegisterType((*SessionsAllRequest)(nil), "provenance.metadata.v1.SessionsAllRequest")
	proto.RegisterType((*SessionsAllResponse)(nil), "provenance.metadata.v1.SessionsAllResponse")
	proto.RegisterType((*RecordsRequest)(nil), "provenance.metadata.v1.RecordsRequest")
	proto.RegisterType((*RecordsResponse)(nil), "provenance.metadata.v1.RecordsResponse")
	proto.RegisterType((*RecordWrapper)(nil), "provenance.metadata.v1.RecordWrapper")
	proto.RegisterType((*RecordsAllRequest)(nil), "provenance.metadata.v1.RecordsAllRequest")
	proto.RegisterType((*RecordsAllResponse)(nil), "provenance.metadata.v1.RecordsAllResponse")
	proto.RegisterType((*OwnershipRequest)(nil), "provenance.metadata.v1.OwnershipRequest")
	proto.RegisterType((*OwnershipResponse)(nil), "provenance.metadata.v1.OwnershipResponse")
	proto.RegisterType((*ValueOwnershipRequest)(nil), "provenance.metadata.v1.ValueOwnershipRequest")
	proto.RegisterType((*ValueOwnershipResponse)(nil), "provenance.metadata.v1.ValueOwnershipResponse")
	proto.RegisterType((*ScopeSpecificationRequest)(nil), "provenance.metadata.v1.ScopeSpecificationRequest")
	proto.RegisterType((*ScopeSpecificationResponse)(nil), "provenance.metadata.v1.ScopeSpecificationResponse")
	proto.RegisterType((*ScopeSpecificationWrapper)(nil), "provenance.metadata.v1.ScopeSpecificationWrapper")
	proto.RegisterType((*ScopeSpecificationsAllRequest)(nil), "provenance.metadata.v1.ScopeSpecificationsAllRequest")
	proto.RegisterType((*ScopeSpecificationsAllResponse)(nil), "provenance.metadata.v1.ScopeSpecificationsAllResponse")
	proto.RegisterType((*ContractSpecificationRequest)(nil), "provenance.metadata.v1.ContractSpecificationRequest")
	proto.RegisterType((*ContractSpecificationResponse)(nil), "provenance.metadata.v1.ContractSpecificationResponse")
	proto.RegisterType((*ContractSpecificationWrapper)(nil), "provenance.metadata.v1.ContractSpecificationWrapper")
	proto.RegisterType((*ContractSpecificationsAllRequest)(nil), "provenance.metadata.v1.ContractSpecificationsAllRequest")
	proto.RegisterType((*ContractSpecificationsAllResponse)(nil), "provenance.metadata.v1.ContractSpecificationsAllResponse")
	proto.RegisterType((*RecordSpecificationsForContractSpecificationRequest)(nil), "provenance.metadata.v1.RecordSpecificationsForContractSpecificationRequest")
	proto.RegisterType((*RecordSpecificationsForContractSpecificationResponse)(nil), "provenance.metadata.v1.RecordSpecificationsForContractSpecificationResponse")
	proto.RegisterType((*RecordSpecificationRequest)(nil), "provenance.metadata.v1.RecordSpecificationRequest")
	proto.RegisterType((*RecordSpecificationResponse)(nil), "provenance.metadata.v1.RecordSpecificationResponse")
	proto.RegisterType((*RecordSpecificationWrapper)(nil), "provenance.metadata.v1.RecordSpecificationWrapper")
	proto.RegisterType((*RecordSpecificationsAllRequest)(nil), "provenance.metadata.v1.RecordSpecificationsAllRequest")
	proto.RegisterType((*RecordSpecificationsAllResponse)(nil), "provenance.metadata.v1.RecordSpecificationsAllResponse")
	proto.RegisterType((*GetByAddrRequest)(nil), "provenance.metadata.v1.GetByAddrRequest")
	proto.RegisterType((*GetByAddrResponse)(nil), "provenance.metadata.v1.GetByAddrResponse")
	proto.RegisterType((*OSLocatorParamsRequest)(nil), "provenance.metadata.v1.OSLocatorParamsRequest")
	proto.RegisterType((*OSLocatorParamsResponse)(nil), "provenance.metadata.v1.OSLocatorParamsResponse")
	proto.RegisterType((*OSLocatorRequest)(nil), "provenance.metadata.v1.OSLocatorRequest")
	proto.RegisterType((*OSLocatorResponse)(nil), "provenance.metadata.v1.OSLocatorResponse")
	proto.RegisterType((*OSLocatorsByURIRequest)(nil), "provenance.metadata.v1.OSLocatorsByURIRequest")
	proto.RegisterType((*OSLocatorsByURIResponse)(nil), "provenance.metadata.v1.OSLocatorsByURIResponse")
	proto.RegisterType((*OSLocatorsByScopeRequest)(nil), "provenance.metadata.v1.OSLocatorsByScopeRequest")
	proto.RegisterType((*OSLocatorsByScopeResponse)(nil), "provenance.metadata.v1.OSLocatorsByScopeResponse")
	proto.RegisterType((*OSAllLocatorsRequest)(nil), "provenance.metadata.v1.OSAllLocatorsRequest")
	proto.RegisterType((*OSAllLocatorsResponse)(nil), "provenance.metadata.v1.OSAllLocatorsResponse")
	proto.RegisterType((*AccountDataRequest)(nil), "provenance.metadata.v1.AccountDataRequest")
	proto.RegisterType((*AccountDataResponse)(nil), "provenance.metadata.v1.AccountDataResponse")
	proto.RegisterType((*QueryScopeNetAssetValuesRequest)(nil), "provenance.metadata.v1.QueryScopeNetAssetValuesRequest")
	proto.RegisterType((*QueryScopeNetAssetValuesResponse)(nil), "provenance.metadata.v1.QueryScopeNetAssetValuesResponse")
}

func init() {
	proto.RegisterFile("provenance/metadata/v1/query.proto", fileDescriptor_a68790bc0b96eeb9)
}

var fileDescriptor_a68790bc0b96eeb9 = []byte{
	// 3256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x1c, 0x5b, 0x6c, 0x1c, 0x57,
	0x35, 0x77, 0x36, 0x8e, 0xe3, 0xe3, 0x67, 0xae, 0x1f, 0x59, 0x6f, 0x12, 0xaf, 0x3b, 0x4d, 0x1c,
	0xc7, 0x49, 0x76, 0x6b, 0x3b, 0xaf, 0xa6, 0x2d, 0xc5, 0x4e, 0x9b, 0x60, 0x92, 0x36, 0xe9, 0x58,
	0x6d, 0x85, 0xa5, 0xca, 0x9a, 0xec, 0x4e, 0xdc, 0x05, 0xef, 0xce, 0x76, 0x67, 0x36, 0xad, 0x65,
	0x59, 0x40, 0x05, 0x95, 0x10, 0x55, 0x69, 0x55, 0xa8, 0x0a, 0x08, 0x21, 0x51, 0x55, 0x88, 0x8a,
	0x1f, 0x90, 0x2a, 0x54, 0xa1, 0xf2, 0x51, 0x84, 0x54, 0x3e, 0x10, 0x95, 0xca, 0x07, 0xf0, 0xb1,
	0x42, 0x71, 0x91, 0x2a, 0xf1, 0x03, 0x4b, 0x15, 0x09, 0xbe, 0xd0, 0xde, 0xc7, 0xec, 0x9d, 0x99,
	0x3b, 0xbb, 0x33, 0x1b, 0x6f, 0x64, 0xfc, 0xe7, 0xd9, 0x39, 0xaf, 0x7b, 0x9e, 0xf7, 0x9e, 0x7b,
	0xc6, 0xa0, 0x16, 0x4b, 0xe6, 0x4d, 0xa3, 0xa0, 0x17, 0x32, 0x46, 0x3a, 0x6f, 0xd8, 0x7a, 0x56,
	0xb7, 0xf5, 0xf4, 0xcd, 0xe9, 0xf4, 0x73, 0x65, 0xa3, 0xb4, 0x96, 0x2a, 0x96, 0x4c, 0xdb, 0xc4,
	0x23, 0x75, 0x98, 0x14, 0x87, 0x49, 0xdd, 0x9c, 0x4e, 0x0c, 0xad, 0x98, 0x2b, 0x26, 0x01, 0x49,
	0xd7, 0xfe, 0xa2, 0xd0, 0x89, 0xa9, 0x8c, 0x69, 0xe5, 0x4d, 0x2b, 0x7d, 0x5d, 0xb7, 0x0c, 0x4a,
	0x26, 0x7d, 0x73, 0xfa, 0xba, 0x61, 0xeb, 0xd3, 0xe9, 0xa2, 0xbe, 0x92, 0x2b, 0xe8, 0x76, 0xce,
	0x2c, 0x30, 0xd8, 0x83, 0x2b, 0xa6, 0xb9, 0xb2, 0x6a, 0xa4, 0xf5, 0x62, 0x2e, 0xad, 0x17, 0x0a,
	0xa6, 0x4d, 0x5e, 0x5a, 0xec, 0xed, 0x91, 0x00, 0xd9, 0x1c, 0x19, 0x28, 0x58, 0xd0, 0x12, 0xac,
	0x8c, 0x59, 0x34, 0xb8, 0x50, 0x41, 0x30, 0x45, 0x23, 0x93, 0xbb, 0x91, 0xcb, 0x88, 0x42, 0x4d,
	0x06, 0xc0, 0x9a, 0xd7, 0xbf, 0x6c, 0x64, 0x6c, 0xcb, 0x36, 0x4b, 0x8c, 0xaa, 0xfa, 0x25, 0xc0,
	0x4f, 0xd4, 0x16, 0x78, 0x4d, 0x2f, 0xe9, 0x79, 0x4b, 0x33, 0x9e, 0x2b, 0x1b, 0x96, 0x8d, 0x2f,
	0x40, 0x7f, 0xae, 0x90, 0x59, 0x2d, 0x67, 0x8d, 0xe5, 0x12, 0xfd, 0x29, 0x7e, 0x7d, 0x1c, 0x4d,
	0xee, 0x9d, 0x4f, 0x54, 0x2b, 0xc9, 0x91, 0x35, 0x3d, 0xbf, 0x7a, 0x5e, 0xf5, 0x00, 0xa8, 0x5a,
	0x1f, 0xfb, 0x85, 0x11, 0x51, 0xbf, 0x8f, 0x60, 0xd0, 0x45, 0xdb, 0x2a, 0x9a, 0x05, 0xcb, 0xc0,
	0x0f, 0xc2, 0x9e, 0x22, 0xf9, 0x25, 0x8e, 0xc6, 0xd1, 0x64, 0xf7, 0xcc, 0x58, 0x4a, 0x6e, 0x9c,
	0x14, 0xc5, 0x9b, 0xdf, 0xfd, 0x61, 0x25, 0xb9, 0x4b, 0x63, 0x38, 0xf8, 0x11, 0xe8, 0x14, 0x45,
	0xea, 0x9e, 0x99, 0x0a, 0x42, 0xf7, 0xaf, 0x4b, 0xe3, 0xa8, 0xea, 0xef, 0x63, 0xd0, 0xb3, 0x58,
	0x53, 0x2e, 0x5f, 0x71, 0x0a, 0xf6, 0x12, 0x65, 0x2f, 0xe7, 0xb2, 0x44, 0xac, 0xae, 0xf9, 0xc1,
	0x6a, 0x25, 0xd9, 0x4f, 0x97, 0xca, 0xdf, 0xa8, 0x5a, 0x27, 0xf9, 0x73, 0x21, 0x8b, 0xcf, 0x43,
	0x8f, 0x65, 0x58, 0x56, 0xce, 0x2c, 0x2c, 0xeb, 0xd9, 0x6c, 0x29, 0xae, 0x10, 0x9c, 0xfd, 0xd5,
	0x4a, 0x72, 0x90, 0xe1, 0x08, 0x6f, 0x55, 0xad, 0x9b, 0x3d, 0xce, 0x65, 0xb3, 0x25, 0x7c, 0x16,
	0xba, 0x4b, 0x46, 0xc6, 0x2c, 0x65, 0x29, 0x6a, 0x8c, 0xa0, 0x8e, 0x54, 0x2b, 0x49, 0x4c, 0x51,
	0x85, 0x97, 0xaa, 0x06, 0xf4, 0x89, 0x20, 0x5e, 0x84, 0x01, 0xae, 0x75, 0x46, 0xcf, 0x8a, 0x03,
	0xb1, 0xcb, 0x81, 0x6a, 0x25, 0xb9, 0xdf, 0x6d, 0x17, 0x0e, 0xa1, 0x6a, 0xdc, 0x96, 0x8b, 0xec,
	0x17, 0xb7, 0x79, 0x6b, 0xd4, 0xad, 0x78, 0x77, 0xb0, 0x79, 0x09, 0x80, 0x68, 0x5e, 0xf2, 0x03,
	0x9e, 0x87, 0x7e, 0xe3, 0x05, 0x0a, 0x93, 0xcb, 0x2e, 0xe7, 0x0a, 0x37, 0xcc, 0x78, 0x8f, 0x97,
	0x88, 0x07, 0x40, 0xd5, 0x7a, 0xd9, 0x2f, 0x0b, 0xd9, 0x85, 0xc2, 0x0d, 0x73, 0x6b, 0xfc, 0xec,
	0x0f, 0x0a, 0xf4, 0x32, 0x5b, 0x32, 0x0f, 0x3b, 0x0f, 0x1d, 0xc4, 0x4e, 0xcc, 0xc1, 0x0e, 0x07,
	0x79, 0x08, 0xc1, 0x7a, 0xba, 0xa4, 0x17, 0x8b, 0x46, 0x49, 0xa3, 0x28, 0x58, 0x87, 0xbd, 0x8e,
	0x6e, 0x95, 0xf1, 0xd8, 0x64, 0xf7, 0xcc, 0x44, 0x20, 0x3a, 0x85, 0x63, 0x04, 0xe6, 0x0f, 0x55,
	0x2b, 0xc9, 0x51, 0x97, 0xf1, 0xad, 0x13, 0x66, 0x3e, 0x67, 0x1b, 0xf9, 0xa2, 0xbd, 0xa6, 0x6a,
	0x0e, 0x59, 0xfc, 0x4c, 0xcd, 0x85, 0xa9, 0xda, 0x63, 0x84, 0xc3, 0x91, 0x20, 0x0e, 0x54, 0xd7,
	0x9c, 0xc1, 0xc1, 0x6a, 0x25, 0x19, 0x17, 0x5d, 0xc4, 0x45, 0x9f, 0xd3, 0xc4, 0x9f, 0xf3, 0x46,
	0x48, 0xe3, 0xf5, 0xfb, 0x62, 0xe3, 0x87, 0x0a, 0x8b, 0x0d, 0xc6, 0x17, 0xcf, 0xba, 0xd5, 0x79,
	0xa8, 0x31, 0x39, 0x47, 0x8f, 0xbd, 0x3c, 0x6c, 0xa8, 0x73, 0x28, 0x04, 0xf9, 0xde, 0x86, 0xc8,
	0xd4, 0x2d, 0xe6, 0xe3, 0xd5, 0x4a, 0x72, 0xc8, 0x1d, 0x7a, 0xcc, 0x7f, 0xba, 0xad, 0x3a, 0x18,
	0xb6, 0x00, 0xd3, 0xd7, 0xb5, 0x14, 0xe8, 0xf0, 0x89, 0x11, 0x3e, 0x47, 0x1b, 0xf2, 0x59, 0x2c,
	0x1a, 0x19, 0xc6, 0x4b, 0xb4, 0x9a, 0x8f, 0x98, 0xaa, 0xf5, 0x5b, 0x6e, 0x78, 0x75, 0x13, 0xc1,
	0x00, 0xa1, 0x61, 0xcd, 0xad, 0xae, 0xf2, 0xec, 0xb1, 0x5d, 0x62, 0x01, 0x5f, 0x04, 0xa8, 0x57,
	0xa8, 0x78, 0x86, 0xa8, 0x62, 0x22, 0x45, 0xcb, 0x59, 0xaa, 0x56, 0xce, 0x52, 0xb4, 0x2a, 0xb2,
	0x72, 0x96, 0xba, 0xa6, 0xaf, 0x38, 0x0e, 0x20, 0x60, 0xaa, 0x15, 0x04, 0xfb, 0x84, 0x55, 0xd6,
	0x33, 0x37, 0x51, 0x47, 0x2d, 0x73, 0xc7, 0x42, 0x07, 0x16, 0xc3, 0xc1, 0xf3, 0x5e, 0xbf, 0x9c,
	0x6c, 0x88, 0x2e, 0xe8, 0xd7, 0xf1, 0x4d, 0x7c, 0x49, 0xb2, 0xbe, 0xa3, 0x4d, 0xd7, 0x47, 0xc5,
	0x77, 0x2d, 0xf0, 0x76, 0x0c, 0xfa, 0x79, 0x3e, 0x6c, 0xb5, 0x06, 0x9c, 0x02, 0xe0, 0x59, 0x3e,
	0x97, 0x65, 0x15, 0x60, 0xb8, 0x5a, 0x49, 0xee, 0x73, 0x57, 0x80, 0x1a, 0x4e, 0x17, 0x7b, 0x58,
	0xc8, 0xb6, 0x9e, 0xfd, 0xeb, 0x88, 0x05, 0x3d, 0x6f, 0xc4, 0x77, 0x07, 0x20, 0xd6, 0x5e, 0x3a,
	0x88, 0x8f, 0xeb, 0x79, 0x03, 0x3f, 0x04, 0xbd, 0x4e, 0x51, 0x20, 0x71, 0x4c, 0x6b, 0x86, 0x10,
	0x65, 0xae, 0xd7, 0xaa, 0xd6, 0xc3, 0x0b, 0x06, 0x89, 0xe4, 0x9d, 0x55, 0x2d, 0x3e, 0x52, 0x60,
	0xa0, 0x6e, 0x78, 0xe6, 0xd8, 0x4f, 0xb5, 0x50, 0x30, 0x44, 0xae, 0x04, 0x59, 0x4c, 0xc6, 0x2c,
	0x09, 0xce, 0xb7, 0x5a, 0x4c, 0xee, 0x5e, 0xb5, 0x98, 0xf3, 0x46, 0xe5, 0xd1, 0x26, 0x12, 0xfa,
	0x37, 0x53, 0xbf, 0x52, 0xa0, 0xcf, 0x2d, 0x3e, 0xbe, 0x1f, 0x3a, 0xd9, 0x02, 0x98, 0x4a, 0x93,
	0x4d, 0xa8, 0x6a, 0x1c, 0x1e, 0xe7, 0xa0, 0xbf, 0x1e, 0x39, 0x62, 0xe9, 0x38, 0xd2, 0x84, 0x04,
	0x4b, 0xe8, 0xa2, 0x59, 0xdc, 0x74, 0x54, 0xad, 0xd7, 0x12, 0x41, 0xf1, 0x57, 0x61, 0x38, 0x63,
	0x16, 0xec, 0x92, 0x9e, 0xb1, 0x65, 0x35, 0x24, 0x70, 0x67, 0x79, 0x81, 0x21, 0x09, 0x65, 0x64,
	0xbc, 0x5a, 0x49, 0x1e, 0xa4, 0x5c, 0xa5, 0x24, 0x55, 0x0d, 0x67, 0x7c, 0x58, 0xea, 0xdf, 0x11,
	0x60, 0xae, 0xd6, 0x9d, 0x5c, 0x4e, 0x3e, 0x45, 0x30, 0xe8, 0x5a, 0x27, 0x8b, 0x3b, 0x31, 0x3e,
	0x50, 0x8b, 0xf1, 0x11, 0xfe, 0x40, 0xe0, 0xd7, 0x74, 0x1b, 0x0a, 0xcb, 0xc7, 0x31, 0xe8, 0x63,
	0x49, 0x8f, 0x6b, 0xd1, 0x93, 0xf1, 0x51, 0xe8, 0x8c, 0x2f, 0x16, 0x24, 0x25, 0x72, 0x41, 0x8a,
	0x85, 0x2c, 0x48, 0x18, 0x76, 0xd7, 0x0b, 0x8a, 0x46, 0xfe, 0xbe, 0xd3, 0x92, 0x21, 0x3b, 0xa8,
	0x74, 0xb7, 0x70, 0x50, 0xd9, 0x36, 0x55, 0xe3, 0x8f, 0x0a, 0xf4, 0x3b, 0x56, 0x6d, 0x73, 0xd1,
	0xb8, 0x0b, 0x27, 0x90, 0x87, 0x5b, 0xab, 0x29, 0xf5, 0xaa, 0xf1, 0x79, 0x6f, 0xd0, 0x4d, 0x34,
	0x26, 0xe0, 0x2f, 0x1a, 0x3f, 0x55, 0xa0, 0xd7, 0x45, 0x1c, 0x9f, 0x81, 0x3d, 0x94, 0x7c, 0xb3,
	0xbe, 0x00, 0x45, 0xd3, 0x18, 0x34, 0x36, 0xa0, 0x8f, 0x45, 0x90, 0xbb, 0x5e, 0x1c, 0x6e, 0x8c,
	0xcf, 0x12, 0xf7, 0x68, 0xb5, 0x92, 0x1c, 0x76, 0xc5, 0xa1, 0xe3, 0x48, 0x3d, 0x25, 0x01, 0x10,
	0x3f, 0x0f, 0x83, 0x0c, 0x40, 0x52, 0x2a, 0x26, 0x1b, 0xf3, 0x12, 0x0a, 0xc5, 0x58, 0xb5, 0x92,
	0x4c, 0xb8, 0xf8, 0xb9, 0xcb, 0xc4, 0x40, 0xc9, 0x83, 0xa1, 0x7e, 0x82, 0x60, 0x1f, 0xd3, 0xe2,
	0x4e, 0xae, 0x11, 0x9b, 0x08, 0xb0, 0xb8, 0x4c, 0x16, 0x65, 0x82, 0xab, 0xa2, 0x96, 0x5c, 0xf5,
	0x82, 0xd7, 0x55, 0x8f, 0x35, 0x71, 0xd5, 0xb6, 0x96, 0x87, 0xf7, 0x10, 0x0c, 0x5c, 0x7d, 0xbe,
	0x60, 0x94, 0xac, 0x67, 0x73, 0x45, 0xae, 0xc2, 0x38, 0x74, 0xd6, 0x92, 0xbf, 0x61, 0xd1, 0x96,
	0x58, 0x97, 0xc6, 0x1f, 0xb7, 0x97, 0x85, 0xfe, 0x82, 0x60, 0x9f, 0x20, 0x3b, 0x33, 0xd0, 0x59,
	0xa0, 0x87, 0xf2, 0xe5, 0x72, 0x39, 0xc7, 0x8c, 0xe4, 0xaa, 0x6e, 0xc2, 0x4b, 0x55, 0x03, 0xf2,
	0xf4, 0x64, 0xed, 0x21, 0xc2, 0x79, 0xd0, 0xab, 0xb0, 0x36, 0xd8, 0xe5, 0x37, 0x08, 0x86, 0x9f,
	0xd2, 0x57, 0xcb, 0xc6, 0xff, 0xab, 0x71, 0x36, 0x11, 0x8c, 0x78, 0x17, 0x70, 0xa7, 0x16, 0xba,
	0xe4, 0xb5, 0xd0, 0xc9, 0x20, 0x0b, 0x49, 0x55, 0xd7, 0x06, 0x33, 0xbd, 0x19, 0x83, 0x51, 0xa7,
	0x83, 0xe3, 0x74, 0xbd, 0xeb, 0xba, 0x1c, 0x70, 0x75, 0xc3, 0xeb, 0x07, 0x79, 0x61, 0xdb, 0xe1,
	0x85, 0x50, 0xb5, 0x7e, 0xd7, 0x4f, 0x0b, 0x59, 0xfc, 0x34, 0x8c, 0x70, 0xbb, 0xb9, 0x36, 0xf3,
	0xbc, 0xdb, 0x7a, 0x4f, 0xb5, 0x92, 0x3c, 0xe4, 0xb6, 0xaf, 0x1b, 0x4e, 0xd5, 0x86, 0xd8, 0x0b,
	0xf1, 0xa8, 0x60, 0xe1, 0x27, 0x60, 0xc8, 0x7d, 0x52, 0x66, 0x64, 0xe9, 0xde, 0x28, 0x59, 0xad,
	0x24, 0x0f, 0xc8, 0xce, 0xd3, 0x9c, 0x28, 0x76, 0x1d, 0xaa, 0x29, 0xc9, 0x6d, 0xb3, 0x45, 0xfa,
	0x47, 0x0c, 0x12, 0x32, 0xd3, 0x30, 0x27, 0x7c, 0x11, 0xc1, 0x60, 0xbd, 0xc1, 0xe6, 0xbc, 0x67,
	0xb5, 0x7e, 0xba, 0x69, 0xbb, 0xce, 0xc1, 0xe0, 0x9b, 0x1d, 0xa1, 0x90, 0x4a, 0xe8, 0xaa, 0x1a,
	0xb6, 0x7c, 0xa8, 0xf8, 0x6b, 0x08, 0xfa, 0x3c, 0x16, 0xa5, 0x3b, 0xac, 0x53, 0x61, 0x8e, 0x7a,
	0x3e, 0x11, 0xee, 0xad, 0x56, 0x92, 0x49, 0xc9, 0xa1, 0xcf, 0xb5, 0xeb, 0xea, 0xcd, 0xb8, 0x5c,
	0xe0, 0x05, 0xe8, 0x71, 0x99, 0x9e, 0xee, 0xbf, 0x66, 0x9a, 0xef, 0x1f, 0x7c, 0xdc, 0x05, 0x2f,
	0x14, 0x29, 0x8a, 0xbc, 0xbb, 0x4b, 0x82, 0xa7, 0x5c, 0xf6, 0x46, 0x73, 0x04, 0xa5, 0xfb, 0xb6,
	0x6f, 0xb7, 0x90, 0x2c, 0x10, 0xf9, 0x56, 0xee, 0x1a, 0xf4, 0xca, 0xac, 0x3c, 0x15, 0x81, 0xa1,
	0x9b, 0x40, 0x40, 0xaf, 0x57, 0x69, 0x6f, 0xaf, 0xf7, 0x9f, 0x08, 0x0e, 0xf9, 0x45, 0xdb, 0xd1,
	0xbb, 0xb0, 0x0f, 0x14, 0x18, 0x0b, 0x5a, 0x32, 0x8b, 0xe4, 0x6f, 0x22, 0x18, 0x92, 0x44, 0x1c,
	0xdf, 0x9f, 0xb5, 0x10, 0xca, 0x42, 0xe2, 0x93, 0x11, 0x56, 0xb5, 0x41, 0x7f, 0x2c, 0x5b, 0xf8,
	0xaa, 0xd7, 0x9f, 0x4f, 0x87, 0xe7, 0xdc, 0xde, 0x4d, 0xde, 0x07, 0x0a, 0x1c, 0x94, 0x26, 0x8e,
	0xad, 0x2e, 0x54, 0x41, 0xf5, 0x04, 0x76, 0x40, 0x3d, 0x79, 0x23, 0x06, 0x87, 0x02, 0x94, 0xc8,
	0x1c, 0xf1, 0x15, 0x04, 0x23, 0xae, 0xbc, 0xeb, 0xcd, 0x37, 0xad, 0x65, 0x75, 0x21, 0xaf, 0xca,
	0xa9, 0xab, 0xda, 0x70, 0x46, 0x46, 0x00, 0xbf, 0x8e, 0x60, 0x58, 0xd0, 0xb0, 0x10, 0x1a, 0xad,
	0x67, 0xf9, 0xa9, 0x6a, 0x25, 0x39, 0xe1, 0xcb, 0xf2, 0x75, 0xd2, 0x62, 0xba, 0x1f, 0x2a, 0xf9,
	0xe9, 0x58, 0xf8, 0x71, 0x6f, 0x9c, 0x44, 0x53, 0x8b, 0x2f, 0xf5, 0x7f, 0x86, 0x02, 0xbc, 0x9b,
	0x67, 0xff, 0x45, 0x79, 0xf6, 0x3f, 0x19, 0x8d, 0xad, 0xa7, 0x00, 0x04, 0xf6, 0x6a, 0x95, 0xbb,
	0xd4, 0xab, 0xfd, 0x37, 0x82, 0x71, 0xa9, 0xa4, 0x3b, 0xba, 0x1e, 0xfc, 0x49, 0x81, 0x7b, 0x1a,
	0xac, 0x9a, 0x45, 0xe2, 0x6b, 0x08, 0xf6, 0xcb, 0x63, 0x85, 0x57, 0x85, 0xd6, 0x42, 0x51, 0xad,
	0x56, 0x92, 0x63, 0x8d, 0x42, 0xd1, 0x52, 0xb5, 0x11, 0x69, 0x2c, 0x5a, 0x58, 0xf3, 0xba, 0xfd,
	0xb9, 0x48, 0x22, 0xb4, 0xb7, 0x42, 0xbc, 0xa4, 0xc0, 0xac, 0x24, 0xe8, 0xad, 0x8b, 0x66, 0xe9,
	0xae, 0x14, 0x8e, 0x6d, 0x93, 0xe5, 0xff, 0x13, 0x83, 0x53, 0xd1, 0x14, 0xc1, 0x5c, 0xee, 0x5b,
	0x81, 0xb9, 0x16, 0xb5, 0x9c, 0x6b, 0x85, 0xc4, 0x20, 0x25, 0x1d, 0x94, 0x61, 0x6f, 0xc0, 0x01,
	0xb9, 0x7b, 0x92, 0x43, 0x35, 0x6b, 0xdd, 0x4f, 0x54, 0x2b, 0x49, 0xb5, 0x91, 0x2f, 0x13, 0x60,
	0x55, 0x1b, 0x95, 0xfa, 0x73, 0xed, 0x40, 0xde, 0x80, 0x8f, 0x70, 0x95, 0xdc, 0x9c, 0x0f, 0xbd,
	0x68, 0x90, 0xf3, 0x21, 0xf7, 0x0e, 0x86, 0x37, 0x74, 0x2e, 0x47, 0x50, 0x66, 0x33, 0x1f, 0xae,
	0x17, 0x92, 0xaf, 0x2b, 0x90, 0x90, 0x10, 0xd8, 0x6a, 0x5f, 0xe7, 0xf7, 0x1b, 0x8a, 0x70, 0xbf,
	0xb1, 0x6d, 0xfc, 0xff, 0x33, 0x04, 0x07, 0xa4, 0x3a, 0x60, 0x6e, 0xfe, 0x12, 0x82, 0x21, 0x99,
	0x2f, 0xb2, 0x9a, 0xda, 0x8a, 0x97, 0x0b, 0xdb, 0x42, 0x19, 0x65, 0x55, 0x1b, 0x94, 0x38, 0x39,
	0xbe, 0xe2, 0xf5, 0x89, 0x28, 0xac, 0x7d, 0xa6, 0xff, 0x14, 0x49, 0x4d, 0xcf, 0x77, 0x10, 0x4f,
	0xc8, 0x77, 0x10, 0xc7, 0xa3, 0xb0, 0xf4, 0xec, 0x1f, 0x02, 0xda, 0xf7, 0x4a, 0xdb, 0xdb, 0xf7,
	0xff, 0x42, 0x30, 0x26, 0x0b, 0x93, 0x9d, 0xbc, 0x6b, 0xf8, 0x50, 0x81, 0x64, 0xe0, 0x9a, 0xb7,
	0x61, 0x02, 0xbf, 0xe6, 0x75, 0xee, 0x33, 0x51, 0x12, 0x5e, 0x5b, 0x77, 0x0a, 0x93, 0x30, 0x70,
	0xc9, 0xb0, 0xe7, 0xd7, 0x6a, 0x89, 0x99, 0x9b, 0x69, 0x08, 0x3a, 0x6a, 0x39, 0x9c, 0xb5, 0x72,
	0x35, 0xfa, 0xa0, 0xbe, 0xdb, 0x01, 0xfb, 0x04, 0x50, 0xa6, 0x66, 0xcd, 0x33, 0xb3, 0xd5, 0x78,
	0x7a, 0xcf, 0x95, 0x5a, 0x09, 0x9a, 0x78, 0xbe, 0xe0, 0x93, 0x5c, 0x4b, 0xbe, 0x1b, 0xca, 0x66,
	0xe3, 0x1d, 0xe1, 0xaf, 0x26, 0x9f, 0xf2, 0x5e, 0x4d, 0x36, 0xb9, 0x06, 0x0c, 0x3b, 0xe7, 0x92,
	0xe7, 0x4d, 0x70, 0x7a, 0x42, 0xde, 0x4d, 0x68, 0x47, 0x68, 0x48, 0x89, 0xbe, 0x25, 0x10, 0x12,
	0x79, 0x81, 0xd3, 0xa5, 0xb0, 0xf0, 0x9a, 0xaf, 0xd1, 0xd8, 0x41, 0x38, 0x46, 0x3b, 0x04, 0xb5,
	0xd4, 0x61, 0x7c, 0xce, 0xd3, 0x61, 0xdc, 0x43, 0x18, 0x47, 0xc9, 0x9d, 0x91, 0x5b, 0x8b, 0x0f,
	0x40, 0x57, 0xc1, 0xb4, 0x97, 0x6f, 0x98, 0xe5, 0x42, 0x36, 0xde, 0x49, 0xee, 0x17, 0x84, 0x44,
	0xe9, 0xbc, 0x72, 0x59, 0xbc, 0x60, 0xda, 0x17, 0x6b, 0x3f, 0xaa, 0xcf, 0xc0, 0xc8, 0xd5, 0xc5,
	0x2b, 0x66, 0x46, 0xb7, 0xcd, 0x52, 0x1b, 0xc6, 0xd0, 0xdf, 0x41, 0xb0, 0xdf, 0x47, 0x9f, 0x05,
	0xc7, 0xa3, 0x9e, 0x51, 0xf4, 0xc0, 0x4e, 0xa2, 0x87, 0x80, 0x67, 0x26, 0xfd, 0x0b, 0xde, 0xf4,
	0x91, 0x0a, 0x49, 0xc7, 0x57, 0x17, 0xf3, 0x30, 0xe0, 0x80, 0x08, 0xd1, 0x6e, 0x3e, 0x5f, 0x30,
	0xd8, 0xe0, 0x88, 0x46, 0x1f, 0xb6, 0x46, 0x37, 0x3f, 0x42, 0xb0, 0x4f, 0xe0, 0xc7, 0xb4, 0xf2,
	0x08, 0x74, 0xae, 0xd2, 0x9f, 0x9a, 0xf5, 0x6d, 0xaf, 0x92, 0xef, 0x09, 0x16, 0x6d, 0xb3, 0x64,
	0x70, 0x22, 0x1c, 0x35, 0xca, 0xf5, 0x9e, 0x67, 0xc5, 0xc2, 0x64, 0x19, 0x12, 0x7c, 0xc3, 0x9a,
	0x5f, 0x7b, 0x52, 0x5b, 0xe0, 0x5a, 0x19, 0x80, 0x58, 0xb9, 0x94, 0x63, 0x3a, 0xa9, 0xfd, 0xb9,
	0xbd, 0x2a, 0xe0, 0x7f, 0x45, 0xaf, 0xe3, 0x92, 0x33, 0xfd, 0x5e, 0x81, 0xbd, 0x4c, 0x49, 0x3c,
	0x29, 0x47, 0x50, 0x30, 0x73, 0x3d, 0x87, 0x42, 0x2b, 0xce, 0xe7, 0xd2, 0x64, 0x1b, 0x6a, 0xd6,
	0x77, 0x10, 0xc4, 0x45, 0x66, 0x77, 0xf4, 0xa5, 0xc5, 0x96, 0x38, 0xfa, 0xbb, 0x08, 0x46, 0x25,
	0x12, 0xb5, 0xc5, 0x20, 0x5f, 0xf4, 0x1a, 0xe4, 0xbe, 0x30, 0x06, 0x91, 0xcf, 0xe2, 0xbf, 0x85,
	0x60, 0xe8, 0xea, 0xe2, 0xdc, 0xea, 0x2a, 0x07, 0xdc, 0xca, 0xd4, 0xb8, 0x65, 0xce, 0x7e, 0x1b,
	0xc1, 0xb0, 0x47, 0xca, 0xb6, 0x68, 0xf6, 0xa2, 0x57, 0xb3, 0x27, 0x82, 0x35, 0xeb, 0xd7, 0x59,
	0x1b, 0x1c, 0xdd, 0x00, 0x3c, 0x97, 0xc9, 0x98, 0xe5, 0x82, 0xfd, 0x88, 0x6e, 0xeb, 0x5c, 0xad,
	0x57, 0xa1, 0x97, 0xcb, 0x52, 0x9f, 0xf8, 0xeb, 0x99, 0x9f, 0xaa, 0xad, 0xe6, 0xaf, 0x95, 0x64,
	0xff, 0x63, 0xec, 0xe5, 0x1c, 0x9d, 0x23, 0x90, 0x79, 0x7f, 0x4f, 0x5e, 0x80, 0x51, 0x8f, 0xc3,
	0xa0, 0x8b, 0x0d, 0x53, 0xee, 0x10, 0x74, 0xdc, 0xd4, 0x57, 0xcb, 0x06, 0x2f, 0x0c, 0xe4, 0x41,
	0x9d, 0x86, 0x24, 0xf9, 0xf2, 0x89, 0x38, 0xd4, 0xe3, 0x86, 0x3d, 0x67, 0x59, 0x86, 0x4d, 0xee,
	0xe7, 0x1d, 0xe7, 0xe9, 0x03, 0x85, 0x07, 0x9f, 0xa6, 0xe4, 0xb2, 0xea, 0x1a, 0x8c, 0x07, 0xa3,
	0x30, 0x66, 0x4f, 0xc2, 0x40, 0xc1, 0xb0, 0x97, 0xf5, 0xda, 0xab, 0x65, 0xc2, 0xa9, 0xe9, 0x40,
	0x8e, 0x8b, 0x12, 0x33, 0x66, 0x5f, 0xc1, 0x45, 0x7e, 0xe6, 0xfd, 0x09, 0xe8, 0x20, 0xbc, 0x6b,
	0xe7, 0x81, 0x3d, 0xb4, 0x2a, 0xe2, 0x08, 0x9f, 0x74, 0x25, 0x8e, 0x87, 0x82, 0xa5, 0x8b, 0x50,
	0x27, 0x5e, 0xfc, 0xf8, 0x93, 0xd7, 0x95, 0x71, 0x3c, 0x96, 0x0e, 0xf8, 0x40, 0x8e, 0x15, 0xf4,
	0xdb, 0x08, 0x3a, 0xe8, 0x24, 0x63, 0xa8, 0x6f, 0x67, 0x12, 0x47, 0x9a, 0x40, 0x31, 0xf6, 0x3f,
	0x46, 0x84, 0xff, 0x9b, 0x08, 0x4f, 0xa6, 0x1b, 0x7d, 0xf1, 0x97, 0x5e, 0xe7, 0x9e, 0xb0, 0xb1,
	0x74, 0x06, 0x9f, 0x0a, 0x84, 0xa5, 0x7b, 0xe6, 0xf4, 0xba, 0xf8, 0xad, 0xd9, 0x06, 0x25, 0xb1,
	0x74, 0x0a, 0xcf, 0x04, 0xe1, 0xd1, 0x9d, 0x5b, 0x7a, 0x5d, 0x98, 0x3b, 0x65, 0x58, 0xf8, 0x65,
	0x04, 0x5d, 0xce, 0xd7, 0x17, 0x38, 0xf4, 0x07, 0x1a, 0x89, 0x63, 0x21, 0x20, 0x99, 0x12, 0xa6,
	0x88, 0x0e, 0x0e, 0x63, 0xb5, 0xa1, 0x0a, 0xac, 0xb4, 0xbe, 0xba, 0x8a, 0x5f, 0x8e, 0xc1, 0x5e,
	0x67, 0x18, 0x34, 0xec, 0x60, 0x7a, 0x62, 0xb2, 0x39, 0x20, 0x93, 0xe5, 0xe7, 0x0a, 0x11, 0xe6,
	0x6d, 0x05, 0x9f, 0x08, 0xad, 0xe4, 0x9a, 0x51, 0x66, 0xf1, 0x74, 0x58, 0x03, 0x72, 0x02, 0xd6,
	0xd2, 0xc3, 0xf8, 0xa1, 0xa8, 0x48, 0x6e, 0xae, 0x0d, 0x5c, 0x41, 0x6e, 0x52, 0x8a, 0xbb, 0x74,
	0x09, 0x3f, 0x1a, 0x9a, 0xb1, 0x87, 0x50, 0x41, 0xcf, 0x1b, 0x0e, 0x21, 0xfc, 0x5d, 0x04, 0xdd,
	0xc2, 0x10, 0x35, 0x8e, 0x30, 0x69, 0x1d, 0x1c, 0xa7, 0x92, 0xb9, 0x70, 0xf5, 0x04, 0x31, 0xcb,
	0x04, 0x3e, 0xdc, 0xc4, 0x2a, 0xd4, 0x4b, 0x5e, 0xd9, 0x0d, 0x9d, 0xfc, 0x3b, 0x93, 0x90, 0x73,
	0xa8, 0x89, 0xa3, 0x4d, 0xe1, 0x98, 0x28, 0xbf, 0x88, 0x11, 0x59, 0xde, 0x89, 0x05, 0xbb, 0x88,
	0x4c, 0xf9, 0x4b, 0x33, 0xf8, 0xbe, 0x88, 0x4a, 0xb7, 0x96, 0xce, 0xe1, 0x33, 0x91, 0x0d, 0x45,
	0x2c, 0x14, 0xc9, 0xc4, 0x32, 0xdf, 0x72, 0x44, 0x78, 0x0c, 0x5f, 0xde, 0x0a, 0x42, 0x5c, 0xae,
	0x28, 0xd9, 0x4b, 0x14, 0xe3, 0x41, 0x7c, 0xbe, 0x05, 0x3c, 0xc6, 0x15, 0xbf, 0x8a, 0x00, 0xea,
	0xc3, 0x9c, 0x38, 0xfc, 0xc0, 0x67, 0x62, 0x2a, 0x0c, 0x28, 0xf3, 0x8c, 0xe3, 0xc4, 0x31, 0x8e,
	0xe0, 0x7b, 0x1b, 0xfb, 0x05, 0xf5, 0xd1, 0xef, 0x21, 0xe8, 0x72, 0xe6, 0xe3, 0x70, 0xe8, 0x49,
	0xc7, 0xe0, 0xc4, 0xea, 0x1b, 0xf3, 0x53, 0x67, 0x89, 0x3c, 0x27, 0xf1, 0xf1, 0x20, 0x79, 0x4c,
	0x8e, 0x92, 0x5e, 0x67, 0x23, 0x8c, 0x1b, 0xf8, 0x67, 0x08, 0xfa, 0xdc, 0xc3, 0x7b, 0x38, 0xda,
	0x90, 0x5f, 0x22, 0x15, 0x16, 0x9c, 0x89, 0x79, 0x8e, 0x88, 0xd9, 0x20, 0x3c, 0xc8, 0xe6, 0x42,
	0x26, 0xeb, 0x7b, 0x08, 0xb0, 0xbf, 0x31, 0x83, 0xa3, 0x8f, 0x31, 0x25, 0x66, 0xa2, 0xa0, 0x30,
	0xb9, 0x1f, 0x24, 0x72, 0x37, 0x72, 0x68, 0x52, 0xb7, 0x8a, 0x46, 0x26, 0xbd, 0xee, 0xbd, 0x95,
	0xd8, 0xc0, 0xb5, 0x93, 0xac, 0x7c, 0x0c, 0x05, 0xb7, 0x36, 0xb6, 0x92, 0x38, 0x13, 0x15, 0x8d,
	0xad, 0x23, 0x45, 0xd6, 0x31, 0x89, 0x27, 0x9a, 0xae, 0x83, 0x7a, 0xee, 0xef, 0x10, 0x0c, 0x4b,
	0x9b, 0x53, 0xb8, 0xa5, 0x39, 0x82, 0xc4, 0xe9, 0x88, 0x58, 0x4c, 0xec, 0x87, 0x89, 0xd8, 0xf7,
	0xe3, 0xb3, 0x41, 0x62, 0xf3, 0x26, 0x58, 0x90, 0x05, 0x7e, 0x8b, 0x60, 0x34, 0xf0, 0xa6, 0x17,
	0xb7, 0x7c, 0x39, 0x9c, 0xb8, 0xbf, 0x05, 0x4c, 0xb6, 0xa6, 0x69, 0xb2, 0xa6, 0xe3, 0xf8, 0x58,
	0x98, 0x35, 0x51, 0x6b, 0xbc, 0xa1, 0xc0, 0x89, 0x28, 0x97, 0x6e, 0x78, 0x2b, 0xaf, 0xee, 0x12,
	0x57, 0xb6, 0x86, 0x18, 0x5b, 0xfe, 0x65, 0xb2, 0xfc, 0x47, 0xf1, 0x85, 0x16, 0x4d, 0xca, 0x13,
	0x2c, 0x69, 0x41, 0xbe, 0xac, 0xc0, 0xa0, 0x44, 0x0a, 0xdc, 0xc2, 0x35, 0x55, 0x62, 0x36, 0x12,
	0x0e, 0x5b, 0xcd, 0xb7, 0xe9, 0xe6, 0xfe, 0x1b, 0x08, 0x9f, 0x6e, 0x52, 0x10, 0xe4, 0xab, 0x59,
	0xba, 0x8c, 0x17, 0xee, 0x5c, 0x11, 0xbc, 0x04, 0xfe, 0x1a, 0xc1, 0xfe, 0x80, 0xbb, 0x0a, 0xdc,
	0xe2, 0xe5, 0x46, 0xe2, 0x6c, 0x64, 0x3c, 0xa6, 0x9a, 0x34, 0xd1, 0xcc, 0x31, 0x7c, 0xb4, 0xb9,
	0x62, 0xd8, 0x8e, 0x0e, 0x41, 0x97, 0x73, 0x95, 0x11, 0x5c, 0x2d, 0xbd, 0x17, 0x23, 0xc1, 0xd5,
	0xd2, 0x77, 0x2f, 0xd2, 0x7c, 0x8b, 0x59, 0x2b, 0x3b, 0xb4, 0xf8, 0x58, 0x1b, 0xf8, 0x27, 0x08,
	0xfa, 0x3d, 0xbd, 0x5b, 0x1c, 0xb1, 0xc9, 0x9b, 0x48, 0x87, 0x86, 0x0f, 0x9b, 0xa9, 0x59, 0x63,
	0x84, 0x9f, 0x5a, 0x5f, 0xab, 0xed, 0x31, 0x38, 0x2d, 0x1c, 0xba, 0xdd, 0xda, 0x60, 0x8f, 0xe1,
	0x6d, 0x0d, 0x37, 0xb7, 0x24, 0x17, 0x69, 0x9d, 0x14, 0xf0, 0x0d, 0xfc, 0xb6, 0xa8, 0x38, 0xda,
	0x77, 0xc4, 0x11, 0x1b, 0x94, 0x21, 0x14, 0xe7, 0x6e, 0xb0, 0x36, 0xcf, 0xab, 0x5c, 0xca, 0x72,
	0x29, 0x97, 0x5e, 0x2f, 0x97, 0x72, 0x1b, 0xf8, 0x97, 0x62, 0x27, 0x9c, 0xb7, 0xe3, 0x70, 0xe4,
	0xce, 0x5d, 0x62, 0x3a, 0x02, 0x46, 0xd8, 0x0d, 0x11, 0x97, 0xd6, 0xbb, 0x01, 0xc7, 0x3f, 0x40,
	0xd0, 0xeb, 0xea, 0x74, 0xe1, 0x48, 0x0d, 0xb1, 0xc4, 0xc9, 0x90, 0xd0, 0x61, 0x43, 0x86, 0x37,
	0xea, 0x48, 0x0c, 0xbf, 0x85, 0xa0, 0x5b, 0xe8, 0x5a, 0x05, 0x1f, 0x16, 0xfd, 0x1d, 0xb4, 0xe0,
	0xc3, 0xa2, 0xa4, 0x0d, 0xa6, 0x3e, 0x40, 0xc4, 0x3a, 0x8d, 0x67, 0x03, 0x23, 0x99, 0x22, 0x91,
	0xc7, 0x75, 0x57, 0x67, 0x6e, 0x03, 0xbf, 0x8f, 0x60, 0x50, 0xd2, 0xf6, 0xc2, 0x67, 0x1b, 0xb6,
	0x95, 0x82, 0x7b, 0x6b, 0x89, 0x73, 0xd1, 0x11, 0xc3, 0xee, 0xdf, 0x0b, 0x86, 0x4d, 0xda, 0x6f,
	0xb4, 0xfb, 0x96, 0x5e, 0xcf, 0x65, 0x37, 0xe6, 0xbf, 0xf2, 0xe1, 0xad, 0x31, 0xf4, 0xd1, 0xad,
	0x31, 0xf4, 0xb7, 0x5b, 0x63, 0xe8, 0xd5, 0xcd, 0xb1, 0x5d, 0x1f, 0x6d, 0x8e, 0xed, 0xfa, 0xf3,
	0xe6, 0xd8, 0x2e, 0x18, 0xcd, 0x99, 0x01, 0xa2, 0x5c, 0x43, 0x4b, 0xa7, 0x56, 0x72, 0xf6, 0xb3,
	0xe5, 0xeb, 0xa9, 0x8c, 0x99, 0x17, 0xb8, 0x9d, 0xcc, 0x99, 0x22, 0xef, 0x17, 0xea, 0xdc, 0xed,
	0xb5, 0xa2, 0x61, 0x5d, 0xdf, 0x43, 0xfe, 0x67, 0xd4, 0xec, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x51, 0x24, 0xd9, 0x67, 0x72, 0x4b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of x/metadata module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Scope searches for a scope.
	//
	// The scope id, if provided, must either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,
	// e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if provided, must be a bech32 session address,
	// e.g. session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The record_addr, if provided, must be a
	// bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
	//
	// * If only a scope_id is provided, that scope is returned.
	// * If only a session_addr is provided, the scope containing that session is returned.
	// * If only a record_addr is provided, the scope containing that record is returned.
	// * If more than one of scope_id, session_addr, and record_addr are provided, and they don't refer to the same scope,
	// a bad request is returned.
	//
	// Providing a session addr or record addr does not limit the sessions and records returned (if requested).
	// Those parameters are only used to find the scope.
	//
	// By default, sessions and records are not included.
	// Set include_sessions and/or include_records to true to include sessions and/or records.
	Scope(ctx context.Context, in *ScopeRequest, opts ...grpc.CallOption) (*ScopeResponse, error)
	// ScopesAll retrieves all scopes.
	ScopesAll(ctx context.Context, in *ScopesAllRequest, opts ...grpc.CallOption) (*ScopesAllResponse, error)
	// Sessions searches for sessions.
	//
	// The scope_id can either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
	// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can either be a uuid or session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The record_addr, if provided, must be a
	// bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
	//
	// * If only a scope_id is provided, all sessions in that scope are returned.
	// * If only a session_id is provided, it must be an address, and that single session is returned.
	// * If the session_id is a uuid, then either a scope_id or record_addr must also be provided, and that single session
	// is returned.
	// * If only a record_addr is provided, the session containing that record will be returned.
	// * If a record_name is provided then either a scope_id, session_id as an address, or record_addr must also be
	// provided, and the session containing that record will be returned.
	//
	// A bad request is returned if:
	// * The session_id is a uuid and is provided without a scope_id or record_addr.
	// * A record_name is provided without any way to identify the scope (e.g. a scope_id, a session_id as an address, or
	// a record_addr).
	// * Two or more of scope_id, session_id as an address, and record_addr are provided and don't all refer to the same
	// scope.
	// * A record_addr (or scope_id and record_name) is provided with a session_id and that session does not contain such
	// a record.
	// * A record_addr and record_name are both provided, but reference different records.
	//
	// By default, the scope and records are not included.
	// Set include_scope and/or include_records to true to include the scope and/or records.
	Sessions(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*SessionsResponse, error)
	// SessionsAll retrieves all sessions.
	SessionsAll(ctx context.Context, in *SessionsAllRequest, opts ...grpc.CallOption) (*SessionsAllResponse, error)
	// Records searches for records.
	//
	// The record_addr, if provided, must be a bech32 record address, e.g.
	// record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The scope-id can either be scope uuid, e.g.
	// 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,
	// the session_id can either be a uuid or session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The name is the name of the record you're
	// interested in.
	//
	// * If only a record_addr is provided, that single record will be returned.
	// * If only a scope_id is provided, all records in that scope will be returned.
	// * If only a session_id (or scope_id/session_id), all records in that session will be returned.
	// * If a name is provided with a scope_id and/or session_id, that single record will be returned.
	//
	// A bad request is returned if:
	// * The session_id is a uuid and no scope_id is provided.
	// * There are two or more of record_addr, session_id, and scope_id, and they don't all refer to the same scope.
	// * A name is provided, but not a scope_id and/or a session_id.
	// * A name and record_addr are provided and the name doesn't match the record_addr.
	//
	// By default, the scope and sessions are not included.
	// Set include_scope and/or include_sessions to true to include the scope and/or sessions.
	Records(ctx context.Context, in *RecordsRequest, opts ...grpc.CallOption) (*RecordsResponse, error)
	// RecordsAll retrieves all records.
	RecordsAll(ctx context.Context, in *RecordsAllRequest, opts ...grpc.CallOption) (*RecordsAllResponse, error)
	// Ownership returns the scope identifiers that list the given address as either a data or value owner.
	Ownership(ctx context.Context, in *OwnershipRequest, opts ...grpc.CallOption) (*OwnershipResponse, error)
	// ValueOwnership returns the scope identifiers that list the given address as the value owner.
	ValueOwnership(ctx context.Context, in *ValueOwnershipRequest, opts ...grpc.CallOption) (*ValueOwnershipResponse, error)
	// ScopeSpecification returns a scope specification for the given specification id.
	//
	// The specification_id can either be a uuid, e.g. dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope
	// specification address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
	//
	// By default, the contract and record specifications are not included.
	// Set include_contract_specs and/or include_record_specs to true to include contract and/or record specifications.
	ScopeSpecification(ctx context.Context, in *ScopeSpecificationRequest, opts ...grpc.CallOption) (*ScopeSpecificationResponse, error)
	// ScopeSpecificationsAll retrieves all scope specifications.
	ScopeSpecificationsAll(ctx context.Context, in *ScopeSpecificationsAllRequest, opts ...grpc.CallOption) (*ScopeSpecificationsAllResponse, error)
	// ContractSpecification returns a contract specification for the given specification id.
	//
	// The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
	// specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
	// address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
	// address, then the contract specification that contains that record specification is looked up.
	//
	// By default, the record specifications for this contract specification are not included.
	// Set include_record_specs to true to include them in the result.
	ContractSpecification(ctx context.Context, in *ContractSpecificationRequest, opts ...grpc.CallOption) (*ContractSpecificationResponse, error)
	// ContractSpecificationsAll retrieves all contract specifications.
	ContractSpecificationsAll(ctx context.Context, in *ContractSpecificationsAllRequest, opts ...grpc.CallOption) (*ContractSpecificationsAllResponse, error)
	// RecordSpecificationsForContractSpecification returns the record specifications for the given input.
	//
	// The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
	// specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
	// address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
	// address, then the contract specification that contains that record specification is used.
	RecordSpecificationsForContractSpecification(ctx context.Context, in *RecordSpecificationsForContractSpecificationRequest, opts ...grpc.CallOption) (*RecordSpecificationsForContractSpecificationResponse, error)
	// RecordSpecification returns a record specification for the given input.
	RecordSpecification(ctx context.Context, in *RecordSpecificationRequest, opts ...grpc.CallOption) (*RecordSpecificationResponse, error)
	// RecordSpecificationsAll retrieves all record specifications.
	RecordSpecificationsAll(ctx context.Context, in *RecordSpecificationsAllRequest, opts ...grpc.CallOption) (*RecordSpecificationsAllResponse, error)
	// GetByAddr retrieves metadata given any address(es).
	GetByAddr(ctx context.Context, in *GetByAddrRequest, opts ...grpc.CallOption) (*GetByAddrResponse, error)
	// OSLocatorParams returns all parameters for the object store locator sub module.
	OSLocatorParams(ctx context.Context, in *OSLocatorParamsRequest, opts ...grpc.CallOption) (*OSLocatorParamsResponse, error)
	// OSLocator returns an ObjectStoreLocator by its owner's address.
	OSLocator(ctx context.Context, in *OSLocatorRequest, opts ...grpc.CallOption) (*OSLocatorResponse, error)
	// OSLocatorsByURI returns all ObjectStoreLocator entries for a locator uri.
	OSLocatorsByURI(ctx context.Context, in *OSLocatorsByURIRequest, opts ...grpc.CallOption) (*OSLocatorsByURIResponse, error)
	// OSLocatorsByScope returns all ObjectStoreLocator entries for a for all signer's present in the specified scope.
	OSLocatorsByScope(ctx context.Context, in *OSLocatorsByScopeRequest, opts ...grpc.CallOption) (*OSLocatorsByScopeResponse, error)
	// OSAllLocators returns all ObjectStoreLocator entries.
	OSAllLocators(ctx context.Context, in *OSAllLocatorsRequest, opts ...grpc.CallOption) (*OSAllLocatorsResponse, error)
	// AccountData gets the account data associated with a metadata address.
	// Currently, only scope ids are supported.
	AccountData(ctx context.Context, in *AccountDataRequest, opts ...grpc.CallOption) (*AccountDataResponse, error)
	// ScopeNetAssetValues returns net asset values for scope
	ScopeNetAssetValues(ctx context.Context, in *QueryScopeNetAssetValuesRequest, opts ...grpc.CallOption) (*QueryScopeNetAssetValuesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Scope(ctx context.Context, in *ScopeRequest, opts ...grpc.CallOption) (*ScopeResponse, error) {
	out := new(ScopeResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Scope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScopesAll(ctx context.Context, in *ScopesAllRequest, opts ...grpc.CallOption) (*ScopesAllResponse, error) {
	out := new(ScopesAllResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ScopesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Sessions(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*SessionsResponse, error) {
	out := new(SessionsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Sessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SessionsAll(ctx context.Context, in *SessionsAllRequest, opts ...grpc.CallOption) (*SessionsAllResponse, error) {
	out := new(SessionsAllResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/SessionsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Records(ctx context.Context, in *RecordsRequest, opts ...grpc.CallOption) (*RecordsResponse, error) {
	out := new(RecordsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Records", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecordsAll(ctx context.Context, in *RecordsAllRequest, opts ...grpc.CallOption) (*RecordsAllResponse, error) {
	out := new(RecordsAllResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/RecordsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ownership(ctx context.Context, in *OwnershipRequest, opts ...grpc.CallOption) (*OwnershipResponse, error) {
	out := new(OwnershipResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Ownership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValueOwnership(ctx context.Context, in *ValueOwnershipRequest, opts ...grpc.CallOption) (*ValueOwnershipResponse, error) {
	out := new(ValueOwnershipResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ValueOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScopeSpecification(ctx context.Context, in *ScopeSpecificationRequest, opts ...grpc.CallOption) (*ScopeSpecificationResponse, error) {
	out := new(ScopeSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ScopeSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScopeSpecificationsAll(ctx context.Context, in *ScopeSpecificationsAllRequest, opts ...grpc.CallOption) (*ScopeSpecificationsAllResponse, error) {
	out := new(ScopeSpecificationsAllResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ScopeSpecificationsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractSpecification(ctx context.Context, in *ContractSpecificationRequest, opts ...grpc.CallOption) (*ContractSpecificationResponse, error) {
	out := new(ContractSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ContractSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractSpecificationsAll(ctx context.Context, in *ContractSpecificationsAllRequest, opts ...grpc.CallOption) (*ContractSpecificationsAllResponse, error) {
	out := new(ContractSpecificationsAllResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ContractSpecificationsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecordSpecificationsForContractSpecification(ctx context.Context, in *RecordSpecificationsForContractSpecificationRequest, opts ...grpc.CallOption) (*RecordSpecificationsForContractSpecificationResponse, error) {
	out := new(RecordSpecificationsForContractSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/RecordSpecificationsForContractSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecordSpecification(ctx context.Context, in *RecordSpecificationRequest, opts ...grpc.CallOption) (*RecordSpecificationResponse, error) {
	out := new(RecordSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/RecordSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecordSpecificationsAll(ctx context.Context, in *RecordSpecificationsAllRequest, opts ...grpc.CallOption) (*RecordSpecificationsAllResponse, error) {
	out := new(RecordSpecificationsAllResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/RecordSpecificationsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetByAddr(ctx context.Context, in *GetByAddrRequest, opts ...grpc.CallOption) (*GetByAddrResponse, error) {
	out := new(GetByAddrResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/GetByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSLocatorParams(ctx context.Context, in *OSLocatorParamsRequest, opts ...grpc.CallOption) (*OSLocatorParamsResponse, error) {
	out := new(OSLocatorParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSLocatorParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSLocator(ctx context.Context, in *OSLocatorRequest, opts ...grpc.CallOption) (*OSLocatorResponse, error) {
	out := new(OSLocatorResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSLocator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSLocatorsByURI(ctx context.Context, in *OSLocatorsByURIRequest, opts ...grpc.CallOption) (*OSLocatorsByURIResponse, error) {
	out := new(OSLocatorsByURIResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSLocatorsByURI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSLocatorsByScope(ctx context.Context, in *OSLocatorsByScopeRequest, opts ...grpc.CallOption) (*OSLocatorsByScopeResponse, error) {
	out := new(OSLocatorsByScopeResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSLocatorsByScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSAllLocators(ctx context.Context, in *OSAllLocatorsRequest, opts ...grpc.CallOption) (*OSAllLocatorsResponse, error) {
	out := new(OSAllLocatorsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSAllLocators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountData(ctx context.Context, in *AccountDataRequest, opts ...grpc.CallOption) (*AccountDataResponse, error) {
	out := new(AccountDataResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/AccountData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScopeNetAssetValues(ctx context.Context, in *QueryScopeNetAssetValuesRequest, opts ...grpc.CallOption) (*QueryScopeNetAssetValuesResponse, error) {
	out := new(QueryScopeNetAssetValuesResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ScopeNetAssetValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of x/metadata module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Scope searches for a scope.
	//
	// The scope id, if provided, must either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,
	// e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if provided, must be a bech32 session address,
	// e.g. session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The record_addr, if provided, must be a
	// bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
	//
	// * If only a scope_id is provided, that scope is returned.
	// * If only a session_addr is provided, the scope containing that session is returned.
	// * If only a record_addr is provided, the scope containing that record is returned.
	// * If more than one of scope_id, session_addr, and record_addr are provided, and they don't refer to the same scope,
	// a bad request is returned.
	//
	// Providing a session addr or record addr does not limit the sessions and records returned (if requested).
	// Those parameters are only used to find the scope.
	//
	// By default, sessions and records are not included.
	// Set include_sessions and/or include_records to true to include sessions and/or records.
	Scope(context.Context, *ScopeRequest) (*ScopeResponse, error)
	// ScopesAll retrieves all scopes.
	ScopesAll(context.Context, *ScopesAllRequest) (*ScopesAllResponse, error)
	// Sessions searches for sessions.
	//
	// The scope_id can either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
	// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can either be a uuid or session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The record_addr, if provided, must be a
	// bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
	//
	// * If only a scope_id is provided, all sessions in that scope are returned.
	// * If only a session_id is provided, it must be an address, and that single session is returned.
	// * If the session_id is a uuid, then either a scope_id or record_addr must also be provided, and that single session
	// is returned.
	// * If only a record_addr is provided, the session containing that record will be returned.
	// * If a record_name is provided then either a scope_id, session_id as an address, or record_addr must also be
	// provided, and the session containing that record will be returned.
	//
	// A bad request is returned if:
	// * The session_id is a uuid and is provided without a scope_id or record_addr.
	// * A record_name is provided without any way to identify the scope (e.g. a scope_id, a session_id as an address, or
	// a record_addr).
	// * Two or more of scope_id, session_id as an address, and record_addr are provided and don't all refer to the same
	// scope.
	// * A record_addr (or scope_id and record_name) is provided with a session_id and that session does not contain such
	// a record.
	// * A record_addr and record_name are both provided, but reference different records.
	//
	// By default, the scope and records are not included.
	// Set include_scope and/or include_records to true to include the scope and/or records.
	Sessions(context.Context, *SessionsRequest) (*SessionsResponse, error)
	// SessionsAll retrieves all sessions.
	SessionsAll(context.Context, *SessionsAllRequest) (*SessionsAllResponse, error)
	// Records searches for records.
	//
	// The record_addr, if provided, must be a bech32 record address, e.g.
	// record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The scope-id can either be scope uuid, e.g.
	// 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,
	// the session_id can either be a uuid or session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The name is the name of the record you're
	// interested in.
	//
	// * If only a record_addr is provided, that single record will be returned.
	// * If only a scope_id is provided, all records in that scope will be returned.
	// * If only a session_id (or scope_id/session_id), all records in that session will be returned.
	// * If a name is provided with a scope_id and/or session_id, that single record will be returned.
	//
	// A bad request is returned if:
	// * The session_id is a uuid and no scope_id is provided.
	// * There are two or more of record_addr, session_id, and scope_id, and they don't all refer to the same scope.
	// * A name is provided, but not a scope_id and/or a session_id.
	// * A name and record_addr are provided and the name doesn't match the record_addr.
	//
	// By default, the scope and sessions are not included.
	// Set include_scope and/or include_sessions to true to include the scope and/or sessions.
	Records(context.Context, *RecordsRequest) (*RecordsResponse, error)
	// RecordsAll retrieves all records.
	RecordsAll(context.Context, *RecordsAllRequest) (*RecordsAllResponse, error)
	// Ownership returns the scope identifiers that list the given address as either a data or value owner.
	Ownership(context.Context, *OwnershipRequest) (*OwnershipResponse, error)
	// ValueOwnership returns the scope identifiers that list the given address as the value owner.
	ValueOwnership(context.Context, *ValueOwnershipRequest) (*ValueOwnershipResponse, error)
	// ScopeSpecification returns a scope specification for the given specification id.
	//
	// The specification_id can either be a uuid, e.g. dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope
	// specification address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
	//
	// By default, the contract and record specifications are not included.
	// Set include_contract_specs and/or include_record_specs to true to include contract and/or record specifications.
	ScopeSpecification(context.Context, *ScopeSpecificationRequest) (*ScopeSpecificationResponse, error)
	// ScopeSpecificationsAll retrieves all scope specifications.
	ScopeSpecificationsAll(context.Context, *ScopeSpecificationsAllRequest) (*ScopeSpecificationsAllResponse, error)
	// ContractSpecification returns a contract specification for the given specification id.
	//
	// The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
	// specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
	// address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
	// address, then the contract specification that contains that record specification is looked up.
	//
	// By default, the record specifications for this contract specification are not included.
	// Set include_record_specs to true to include them in the result.
	ContractSpecification(context.Context, *ContractSpecificationRequest) (*ContractSpecificationResponse, error)
	// ContractSpecificationsAll retrieves all contract specifications.
	ContractSpecificationsAll(context.Context, *ContractSpecificationsAllRequest) (*ContractSpecificationsAllResponse, error)
	// RecordSpecificationsForContractSpecification returns the record specifications for the given input.
	//
	// The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
	// specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
	// address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
	// address, then the contract specification that contains that record specification is used.
	RecordSpecificationsForContractSpecification(context.Context, *RecordSpecificationsForContractSpecificationRequest) (*RecordSpecificationsForContractSpecificationResponse, error)
	// RecordSpecification returns a record specification for the given input.
	RecordSpecification(context.Context, *RecordSpecificationRequest) (*RecordSpecificationResponse, error)
	// RecordSpecificationsAll retrieves all record specifications.
	RecordSpecificationsAll(context.Context, *RecordSpecificationsAllRequest) (*RecordSpecificationsAllResponse, error)
	// GetByAddr retrieves metadata given any address(es).
	GetByAddr(context.Context, *GetByAddrRequest) (*GetByAddrResponse, error)
	// OSLocatorParams returns all parameters for the object store locator sub module.
	OSLocatorParams(context.Context, *OSLocatorParamsRequest) (*OSLocatorParamsResponse, error)
	// OSLocator returns an ObjectStoreLocator by its owner's address.
	OSLocator(context.Context, *OSLocatorRequest) (*OSLocatorResponse, error)
	// OSLocatorsByURI returns all ObjectStoreLocator entries for a locator uri.
	OSLocatorsByURI(context.Context, *OSLocatorsByURIRequest) (*OSLocatorsByURIResponse, error)
	// OSLocatorsByScope returns all ObjectStoreLocator entries for a for all signer's present in the specified scope.
	OSLocatorsByScope(context.Context, *OSLocatorsByScopeRequest) (*OSLocatorsByScopeResponse, error)
	// OSAllLocators returns all ObjectStoreLocator entries.
	OSAllLocators(context.Context, *OSAllLocatorsRequest) (*OSAllLocatorsResponse, error)
	// AccountData gets the account data associated with a metadata address.
	// Currently, only scope ids are supported.
	AccountData(context.Context, *AccountDataRequest) (*AccountDataResponse, error)
	// ScopeNetAssetValues returns net asset values for scope
	ScopeNetAssetValues(context.Context, *QueryScopeNetAssetValuesRequest) (*QueryScopeNetAssetValuesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Scope(ctx context.Context, req *ScopeRequest) (*ScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scope not implemented")
}
func (*UnimplementedQueryServer) ScopesAll(ctx context.Context, req *ScopesAllRequest) (*ScopesAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScopesAll not implemented")
}
func (*UnimplementedQueryServer) Sessions(ctx context.Context, req *SessionsRequest) (*SessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sessions not implemented")
}
func (*UnimplementedQueryServer) SessionsAll(ctx context.Context, req *SessionsAllRequest) (*SessionsAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionsAll not implemented")
}
func (*UnimplementedQueryServer) Records(ctx context.Context, req *RecordsRequest) (*RecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Records not implemented")
}
func (*UnimplementedQueryServer) RecordsAll(ctx context.Context, req *RecordsAllRequest) (*RecordsAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordsAll not implemented")
}
func (*UnimplementedQueryServer) Ownership(ctx context.Context, req *OwnershipRequest) (*OwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ownership not implemented")
}
func (*UnimplementedQueryServer) ValueOwnership(ctx context.Context, req *ValueOwnershipRequest) (*ValueOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValueOwnership not implemented")
}
func (*UnimplementedQueryServer) ScopeSpecification(ctx context.Context, req *ScopeSpecificationRequest) (*ScopeSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScopeSpecification not implemented")
}
func (*UnimplementedQueryServer) ScopeSpecificationsAll(ctx context.Context, req *ScopeSpecificationsAllRequest) (*ScopeSpecificationsAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScopeSpecificationsAll not implemented")
}
func (*UnimplementedQueryServer) ContractSpecification(ctx context.Context, req *ContractSpecificationRequest) (*ContractSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractSpecification not implemented")
}
func (*UnimplementedQueryServer) ContractSpecificationsAll(ctx context.Context, req *ContractSpecificationsAllRequest) (*ContractSpecificationsAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractSpecificationsAll not implemented")
}
func (*UnimplementedQueryServer) RecordSpecificationsForContractSpecification(ctx context.Context, req *RecordSpecificationsForContractSpecificationRequest) (*RecordSpecificationsForContractSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordSpecificationsForContractSpecification not implemented")
}
func (*UnimplementedQueryServer) RecordSpecification(ctx context.Context, req *RecordSpecificationRequest) (*RecordSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordSpecification not implemented")
}
func (*UnimplementedQueryServer) RecordSpecificationsAll(ctx context.Context, req *RecordSpecificationsAllRequest) (*RecordSpecificationsAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordSpecificationsAll not implemented")
}
func (*UnimplementedQueryServer) GetByAddr(ctx context.Context, req *GetByAddrRequest) (*GetByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAddr not implemented")
}
func (*UnimplementedQueryServer) OSLocatorParams(ctx context.Context, req *OSLocatorParamsRequest) (*OSLocatorParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSLocatorParams not implemented")
}
func (*UnimplementedQueryServer) OSLocator(ctx context.Context, req *OSLocatorRequest) (*OSLocatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSLocator not implemented")
}
func (*UnimplementedQueryServer) OSLocatorsByURI(ctx context.Context, req *OSLocatorsByURIRequest) (*OSLocatorsByURIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSLocatorsByURI not implemented")
}
func (*UnimplementedQueryServer) OSLocatorsByScope(ctx context.Context, req *OSLocatorsByScopeRequest) (*OSLocatorsByScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSLocatorsByScope not implemented")
}
func (*UnimplementedQueryServer) OSAllLocators(ctx context.Context, req *OSAllLocatorsRequest) (*OSAllLocatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSAllLocators not implemented")
}
func (*UnimplementedQueryServer) AccountData(ctx context.Context, req *AccountDataRequest) (*AccountDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountData not implemented")
}
func (*UnimplementedQueryServer) ScopeNetAssetValues(ctx context.Context, req *QueryScopeNetAssetValuesRequest) (*QueryScopeNetAssetValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScopeNetAssetValues not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Scope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Scope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Scope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Scope(ctx, req.(*ScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScopesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopesAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScopesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ScopesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScopesAll(ctx, req.(*ScopesAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Sessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Sessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Sessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Sessions(ctx, req.(*SessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SessionsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SessionsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/SessionsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SessionsAll(ctx, req.(*SessionsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Records_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Records(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Records",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Records(ctx, req.(*RecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecordsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/RecordsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordsAll(ctx, req.(*RecordsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ownership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ownership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Ownership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ownership(ctx, req.(*OwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValueOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValueOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValueOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ValueOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValueOwnership(ctx, req.(*ValueOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScopeSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopeSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScopeSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ScopeSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScopeSpecification(ctx, req.(*ScopeSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScopeSpecificationsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopeSpecificationsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScopeSpecificationsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ScopeSpecificationsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScopeSpecificationsAll(ctx, req.(*ScopeSpecificationsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ContractSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractSpecification(ctx, req.(*ContractSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractSpecificationsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractSpecificationsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractSpecificationsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ContractSpecificationsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractSpecificationsAll(ctx, req.(*ContractSpecificationsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecordSpecificationsForContractSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordSpecificationsForContractSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordSpecificationsForContractSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/RecordSpecificationsForContractSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordSpecificationsForContractSpecification(ctx, req.(*RecordSpecificationsForContractSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecordSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/RecordSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordSpecification(ctx, req.(*RecordSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecordSpecificationsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordSpecificationsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordSpecificationsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/RecordSpecificationsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordSpecificationsAll(ctx, req.(*RecordSpecificationsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/GetByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetByAddr(ctx, req.(*GetByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSLocatorParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSLocatorParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSLocatorParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSLocatorParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSLocatorParams(ctx, req.(*OSLocatorParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSLocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSLocatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSLocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSLocator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSLocator(ctx, req.(*OSLocatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSLocatorsByURI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSLocatorsByURIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSLocatorsByURI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSLocatorsByURI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSLocatorsByURI(ctx, req.(*OSLocatorsByURIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSLocatorsByScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSLocatorsByScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSLocatorsByScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSLocatorsByScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSLocatorsByScope(ctx, req.(*OSLocatorsByScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSAllLocators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSAllLocatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSAllLocators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSAllLocators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSAllLocators(ctx, req.(*OSAllLocatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/AccountData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountData(ctx, req.(*AccountDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScopeNetAssetValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryScopeNetAssetValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScopeNetAssetValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ScopeNetAssetValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScopeNetAssetValues(ctx, req.(*QueryScopeNetAssetValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.metadata.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Scope",
			Handler:    _Query_Scope_Handler,
		},
		{
			MethodName: "ScopesAll",
			Handler:    _Query_ScopesAll_Handler,
		},
		{
			MethodName: "Sessions",
			Handler:    _Query_Sessions_Handler,
		},
		{
			MethodName: "SessionsAll",
			Handler:    _Query_SessionsAll_Handler,
		},
		{
			MethodName: "Records",
			Handler:    _Query_Records_Handler,
		},
		{
			MethodName: "RecordsAll",
			Handler:    _Query_RecordsAll_Handler,
		},
		{
			MethodName: "Ownership",
			Handler:    _Query_Ownership_Handler,
		},
		{
			MethodName: "ValueOwnership",
			Handler:    _Query_ValueOwnership_Handler,
		},
		{
			MethodName: "ScopeSpecification",
			Handler:    _Query_ScopeSpecification_Handler,
		},
		{
			MethodName: "ScopeSpecificationsAll",
			Handler:    _Query_ScopeSpecificationsAll_Handler,
		},
		{
			MethodName: "ContractSpecification",
			Handler:    _Query_ContractSpecification_Handler,
		},
		{
			MethodName: "ContractSpecificationsAll",
			Handler:    _Query_ContractSpecificationsAll_Handler,
		},
		{
			MethodName: "RecordSpecificationsForContractSpecification",
			Handler:    _Query_RecordSpecificationsForContractSpecification_Handler,
		},
		{
			MethodName: "RecordSpecification",
			Handler:    _Query_RecordSpecification_Handler,
		},
		{
			MethodName: "RecordSpecificationsAll",
			Handler:    _Query_RecordSpecificationsAll_Handler,
		},
		{
			MethodName: "GetByAddr",
			Handler:    _Query_GetByAddr_Handler,
		},
		{
			MethodName: "OSLocatorParams",
			Handler:    _Query_OSLocatorParams_Handler,
		},
		{
			MethodName: "OSLocator",
			Handler:    _Query_OSLocator_Handler,
		},
		{
			MethodName: "OSLocatorsByURI",
			Handler:    _Query_OSLocatorsByURI_Handler,
		},
		{
			MethodName: "OSLocatorsByScope",
			Handler:    _Query_OSLocatorsByScope_Handler,
		},
		{
			MethodName: "OSAllLocators",
			Handler:    _Query_OSAllLocators_Handler,
		},
		{
			MethodName: "AccountData",
			Handler:    _Query_AccountData_Handler,
		},
		{
			MethodName: "ScopeNetAssetValues",
			Handler:    _Query_ScopeNetAssetValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/metadata/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ScopeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ExcludeIdInfo {
		i--
		if m.ExcludeIdInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IncludeRecords {
		i--
		if m.IncludeRecords {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IncludeSessions {
		i--
		if m.IncludeSessions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.RecordAddr) > 0 {
		i -= len(m.RecordAddr)
		copy(dAtA[i:], m.RecordAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecordAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionAddr) > 0 {
		i -= len(m.SessionAddr)
		copy(dAtA[i:], m.SessionAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sessions) > 0 {
		for iNdEx := len(m.Sessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopeWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScopeSpecIdInfo != nil {
		{
			size, err := m.ScopeSpecIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ScopeIdInfo != nil {
		{
			size, err := m.ScopeIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopesAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopesAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopesAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ExcludeIdInfo {
		i--
		if m.ExcludeIdInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	return len(dAtA) - i, nil
}

func (m *ScopesAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopesAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopesAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Scopes) > 0 {
		for iNdEx := len(m.Scopes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scopes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SessionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ExcludeIdInfo {
		i--
		if m.ExcludeIdInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IncludeRecords {
		i--
		if m.IncludeRecords {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IncludeScope {
		i--
		if m.IncludeScope {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.RecordName) > 0 {
		i -= len(m.RecordName)
		copy(dAtA[i:], m.RecordName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecordName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecordAddr) > 0 {
		i -= len(m.RecordAddr)
		copy(dAtA[i:], m.RecordAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecordAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sessions) > 0 {
		for iNdEx := len(m.Sessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractSpecIdInfo != nil {
		{
			size, err := m.ContractSpecIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionIdInfo != nil {
		{
			size, err := m.SessionIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Session != nil {
		{
			size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionsAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionsAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionsAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ExcludeIdInfo {
		i--
		if m.ExcludeIdInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	return len(dAtA) - i, nil
}

func (m *SessionsAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionsAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionsAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Sessions) > 0 {
		for iNdEx := len(m.Sessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ExcludeIdInfo {
		i--
		if m.ExcludeIdInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IncludeSessions {
		i--
		if m.IncludeSessions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IncludeScope {
		i--
		if m.IncludeScope {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordAddr) > 0 {
		i -= len(m.RecordAddr)
		copy(dAtA[i:], m.RecordAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecordAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sessions) > 0 {
		for iNdEx := len(m.Sessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordSpecIdInfo != nil {
		{
			size, err := m.RecordSpecIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RecordIdInfo != nil {
		{
			size, err := m.RecordIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordsAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordsAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordsAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ExcludeIdInfo {
		i--
		if m.ExcludeIdInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	return len(dAtA) - i, nil
}

func (m *RecordsAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordsAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordsAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OwnershipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnershipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnershipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.ScopeUuids) > 0 {
		for iNdEx := len(m.ScopeUuids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ScopeUuids[iNdEx])
			copy(dAtA[i:], m.ScopeUuids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValueOwnershipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueOwnershipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueOwnershipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValueOwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueOwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueOwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.ScopeUuids) > 0 {
		for iNdEx := len(m.ScopeUuids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ScopeUuids[iNdEx])
			copy(dAtA[i:], m.ScopeUuids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ScopeSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ExcludeIdInfo {
		i--
		if m.ExcludeIdInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IncludeRecordSpecs {
		i--
		if m.IncludeRecordSpecs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IncludeContractSpecs {
		i--
		if m.IncludeContractSpecs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.SpecificationId) > 0 {
		i -= len(m.SpecificationId)
		copy(dAtA[i:], m.SpecificationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecificationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopeSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.RecordSpecs) > 0 {
		for iNdEx := len(m.RecordSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ContractSpecs) > 0 {
		for iNdEx := len(m.ContractSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ScopeSpecification != nil {
		{
			size, err := m.ScopeSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopeSpecificationWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeSpecificationWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeSpecificationWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScopeSpecIdInfo != nil {
		{
			size, err := m.ScopeSpecIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Specification != nil {
		{
			size, err := m.Specification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopeSpecificationsAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeSpecificationsAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeSpecificationsAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ExcludeIdInfo {
		i--
		if m.ExcludeIdInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	return len(dAtA) - i, nil
}

func (m *ScopeSpecificationsAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeSpecificationsAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeSpecificationsAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.ScopeSpecifications) > 0 {
		for iNdEx := len(m.ScopeSpecifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScopeSpecifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContractSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ExcludeIdInfo {
		i--
		if m.ExcludeIdInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IncludeRecordSpecs {
		i--
		if m.IncludeRecordSpecs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.SpecificationId) > 0 {
		i -= len(m.SpecificationId)
		copy(dAtA[i:], m.SpecificationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecificationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.RecordSpecifications) > 0 {
		for iNdEx := len(m.RecordSpecifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordSpecifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ContractSpecification != nil {
		{
			size, err := m.ContractSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractSpecificationWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractSpecificationWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecificationWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractSpecIdInfo != nil {
		{
			size, err := m.ContractSpecIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Specification != nil {
		{
			size, err := m.Specification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractSpecificationsAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractSpecificationsAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecificationsAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ExcludeIdInfo {
		i--
		if m.ExcludeIdInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	return len(dAtA) - i, nil
}

func (m *ContractSpecificationsAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractSpecificationsAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecificationsAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.ContractSpecifications) > 0 {
		for iNdEx := len(m.ContractSpecifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractSpecifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationsForContractSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationsForContractSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationsForContractSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ExcludeIdInfo {
		i--
		if m.ExcludeIdInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.SpecificationId) > 0 {
		i -= len(m.SpecificationId)
		copy(dAtA[i:], m.SpecificationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecificationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationsForContractSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationsForContractSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationsForContractSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.ContractSpecificationAddr) > 0 {
		i -= len(m.ContractSpecificationAddr)
		copy(dAtA[i:], m.ContractSpecificationAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractSpecificationAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractSpecificationUuid) > 0 {
		i -= len(m.ContractSpecificationUuid)
		copy(dAtA[i:], m.ContractSpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractSpecificationUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordSpecifications) > 0 {
		for iNdEx := len(m.RecordSpecifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordSpecifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ExcludeIdInfo {
		i--
		if m.ExcludeIdInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpecificationId) > 0 {
		i -= len(m.SpecificationId)
		copy(dAtA[i:], m.SpecificationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecificationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if m.RecordSpecification != nil {
		{
			size, err := m.RecordSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordSpecIdInfo != nil {
		{
			size, err := m.RecordSpecIdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Specification != nil {
		{
			size, err := m.Specification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationsAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationsAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationsAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ExcludeIdInfo {
		i--
		if m.ExcludeIdInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationsAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationsAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationsAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.RecordSpecifications) > 0 {
		for iNdEx := len(m.RecordSpecifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordSpecifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotFound) > 0 {
		for iNdEx := len(m.NotFound) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotFound[iNdEx])
			copy(dAtA[i:], m.NotFound[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.NotFound[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RecordSpecs) > 0 {
		for iNdEx := len(m.RecordSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ContractSpecs) > 0 {
		for iNdEx := len(m.ContractSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ScopeSpecs) > 0 {
		for iNdEx := len(m.ScopeSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScopeSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sessions) > 0 {
		for iNdEx := len(m.Sessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Scopes) > 0 {
		for iNdEx := len(m.Scopes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scopes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OSLocatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if m.Locator != nil {
		{
			size, err := m.Locator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorsByURIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorsByURIRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorsByURIRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorsByURIResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorsByURIResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorsByURIResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Locators) > 0 {
		for iNdEx := len(m.Locators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorsByScopeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorsByScopeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorsByScopeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorsByScopeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorsByScopeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorsByScopeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Locators) > 0 {
		for iNdEx := len(m.Locators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OSAllLocatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSAllLocatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSAllLocatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.IncludeRequest {
		i--
		if m.IncludeRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	return len(dAtA) - i, nil
}

func (m *OSAllLocatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSAllLocatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSAllLocatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Locators) > 0 {
		for iNdEx := len(m.Locators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MetadataAddr.Size()
		i -= size
		if _, err := m.MetadataAddr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AccountDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryScopeNetAssetValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryScopeNetAssetValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryScopeNetAssetValuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryScopeNetAssetValuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryScopeNetAssetValuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryScopeNetAssetValuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NetAssetValues) > 0 {
		for iNdEx := len(m.NetAssetValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetAssetValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeRequest {
		n += 3
	}
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SessionAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecordAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeSessions {
		n += 2
	}
	if m.IncludeRecords {
		n += 2
	}
	if m.ExcludeIdInfo {
		n += 2
	}
	if m.IncludeRequest {
		n += 3
	}
	return n
}

func (m *ScopeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopeWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ScopeIdInfo != nil {
		l = m.ScopeIdInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ScopeSpecIdInfo != nil {
		l = m.ScopeSpecIdInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopesAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludeIdInfo {
		n += 2
	}
	if m.IncludeRequest {
		n += 3
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopesAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scopes) > 0 {
		for _, e := range m.Scopes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SessionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecordAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecordName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeScope {
		n += 2
	}
	if m.IncludeRecords {
		n += 2
	}
	if m.ExcludeIdInfo {
		n += 2
	}
	if m.IncludeRequest {
		n += 3
	}
	return n
}

func (m *SessionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SessionWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SessionIdInfo != nil {
		l = m.SessionIdInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ContractSpecIdInfo != nil {
		l = m.ContractSpecIdInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SessionsAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludeIdInfo {
		n += 2
	}
	if m.IncludeRequest {
		n += 3
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SessionsAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeScope {
		n += 2
	}
	if m.IncludeSessions {
		n += 2
	}
	if m.ExcludeIdInfo {
		n += 2
	}
	if m.IncludeRequest {
		n += 3
	}
	return n
}

func (m *RecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RecordIdInfo != nil {
		l = m.RecordIdInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RecordSpecIdInfo != nil {
		l = m.RecordSpecIdInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordsAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludeIdInfo {
		n += 2
	}
	if m.IncludeRequest {
		n += 3
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordsAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OwnershipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeRequest {
		n += 3
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScopeUuids) > 0 {
		for _, s := range m.ScopeUuids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ValueOwnershipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeRequest {
		n += 3
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ValueOwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScopeUuids) > 0 {
		for _, s := range m.ScopeUuids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopeSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeContractSpecs {
		n += 2
	}
	if m.IncludeRecordSpecs {
		n += 2
	}
	if m.ExcludeIdInfo {
		n += 2
	}
	if m.IncludeRequest {
		n += 3
	}
	return n
}

func (m *ScopeSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScopeSpecification != nil {
		l = m.ScopeSpecification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.ContractSpecs) > 0 {
		for _, e := range m.ContractSpecs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.RecordSpecs) > 0 {
		for _, e := range m.RecordSpecs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopeSpecificationWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Specification != nil {
		l = m.Specification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ScopeSpecIdInfo != nil {
		l = m.ScopeSpecIdInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopeSpecificationsAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludeIdInfo {
		n += 2
	}
	if m.IncludeRequest {
		n += 3
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopeSpecificationsAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScopeSpecifications) > 0 {
		for _, e := range m.ScopeSpecifications {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ContractSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeRecordSpecs {
		n += 2
	}
	if m.ExcludeIdInfo {
		n += 2
	}
	if m.IncludeRequest {
		n += 3
	}
	return n
}

func (m *ContractSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractSpecification != nil {
		l = m.ContractSpecification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.RecordSpecifications) > 0 {
		for _, e := range m.RecordSpecifications {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ContractSpecificationWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Specification != nil {
		l = m.Specification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ContractSpecIdInfo != nil {
		l = m.ContractSpecIdInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ContractSpecificationsAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludeIdInfo {
		n += 2
	}
	if m.IncludeRequest {
		n += 3
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ContractSpecificationsAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractSpecifications) > 0 {
		for _, e := range m.ContractSpecifications {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationsForContractSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ExcludeIdInfo {
		n += 2
	}
	if m.IncludeRequest {
		n += 3
	}
	return n
}

func (m *RecordSpecificationsForContractSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecordSpecifications) > 0 {
		for _, e := range m.RecordSpecifications {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.ContractSpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ExcludeIdInfo {
		n += 2
	}
	if m.IncludeRequest {
		n += 3
	}
	return n
}

func (m *RecordSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordSpecification != nil {
		l = m.RecordSpecification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Specification != nil {
		l = m.Specification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RecordSpecIdInfo != nil {
		l = m.RecordSpecIdInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationsAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludeIdInfo {
		n += 2
	}
	if m.IncludeRequest {
		n += 3
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationsAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecordSpecifications) > 0 {
		for _, e := range m.RecordSpecifications {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scopes) > 0 {
		for _, e := range m.Scopes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ScopeSpecs) > 0 {
		for _, e := range m.ScopeSpecs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ContractSpecs) > 0 {
		for _, e := range m.ContractSpecs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.RecordSpecs) > 0 {
		for _, e := range m.RecordSpecs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.NotFound) > 0 {
		for _, s := range m.NotFound {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *OSLocatorParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeRequest {
		n += 3
	}
	return n
}

func (m *OSLocatorParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeRequest {
		n += 3
	}
	return n
}

func (m *OSLocatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Locator != nil {
		l = m.Locator.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorsByURIRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeRequest {
		n += 3
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorsByURIResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locators) > 0 {
		for _, e := range m.Locators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorsByScopeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeRequest {
		n += 3
	}
	return n
}

func (m *OSLocatorsByScopeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locators) > 0 {
		for _, e := range m.Locators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSAllLocatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeRequest {
		n += 3
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSAllLocatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locators) > 0 {
		for _, e := range m.Locators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AccountDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MetadataAddr.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *AccountDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryScopeNetAssetValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryScopeNetAssetValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NetAssetValues) > 0 {
		for _, e := range m.NetAssetValues {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &QueryParamsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSessions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeSessions = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRecords", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRecords = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIdInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeIdInfo = bool(v != 0)
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &ScopeWrapper{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &SessionWrapper{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &RecordWrapper{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ScopeRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeIdInfo == nil {
				m.ScopeIdInfo = &ScopeIdInfo{}
			}
			if err := m.ScopeIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeSpecIdInfo == nil {
				m.ScopeSpecIdInfo = &ScopeSpecIdInfo{}
			}
			if err := m.ScopeSpecIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopesAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopesAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopesAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIdInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeIdInfo = bool(v != 0)
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopesAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopesAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopesAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scopes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scopes = append(m.Scopes, &ScopeWrapper{})
			if err := m.Scopes[len(m.Scopes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ScopesAllRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeScope", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeScope = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRecords", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRecords = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIdInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeIdInfo = bool(v != 0)
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &ScopeWrapper{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &SessionWrapper{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &RecordWrapper{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &SessionsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionIdInfo == nil {
				m.SessionIdInfo = &SessionIdInfo{}
			}
			if err := m.SessionIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractSpecIdInfo == nil {
				m.ContractSpecIdInfo = &ContractSpecIdInfo{}
			}
			if err := m.ContractSpecIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionsAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionsAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionsAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIdInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeIdInfo = bool(v != 0)
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionsAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionsAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionsAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &SessionWrapper{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &SessionsAllRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeScope", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeScope = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSessions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeSessions = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIdInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeIdInfo = bool(v != 0)
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &ScopeWrapper{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &SessionWrapper{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &RecordWrapper{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RecordsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordIdInfo == nil {
				m.RecordIdInfo = &RecordIdInfo{}
			}
			if err := m.RecordIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordSpecIdInfo == nil {
				m.RecordSpecIdInfo = &RecordSpecIdInfo{}
			}
			if err := m.RecordSpecIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordsAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordsAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordsAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIdInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeIdInfo = bool(v != 0)
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordsAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordsAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordsAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &RecordWrapper{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RecordsAllRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnershipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnershipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnershipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuids = append(m.ScopeUuids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &OwnershipRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueOwnershipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueOwnershipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueOwnershipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueOwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueOwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueOwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuids = append(m.ScopeUuids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ValueOwnershipRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeContractSpecs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeContractSpecs = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRecordSpecs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRecordSpecs = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIdInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeIdInfo = bool(v != 0)
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeSpecification == nil {
				m.ScopeSpecification = &ScopeSpecificationWrapper{}
			}
			if err := m.ScopeSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecs = append(m.ContractSpecs, &ContractSpecificationWrapper{})
			if err := m.ContractSpecs[len(m.ContractSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecs = append(m.RecordSpecs, &RecordSpecificationWrapper{})
			if err := m.RecordSpecs[len(m.RecordSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ScopeSpecificationRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeSpecificationWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeSpecificationWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeSpecificationWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Specification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Specification == nil {
				m.Specification = &ScopeSpecification{}
			}
			if err := m.Specification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeSpecIdInfo == nil {
				m.ScopeSpecIdInfo = &ScopeSpecIdInfo{}
			}
			if err := m.ScopeSpecIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeSpecificationsAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeSpecificationsAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeSpecificationsAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIdInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeIdInfo = bool(v != 0)
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeSpecificationsAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeSpecificationsAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeSpecificationsAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeSpecifications = append(m.ScopeSpecifications, &ScopeSpecificationWrapper{})
			if err := m.ScopeSpecifications[len(m.ScopeSpecifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ScopeSpecificationsAllRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRecordSpecs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRecordSpecs = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIdInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeIdInfo = bool(v != 0)
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractSpecification == nil {
				m.ContractSpecification = &ContractSpecificationWrapper{}
			}
			if err := m.ContractSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecifications = append(m.RecordSpecifications, &RecordSpecificationWrapper{})
			if err := m.RecordSpecifications[len(m.RecordSpecifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ContractSpecificationRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractSpecificationWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractSpecificationWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractSpecificationWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Specification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Specification == nil {
				m.Specification = &ContractSpecification{}
			}
			if err := m.Specification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractSpecIdInfo == nil {
				m.ContractSpecIdInfo = &ContractSpecIdInfo{}
			}
			if err := m.ContractSpecIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractSpecificationsAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractSpecificationsAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractSpecificationsAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIdInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeIdInfo = bool(v != 0)
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractSpecificationsAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractSpecificationsAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractSpecificationsAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecifications = append(m.ContractSpecifications, &ContractSpecificationWrapper{})
			if err := m.ContractSpecifications[len(m.ContractSpecifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ContractSpecificationsAllRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationsForContractSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationsForContractSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationsForContractSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIdInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeIdInfo = bool(v != 0)
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationsForContractSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationsForContractSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationsForContractSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecifications = append(m.RecordSpecifications, &RecordSpecificationWrapper{})
			if err := m.RecordSpecifications[len(m.RecordSpecifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RecordSpecificationsForContractSpecificationRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIdInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeIdInfo = bool(v != 0)
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordSpecification == nil {
				m.RecordSpecification = &RecordSpecificationWrapper{}
			}
			if err := m.RecordSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RecordSpecificationRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Specification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Specification == nil {
				m.Specification = &RecordSpecification{}
			}
			if err := m.Specification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecIdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordSpecIdInfo == nil {
				m.RecordSpecIdInfo = &RecordSpecIdInfo{}
			}
			if err := m.RecordSpecIdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationsAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationsAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationsAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeIdInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeIdInfo = bool(v != 0)
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationsAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationsAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationsAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecifications = append(m.RecordSpecifications, &RecordSpecificationWrapper{})
			if err := m.RecordSpecifications[len(m.RecordSpecifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RecordSpecificationsAllRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scopes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scopes = append(m.Scopes, &Scope{})
			if err := m.Scopes[len(m.Scopes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &Session{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeSpecs = append(m.ScopeSpecs, &ScopeSpecification{})
			if err := m.ScopeSpecs[len(m.ScopeSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecs = append(m.ContractSpecs, &ContractSpecification{})
			if err := m.ContractSpecs[len(m.ContractSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecs = append(m.RecordSpecs, &RecordSpecification{})
			if err := m.RecordSpecs[len(m.RecordSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotFound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotFound = append(m.NotFound, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &OSLocatorParamsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locator == nil {
				m.Locator = &ObjectStoreLocator{}
			}
			if err := m.Locator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &OSLocatorRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorsByURIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorsByURIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorsByURIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorsByURIResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorsByURIResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorsByURIResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locators = append(m.Locators, ObjectStoreLocator{})
			if err := m.Locators[len(m.Locators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &OSLocatorsByURIRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorsByScopeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorsByScopeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorsByScopeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorsByScopeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorsByScopeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorsByScopeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locators = append(m.Locators, ObjectStoreLocator{})
			if err := m.Locators[len(m.Locators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &OSLocatorsByScopeRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSAllLocatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSAllLocatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSAllLocatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRequest = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSAllLocatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSAllLocatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSAllLocatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locators = append(m.Locators, ObjectStoreLocator{})
			if err := m.Locators[len(m.Locators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &OSAllLocatorsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MetadataAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryScopeNetAssetValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryScopeNetAssetValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryScopeNetAssetValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryScopeNetAssetValuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryScopeNetAssetValuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryScopeNetAssetValuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAssetValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetAssetValues = append(m.NetAssetValues, NetAssetValue{})
			if err := m.NetAssetValues[len(m.NetAssetValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
