// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/metadata/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// ScopeRequest is the request type for the Query/Scope RPC method.
type ScopeRequest struct {
	ScopeId string `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
}

func (m *ScopeRequest) Reset()         { *m = ScopeRequest{} }
func (m *ScopeRequest) String() string { return proto.CompactTextString(m) }
func (*ScopeRequest) ProtoMessage()    {}
func (*ScopeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{2}
}
func (m *ScopeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeRequest.Merge(m, src)
}
func (m *ScopeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScopeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeRequest proto.InternalMessageInfo

func (m *ScopeRequest) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

// ScopeResponse is the response type for the Query/Scope RPC method.
type ScopeResponse struct {
	Scope     *Scope     `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Sessions  []*Session `protobuf:"bytes,2,rep,name=sessions,proto3" json:"sessions,omitempty"`
	Records   []*Record  `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	ScopeUuid string     `protobuf:"bytes,4,opt,name=scope_uuid,json=scopeUuid,proto3" json:"scope_uuid,omitempty" yaml:"scope_uuid"`
}

func (m *ScopeResponse) Reset()         { *m = ScopeResponse{} }
func (m *ScopeResponse) String() string { return proto.CompactTextString(m) }
func (*ScopeResponse) ProtoMessage()    {}
func (*ScopeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{3}
}
func (m *ScopeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeResponse.Merge(m, src)
}
func (m *ScopeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScopeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeResponse proto.InternalMessageInfo

func (m *ScopeResponse) GetScope() *Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *ScopeResponse) GetSessions() []*Session {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *ScopeResponse) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *ScopeResponse) GetScopeUuid() string {
	if m != nil {
		return m.ScopeUuid
	}
	return ""
}

// SessionsRequest is the request type for the Query/Sessions RPC method.
type SessionsRequest struct {
	// scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
	// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
	ScopeId string `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
	// session_id can either be a uuid, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0 or a session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" yaml:"session_id"`
}

func (m *SessionsRequest) Reset()         { *m = SessionsRequest{} }
func (m *SessionsRequest) String() string { return proto.CompactTextString(m) }
func (*SessionsRequest) ProtoMessage()    {}
func (*SessionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{4}
}
func (m *SessionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionsRequest.Merge(m, src)
}
func (m *SessionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SessionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionsRequest proto.InternalMessageInfo

func (m *SessionsRequest) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *SessionsRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

// SessionsResponse is the response type for the Query/Sessions RPC method.
type SessionsResponse struct {
	// sessions is any number of session results.
	Sessions []*SessionWrapper `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	// request is a copy of the request that generated these results.
	Request *SessionsRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *SessionsResponse) Reset()         { *m = SessionsResponse{} }
func (m *SessionsResponse) String() string { return proto.CompactTextString(m) }
func (*SessionsResponse) ProtoMessage()    {}
func (*SessionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{5}
}
func (m *SessionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionsResponse.Merge(m, src)
}
func (m *SessionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *SessionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SessionsResponse proto.InternalMessageInfo

func (m *SessionsResponse) GetSessions() []*SessionWrapper {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *SessionsResponse) GetRequest() *SessionsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SessionWrapper contains a single session and some extra identifiers for it.
type SessionWrapper struct {
	// session is the on-chain session message.
	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// session_id is the address of the session, e.g. session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" yaml:"session_id"`
	// scope_id is the address of the scope containing this session, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
	ScopeId string `protobuf:"bytes,3,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
	// scope_uuid is the uuid of the scope containing this session, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0.
	ScopeUuid string `protobuf:"bytes,4,opt,name=scope_uuid,json=scopeUuid,proto3" json:"scope_uuid,omitempty" yaml:"scope_uuid"`
	// session_uuid is the uuid of the session, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0.
	// This is meaningless without the added context of the scope uuid (or scope id).
	SessionUuid string `protobuf:"bytes,5,opt,name=session_uuid,json=sessionUuid,proto3" json:"session_uuid,omitempty" yaml:"session_uuid"`
}

func (m *SessionWrapper) Reset()         { *m = SessionWrapper{} }
func (m *SessionWrapper) String() string { return proto.CompactTextString(m) }
func (*SessionWrapper) ProtoMessage()    {}
func (*SessionWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{6}
}
func (m *SessionWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionWrapper.Merge(m, src)
}
func (m *SessionWrapper) XXX_Size() int {
	return m.Size()
}
func (m *SessionWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_SessionWrapper proto.InternalMessageInfo

func (m *SessionWrapper) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *SessionWrapper) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SessionWrapper) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *SessionWrapper) GetScopeUuid() string {
	if m != nil {
		return m.ScopeUuid
	}
	return ""
}

func (m *SessionWrapper) GetSessionUuid() string {
	if m != nil {
		return m.SessionUuid
	}
	return ""
}

// RecordsByScopeUUIDRequest is the request type for the Query/RecordsByScopeUUID RPC method.
type RecordsByScopeUUIDRequest struct {
	ScopeUuid string `protobuf:"bytes,1,opt,name=scope_uuid,json=scopeUuid,proto3" json:"scope_uuid,omitempty" yaml:"scope_uuid"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RecordsByScopeUUIDRequest) Reset()         { *m = RecordsByScopeUUIDRequest{} }
func (m *RecordsByScopeUUIDRequest) String() string { return proto.CompactTextString(m) }
func (*RecordsByScopeUUIDRequest) ProtoMessage()    {}
func (*RecordsByScopeUUIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{7}
}
func (m *RecordsByScopeUUIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordsByScopeUUIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordsByScopeUUIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordsByScopeUUIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordsByScopeUUIDRequest.Merge(m, src)
}
func (m *RecordsByScopeUUIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordsByScopeUUIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordsByScopeUUIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordsByScopeUUIDRequest proto.InternalMessageInfo

func (m *RecordsByScopeUUIDRequest) GetScopeUuid() string {
	if m != nil {
		return m.ScopeUuid
	}
	return ""
}

func (m *RecordsByScopeUUIDRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// RecordsByScopeUUIDResponse is the response type for the Query/RecordsByScopeUUID RPC method.
type RecordsByScopeUUIDResponse struct {
	ScopeUuid string    `protobuf:"bytes,1,opt,name=scope_uuid,json=scopeUuid,proto3" json:"scope_uuid,omitempty" yaml:"scope_uuid"`
	ScopeId   string    `protobuf:"bytes,2,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
	Records   []*Record `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *RecordsByScopeUUIDResponse) Reset()         { *m = RecordsByScopeUUIDResponse{} }
func (m *RecordsByScopeUUIDResponse) String() string { return proto.CompactTextString(m) }
func (*RecordsByScopeUUIDResponse) ProtoMessage()    {}
func (*RecordsByScopeUUIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{8}
}
func (m *RecordsByScopeUUIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordsByScopeUUIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordsByScopeUUIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordsByScopeUUIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordsByScopeUUIDResponse.Merge(m, src)
}
func (m *RecordsByScopeUUIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordsByScopeUUIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordsByScopeUUIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordsByScopeUUIDResponse proto.InternalMessageInfo

func (m *RecordsByScopeUUIDResponse) GetScopeUuid() string {
	if m != nil {
		return m.ScopeUuid
	}
	return ""
}

func (m *RecordsByScopeUUIDResponse) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *RecordsByScopeUUIDResponse) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

// RecordsByScopeIDRequest is the request type for the Query/RecordsByScopeID RPC method.
type RecordsByScopeIDRequest struct {
	ScopeId string `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RecordsByScopeIDRequest) Reset()         { *m = RecordsByScopeIDRequest{} }
func (m *RecordsByScopeIDRequest) String() string { return proto.CompactTextString(m) }
func (*RecordsByScopeIDRequest) ProtoMessage()    {}
func (*RecordsByScopeIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{9}
}
func (m *RecordsByScopeIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordsByScopeIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordsByScopeIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordsByScopeIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordsByScopeIDRequest.Merge(m, src)
}
func (m *RecordsByScopeIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordsByScopeIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordsByScopeIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordsByScopeIDRequest proto.InternalMessageInfo

func (m *RecordsByScopeIDRequest) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *RecordsByScopeIDRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// RecordsByScopeIDResponse is the response type for the Query/RecordsByScopeID RPC method.
type RecordsByScopeIDResponse struct {
	ScopeUuid string    `protobuf:"bytes,1,opt,name=scope_uuid,json=scopeUuid,proto3" json:"scope_uuid,omitempty" yaml:"scope_uuid"`
	ScopeId   string    `protobuf:"bytes,2,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
	Records   []*Record `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *RecordsByScopeIDResponse) Reset()         { *m = RecordsByScopeIDResponse{} }
func (m *RecordsByScopeIDResponse) String() string { return proto.CompactTextString(m) }
func (*RecordsByScopeIDResponse) ProtoMessage()    {}
func (*RecordsByScopeIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{10}
}
func (m *RecordsByScopeIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordsByScopeIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordsByScopeIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordsByScopeIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordsByScopeIDResponse.Merge(m, src)
}
func (m *RecordsByScopeIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordsByScopeIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordsByScopeIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordsByScopeIDResponse proto.InternalMessageInfo

func (m *RecordsByScopeIDResponse) GetScopeUuid() string {
	if m != nil {
		return m.ScopeUuid
	}
	return ""
}

func (m *RecordsByScopeIDResponse) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *RecordsByScopeIDResponse) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

// OwnershipRequest is the request type for the Query/Ownership RPC method.
type OwnershipRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OwnershipRequest) Reset()         { *m = OwnershipRequest{} }
func (m *OwnershipRequest) String() string { return proto.CompactTextString(m) }
func (*OwnershipRequest) ProtoMessage()    {}
func (*OwnershipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{11}
}
func (m *OwnershipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnershipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnershipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnershipRequest.Merge(m, src)
}
func (m *OwnershipRequest) XXX_Size() int {
	return m.Size()
}
func (m *OwnershipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OwnershipRequest proto.InternalMessageInfo

func (m *OwnershipRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *OwnershipRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OwnershipResponse is the response type for the Query/Ownership RPC method.
type OwnershipResponse struct {
	// A list of scope ids (uuid) associated with the given address.
	ScopeUuids []string `protobuf:"bytes,1,rep,name=scope_uuids,json=scopeUuids,proto3" json:"scope_uuids,omitempty" yaml:"scope_uuids"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OwnershipResponse) Reset()         { *m = OwnershipResponse{} }
func (m *OwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*OwnershipResponse) ProtoMessage()    {}
func (*OwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{12}
}
func (m *OwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnershipResponse.Merge(m, src)
}
func (m *OwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *OwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OwnershipResponse proto.InternalMessageInfo

func (m *OwnershipResponse) GetScopeUuids() []string {
	if m != nil {
		return m.ScopeUuids
	}
	return nil
}

func (m *OwnershipResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ValueOwnershipRequest is the request type for the Query/ValueOwnership RPC method.
type ValueOwnershipRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ValueOwnershipRequest) Reset()         { *m = ValueOwnershipRequest{} }
func (m *ValueOwnershipRequest) String() string { return proto.CompactTextString(m) }
func (*ValueOwnershipRequest) ProtoMessage()    {}
func (*ValueOwnershipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{13}
}
func (m *ValueOwnershipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueOwnershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueOwnershipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueOwnershipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueOwnershipRequest.Merge(m, src)
}
func (m *ValueOwnershipRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValueOwnershipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueOwnershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValueOwnershipRequest proto.InternalMessageInfo

func (m *ValueOwnershipRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ValueOwnershipRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ValueOwnershipResponse is the response type for the Query/ValueOwnership RPC method.
type ValueOwnershipResponse struct {
	// A list of scope ids (uuid) associated with the given address.
	ScopeUuids []string `protobuf:"bytes,1,rep,name=scope_uuids,json=scopeUuids,proto3" json:"scope_uuids,omitempty" yaml:"scope_uuids"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ValueOwnershipResponse) Reset()         { *m = ValueOwnershipResponse{} }
func (m *ValueOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*ValueOwnershipResponse) ProtoMessage()    {}
func (*ValueOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{14}
}
func (m *ValueOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueOwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueOwnershipResponse.Merge(m, src)
}
func (m *ValueOwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValueOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValueOwnershipResponse proto.InternalMessageInfo

func (m *ValueOwnershipResponse) GetScopeUuids() []string {
	if m != nil {
		return m.ScopeUuids
	}
	return nil
}

func (m *ValueOwnershipResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ScopeSpecificationRequest is the request type for the Query/ScopeSpecification RPC method.
type ScopeSpecificationRequest struct {
	SpecificationUuid string `protobuf:"bytes,1,opt,name=specification_uuid,json=specificationUuid,proto3" json:"specification_uuid,omitempty" yaml:"specification_uuid"`
}

func (m *ScopeSpecificationRequest) Reset()         { *m = ScopeSpecificationRequest{} }
func (m *ScopeSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*ScopeSpecificationRequest) ProtoMessage()    {}
func (*ScopeSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{15}
}
func (m *ScopeSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeSpecificationRequest.Merge(m, src)
}
func (m *ScopeSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScopeSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeSpecificationRequest proto.InternalMessageInfo

func (m *ScopeSpecificationRequest) GetSpecificationUuid() string {
	if m != nil {
		return m.SpecificationUuid
	}
	return ""
}

// ScopeSpecificationResponse is the response type for the Query/ScopeSpecification RPC method.
type ScopeSpecificationResponse struct {
	ScopeSpecification *ScopeSpecification `protobuf:"bytes,1,opt,name=scope_specification,json=scopeSpecification,proto3" json:"scope_specification,omitempty" yaml:"scope_specification"`
	SpecificationUuid  string              `protobuf:"bytes,2,opt,name=specification_uuid,json=specificationUuid,proto3" json:"specification_uuid,omitempty" yaml:"specification_uuid"`
}

func (m *ScopeSpecificationResponse) Reset()         { *m = ScopeSpecificationResponse{} }
func (m *ScopeSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*ScopeSpecificationResponse) ProtoMessage()    {}
func (*ScopeSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{16}
}
func (m *ScopeSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeSpecificationResponse.Merge(m, src)
}
func (m *ScopeSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScopeSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeSpecificationResponse proto.InternalMessageInfo

func (m *ScopeSpecificationResponse) GetScopeSpecification() *ScopeSpecification {
	if m != nil {
		return m.ScopeSpecification
	}
	return nil
}

func (m *ScopeSpecificationResponse) GetSpecificationUuid() string {
	if m != nil {
		return m.SpecificationUuid
	}
	return ""
}

// ContractSpecificationRequest is the request type for the Query/ContractSpecification RPC method.
type ContractSpecificationRequest struct {
	SpecificationUuid string `protobuf:"bytes,1,opt,name=specification_uuid,json=specificationUuid,proto3" json:"specification_uuid,omitempty" yaml:"specification_uuid"`
}

func (m *ContractSpecificationRequest) Reset()         { *m = ContractSpecificationRequest{} }
func (m *ContractSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*ContractSpecificationRequest) ProtoMessage()    {}
func (*ContractSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{17}
}
func (m *ContractSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpecificationRequest.Merge(m, src)
}
func (m *ContractSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContractSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpecificationRequest proto.InternalMessageInfo

func (m *ContractSpecificationRequest) GetSpecificationUuid() string {
	if m != nil {
		return m.SpecificationUuid
	}
	return ""
}

// ContractSpecificationResponse is the response type for the Query/ContractSpecification RPC method.
type ContractSpecificationResponse struct {
	ContractSpecification     *ContractSpecification `protobuf:"bytes,1,opt,name=contract_specification,json=contractSpecification,proto3" json:"contract_specification,omitempty" yaml:"contract_specification"`
	ContractSpecificationUuid string                 `protobuf:"bytes,2,opt,name=contract_specification_uuid,json=contractSpecificationUuid,proto3" json:"contract_specification_uuid,omitempty" yaml:"contract_specification_uuid"`
}

func (m *ContractSpecificationResponse) Reset()         { *m = ContractSpecificationResponse{} }
func (m *ContractSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*ContractSpecificationResponse) ProtoMessage()    {}
func (*ContractSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{18}
}
func (m *ContractSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpecificationResponse.Merge(m, src)
}
func (m *ContractSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *ContractSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpecificationResponse proto.InternalMessageInfo

func (m *ContractSpecificationResponse) GetContractSpecification() *ContractSpecification {
	if m != nil {
		return m.ContractSpecification
	}
	return nil
}

func (m *ContractSpecificationResponse) GetContractSpecificationUuid() string {
	if m != nil {
		return m.ContractSpecificationUuid
	}
	return ""
}

// ContractSpecificationExtendedRequest is the request type for the Query/ContractSpecificationExtended RPC method.
// specification uuid
type ContractSpecificationExtendedRequest struct {
	SpecificationUuid string `protobuf:"bytes,1,opt,name=specification_uuid,json=specificationUuid,proto3" json:"specification_uuid,omitempty" yaml:"specification_uuid"`
}

func (m *ContractSpecificationExtendedRequest) Reset()         { *m = ContractSpecificationExtendedRequest{} }
func (m *ContractSpecificationExtendedRequest) String() string { return proto.CompactTextString(m) }
func (*ContractSpecificationExtendedRequest) ProtoMessage()    {}
func (*ContractSpecificationExtendedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{19}
}
func (m *ContractSpecificationExtendedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractSpecificationExtendedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractSpecificationExtendedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractSpecificationExtendedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpecificationExtendedRequest.Merge(m, src)
}
func (m *ContractSpecificationExtendedRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContractSpecificationExtendedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpecificationExtendedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpecificationExtendedRequest proto.InternalMessageInfo

func (m *ContractSpecificationExtendedRequest) GetSpecificationUuid() string {
	if m != nil {
		return m.SpecificationUuid
	}
	return ""
}

// ContractSpecificationExtendedResponse is the response type for the Query/ContractSpecificationExtended RPC method.
type ContractSpecificationExtendedResponse struct {
	ContractSpecification     *ContractSpecification `protobuf:"bytes,1,opt,name=contract_specification,json=contractSpecification,proto3" json:"contract_specification,omitempty" yaml:"contract_specification"`
	RecordSpecifications      []*RecordSpecification `protobuf:"bytes,2,rep,name=record_specifications,json=recordSpecifications,proto3" json:"record_specifications,omitempty" yaml:"record_specifications"`
	ContractSpecificationUuid string                 `protobuf:"bytes,3,opt,name=contract_specification_uuid,json=contractSpecificationUuid,proto3" json:"contract_specification_uuid,omitempty" yaml:"contract_specification_uuid"`
}

func (m *ContractSpecificationExtendedResponse) Reset()         { *m = ContractSpecificationExtendedResponse{} }
func (m *ContractSpecificationExtendedResponse) String() string { return proto.CompactTextString(m) }
func (*ContractSpecificationExtendedResponse) ProtoMessage()    {}
func (*ContractSpecificationExtendedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{20}
}
func (m *ContractSpecificationExtendedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractSpecificationExtendedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractSpecificationExtendedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractSpecificationExtendedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpecificationExtendedResponse.Merge(m, src)
}
func (m *ContractSpecificationExtendedResponse) XXX_Size() int {
	return m.Size()
}
func (m *ContractSpecificationExtendedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpecificationExtendedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpecificationExtendedResponse proto.InternalMessageInfo

func (m *ContractSpecificationExtendedResponse) GetContractSpecification() *ContractSpecification {
	if m != nil {
		return m.ContractSpecification
	}
	return nil
}

func (m *ContractSpecificationExtendedResponse) GetRecordSpecifications() []*RecordSpecification {
	if m != nil {
		return m.RecordSpecifications
	}
	return nil
}

func (m *ContractSpecificationExtendedResponse) GetContractSpecificationUuid() string {
	if m != nil {
		return m.ContractSpecificationUuid
	}
	return ""
}

// RecordSpecificationsForContractSpecificationRequest is the request type for the
// Query/RecordSpecificationsForContractSpecification RPC method.
type RecordSpecificationsForContractSpecificationRequest struct {
	ContractSpecificationUuid string `protobuf:"bytes,1,opt,name=contract_specification_uuid,json=contractSpecificationUuid,proto3" json:"contract_specification_uuid,omitempty" yaml:"contract_specification_uuid"`
}

func (m *RecordSpecificationsForContractSpecificationRequest) Reset() {
	*m = RecordSpecificationsForContractSpecificationRequest{}
}
func (m *RecordSpecificationsForContractSpecificationRequest) String() string {
	return proto.CompactTextString(m)
}
func (*RecordSpecificationsForContractSpecificationRequest) ProtoMessage() {}
func (*RecordSpecificationsForContractSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{21}
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationsForContractSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationsForContractSpecificationRequest.Merge(m, src)
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationsForContractSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationsForContractSpecificationRequest proto.InternalMessageInfo

func (m *RecordSpecificationsForContractSpecificationRequest) GetContractSpecificationUuid() string {
	if m != nil {
		return m.ContractSpecificationUuid
	}
	return ""
}

// RecordSpecificationsForContractSpecificationResponse is the response type for the
// Query/RecordSpecificationsForContractSpecification RPC method.
type RecordSpecificationsForContractSpecificationResponse struct {
	RecordSpecifications      []*RecordSpecification `protobuf:"bytes,1,rep,name=record_specifications,json=recordSpecifications,proto3" json:"record_specifications,omitempty" yaml:"record_specifications"`
	ContractSpecificationUuid string                 `protobuf:"bytes,2,opt,name=contract_specification_uuid,json=contractSpecificationUuid,proto3" json:"contract_specification_uuid,omitempty" yaml:"contract_specification_uuid"`
}

func (m *RecordSpecificationsForContractSpecificationResponse) Reset() {
	*m = RecordSpecificationsForContractSpecificationResponse{}
}
func (m *RecordSpecificationsForContractSpecificationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*RecordSpecificationsForContractSpecificationResponse) ProtoMessage() {}
func (*RecordSpecificationsForContractSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{22}
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationsForContractSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationsForContractSpecificationResponse.Merge(m, src)
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationsForContractSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationsForContractSpecificationResponse proto.InternalMessageInfo

func (m *RecordSpecificationsForContractSpecificationResponse) GetRecordSpecifications() []*RecordSpecification {
	if m != nil {
		return m.RecordSpecifications
	}
	return nil
}

func (m *RecordSpecificationsForContractSpecificationResponse) GetContractSpecificationUuid() string {
	if m != nil {
		return m.ContractSpecificationUuid
	}
	return ""
}

// RecordSpecificationRequest is the request type for the Query/RecordSpecification RPC method.
type RecordSpecificationRequest struct {
	ContractSpecificationUuid string `protobuf:"bytes,1,opt,name=contract_specification_uuid,json=contractSpecificationUuid,proto3" json:"contract_specification_uuid,omitempty" yaml:"contract_specification_uuid"`
	Name                      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RecordSpecificationRequest) Reset()         { *m = RecordSpecificationRequest{} }
func (m *RecordSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*RecordSpecificationRequest) ProtoMessage()    {}
func (*RecordSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{23}
}
func (m *RecordSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationRequest.Merge(m, src)
}
func (m *RecordSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationRequest proto.InternalMessageInfo

func (m *RecordSpecificationRequest) GetContractSpecificationUuid() string {
	if m != nil {
		return m.ContractSpecificationUuid
	}
	return ""
}

func (m *RecordSpecificationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// RecordSpecificationResponse is the response type for the Query/RecordSpecification RPC method.
type RecordSpecificationResponse struct {
	RecordSpecification       *RecordSpecification `protobuf:"bytes,1,opt,name=record_specification,json=recordSpecification,proto3" json:"record_specification,omitempty" yaml:"record_specification"`
	ContractSpecificationUuid string               `protobuf:"bytes,2,opt,name=contract_specification_uuid,json=contractSpecificationUuid,proto3" json:"contract_specification_uuid,omitempty" yaml:"contract_specification_uuid"`
	Name                      string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RecordSpecificationResponse) Reset()         { *m = RecordSpecificationResponse{} }
func (m *RecordSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*RecordSpecificationResponse) ProtoMessage()    {}
func (*RecordSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{24}
}
func (m *RecordSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationResponse.Merge(m, src)
}
func (m *RecordSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationResponse proto.InternalMessageInfo

func (m *RecordSpecificationResponse) GetRecordSpecification() *RecordSpecification {
	if m != nil {
		return m.RecordSpecification
	}
	return nil
}

func (m *RecordSpecificationResponse) GetContractSpecificationUuid() string {
	if m != nil {
		return m.ContractSpecificationUuid
	}
	return ""
}

func (m *RecordSpecificationResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// RecordSpecificationByIDRequest is the request type for the Query/RecordSpecificationByID RPC method.
type RecordSpecificationByIDRequest struct {
	RecordSpecificationId string `protobuf:"bytes,1,opt,name=record_specification_id,json=recordSpecificationId,proto3" json:"record_specification_id,omitempty" yaml:"record_specification_id"`
}

func (m *RecordSpecificationByIDRequest) Reset()         { *m = RecordSpecificationByIDRequest{} }
func (m *RecordSpecificationByIDRequest) String() string { return proto.CompactTextString(m) }
func (*RecordSpecificationByIDRequest) ProtoMessage()    {}
func (*RecordSpecificationByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{25}
}
func (m *RecordSpecificationByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationByIDRequest.Merge(m, src)
}
func (m *RecordSpecificationByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationByIDRequest proto.InternalMessageInfo

func (m *RecordSpecificationByIDRequest) GetRecordSpecificationId() string {
	if m != nil {
		return m.RecordSpecificationId
	}
	return ""
}

// RecordSpecificationByIDResponse is the response type for the Query/RecordSpecificationByID RPC method.
type RecordSpecificationByIDResponse struct {
	RecordSpecification   *RecordSpecification `protobuf:"bytes,1,opt,name=record_specification,json=recordSpecification,proto3" json:"record_specification,omitempty" yaml:"record_specification"`
	RecordSpecificationId string               `protobuf:"bytes,2,opt,name=record_specification_id,json=recordSpecificationId,proto3" json:"record_specification_id,omitempty" yaml:"record_specification_id"`
}

func (m *RecordSpecificationByIDResponse) Reset()         { *m = RecordSpecificationByIDResponse{} }
func (m *RecordSpecificationByIDResponse) String() string { return proto.CompactTextString(m) }
func (*RecordSpecificationByIDResponse) ProtoMessage()    {}
func (*RecordSpecificationByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{26}
}
func (m *RecordSpecificationByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationByIDResponse.Merge(m, src)
}
func (m *RecordSpecificationByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationByIDResponse proto.InternalMessageInfo

func (m *RecordSpecificationByIDResponse) GetRecordSpecification() *RecordSpecification {
	if m != nil {
		return m.RecordSpecification
	}
	return nil
}

func (m *RecordSpecificationByIDResponse) GetRecordSpecificationId() string {
	if m != nil {
		return m.RecordSpecificationId
	}
	return ""
}

// OSLocatorParamsRequest is the request type for the Query/OSLocatorParams RPC method.
type OSLocatorParamsRequest struct {
}

func (m *OSLocatorParamsRequest) Reset()         { *m = OSLocatorParamsRequest{} }
func (m *OSLocatorParamsRequest) String() string { return proto.CompactTextString(m) }
func (*OSLocatorParamsRequest) ProtoMessage()    {}
func (*OSLocatorParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{27}
}
func (m *OSLocatorParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorParamsRequest.Merge(m, src)
}
func (m *OSLocatorParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorParamsRequest proto.InternalMessageInfo

// OSLocatorParamsResponse is the response type for the Query/OSLocatorParams RPC method.
type OSLocatorParamsResponse struct {
	// params defines the parameters of the module.
	Params OSLocatorParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *OSLocatorParamsResponse) Reset()         { *m = OSLocatorParamsResponse{} }
func (m *OSLocatorParamsResponse) String() string { return proto.CompactTextString(m) }
func (*OSLocatorParamsResponse) ProtoMessage()    {}
func (*OSLocatorParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{28}
}
func (m *OSLocatorParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorParamsResponse.Merge(m, src)
}
func (m *OSLocatorParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorParamsResponse proto.InternalMessageInfo

func (m *OSLocatorParamsResponse) GetParams() OSLocatorParams {
	if m != nil {
		return m.Params
	}
	return OSLocatorParams{}
}

// OSLocationRequest is the request type for the Query/OSLocator RPC method.
type OSLocatorRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *OSLocatorRequest) Reset()         { *m = OSLocatorRequest{} }
func (m *OSLocatorRequest) String() string { return proto.CompactTextString(m) }
func (*OSLocatorRequest) ProtoMessage()    {}
func (*OSLocatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{29}
}
func (m *OSLocatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorRequest.Merge(m, src)
}
func (m *OSLocatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorRequest proto.InternalMessageInfo

func (m *OSLocatorRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// OSLocatorResponse is the response type for the Query/OSLocator RPC method.
type OSLocatorResponse struct {
	Locator *ObjectStoreLocator `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator,omitempty"`
}

func (m *OSLocatorResponse) Reset()         { *m = OSLocatorResponse{} }
func (m *OSLocatorResponse) String() string { return proto.CompactTextString(m) }
func (*OSLocatorResponse) ProtoMessage()    {}
func (*OSLocatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{30}
}
func (m *OSLocatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorResponse.Merge(m, src)
}
func (m *OSLocatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorResponse proto.InternalMessageInfo

func (m *OSLocatorResponse) GetLocator() *ObjectStoreLocator {
	if m != nil {
		return m.Locator
	}
	return nil
}

// OSLocatorByURIRequest is the request type for the Query/OSLocatorByURI RPC method.
type OSLocatorByURIRequest struct {
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OSLocatorByURIRequest) Reset()         { *m = OSLocatorByURIRequest{} }
func (m *OSLocatorByURIRequest) String() string { return proto.CompactTextString(m) }
func (*OSLocatorByURIRequest) ProtoMessage()    {}
func (*OSLocatorByURIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{31}
}
func (m *OSLocatorByURIRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorByURIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorByURIRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorByURIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorByURIRequest.Merge(m, src)
}
func (m *OSLocatorByURIRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorByURIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorByURIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorByURIRequest proto.InternalMessageInfo

func (m *OSLocatorByURIRequest) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *OSLocatorByURIRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OSLocatorByURIResponse is the response type for the Query/OSLocatorByURI RPC method.
type OSLocatorByURIResponse struct {
	Locator []ObjectStoreLocator `protobuf:"bytes,1,rep,name=locator,proto3" json:"locator"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OSLocatorByURIResponse) Reset()         { *m = OSLocatorByURIResponse{} }
func (m *OSLocatorByURIResponse) String() string { return proto.CompactTextString(m) }
func (*OSLocatorByURIResponse) ProtoMessage()    {}
func (*OSLocatorByURIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{32}
}
func (m *OSLocatorByURIResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorByURIResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorByURIResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorByURIResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorByURIResponse.Merge(m, src)
}
func (m *OSLocatorByURIResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorByURIResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorByURIResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorByURIResponse proto.InternalMessageInfo

func (m *OSLocatorByURIResponse) GetLocator() []ObjectStoreLocator {
	if m != nil {
		return m.Locator
	}
	return nil
}

func (m *OSLocatorByURIResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OSLocatorByScopeUUIDRequest is the request type for the Query/OSLocatorByScopeUUID RPC method.
type OSLocatorByScopeUUIDRequest struct {
	ScopeUuid string `protobuf:"bytes,1,opt,name=scope_uuid,json=scopeUuid,proto3" json:"scope_uuid,omitempty" yaml:"scope_uuid"`
}

func (m *OSLocatorByScopeUUIDRequest) Reset()         { *m = OSLocatorByScopeUUIDRequest{} }
func (m *OSLocatorByScopeUUIDRequest) String() string { return proto.CompactTextString(m) }
func (*OSLocatorByScopeUUIDRequest) ProtoMessage()    {}
func (*OSLocatorByScopeUUIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{33}
}
func (m *OSLocatorByScopeUUIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorByScopeUUIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorByScopeUUIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorByScopeUUIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorByScopeUUIDRequest.Merge(m, src)
}
func (m *OSLocatorByScopeUUIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorByScopeUUIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorByScopeUUIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorByScopeUUIDRequest proto.InternalMessageInfo

func (m *OSLocatorByScopeUUIDRequest) GetScopeUuid() string {
	if m != nil {
		return m.ScopeUuid
	}
	return ""
}

// OSLocatorByScopeUUIDResponse is the response type for the Query/OSLocatorByScopeUUID RPC method.
type OSLocatorByScopeUUIDResponse struct {
	Locator []ObjectStoreLocator `protobuf:"bytes,1,rep,name=locator,proto3" json:"locator"`
}

func (m *OSLocatorByScopeUUIDResponse) Reset()         { *m = OSLocatorByScopeUUIDResponse{} }
func (m *OSLocatorByScopeUUIDResponse) String() string { return proto.CompactTextString(m) }
func (*OSLocatorByScopeUUIDResponse) ProtoMessage()    {}
func (*OSLocatorByScopeUUIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{34}
}
func (m *OSLocatorByScopeUUIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorByScopeUUIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorByScopeUUIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorByScopeUUIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorByScopeUUIDResponse.Merge(m, src)
}
func (m *OSLocatorByScopeUUIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorByScopeUUIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorByScopeUUIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorByScopeUUIDResponse proto.InternalMessageInfo

func (m *OSLocatorByScopeUUIDResponse) GetLocator() []ObjectStoreLocator {
	if m != nil {
		return m.Locator
	}
	return nil
}

// OSAllLocatorsRequest is the request type for the Query/OSAllLocators RPC method.
type OSAllLocatorsRequest struct {
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OSAllLocatorsRequest) Reset()         { *m = OSAllLocatorsRequest{} }
func (m *OSAllLocatorsRequest) String() string { return proto.CompactTextString(m) }
func (*OSAllLocatorsRequest) ProtoMessage()    {}
func (*OSAllLocatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{35}
}
func (m *OSAllLocatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSAllLocatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSAllLocatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSAllLocatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSAllLocatorsRequest.Merge(m, src)
}
func (m *OSAllLocatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSAllLocatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSAllLocatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSAllLocatorsRequest proto.InternalMessageInfo

func (m *OSAllLocatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OSAllLocatorsResponse is the response type for the Query/OSAllLocators RPC method.
type OSAllLocatorsResponse struct {
	Locator []ObjectStoreLocator `protobuf:"bytes,1,rep,name=locator,proto3" json:"locator"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OSAllLocatorsResponse) Reset()         { *m = OSAllLocatorsResponse{} }
func (m *OSAllLocatorsResponse) String() string { return proto.CompactTextString(m) }
func (*OSAllLocatorsResponse) ProtoMessage()    {}
func (*OSAllLocatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{36}
}
func (m *OSAllLocatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSAllLocatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSAllLocatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSAllLocatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSAllLocatorsResponse.Merge(m, src)
}
func (m *OSAllLocatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSAllLocatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSAllLocatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSAllLocatorsResponse proto.InternalMessageInfo

func (m *OSAllLocatorsResponse) GetLocator() []ObjectStoreLocator {
	if m != nil {
		return m.Locator
	}
	return nil
}

func (m *OSAllLocatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "provenance.metadata.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "provenance.metadata.v1.QueryParamsResponse")
	proto.RegisterType((*ScopeRequest)(nil), "provenance.metadata.v1.ScopeRequest")
	proto.RegisterType((*ScopeResponse)(nil), "provenance.metadata.v1.ScopeResponse")
	proto.RegisterType((*SessionsRequest)(nil), "provenance.metadata.v1.SessionsRequest")
	proto.RegisterType((*SessionsResponse)(nil), "provenance.metadata.v1.SessionsResponse")
	proto.RegisterType((*SessionWrapper)(nil), "provenance.metadata.v1.SessionWrapper")
	proto.RegisterType((*RecordsByScopeUUIDRequest)(nil), "provenance.metadata.v1.RecordsByScopeUUIDRequest")
	proto.RegisterType((*RecordsByScopeUUIDResponse)(nil), "provenance.metadata.v1.RecordsByScopeUUIDResponse")
	proto.RegisterType((*RecordsByScopeIDRequest)(nil), "provenance.metadata.v1.RecordsByScopeIDRequest")
	proto.RegisterType((*RecordsByScopeIDResponse)(nil), "provenance.metadata.v1.RecordsByScopeIDResponse")
	proto.RegisterType((*OwnershipRequest)(nil), "provenance.metadata.v1.OwnershipRequest")
	proto.RegisterType((*OwnershipResponse)(nil), "provenance.metadata.v1.OwnershipResponse")
	proto.RegisterType((*ValueOwnershipRequest)(nil), "provenance.metadata.v1.ValueOwnershipRequest")
	proto.RegisterType((*ValueOwnershipResponse)(nil), "provenance.metadata.v1.ValueOwnershipResponse")
	proto.RegisterType((*ScopeSpecificationRequest)(nil), "provenance.metadata.v1.ScopeSpecificationRequest")
	proto.RegisterType((*ScopeSpecificationResponse)(nil), "provenance.metadata.v1.ScopeSpecificationResponse")
	proto.RegisterType((*ContractSpecificationRequest)(nil), "provenance.metadata.v1.ContractSpecificationRequest")
	proto.RegisterType((*ContractSpecificationResponse)(nil), "provenance.metadata.v1.ContractSpecificationResponse")
	proto.RegisterType((*ContractSpecificationExtendedRequest)(nil), "provenance.metadata.v1.ContractSpecificationExtendedRequest")
	proto.RegisterType((*ContractSpecificationExtendedResponse)(nil), "provenance.metadata.v1.ContractSpecificationExtendedResponse")
	proto.RegisterType((*RecordSpecificationsForContractSpecificationRequest)(nil), "provenance.metadata.v1.RecordSpecificationsForContractSpecificationRequest")
	proto.RegisterType((*RecordSpecificationsForContractSpecificationResponse)(nil), "provenance.metadata.v1.RecordSpecificationsForContractSpecificationResponse")
	proto.RegisterType((*RecordSpecificationRequest)(nil), "provenance.metadata.v1.RecordSpecificationRequest")
	proto.RegisterType((*RecordSpecificationResponse)(nil), "provenance.metadata.v1.RecordSpecificationResponse")
	proto.RegisterType((*RecordSpecificationByIDRequest)(nil), "provenance.metadata.v1.RecordSpecificationByIDRequest")
	proto.RegisterType((*RecordSpecificationByIDResponse)(nil), "provenance.metadata.v1.RecordSpecificationByIDResponse")
	proto.RegisterType((*OSLocatorParamsRequest)(nil), "provenance.metadata.v1.OSLocatorParamsRequest")
	proto.RegisterType((*OSLocatorParamsResponse)(nil), "provenance.metadata.v1.OSLocatorParamsResponse")
	proto.RegisterType((*OSLocatorRequest)(nil), "provenance.metadata.v1.OSLocatorRequest")
	proto.RegisterType((*OSLocatorResponse)(nil), "provenance.metadata.v1.OSLocatorResponse")
	proto.RegisterType((*OSLocatorByURIRequest)(nil), "provenance.metadata.v1.OSLocatorByURIRequest")
	proto.RegisterType((*OSLocatorByURIResponse)(nil), "provenance.metadata.v1.OSLocatorByURIResponse")
	proto.RegisterType((*OSLocatorByScopeUUIDRequest)(nil), "provenance.metadata.v1.OSLocatorByScopeUUIDRequest")
	proto.RegisterType((*OSLocatorByScopeUUIDResponse)(nil), "provenance.metadata.v1.OSLocatorByScopeUUIDResponse")
	proto.RegisterType((*OSAllLocatorsRequest)(nil), "provenance.metadata.v1.OSAllLocatorsRequest")
	proto.RegisterType((*OSAllLocatorsResponse)(nil), "provenance.metadata.v1.OSAllLocatorsResponse")
}

func init() {
	proto.RegisterFile("provenance/metadata/v1/query.proto", fileDescriptor_a68790bc0b96eeb9)
}

var fileDescriptor_a68790bc0b96eeb9 = []byte{
	// 1917 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0xdd, 0x6f, 0xdb, 0x5c,
	0x19, 0xef, 0x49, 0xd6, 0x75, 0x7d, 0xfa, 0xbe, 0x5b, 0x7b, 0xfa, 0x95, 0xba, 0x6d, 0x52, 0xac,
	0xad, 0xeb, 0xd6, 0xd6, 0x5e, 0x3f, 0x78, 0xb7, 0x75, 0x1f, 0xd0, 0xb0, 0x0f, 0x75, 0x4c, 0xb4,
	0xb8, 0xea, 0x10, 0x95, 0xf8, 0x70, 0x13, 0xaf, 0xcb, 0x48, 0xe3, 0xcc, 0x76, 0xba, 0x55, 0x21,
	0x42, 0xda, 0x05, 0x08, 0x71, 0xc3, 0x84, 0x26, 0xc1, 0x24, 0x90, 0x60, 0xdc, 0x20, 0xe0, 0x0f,
	0xe0, 0xeb, 0x8a, 0x0b, 0x76, 0xc7, 0xa4, 0xdd, 0x70, 0x15, 0xa1, 0x0d, 0x09, 0xc4, 0x1d, 0xf9,
	0x03, 0x10, 0xf2, 0xf1, 0x39, 0x89, 0x9d, 0xf8, 0xc4, 0x76, 0x09, 0x5b, 0xb9, 0xb3, 0xe3, 0xe7,
	0xe3, 0xf7, 0xfb, 0x9d, 0x63, 0x9f, 0xe7, 0x79, 0x5a, 0x10, 0x8b, 0x86, 0xbe, 0xaf, 0x15, 0xd4,
	0x42, 0x46, 0x93, 0xf7, 0x34, 0x4b, 0xcd, 0xaa, 0x96, 0x2a, 0xef, 0x2f, 0xc8, 0x8f, 0x4a, 0x9a,
	0x71, 0x20, 0x15, 0x0d, 0xdd, 0xd2, 0xf1, 0x48, 0xc3, 0x46, 0x62, 0x36, 0xd2, 0xfe, 0x82, 0x30,
	0xb4, 0xab, 0xef, 0xea, 0xc4, 0x44, 0xb6, 0xaf, 0x1c, 0x6b, 0xe1, 0x7c, 0x46, 0x37, 0xf7, 0x74,
	0x53, 0xde, 0x51, 0x4d, 0xcd, 0x09, 0x23, 0xef, 0x2f, 0xec, 0x68, 0x96, 0xba, 0x20, 0x17, 0xd5,
	0xdd, 0x5c, 0x41, 0xb5, 0x72, 0x7a, 0x81, 0xda, 0x4e, 0xec, 0xea, 0xfa, 0x6e, 0x5e, 0x93, 0xd5,
	0x62, 0x4e, 0x56, 0x0b, 0x05, 0xdd, 0x22, 0x0f, 0x4d, 0xfa, 0xf4, 0x0c, 0x07, 0x5b, 0x1d, 0x83,
	0x63, 0xc6, 0xa3, 0x60, 0x66, 0xf4, 0xa2, 0xc6, 0x40, 0xf1, 0x6c, 0x8a, 0x5a, 0x26, 0x77, 0x3f,
	0x97, 0x71, 0x83, 0x9a, 0xe1, 0xd8, 0xea, 0x3b, 0x0f, 0xb5, 0x8c, 0x65, 0x5a, 0xba, 0x41, 0xa3,
	0x8a, 0x43, 0x80, 0xbf, 0x68, 0x13, 0xdc, 0x50, 0x0d, 0x75, 0xcf, 0x54, 0xb4, 0x47, 0x25, 0xcd,
	0xb4, 0xc4, 0x4d, 0x18, 0xf4, 0xfc, 0x6a, 0x16, 0xf5, 0x82, 0xa9, 0xe1, 0xab, 0x70, 0xbc, 0x48,
	0x7e, 0x49, 0xa0, 0x29, 0x34, 0xd3, 0xb7, 0x98, 0x94, 0xfc, 0x65, 0x95, 0x1c, 0xbf, 0xf4, 0xb1,
	0x57, 0xd5, 0x54, 0x97, 0x42, 0x7d, 0xc4, 0xeb, 0xf0, 0xd1, 0xa6, 0xcd, 0x87, 0x26, 0xc1, 0x12,
	0x9c, 0x20, 0xfc, 0xbe, 0x96, 0xcb, 0x92, 0x78, 0xbd, 0xe9, 0xc1, 0x5a, 0x35, 0x75, 0xea, 0x40,
	0xdd, 0xcb, 0xaf, 0x88, 0xec, 0x89, 0xa8, 0xf4, 0x90, 0xcb, 0xb5, 0xac, 0xf8, 0x2f, 0x04, 0x1f,
	0xd3, 0x00, 0x14, 0xcf, 0x12, 0x74, 0x93, 0x87, 0x14, 0xce, 0x24, 0x0f, 0x8e, 0xe3, 0xe5, 0xd8,
	0xe2, 0x2b, 0x70, 0xc2, 0xd4, 0x4c, 0xd3, 0x5e, 0xa4, 0x44, 0x6c, 0x2a, 0x3e, 0xd3, 0xb7, 0x98,
	0xe2, 0xfa, 0x39, 0x76, 0x4a, 0xdd, 0x01, 0x5f, 0x82, 0x1e, 0x43, 0xcb, 0xe8, 0x46, 0xd6, 0x4c,
	0xc4, 0x89, 0x2f, 0x57, 0x02, 0x85, 0x98, 0x29, 0xcc, 0x1c, 0x2f, 0x03, 0x38, 0x9c, 0x4a, 0xa5,
	0x5c, 0x36, 0x71, 0x8c, 0xf0, 0x1d, 0xae, 0x55, 0x53, 0x03, 0x6e, 0xbe, 0xf6, 0x33, 0x51, 0xe9,
	0x25, 0x37, 0x5b, 0xf6, 0xf5, 0x63, 0x38, 0x45, 0x41, 0x98, 0x87, 0x94, 0x8d, 0x24, 0x76, 0x42,
	0xd8, 0x1e, 0xb1, 0x96, 0xc4, 0xf5, 0x67, 0x76, 0x62, 0xe7, 0x66, 0x2d, 0x2b, 0xfe, 0x08, 0x41,
	0x7f, 0x23, 0x33, 0xd5, 0x3b, 0xed, 0x92, 0x0e, 0x11, 0xfa, 0xd3, 0x01, 0xd2, 0x7d, 0xc9, 0x50,
	0x8b, 0x45, 0xcd, 0x70, 0x29, 0xb8, 0x6a, 0x2b, 0x48, 0x98, 0x24, 0x76, 0xc8, 0xaa, 0x9d, 0x0d,
	0x08, 0xc1, 0x88, 0x2b, 0xcc, 0x4f, 0x7c, 0x19, 0x83, 0x93, 0xde, 0xf8, 0xf8, 0x32, 0xf4, 0xd0,
	0x0c, 0x74, 0x2f, 0x04, 0xae, 0x29, 0xb3, 0x3f, 0x9c, 0x3e, 0x9e, 0x55, 0x88, 0x87, 0x5c, 0x85,
	0xc8, 0xcb, 0x8f, 0x57, 0xe0, 0x23, 0x96, 0x9f, 0xf8, 0x75, 0x13, 0xbf, 0xd1, 0x5a, 0x35, 0x35,
	0xe8, 0x45, 0xe7, 0x78, 0xf6, 0xd1, 0x5b, 0xb2, 0x75, 0x34, 0x18, 0x73, 0xf6, 0xa0, 0x99, 0x3e,
	0x20, 0x2f, 0xc0, 0xd6, 0xd6, 0xda, 0x0d, 0xb6, 0x89, 0xbc, 0x70, 0x50, 0x48, 0x38, 0x18, 0x8e,
	0x15, 0xd4, 0x3d, 0xcd, 0x11, 0x49, 0x21, 0xd7, 0xe2, 0xef, 0x11, 0x08, 0x7e, 0x79, 0xe8, 0x96,
	0x39, 0x5c, 0x22, 0xb7, 0xba, 0xb1, 0x10, 0xea, 0x1e, 0xfa, 0xb5, 0x14, 0xbf, 0x02, 0xa3, 0x5e,
	0xf4, 0x0d, 0x8d, 0xa2, 0xbe, 0x68, 0x7e, 0xea, 0xfc, 0x16, 0x41, 0xa2, 0x35, 0xfe, 0xff, 0x89,
	0x36, 0x16, 0xf4, 0xaf, 0x3f, 0x2e, 0x68, 0x86, 0xf9, 0x20, 0x57, 0x64, 0xa2, 0x24, 0xa0, 0x47,
	0xcd, 0x66, 0x0d, 0xcd, 0x74, 0xce, 0x80, 0x5e, 0x85, 0xdd, 0xe2, 0x5b, 0x00, 0x8d, 0xc3, 0x31,
	0x91, 0x21, 0x6f, 0xe1, 0xb4, 0xe4, 0x9c, 0xa4, 0x92, 0x7d, 0x92, 0x4a, 0xce, 0x81, 0x4c, 0x4f,
	0x52, 0x69, 0x43, 0xdd, 0x65, 0x47, 0x81, 0xe2, 0xf2, 0x14, 0x9f, 0x23, 0x18, 0x70, 0xa5, 0xa5,
	0x5a, 0x5d, 0x84, 0xbe, 0x86, 0x1e, 0xce, 0xd7, 0xa7, 0x37, 0x3d, 0x52, 0xab, 0xa6, 0x70, 0xb3,
	0x58, 0xa6, 0xa8, 0x40, 0x5d, 0x2d, 0x13, 0xdf, 0xf6, 0x81, 0x75, 0x36, 0x10, 0x96, 0x93, 0xd5,
	0x83, 0xeb, 0x00, 0x86, 0xef, 0xa9, 0xf9, 0x92, 0xf6, 0x01, 0x24, 0x79, 0x81, 0x60, 0xa4, 0x39,
	0xf7, 0x91, 0xd1, 0x25, 0x07, 0x63, 0x64, 0x63, 0x6f, 0xba, 0xeb, 0x10, 0xa6, 0xcd, 0x5d, 0xc0,
	0x9e, 0xfa, 0xc4, 0xbd, 0xd5, 0x27, 0x6b, 0xd5, 0xd4, 0x18, 0x45, 0xd9, 0x62, 0x23, 0x2a, 0x03,
	0x9e, 0x1f, 0xc9, 0x27, 0xed, 0xef, 0x08, 0x04, 0xbf, 0x5c, 0x54, 0x8b, 0x32, 0x0c, 0x3a, 0x74,
	0x3d, 0x9e, 0xf4, 0x40, 0x38, 0xdf, 0xb6, 0x38, 0xf0, 0x04, 0x4c, 0x27, 0x6b, 0xd5, 0x94, 0xe0,
	0xd6, 0xcf, 0x13, 0x50, 0x54, 0xb0, 0xd9, 0xe2, 0xc3, 0x61, 0x1a, 0x3b, 0x24, 0xd3, 0x3c, 0x4c,
	0x7c, 0x4e, 0x2f, 0x58, 0x86, 0x9a, 0xb1, 0xde, 0x83, 0xae, 0xcf, 0x62, 0x30, 0xc9, 0x49, 0x47,
	0xa5, 0xfd, 0x0e, 0x82, 0x91, 0x0c, 0xb5, 0xf0, 0x95, 0x77, 0x9e, 0x27, 0xaf, 0x6f, 0xdc, 0xf4,
	0xa7, 0x6a, 0xd5, 0xd4, 0xa4, 0x83, 0xd1, 0x3f, 0xac, 0xa8, 0x0c, 0x67, 0xfc, 0x3c, 0xf1, 0x7d,
	0x18, 0xf7, 0xf7, 0x70, 0x0b, 0x3e, 0x5d, 0xab, 0xa6, 0xc4, 0x76, 0xe1, 0xa9, 0x16, 0x63, 0xbe,
	0x39, 0x88, 0x26, 0x16, 0x9c, 0xf6, 0x85, 0x7e, 0xf3, 0x89, 0xa5, 0x15, 0xb2, 0x5a, 0xf6, 0x7f,
	0xb3, 0x12, 0x3f, 0x89, 0xc3, 0x99, 0x80, 0xb4, 0x47, 0x6e, 0x45, 0x9e, 0x22, 0x18, 0x76, 0x8e,
	0x0c, 0xaf, 0x03, 0x2b, 0xaf, 0x67, 0xdb, 0x9f, 0x37, 0x5e, 0x18, 0x53, 0xb5, 0x6a, 0x6a, 0xc2,
	0x81, 0xe1, 0x1b, 0x53, 0x54, 0x86, 0x8c, 0x56, 0x37, 0x33, 0x68, 0x5b, 0xc4, 0x3b, 0xb5, 0x2d,
	0x7e, 0x8c, 0x60, 0xc9, 0x07, 0xb7, 0x79, 0x4b, 0x37, 0xda, 0xbe, 0xb0, 0x01, 0xf8, 0x50, 0xa7,
	0xf0, 0xbd, 0x8c, 0xc1, 0x72, 0x34, 0x7c, 0x74, 0x3f, 0xf1, 0x57, 0x11, 0x1d, 0x99, 0x55, 0xec,
	0xd8, 0xcb, 0xfd, 0xc3, 0x7a, 0xd1, 0xfa, 0x21, 0x17, 0xcb, 0xb7, 0x62, 0x7c, 0x11, 0x83, 0x71,
	0x5f, 0x68, 0x74, 0x9d, 0xbe, 0x05, 0x43, 0x7e, 0x92, 0xd2, 0x97, 0x3e, 0xd2, 0x2a, 0xa5, 0x6a,
	0xd5, 0xd4, 0x38, 0x7f, 0x95, 0x44, 0x65, 0xd0, 0x67, 0x91, 0xde, 0xd7, 0x1a, 0xd5, 0xc5, 0x89,
	0xbb, 0xc4, 0xf9, 0x26, 0x24, 0xfd, 0x88, 0x1c, 0x34, 0x8a, 0xf6, 0x6d, 0x18, 0xf5, 0xe3, 0xd2,
	0xa8, 0xe1, 0xc5, 0x5a, 0x35, 0x95, 0xe4, 0x93, 0x26, 0xb5, 0xf3, 0xb0, 0x0f, 0xef, 0xb5, 0xac,
	0xf8, 0x6f, 0x04, 0x29, 0x6e, 0xfa, 0xa3, 0xb2, 0x3c, 0x6d, 0x04, 0x88, 0xfd, 0xb7, 0x02, 0x24,
	0x60, 0x64, 0x7d, 0xf3, 0xae, 0x9e, 0x51, 0x2d, 0xdd, 0xf0, 0x0e, 0x8c, 0xbe, 0x0e, 0xa3, 0x2d,
	0x4f, 0xa8, 0x22, 0x37, 0x9b, 0x86, 0x46, 0xdc, 0x7e, 0xbf, 0x29, 0x40, 0xd3, 0xf4, 0x68, 0x06,
	0xfa, 0xeb, 0x06, 0x6c, 0xb1, 0x87, 0xa0, 0x5b, 0xb7, 0x2b, 0x62, 0x5a, 0x77, 0x3b, 0x37, 0xe2,
	0x97, 0x61, 0xc0, 0x65, 0x49, 0x51, 0xdc, 0x80, 0x9e, 0xbc, 0xf3, 0x53, 0x50, 0x3d, 0xb8, 0x4e,
	0x66, 0x64, 0x9b, 0x96, 0x6e, 0x68, 0x2c, 0x08, 0x73, 0x15, 0x1f, 0xc1, 0x70, 0x3d, 0x74, 0xfa,
	0x60, 0x4b, 0x59, 0x63, 0x48, 0xfa, 0x21, 0x5e, 0x32, 0x72, 0x14, 0x87, 0x7d, 0xd9, 0xb1, 0xda,
	0xff, 0xd7, 0xc8, 0x25, 0x3a, 0xcd, 0x49, 0x39, 0xdd, 0x71, 0x73, 0x8a, 0x47, 0xe3, 0x44, 0xd5,
	0x65, 0x01, 0x3a, 0xd7, 0x0e, 0x6c, 0xc2, 0xb8, 0x0b, 0x6e, 0x67, 0x06, 0x0f, 0xe2, 0x43, 0x98,
	0xf0, 0x0f, 0xda, 0x79, 0x25, 0xc4, 0xaf, 0xc2, 0xd0, 0xfa, 0xe6, 0x6a, 0x3e, 0x4f, 0x1f, 0xd7,
	0xe7, 0x6e, 0x9d, 0x5a, 0xd0, 0x5f, 0x21, 0x7b, 0x13, 0x79, 0x12, 0x1c, 0xe1, 0xf5, 0x5c, 0xfc,
	0xa7, 0x00, 0xdd, 0x64, 0x16, 0x8c, 0xbf, 0x8b, 0xe0, 0xb8, 0xf3, 0x6a, 0x62, 0x2e, 0xb0, 0xd6,
	0x59, 0xb2, 0x30, 0x1b, 0xca, 0xd6, 0xc9, 0x2c, 0x4e, 0x3f, 0x7d, 0xf3, 0xb7, 0x1f, 0xc4, 0xa6,
	0x70, 0x52, 0xe6, 0x4c, 0xb0, 0x9d, 0xaf, 0x01, 0xfe, 0x36, 0x82, 0x6e, 0xb2, 0x0d, 0xf0, 0xe9,
	0xf6, 0x43, 0x5f, 0x0a, 0xe2, 0x4c, 0x80, 0x15, 0x4d, 0x7f, 0x81, 0xa4, 0x3f, 0x8f, 0x67, 0xe4,
	0x76, 0x03, 0x79, 0xb9, 0xcc, 0xc6, 0x2c, 0x15, 0xfc, 0xbd, 0x18, 0x9c, 0x60, 0x83, 0x4a, 0x1c,
	0x76, 0x94, 0x29, 0xcc, 0x04, 0x1b, 0x52, 0x44, 0xbf, 0x44, 0x04, 0xd2, 0xcf, 0x11, 0xbe, 0x16,
	0x16, 0x93, 0x4c, 0xa7, 0x80, 0x72, 0xb9, 0x31, 0xbb, 0xac, 0x6c, 0x2f, 0xe1, 0x85, 0xa8, 0x01,
	0xcc, 0x6d, 0x09, 0xcf, 0x71, 0x9d, 0x7c, 0x92, 0xe0, 0x3f, 0x22, 0xc0, 0xad, 0xc3, 0x40, 0xbc,
	0xd0, 0xfe, 0xd8, 0xf3, 0x19, 0x50, 0x0a, 0x8b, 0x51, 0x5c, 0xa8, 0x56, 0xb7, 0x88, 0x54, 0x9f,
	0xc5, 0xd7, 0xdb, 0x13, 0xb5, 0xbf, 0x2e, 0x8c, 0xad, 0x7d, 0x5d, 0x91, 0xe9, 0xc0, 0x4b, 0x2e,
	0xdb, 0x45, 0x46, 0x05, 0xff, 0x06, 0x41, 0x7f, 0xf3, 0xd0, 0x0e, 0xcb, 0xe1, 0x00, 0x35, 0x18,
	0x5c, 0x08, 0xef, 0x40, 0xf1, 0xa7, 0x09, 0xfe, 0xab, 0x78, 0xa5, 0x3d, 0xfe, 0x06, 0x7a, 0x1f,
	0xec, 0xcf, 0x11, 0xf4, 0xd6, 0xa7, 0x44, 0x98, 0xbb, 0xcf, 0x9a, 0x87, 0x58, 0xc2, 0xb9, 0x10,
	0x96, 0x14, 0xe6, 0x12, 0x81, 0x39, 0x8f, 0x67, 0x79, 0x30, 0x75, 0xe6, 0x22, 0x97, 0xe9, 0x24,
	0xac, 0x82, 0x7f, 0x81, 0xe0, 0xa4, 0x77, 0x84, 0x85, 0xb9, 0x0d, 0xaa, 0xef, 0x98, 0x4d, 0x90,
	0xc2, 0x9a, 0x53, 0x98, 0x97, 0x08, 0xcc, 0x45, 0x7c, 0x81, 0x07, 0x73, 0xdf, 0xf6, 0xf3, 0xc3,
	0xfa, 0x3b, 0x04, 0xb8, 0x75, 0x2a, 0xc4, 0xdf, 0xc5, 0xdc, 0xf1, 0x17, 0x7f, 0x17, 0xf3, 0xa7,
	0x58, 0xe2, 0x75, 0x82, 0xfb, 0x12, 0xfe, 0xa4, 0xed, 0x2e, 0xb0, 0x6b, 0x36, 0xb9, 0xdc, 0x5a,
	0x52, 0x57, 0xf0, 0x9f, 0x10, 0x0c, 0xfb, 0xb6, 0x7a, 0x78, 0x39, 0xd2, 0x44, 0x80, 0x71, 0xf8,
	0x74, 0x44, 0x2f, 0x4a, 0x63, 0x95, 0xd0, 0xb8, 0x82, 0x2f, 0xf3, 0x68, 0xb0, 0xca, 0x9f, 0xcf,
	0xe4, 0x1f, 0x88, 0x33, 0x96, 0x62, 0xc3, 0x10, 0x7c, 0x35, 0x12, 0xb6, 0xa6, 0xd1, 0x8d, 0x70,
	0xed, 0x90, 0xde, 0x94, 0xe1, 0x1d, 0xc2, 0xf0, 0x06, 0x4e, 0x1f, 0x9a, 0xa1, 0xac, 0x31, 0x22,
	0x3f, 0x8d, 0xc1, 0x5c, 0x94, 0xb6, 0x1d, 0x7f, 0x3e, 0x42, 0x27, 0x11, 0x34, 0x9c, 0x10, 0xee,
	0x76, 0x26, 0x18, 0xd5, 0xe5, 0x1e, 0xd1, 0x65, 0x03, 0x7f, 0x21, 0x9c, 0x2e, 0x6d, 0xfa, 0xc3,
	0xfa, 0xd7, 0xad, 0xa8, 0x65, 0x4c, 0xfc, 0x67, 0x04, 0x83, 0x3e, 0x80, 0xf0, 0x62, 0x04, 0xf4,
	0x8c, 0xf1, 0x52, 0x24, 0x1f, 0x4a, 0x6c, 0x9d, 0x10, 0x5b, 0xc3, 0xb7, 0x79, 0xc4, 0x1a, 0x68,
	0x03, 0x68, 0xd1, 0x8f, 0xf5, 0x1b, 0xc4, 0xfe, 0xfa, 0xd4, 0xd2, 0x50, 0xe2, 0x4f, 0xa2, 0xb4,
	0x8a, 0x8d, 0x06, 0x58, 0xb8, 0x18, 0xd9, 0x8f, 0xb2, 0xbb, 0x4d, 0xd8, 0xad, 0xe2, 0xcf, 0x84,
	0x60, 0x67, 0x1f, 0x41, 0x9c, 0xe6, 0xb1, 0x82, 0x7f, 0x86, 0xe0, 0x54, 0x53, 0x2f, 0x87, 0xa5,
	0x90, 0x4d, 0x1f, 0x63, 0x21, 0x87, 0xb6, 0xa7, 0xe8, 0x25, 0x82, 0x7e, 0x06, 0x4f, 0xf3, 0xd0,
	0xd3, 0xc2, 0x98, 0x15, 0x90, 0xcf, 0xec, 0x73, 0x92, 0xc5, 0x6a, 0x73, 0x4e, 0x36, 0xb5, 0x9c,
	0x6d, 0xce, 0xc9, 0xe6, 0x96, 0x53, 0x94, 0x09, 0xa4, 0x73, 0xf8, 0x6c, 0x10, 0xa4, 0x32, 0x39,
	0x84, 0x88, 0x70, 0x27, 0xbd, 0xad, 0x1e, 0xff, 0x8c, 0xf4, 0x6d, 0x43, 0x05, 0x29, 0xac, 0x39,
	0x85, 0xb8, 0x40, 0x20, 0xce, 0xe2, 0x73, 0x41, 0x10, 0x4b, 0x46, 0x4e, 0x2e, 0x97, 0x8c, 0x5c,
	0x05, 0xff, 0x01, 0xd9, 0xfd, 0x51, 0x6b, 0x2f, 0x86, 0x97, 0x42, 0xe4, 0x6e, 0x29, 0xf3, 0x96,
	0xa3, 0x39, 0x51, 0xd8, 0x2b, 0x04, 0xf6, 0x32, 0x5e, 0x0c, 0x82, 0xed, 0xa9, 0x6c, 0x9d, 0x43,
	0xe5, 0x05, 0x82, 0x8f, 0x3d, 0xed, 0x17, 0x9e, 0xe3, 0x63, 0x68, 0x6d, 0x03, 0x85, 0xf9, 0x90,
	0xd6, 0x14, 0xea, 0x1c, 0x81, 0x3a, 0x8d, 0x4f, 0x07, 0x40, 0x35, 0x65, 0x35, 0x9f, 0x4f, 0x7f,
	0xe3, 0xd5, 0xdb, 0x24, 0x7a, 0xfd, 0x36, 0x89, 0xfe, 0xfa, 0x36, 0x89, 0xbe, 0xff, 0x2e, 0xd9,
	0xf5, 0xfa, 0x5d, 0xb2, 0xeb, 0x2f, 0xef, 0x92, 0x5d, 0x30, 0x96, 0xd3, 0x39, 0x89, 0x37, 0xd0,
	0xf6, 0xf2, 0x6e, 0xce, 0x7a, 0x50, 0xda, 0x91, 0x32, 0xfa, 0x9e, 0x2b, 0xcd, 0x7c, 0x4e, 0x77,
	0x27, 0x7d, 0xd2, 0x48, 0x6b, 0x1d, 0x14, 0x35, 0x73, 0xe7, 0x38, 0xf9, 0x0f, 0xa0, 0xa5, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x6c, 0x08, 0x61, 0x40, 0x25, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of x/metadata module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Scope returns the scope with the given id. The scope id can either be scope uuid, e.g.
	// 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Case
	// doesn't matter.
	Scope(ctx context.Context, in *ScopeRequest, opts ...grpc.CallOption) (*ScopeResponse, error)
	// SessionContextByID returns session contexts for the provided parameters. The scope id can either be scope uuid,
	// e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
	// Similarly, the session_id can either be a uuid or session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. Case doesn't matter.
	// * If only a session id is provided, and it is an address, then the scope id will be ignored and the session id used
	// to find a single session.
	// * If only a session id is provided, and it is a uuid, a bad request is returned.
	// * If only a scope id is provided, all sessions for that scope will be returned.
	// * If both a scope id and session id is provided, and the session id is a uuid, then the session in the provided
	// scope, with the provided session uuid is returned.
	// * If neither a scope id, nor a session id are provided, a bad request is returned.
	Sessions(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*SessionsResponse, error)
	// RecordsByScopeUUID returns the records in a scope by scope uuid or a specific record by name.
	RecordsByScopeUUID(ctx context.Context, in *RecordsByScopeUUIDRequest, opts ...grpc.CallOption) (*RecordsByScopeUUIDResponse, error)
	// RecordsByScopeID returns a collection of the records in a scope by scope bech32 id or a specific one by name.
	RecordsByScopeID(ctx context.Context, in *RecordsByScopeIDRequest, opts ...grpc.CallOption) (*RecordsByScopeIDResponse, error)
	// Ownership returns the scope identifiers that list the given address as either a data or value owner.
	Ownership(ctx context.Context, in *OwnershipRequest, opts ...grpc.CallOption) (*OwnershipResponse, error)
	// ValueOwnership returns the scope identifiers that list the given address as the value owner.
	ValueOwnership(ctx context.Context, in *ValueOwnershipRequest, opts ...grpc.CallOption) (*ValueOwnershipResponse, error)
	// ScopeSpecification returns a scope specification for the given specification uuid.
	ScopeSpecification(ctx context.Context, in *ScopeSpecificationRequest, opts ...grpc.CallOption) (*ScopeSpecificationResponse, error)
	// ContractSpecification returns a contract specification for the given specification uuid.
	ContractSpecification(ctx context.Context, in *ContractSpecificationRequest, opts ...grpc.CallOption) (*ContractSpecificationResponse, error)
	// ContractSpecificationExtended returns a contract specification and record specifications for the given contract
	// specification uuid.
	ContractSpecificationExtended(ctx context.Context, in *ContractSpecificationExtendedRequest, opts ...grpc.CallOption) (*ContractSpecificationExtendedResponse, error)
	// RecordSpecificationsForContractSpecification returns the record specifications for the given contract specification
	// uuid.
	RecordSpecificationsForContractSpecification(ctx context.Context, in *RecordSpecificationsForContractSpecificationRequest, opts ...grpc.CallOption) (*RecordSpecificationsForContractSpecificationResponse, error)
	// RecordSpecification returns a record specification for the given contract specification uuid and record name.
	RecordSpecification(ctx context.Context, in *RecordSpecificationRequest, opts ...grpc.CallOption) (*RecordSpecificationResponse, error)
	// RecordSpecificationByID returns a record specification for the given record specification id.
	RecordSpecificationByID(ctx context.Context, in *RecordSpecificationByIDRequest, opts ...grpc.CallOption) (*RecordSpecificationByIDResponse, error)
	// OSLocatorParams returns all parameters for the os locator sub module.
	OSLocatorParams(ctx context.Context, in *OSLocatorParamsRequest, opts ...grpc.CallOption) (*OSLocatorParamsResponse, error)
	// OSLocator returns an ObjectStoreLocator by its owner's address.
	OSLocator(ctx context.Context, in *OSLocatorRequest, opts ...grpc.CallOption) (*OSLocatorResponse, error)
	// OSLocator returns all ObjectStoreLocator for a locator uri.
	OSLocatorByURI(ctx context.Context, in *OSLocatorByURIRequest, opts ...grpc.CallOption) (*OSLocatorByURIResponse, error)
	// OSLocatorByScopeUUID returns all ObjectStoreLocator for a for all signer's present in the specified scope.
	OSLocatorByScopeUUID(ctx context.Context, in *OSLocatorByScopeUUIDRequest, opts ...grpc.CallOption) (*OSLocatorByScopeUUIDResponse, error)
	// OSAllLocators returns all ObjectStoreLocator entries.
	OSAllLocators(ctx context.Context, in *OSAllLocatorsRequest, opts ...grpc.CallOption) (*OSAllLocatorsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Scope(ctx context.Context, in *ScopeRequest, opts ...grpc.CallOption) (*ScopeResponse, error) {
	out := new(ScopeResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Scope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Sessions(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*SessionsResponse, error) {
	out := new(SessionsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Sessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecordsByScopeUUID(ctx context.Context, in *RecordsByScopeUUIDRequest, opts ...grpc.CallOption) (*RecordsByScopeUUIDResponse, error) {
	out := new(RecordsByScopeUUIDResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/RecordsByScopeUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecordsByScopeID(ctx context.Context, in *RecordsByScopeIDRequest, opts ...grpc.CallOption) (*RecordsByScopeIDResponse, error) {
	out := new(RecordsByScopeIDResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/RecordsByScopeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ownership(ctx context.Context, in *OwnershipRequest, opts ...grpc.CallOption) (*OwnershipResponse, error) {
	out := new(OwnershipResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Ownership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValueOwnership(ctx context.Context, in *ValueOwnershipRequest, opts ...grpc.CallOption) (*ValueOwnershipResponse, error) {
	out := new(ValueOwnershipResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ValueOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScopeSpecification(ctx context.Context, in *ScopeSpecificationRequest, opts ...grpc.CallOption) (*ScopeSpecificationResponse, error) {
	out := new(ScopeSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ScopeSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractSpecification(ctx context.Context, in *ContractSpecificationRequest, opts ...grpc.CallOption) (*ContractSpecificationResponse, error) {
	out := new(ContractSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ContractSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractSpecificationExtended(ctx context.Context, in *ContractSpecificationExtendedRequest, opts ...grpc.CallOption) (*ContractSpecificationExtendedResponse, error) {
	out := new(ContractSpecificationExtendedResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ContractSpecificationExtended", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecordSpecificationsForContractSpecification(ctx context.Context, in *RecordSpecificationsForContractSpecificationRequest, opts ...grpc.CallOption) (*RecordSpecificationsForContractSpecificationResponse, error) {
	out := new(RecordSpecificationsForContractSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/RecordSpecificationsForContractSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecordSpecification(ctx context.Context, in *RecordSpecificationRequest, opts ...grpc.CallOption) (*RecordSpecificationResponse, error) {
	out := new(RecordSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/RecordSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecordSpecificationByID(ctx context.Context, in *RecordSpecificationByIDRequest, opts ...grpc.CallOption) (*RecordSpecificationByIDResponse, error) {
	out := new(RecordSpecificationByIDResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/RecordSpecificationByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSLocatorParams(ctx context.Context, in *OSLocatorParamsRequest, opts ...grpc.CallOption) (*OSLocatorParamsResponse, error) {
	out := new(OSLocatorParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSLocatorParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSLocator(ctx context.Context, in *OSLocatorRequest, opts ...grpc.CallOption) (*OSLocatorResponse, error) {
	out := new(OSLocatorResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSLocator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSLocatorByURI(ctx context.Context, in *OSLocatorByURIRequest, opts ...grpc.CallOption) (*OSLocatorByURIResponse, error) {
	out := new(OSLocatorByURIResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSLocatorByURI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSLocatorByScopeUUID(ctx context.Context, in *OSLocatorByScopeUUIDRequest, opts ...grpc.CallOption) (*OSLocatorByScopeUUIDResponse, error) {
	out := new(OSLocatorByScopeUUIDResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSLocatorByScopeUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSAllLocators(ctx context.Context, in *OSAllLocatorsRequest, opts ...grpc.CallOption) (*OSAllLocatorsResponse, error) {
	out := new(OSAllLocatorsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSAllLocators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of x/metadata module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Scope returns the scope with the given id. The scope id can either be scope uuid, e.g.
	// 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Case
	// doesn't matter.
	Scope(context.Context, *ScopeRequest) (*ScopeResponse, error)
	// SessionContextByID returns session contexts for the provided parameters. The scope id can either be scope uuid,
	// e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
	// Similarly, the session_id can either be a uuid or session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. Case doesn't matter.
	// * If only a session id is provided, and it is an address, then the scope id will be ignored and the session id used
	// to find a single session.
	// * If only a session id is provided, and it is a uuid, a bad request is returned.
	// * If only a scope id is provided, all sessions for that scope will be returned.
	// * If both a scope id and session id is provided, and the session id is a uuid, then the session in the provided
	// scope, with the provided session uuid is returned.
	// * If neither a scope id, nor a session id are provided, a bad request is returned.
	Sessions(context.Context, *SessionsRequest) (*SessionsResponse, error)
	// RecordsByScopeUUID returns the records in a scope by scope uuid or a specific record by name.
	RecordsByScopeUUID(context.Context, *RecordsByScopeUUIDRequest) (*RecordsByScopeUUIDResponse, error)
	// RecordsByScopeID returns a collection of the records in a scope by scope bech32 id or a specific one by name.
	RecordsByScopeID(context.Context, *RecordsByScopeIDRequest) (*RecordsByScopeIDResponse, error)
	// Ownership returns the scope identifiers that list the given address as either a data or value owner.
	Ownership(context.Context, *OwnershipRequest) (*OwnershipResponse, error)
	// ValueOwnership returns the scope identifiers that list the given address as the value owner.
	ValueOwnership(context.Context, *ValueOwnershipRequest) (*ValueOwnershipResponse, error)
	// ScopeSpecification returns a scope specification for the given specification uuid.
	ScopeSpecification(context.Context, *ScopeSpecificationRequest) (*ScopeSpecificationResponse, error)
	// ContractSpecification returns a contract specification for the given specification uuid.
	ContractSpecification(context.Context, *ContractSpecificationRequest) (*ContractSpecificationResponse, error)
	// ContractSpecificationExtended returns a contract specification and record specifications for the given contract
	// specification uuid.
	ContractSpecificationExtended(context.Context, *ContractSpecificationExtendedRequest) (*ContractSpecificationExtendedResponse, error)
	// RecordSpecificationsForContractSpecification returns the record specifications for the given contract specification
	// uuid.
	RecordSpecificationsForContractSpecification(context.Context, *RecordSpecificationsForContractSpecificationRequest) (*RecordSpecificationsForContractSpecificationResponse, error)
	// RecordSpecification returns a record specification for the given contract specification uuid and record name.
	RecordSpecification(context.Context, *RecordSpecificationRequest) (*RecordSpecificationResponse, error)
	// RecordSpecificationByID returns a record specification for the given record specification id.
	RecordSpecificationByID(context.Context, *RecordSpecificationByIDRequest) (*RecordSpecificationByIDResponse, error)
	// OSLocatorParams returns all parameters for the os locator sub module.
	OSLocatorParams(context.Context, *OSLocatorParamsRequest) (*OSLocatorParamsResponse, error)
	// OSLocator returns an ObjectStoreLocator by its owner's address.
	OSLocator(context.Context, *OSLocatorRequest) (*OSLocatorResponse, error)
	// OSLocator returns all ObjectStoreLocator for a locator uri.
	OSLocatorByURI(context.Context, *OSLocatorByURIRequest) (*OSLocatorByURIResponse, error)
	// OSLocatorByScopeUUID returns all ObjectStoreLocator for a for all signer's present in the specified scope.
	OSLocatorByScopeUUID(context.Context, *OSLocatorByScopeUUIDRequest) (*OSLocatorByScopeUUIDResponse, error)
	// OSAllLocators returns all ObjectStoreLocator entries.
	OSAllLocators(context.Context, *OSAllLocatorsRequest) (*OSAllLocatorsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Scope(ctx context.Context, req *ScopeRequest) (*ScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scope not implemented")
}
func (*UnimplementedQueryServer) Sessions(ctx context.Context, req *SessionsRequest) (*SessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sessions not implemented")
}
func (*UnimplementedQueryServer) RecordsByScopeUUID(ctx context.Context, req *RecordsByScopeUUIDRequest) (*RecordsByScopeUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordsByScopeUUID not implemented")
}
func (*UnimplementedQueryServer) RecordsByScopeID(ctx context.Context, req *RecordsByScopeIDRequest) (*RecordsByScopeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordsByScopeID not implemented")
}
func (*UnimplementedQueryServer) Ownership(ctx context.Context, req *OwnershipRequest) (*OwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ownership not implemented")
}
func (*UnimplementedQueryServer) ValueOwnership(ctx context.Context, req *ValueOwnershipRequest) (*ValueOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValueOwnership not implemented")
}
func (*UnimplementedQueryServer) ScopeSpecification(ctx context.Context, req *ScopeSpecificationRequest) (*ScopeSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScopeSpecification not implemented")
}
func (*UnimplementedQueryServer) ContractSpecification(ctx context.Context, req *ContractSpecificationRequest) (*ContractSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractSpecification not implemented")
}
func (*UnimplementedQueryServer) ContractSpecificationExtended(ctx context.Context, req *ContractSpecificationExtendedRequest) (*ContractSpecificationExtendedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractSpecificationExtended not implemented")
}
func (*UnimplementedQueryServer) RecordSpecificationsForContractSpecification(ctx context.Context, req *RecordSpecificationsForContractSpecificationRequest) (*RecordSpecificationsForContractSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordSpecificationsForContractSpecification not implemented")
}
func (*UnimplementedQueryServer) RecordSpecification(ctx context.Context, req *RecordSpecificationRequest) (*RecordSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordSpecification not implemented")
}
func (*UnimplementedQueryServer) RecordSpecificationByID(ctx context.Context, req *RecordSpecificationByIDRequest) (*RecordSpecificationByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordSpecificationByID not implemented")
}
func (*UnimplementedQueryServer) OSLocatorParams(ctx context.Context, req *OSLocatorParamsRequest) (*OSLocatorParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSLocatorParams not implemented")
}
func (*UnimplementedQueryServer) OSLocator(ctx context.Context, req *OSLocatorRequest) (*OSLocatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSLocator not implemented")
}
func (*UnimplementedQueryServer) OSLocatorByURI(ctx context.Context, req *OSLocatorByURIRequest) (*OSLocatorByURIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSLocatorByURI not implemented")
}
func (*UnimplementedQueryServer) OSLocatorByScopeUUID(ctx context.Context, req *OSLocatorByScopeUUIDRequest) (*OSLocatorByScopeUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSLocatorByScopeUUID not implemented")
}
func (*UnimplementedQueryServer) OSAllLocators(ctx context.Context, req *OSAllLocatorsRequest) (*OSAllLocatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSAllLocators not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Scope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Scope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Scope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Scope(ctx, req.(*ScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Sessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Sessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Sessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Sessions(ctx, req.(*SessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecordsByScopeUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordsByScopeUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordsByScopeUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/RecordsByScopeUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordsByScopeUUID(ctx, req.(*RecordsByScopeUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecordsByScopeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordsByScopeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordsByScopeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/RecordsByScopeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordsByScopeID(ctx, req.(*RecordsByScopeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ownership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ownership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Ownership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ownership(ctx, req.(*OwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValueOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValueOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValueOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ValueOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValueOwnership(ctx, req.(*ValueOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScopeSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopeSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScopeSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ScopeSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScopeSpecification(ctx, req.(*ScopeSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ContractSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractSpecification(ctx, req.(*ContractSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractSpecificationExtended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractSpecificationExtendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractSpecificationExtended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ContractSpecificationExtended",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractSpecificationExtended(ctx, req.(*ContractSpecificationExtendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecordSpecificationsForContractSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordSpecificationsForContractSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordSpecificationsForContractSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/RecordSpecificationsForContractSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordSpecificationsForContractSpecification(ctx, req.(*RecordSpecificationsForContractSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecordSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/RecordSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordSpecification(ctx, req.(*RecordSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecordSpecificationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordSpecificationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordSpecificationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/RecordSpecificationByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordSpecificationByID(ctx, req.(*RecordSpecificationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSLocatorParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSLocatorParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSLocatorParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSLocatorParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSLocatorParams(ctx, req.(*OSLocatorParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSLocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSLocatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSLocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSLocator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSLocator(ctx, req.(*OSLocatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSLocatorByURI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSLocatorByURIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSLocatorByURI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSLocatorByURI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSLocatorByURI(ctx, req.(*OSLocatorByURIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSLocatorByScopeUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSLocatorByScopeUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSLocatorByScopeUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSLocatorByScopeUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSLocatorByScopeUUID(ctx, req.(*OSLocatorByScopeUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSAllLocators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSAllLocatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSAllLocators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSAllLocators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSAllLocators(ctx, req.(*OSAllLocatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.metadata.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Scope",
			Handler:    _Query_Scope_Handler,
		},
		{
			MethodName: "Sessions",
			Handler:    _Query_Sessions_Handler,
		},
		{
			MethodName: "RecordsByScopeUUID",
			Handler:    _Query_RecordsByScopeUUID_Handler,
		},
		{
			MethodName: "RecordsByScopeID",
			Handler:    _Query_RecordsByScopeID_Handler,
		},
		{
			MethodName: "Ownership",
			Handler:    _Query_Ownership_Handler,
		},
		{
			MethodName: "ValueOwnership",
			Handler:    _Query_ValueOwnership_Handler,
		},
		{
			MethodName: "ScopeSpecification",
			Handler:    _Query_ScopeSpecification_Handler,
		},
		{
			MethodName: "ContractSpecification",
			Handler:    _Query_ContractSpecification_Handler,
		},
		{
			MethodName: "ContractSpecificationExtended",
			Handler:    _Query_ContractSpecificationExtended_Handler,
		},
		{
			MethodName: "RecordSpecificationsForContractSpecification",
			Handler:    _Query_RecordSpecificationsForContractSpecification_Handler,
		},
		{
			MethodName: "RecordSpecification",
			Handler:    _Query_RecordSpecification_Handler,
		},
		{
			MethodName: "RecordSpecificationByID",
			Handler:    _Query_RecordSpecificationByID_Handler,
		},
		{
			MethodName: "OSLocatorParams",
			Handler:    _Query_OSLocatorParams_Handler,
		},
		{
			MethodName: "OSLocator",
			Handler:    _Query_OSLocator_Handler,
		},
		{
			MethodName: "OSLocatorByURI",
			Handler:    _Query_OSLocatorByURI_Handler,
		},
		{
			MethodName: "OSLocatorByScopeUUID",
			Handler:    _Query_OSLocatorByScopeUUID_Handler,
		},
		{
			MethodName: "OSAllLocators",
			Handler:    _Query_OSAllLocators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/metadata/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ScopeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeUuid) > 0 {
		i -= len(m.ScopeUuid)
		copy(dAtA[i:], m.ScopeUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sessions) > 0 {
		for iNdEx := len(m.Sessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Sessions) > 0 {
		for iNdEx := len(m.Sessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SessionWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionUuid) > 0 {
		i -= len(m.SessionUuid)
		copy(dAtA[i:], m.SessionUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionUuid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ScopeUuid) > 0 {
		i -= len(m.ScopeUuid)
		copy(dAtA[i:], m.ScopeUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Session != nil {
		{
			size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordsByScopeUUIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordsByScopeUUIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordsByScopeUUIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeUuid) > 0 {
		i -= len(m.ScopeUuid)
		copy(dAtA[i:], m.ScopeUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordsByScopeUUIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordsByScopeUUIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordsByScopeUUIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeUuid) > 0 {
		i -= len(m.ScopeUuid)
		copy(dAtA[i:], m.ScopeUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordsByScopeIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordsByScopeIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordsByScopeIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordsByScopeIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordsByScopeIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordsByScopeIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeUuid) > 0 {
		i -= len(m.ScopeUuid)
		copy(dAtA[i:], m.ScopeUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OwnershipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnershipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnershipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ScopeUuids) > 0 {
		for iNdEx := len(m.ScopeUuids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ScopeUuids[iNdEx])
			copy(dAtA[i:], m.ScopeUuids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValueOwnershipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueOwnershipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueOwnershipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValueOwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueOwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueOwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ScopeUuids) > 0 {
		for iNdEx := len(m.ScopeUuids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ScopeUuids[iNdEx])
			copy(dAtA[i:], m.ScopeUuids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ScopeSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecificationUuid) > 0 {
		i -= len(m.SpecificationUuid)
		copy(dAtA[i:], m.SpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecificationUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopeSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecificationUuid) > 0 {
		i -= len(m.SpecificationUuid)
		copy(dAtA[i:], m.SpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecificationUuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.ScopeSpecification != nil {
		{
			size, err := m.ScopeSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecificationUuid) > 0 {
		i -= len(m.SpecificationUuid)
		copy(dAtA[i:], m.SpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecificationUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractSpecificationUuid) > 0 {
		i -= len(m.ContractSpecificationUuid)
		copy(dAtA[i:], m.ContractSpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractSpecificationUuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.ContractSpecification != nil {
		{
			size, err := m.ContractSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractSpecificationExtendedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractSpecificationExtendedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecificationExtendedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecificationUuid) > 0 {
		i -= len(m.SpecificationUuid)
		copy(dAtA[i:], m.SpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecificationUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractSpecificationExtendedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractSpecificationExtendedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecificationExtendedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractSpecificationUuid) > 0 {
		i -= len(m.ContractSpecificationUuid)
		copy(dAtA[i:], m.ContractSpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractSpecificationUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecordSpecifications) > 0 {
		for iNdEx := len(m.RecordSpecifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordSpecifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ContractSpecification != nil {
		{
			size, err := m.ContractSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationsForContractSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationsForContractSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationsForContractSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractSpecificationUuid) > 0 {
		i -= len(m.ContractSpecificationUuid)
		copy(dAtA[i:], m.ContractSpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractSpecificationUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationsForContractSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationsForContractSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationsForContractSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractSpecificationUuid) > 0 {
		i -= len(m.ContractSpecificationUuid)
		copy(dAtA[i:], m.ContractSpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractSpecificationUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordSpecifications) > 0 {
		for iNdEx := len(m.RecordSpecifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordSpecifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractSpecificationUuid) > 0 {
		i -= len(m.ContractSpecificationUuid)
		copy(dAtA[i:], m.ContractSpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractSpecificationUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractSpecificationUuid) > 0 {
		i -= len(m.ContractSpecificationUuid)
		copy(dAtA[i:], m.ContractSpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractSpecificationUuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.RecordSpecification != nil {
		{
			size, err := m.RecordSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecordSpecificationId) > 0 {
		i -= len(m.RecordSpecificationId)
		copy(dAtA[i:], m.RecordSpecificationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecordSpecificationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecordSpecificationId) > 0 {
		i -= len(m.RecordSpecificationId)
		copy(dAtA[i:], m.RecordSpecificationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecordSpecificationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RecordSpecification != nil {
		{
			size, err := m.RecordSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OSLocatorParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OSLocatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Locator != nil {
		{
			size, err := m.Locator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorByURIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorByURIRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorByURIRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorByURIResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorByURIResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorByURIResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Locator) > 0 {
		for iNdEx := len(m.Locator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorByScopeUUIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorByScopeUUIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorByScopeUUIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeUuid) > 0 {
		i -= len(m.ScopeUuid)
		copy(dAtA[i:], m.ScopeUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorByScopeUUIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorByScopeUUIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorByScopeUUIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locator) > 0 {
		for iNdEx := len(m.Locator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OSAllLocatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSAllLocatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSAllLocatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *OSAllLocatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSAllLocatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSAllLocatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Locator) > 0 {
		for iNdEx := len(m.Locator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *ScopeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.ScopeUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SessionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SessionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SessionWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ScopeUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SessionUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordsByScopeUUIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordsByScopeUUIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *RecordsByScopeIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordsByScopeIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *OwnershipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScopeUuids) > 0 {
		for _, s := range m.ScopeUuids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ValueOwnershipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ValueOwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScopeUuids) > 0 {
		for _, s := range m.ScopeUuids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopeSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopeSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScopeSpecification != nil {
		l = m.ScopeSpecification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ContractSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ContractSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractSpecification != nil {
		l = m.ContractSpecification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractSpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ContractSpecificationExtendedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ContractSpecificationExtendedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractSpecification != nil {
		l = m.ContractSpecification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.RecordSpecifications) > 0 {
		for _, e := range m.RecordSpecifications {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.ContractSpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationsForContractSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractSpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationsForContractSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecordSpecifications) > 0 {
		for _, e := range m.RecordSpecifications {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.ContractSpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractSpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordSpecification != nil {
		l = m.RecordSpecification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractSpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordSpecificationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordSpecification != nil {
		l = m.RecordSpecification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecordSpecificationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OSLocatorParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *OSLocatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Locator != nil {
		l = m.Locator.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorByURIRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorByURIResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locator) > 0 {
		for _, e := range m.Locator {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorByScopeUUIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorByScopeUUIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locator) > 0 {
		for _, e := range m.Locator {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *OSAllLocatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSAllLocatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locator) > 0 {
		for _, e := range m.Locator {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &Session{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &SessionWrapper{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &SessionsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordsByScopeUUIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordsByScopeUUIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordsByScopeUUIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordsByScopeUUIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordsByScopeUUIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordsByScopeUUIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordsByScopeIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordsByScopeIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordsByScopeIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordsByScopeIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordsByScopeIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordsByScopeIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnershipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnershipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnershipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuids = append(m.ScopeUuids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueOwnershipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueOwnershipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueOwnershipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueOwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueOwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueOwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuids = append(m.ScopeUuids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeSpecification == nil {
				m.ScopeSpecification = &ScopeSpecification{}
			}
			if err := m.ScopeSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractSpecification == nil {
				m.ContractSpecification = &ContractSpecification{}
			}
			if err := m.ContractSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractSpecificationExtendedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractSpecificationExtendedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractSpecificationExtendedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractSpecificationExtendedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractSpecificationExtendedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractSpecificationExtendedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractSpecification == nil {
				m.ContractSpecification = &ContractSpecification{}
			}
			if err := m.ContractSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecifications = append(m.RecordSpecifications, &RecordSpecification{})
			if err := m.RecordSpecifications[len(m.RecordSpecifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationsForContractSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationsForContractSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationsForContractSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationsForContractSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationsForContractSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationsForContractSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecifications = append(m.RecordSpecifications, &RecordSpecification{})
			if err := m.RecordSpecifications[len(m.RecordSpecifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordSpecification == nil {
				m.RecordSpecification = &RecordSpecification{}
			}
			if err := m.RecordSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordSpecification == nil {
				m.RecordSpecification = &RecordSpecification{}
			}
			if err := m.RecordSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locator == nil {
				m.Locator = &ObjectStoreLocator{}
			}
			if err := m.Locator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorByURIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorByURIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorByURIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorByURIResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorByURIResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorByURIResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locator = append(m.Locator, ObjectStoreLocator{})
			if err := m.Locator[len(m.Locator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorByScopeUUIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorByScopeUUIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorByScopeUUIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorByScopeUUIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorByScopeUUIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorByScopeUUIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locator = append(m.Locator, ObjectStoreLocator{})
			if err := m.Locator[len(m.Locator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSAllLocatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSAllLocatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSAllLocatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSAllLocatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSAllLocatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSAllLocatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locator = append(m.Locator, ObjectStoreLocator{})
			if err := m.Locator[len(m.Locator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
