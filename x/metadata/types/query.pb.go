// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/metadata/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// request is a copy of the request that generated these results.
	Request *QueryParamsRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *QueryParamsResponse) GetRequest() *QueryParamsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ScopeRequest is the request type for the Query/Scope RPC method.
type ScopeRequest struct {
	// scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.
	// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
	ScopeId string `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
	// session_addr is a bech32 session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
	SessionAddr string `protobuf:"bytes,2,opt,name=session_addr,json=sessionAddr,proto3" json:"session_addr,omitempty" yaml:"session_addr"`
	// record_addr is a bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
	RecordAddr string `protobuf:"bytes,3,opt,name=record_addr,json=recordAddr,proto3" json:"record_addr,omitempty" yaml:"record_addr"`
	// include_sessions is a flag for whether or not the sessions in the scope should be included.
	IncludeSessions bool `protobuf:"varint,10,opt,name=include_sessions,json=includeSessions,proto3" json:"include_sessions,omitempty" yaml:"include_sessions"`
	// include_records is a flag for whether or not the records in the scope should be included.
	IncludeRecords bool `protobuf:"varint,11,opt,name=include_records,json=includeRecords,proto3" json:"include_records,omitempty" yaml:"include_records"`
}

func (m *ScopeRequest) Reset()         { *m = ScopeRequest{} }
func (m *ScopeRequest) String() string { return proto.CompactTextString(m) }
func (*ScopeRequest) ProtoMessage()    {}
func (*ScopeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{2}
}
func (m *ScopeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeRequest.Merge(m, src)
}
func (m *ScopeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScopeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeRequest proto.InternalMessageInfo

func (m *ScopeRequest) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *ScopeRequest) GetSessionAddr() string {
	if m != nil {
		return m.SessionAddr
	}
	return ""
}

func (m *ScopeRequest) GetRecordAddr() string {
	if m != nil {
		return m.RecordAddr
	}
	return ""
}

func (m *ScopeRequest) GetIncludeSessions() bool {
	if m != nil {
		return m.IncludeSessions
	}
	return false
}

func (m *ScopeRequest) GetIncludeRecords() bool {
	if m != nil {
		return m.IncludeRecords
	}
	return false
}

// ScopeResponse is the response type for the Query/Scope RPC method.
type ScopeResponse struct {
	// scope is the wrapped scope result.
	Scope *ScopeWrapper `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// sessions is any number of wrapped sessions in this scope (if requested).
	Sessions []*SessionWrapper `protobuf:"bytes,2,rep,name=sessions,proto3" json:"sessions,omitempty" yaml:"sessions,omitempty"`
	// records is any number of wrapped records in this scope (if requested).
	Records []*RecordWrapper `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty" yaml:"records,omitempty"`
	// request is a copy of the request that generated these results.
	Request *ScopeRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *ScopeResponse) Reset()         { *m = ScopeResponse{} }
func (m *ScopeResponse) String() string { return proto.CompactTextString(m) }
func (*ScopeResponse) ProtoMessage()    {}
func (*ScopeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{3}
}
func (m *ScopeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeResponse.Merge(m, src)
}
func (m *ScopeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScopeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeResponse proto.InternalMessageInfo

func (m *ScopeResponse) GetScope() *ScopeWrapper {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *ScopeResponse) GetSessions() []*SessionWrapper {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *ScopeResponse) GetRecords() []*RecordWrapper {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *ScopeResponse) GetRequest() *ScopeRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SessionWrapper contains a single scope and its uuid.
type ScopeWrapper struct {
	// scope is the on-chain scope message.
	Scope *Scope `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// scope_addr is the bech32 address of the scope, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
	ScopeAddr string `protobuf:"bytes,2,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty" yaml:"scope_addr"`
	// scope_uuid is the uuid of this scope, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0.
	ScopeUuid string `protobuf:"bytes,3,opt,name=scope_uuid,json=scopeUuid,proto3" json:"scope_uuid,omitempty" yaml:"scope_uuid"`
}

func (m *ScopeWrapper) Reset()         { *m = ScopeWrapper{} }
func (m *ScopeWrapper) String() string { return proto.CompactTextString(m) }
func (*ScopeWrapper) ProtoMessage()    {}
func (*ScopeWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{4}
}
func (m *ScopeWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeWrapper.Merge(m, src)
}
func (m *ScopeWrapper) XXX_Size() int {
	return m.Size()
}
func (m *ScopeWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeWrapper proto.InternalMessageInfo

func (m *ScopeWrapper) GetScope() *Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *ScopeWrapper) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

func (m *ScopeWrapper) GetScopeUuid() string {
	if m != nil {
		return m.ScopeUuid
	}
	return ""
}

// SessionsRequest is the request type for the Query/Sessions RPC method.
type SessionsRequest struct {
	// scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.
	// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
	ScopeId string `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
	// session_id can either be a uuid, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. This can only be a uuid if a scope_id is also
	// provided.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" yaml:"session_id"`
	// include_scope is a flag for whether or not the scope containing these sessions should be included.
	IncludeScope bool `protobuf:"varint,10,opt,name=include_scope,json=includeScope,proto3" json:"include_scope,omitempty" yaml:"include_scope"`
	// include_records is a flag for whether or not the records in these sessions should be included.
	IncludeRecords bool `protobuf:"varint,11,opt,name=include_records,json=includeRecords,proto3" json:"include_records,omitempty" yaml:"include_records"`
}

func (m *SessionsRequest) Reset()         { *m = SessionsRequest{} }
func (m *SessionsRequest) String() string { return proto.CompactTextString(m) }
func (*SessionsRequest) ProtoMessage()    {}
func (*SessionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{5}
}
func (m *SessionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionsRequest.Merge(m, src)
}
func (m *SessionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SessionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionsRequest proto.InternalMessageInfo

func (m *SessionsRequest) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *SessionsRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SessionsRequest) GetIncludeScope() bool {
	if m != nil {
		return m.IncludeScope
	}
	return false
}

func (m *SessionsRequest) GetIncludeRecords() bool {
	if m != nil {
		return m.IncludeRecords
	}
	return false
}

// SessionsResponse is the response type for the Query/Sessions RPC method.
type SessionsResponse struct {
	// scope is the wrapped scope that holds these sessions (if requested).
	Scope *ScopeWrapper `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty" yaml:"scope,omitempty"`
	// sessions is any number of wrapped session results.
	Sessions []*SessionWrapper `protobuf:"bytes,2,rep,name=sessions,proto3" json:"sessions,omitempty"`
	// records is any number of wrapped records contained in these sessions (if requested).
	Records []*RecordWrapper `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty" yaml:"records,omitempty"`
	// request is a copy of the request that generated these results.
	Request *SessionsRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *SessionsResponse) Reset()         { *m = SessionsResponse{} }
func (m *SessionsResponse) String() string { return proto.CompactTextString(m) }
func (*SessionsResponse) ProtoMessage()    {}
func (*SessionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{6}
}
func (m *SessionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionsResponse.Merge(m, src)
}
func (m *SessionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *SessionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SessionsResponse proto.InternalMessageInfo

func (m *SessionsResponse) GetScope() *ScopeWrapper {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *SessionsResponse) GetSessions() []*SessionWrapper {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *SessionsResponse) GetRecords() []*RecordWrapper {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *SessionsResponse) GetRequest() *SessionsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SessionWrapper contains a single session and some extra identifiers for it.
type SessionWrapper struct {
	// session is the on-chain session message.
	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// scope_addr is the bech32 address of the scope containing this session, e.g.
	// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
	ScopeAddr string `protobuf:"bytes,2,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty" yaml:"scope_addr"`
	// session_addr is the bech32 address of the session, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
	SessionAddr string `protobuf:"bytes,3,opt,name=session_addr,json=sessionAddr,proto3" json:"session_addr,omitempty" yaml:"session_addr"`
	// scope_uuid is the uuid of the scope containing this session, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0.
	ScopeUuid string `protobuf:"bytes,4,opt,name=scope_uuid,json=scopeUuid,proto3" json:"scope_uuid,omitempty" yaml:"scope_uuid"`
	// session_uuid is the uuid of the session, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0.
	// This is meaningless without the added context of the scope uuid (or scope addr).
	SessionUuid string `protobuf:"bytes,5,opt,name=session_uuid,json=sessionUuid,proto3" json:"session_uuid,omitempty" yaml:"session_uuid"`
}

func (m *SessionWrapper) Reset()         { *m = SessionWrapper{} }
func (m *SessionWrapper) String() string { return proto.CompactTextString(m) }
func (*SessionWrapper) ProtoMessage()    {}
func (*SessionWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{7}
}
func (m *SessionWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionWrapper.Merge(m, src)
}
func (m *SessionWrapper) XXX_Size() int {
	return m.Size()
}
func (m *SessionWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_SessionWrapper proto.InternalMessageInfo

func (m *SessionWrapper) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *SessionWrapper) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

func (m *SessionWrapper) GetSessionAddr() string {
	if m != nil {
		return m.SessionAddr
	}
	return ""
}

func (m *SessionWrapper) GetScopeUuid() string {
	if m != nil {
		return m.ScopeUuid
	}
	return ""
}

func (m *SessionWrapper) GetSessionUuid() string {
	if m != nil {
		return m.SessionUuid
	}
	return ""
}

// RecordsRequest is the request type for the Query/Records RPC method.
type RecordsRequest struct {
	// record_addr is a bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
	RecordAddr string `protobuf:"bytes,1,opt,name=record_addr,json=recordAddr,proto3" json:"record_addr,omitempty" yaml:"record_addr"`
	// scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g.
	// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
	ScopeId string `protobuf:"bytes,2,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
	// session_id can either be a uuid, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. This can only be a uuid if a scope_id is also
	// provided.
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" yaml:"session_id"`
	// name is the name of the record to look for
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// include_scope is a flag for whether or not the scope containing these records should be included.
	IncludeScope bool `protobuf:"varint,10,opt,name=include_scope,json=includeScope,proto3" json:"include_scope,omitempty" yaml:"include_scope"`
	// include_sessions is a flag for whether or not the sessions containing these records should be included.
	IncludeSessions bool `protobuf:"varint,11,opt,name=include_sessions,json=includeSessions,proto3" json:"include_sessions,omitempty" yaml:"include_sessions"`
}

func (m *RecordsRequest) Reset()         { *m = RecordsRequest{} }
func (m *RecordsRequest) String() string { return proto.CompactTextString(m) }
func (*RecordsRequest) ProtoMessage()    {}
func (*RecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{8}
}
func (m *RecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordsRequest.Merge(m, src)
}
func (m *RecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordsRequest proto.InternalMessageInfo

func (m *RecordsRequest) GetRecordAddr() string {
	if m != nil {
		return m.RecordAddr
	}
	return ""
}

func (m *RecordsRequest) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *RecordsRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *RecordsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RecordsRequest) GetIncludeScope() bool {
	if m != nil {
		return m.IncludeScope
	}
	return false
}

func (m *RecordsRequest) GetIncludeSessions() bool {
	if m != nil {
		return m.IncludeSessions
	}
	return false
}

// RecordsResponse is the response type for the Query/Records RPC method.
type RecordsResponse struct {
	// scope is the wrapped scope that holds these records (if requested).
	Scope *ScopeWrapper `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty" yaml:"scope,omitempty"`
	// sessions is any number of wrapped sessions that hold these records (if requested).
	Sessions []*SessionWrapper `protobuf:"bytes,2,rep,name=sessions,proto3" json:"sessions,omitempty" yaml:"sessions,omitempty"`
	// records is any number of wrapped record results.
	Records []*RecordWrapper `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	// request is a copy of the request that generated these results.
	Request *RecordsRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *RecordsResponse) Reset()         { *m = RecordsResponse{} }
func (m *RecordsResponse) String() string { return proto.CompactTextString(m) }
func (*RecordsResponse) ProtoMessage()    {}
func (*RecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{9}
}
func (m *RecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordsResponse.Merge(m, src)
}
func (m *RecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordsResponse proto.InternalMessageInfo

func (m *RecordsResponse) GetScope() *ScopeWrapper {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *RecordsResponse) GetSessions() []*SessionWrapper {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *RecordsResponse) GetRecords() []*RecordWrapper {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *RecordsResponse) GetRequest() *RecordsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RecordWrapper contains a single record and some extra identifiers for it.
type RecordWrapper struct {
	// record is the on-chain record message.
	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	// scope_addr is the bech32 address of the scope containing this record, e.g.
	// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.
	ScopeAddr string `protobuf:"bytes,2,opt,name=scope_addr,json=scopeAddr,proto3" json:"scope_addr,omitempty" yaml:"scope_addr"`
	// session_addr is the bech32 address of the session containing this record, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.
	SessionAddr string `protobuf:"bytes,3,opt,name=session_addr,json=sessionAddr,proto3" json:"session_addr,omitempty" yaml:"session_addr"`
	// record_addr is the bech32 address of this record, e.g.
	// record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3
	RecordAddr string `protobuf:"bytes,4,opt,name=record_addr,json=recordAddr,proto3" json:"record_addr,omitempty" yaml:"record_addr"`
	// scope_uuid is the uuid of the scope containing this record, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0.
	ScopeUuid string `protobuf:"bytes,5,opt,name=scope_uuid,json=scopeUuid,proto3" json:"scope_uuid,omitempty" yaml:"scope_uuid"`
	// session_uuid is the uuid of the session containing this record, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0.
	// This is meaningless without the added context of the scope_uuid (or scope_addr).
	SessionUuid string `protobuf:"bytes,6,opt,name=session_uuid,json=sessionUuid,proto3" json:"session_uuid,omitempty" yaml:"session_uuid"`
}

func (m *RecordWrapper) Reset()         { *m = RecordWrapper{} }
func (m *RecordWrapper) String() string { return proto.CompactTextString(m) }
func (*RecordWrapper) ProtoMessage()    {}
func (*RecordWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{10}
}
func (m *RecordWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordWrapper.Merge(m, src)
}
func (m *RecordWrapper) XXX_Size() int {
	return m.Size()
}
func (m *RecordWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_RecordWrapper proto.InternalMessageInfo

func (m *RecordWrapper) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *RecordWrapper) GetScopeAddr() string {
	if m != nil {
		return m.ScopeAddr
	}
	return ""
}

func (m *RecordWrapper) GetSessionAddr() string {
	if m != nil {
		return m.SessionAddr
	}
	return ""
}

func (m *RecordWrapper) GetRecordAddr() string {
	if m != nil {
		return m.RecordAddr
	}
	return ""
}

func (m *RecordWrapper) GetScopeUuid() string {
	if m != nil {
		return m.ScopeUuid
	}
	return ""
}

func (m *RecordWrapper) GetSessionUuid() string {
	if m != nil {
		return m.SessionUuid
	}
	return ""
}

// OwnershipRequest is the request type for the Query/Ownership RPC method.
type OwnershipRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OwnershipRequest) Reset()         { *m = OwnershipRequest{} }
func (m *OwnershipRequest) String() string { return proto.CompactTextString(m) }
func (*OwnershipRequest) ProtoMessage()    {}
func (*OwnershipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{11}
}
func (m *OwnershipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnershipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnershipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnershipRequest.Merge(m, src)
}
func (m *OwnershipRequest) XXX_Size() int {
	return m.Size()
}
func (m *OwnershipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OwnershipRequest proto.InternalMessageInfo

func (m *OwnershipRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *OwnershipRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OwnershipResponse is the response type for the Query/Ownership RPC method.
type OwnershipResponse struct {
	// A list of scope ids (uuid) associated with the given address.
	ScopeUuids []string `protobuf:"bytes,1,rep,name=scope_uuids,json=scopeUuids,proto3" json:"scope_uuids,omitempty" yaml:"scope_uuids"`
	// request is a copy of the request that generated these results.
	Request *OwnershipRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OwnershipResponse) Reset()         { *m = OwnershipResponse{} }
func (m *OwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*OwnershipResponse) ProtoMessage()    {}
func (*OwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{12}
}
func (m *OwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnershipResponse.Merge(m, src)
}
func (m *OwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *OwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OwnershipResponse proto.InternalMessageInfo

func (m *OwnershipResponse) GetScopeUuids() []string {
	if m != nil {
		return m.ScopeUuids
	}
	return nil
}

func (m *OwnershipResponse) GetRequest() *OwnershipRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *OwnershipResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ValueOwnershipRequest is the request type for the Query/ValueOwnership RPC method.
type ValueOwnershipRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ValueOwnershipRequest) Reset()         { *m = ValueOwnershipRequest{} }
func (m *ValueOwnershipRequest) String() string { return proto.CompactTextString(m) }
func (*ValueOwnershipRequest) ProtoMessage()    {}
func (*ValueOwnershipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{13}
}
func (m *ValueOwnershipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueOwnershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueOwnershipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueOwnershipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueOwnershipRequest.Merge(m, src)
}
func (m *ValueOwnershipRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValueOwnershipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueOwnershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValueOwnershipRequest proto.InternalMessageInfo

func (m *ValueOwnershipRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ValueOwnershipRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ValueOwnershipResponse is the response type for the Query/ValueOwnership RPC method.
type ValueOwnershipResponse struct {
	// A list of scope ids (uuid) associated with the given address.
	ScopeUuids []string `protobuf:"bytes,1,rep,name=scope_uuids,json=scopeUuids,proto3" json:"scope_uuids,omitempty" yaml:"scope_uuids"`
	// request is a copy of the request that generated these results.
	Request *ValueOwnershipRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ValueOwnershipResponse) Reset()         { *m = ValueOwnershipResponse{} }
func (m *ValueOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*ValueOwnershipResponse) ProtoMessage()    {}
func (*ValueOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{14}
}
func (m *ValueOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueOwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueOwnershipResponse.Merge(m, src)
}
func (m *ValueOwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValueOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValueOwnershipResponse proto.InternalMessageInfo

func (m *ValueOwnershipResponse) GetScopeUuids() []string {
	if m != nil {
		return m.ScopeUuids
	}
	return nil
}

func (m *ValueOwnershipResponse) GetRequest() *ValueOwnershipRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ValueOwnershipResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ScopeSpecificationRequest is the request type for the Query/ScopeSpecification RPC method.
type ScopeSpecificationRequest struct {
	// specification_id can either be a uuid, e.g. dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope specification
	// address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
	SpecificationId string `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3" json:"specification_id,omitempty" yaml:"specification_id"`
}

func (m *ScopeSpecificationRequest) Reset()         { *m = ScopeSpecificationRequest{} }
func (m *ScopeSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*ScopeSpecificationRequest) ProtoMessage()    {}
func (*ScopeSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{15}
}
func (m *ScopeSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeSpecificationRequest.Merge(m, src)
}
func (m *ScopeSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScopeSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeSpecificationRequest proto.InternalMessageInfo

func (m *ScopeSpecificationRequest) GetSpecificationId() string {
	if m != nil {
		return m.SpecificationId
	}
	return ""
}

// ScopeSpecificationResponse is the response type for the Query/ScopeSpecification RPC method.
type ScopeSpecificationResponse struct {
	// scope_specification is the on-chain scope specification message.
	ScopeSpecification *ScopeSpecification `protobuf:"bytes,1,opt,name=scope_specification,json=scopeSpecification,proto3" json:"scope_specification,omitempty" yaml:"scope_specification"`
	// specification_uuid is the uuid of the scope specification.
	SpecificationUuid string `protobuf:"bytes,2,opt,name=specification_uuid,json=specificationUuid,proto3" json:"specification_uuid,omitempty" yaml:"specification_uuid"`
	// request is a copy of the request that generated these results.
	Request *ScopeSpecificationRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *ScopeSpecificationResponse) Reset()         { *m = ScopeSpecificationResponse{} }
func (m *ScopeSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*ScopeSpecificationResponse) ProtoMessage()    {}
func (*ScopeSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{16}
}
func (m *ScopeSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeSpecificationResponse.Merge(m, src)
}
func (m *ScopeSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScopeSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeSpecificationResponse proto.InternalMessageInfo

func (m *ScopeSpecificationResponse) GetScopeSpecification() *ScopeSpecification {
	if m != nil {
		return m.ScopeSpecification
	}
	return nil
}

func (m *ScopeSpecificationResponse) GetSpecificationUuid() string {
	if m != nil {
		return m.SpecificationUuid
	}
	return ""
}

func (m *ScopeSpecificationResponse) GetRequest() *ScopeSpecificationRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ContractSpecificationRequest is the request type for the Query/ContractSpecification RPC method.
type ContractSpecificationRequest struct {
	// specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract specification
	// address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.
	// It can also be a record specification address, e.g.
	// recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
	SpecificationId string `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3" json:"specification_id,omitempty" yaml:"specification_id"`
	// include_record_specs is a flag for whether or not the record specifications in this contract specification should
	// be included in the result.
	IncludeRecordSpecs bool `protobuf:"varint,10,opt,name=include_record_specs,json=includeRecordSpecs,proto3" json:"include_record_specs,omitempty" yaml:"include_record_specs"`
}

func (m *ContractSpecificationRequest) Reset()         { *m = ContractSpecificationRequest{} }
func (m *ContractSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*ContractSpecificationRequest) ProtoMessage()    {}
func (*ContractSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{17}
}
func (m *ContractSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpecificationRequest.Merge(m, src)
}
func (m *ContractSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContractSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpecificationRequest proto.InternalMessageInfo

func (m *ContractSpecificationRequest) GetSpecificationId() string {
	if m != nil {
		return m.SpecificationId
	}
	return ""
}

func (m *ContractSpecificationRequest) GetIncludeRecordSpecs() bool {
	if m != nil {
		return m.IncludeRecordSpecs
	}
	return false
}

// ContractSpecificationResponse is the response type for the Query/ContractSpecification RPC method.
type ContractSpecificationResponse struct {
	// contract_specification is the on-chain contract specification message.
	ContractSpecification *ContractSpecification `protobuf:"bytes,1,opt,name=contract_specification,json=contractSpecification,proto3" json:"contract_specification,omitempty" yaml:"contract_specification"`
	// contract_specification_uuid is the uuid of this contract specification.
	ContractSpecificationUuid string `protobuf:"bytes,2,opt,name=contract_specification_uuid,json=contractSpecificationUuid,proto3" json:"contract_specification_uuid,omitempty" yaml:"contract_specification_uuid"`
	// record_specifications is any number or on-chain record specifications associated with this contract_specification
	// (if requested).
	RecordSpecifications []*RecordSpecification `protobuf:"bytes,3,rep,name=record_specifications,json=recordSpecifications,proto3" json:"record_specifications,omitempty" yaml:"record_specifications,omitempty"`
	// request is a copy of the request that generated these results.
	Request *ContractSpecificationRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *ContractSpecificationResponse) Reset()         { *m = ContractSpecificationResponse{} }
func (m *ContractSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*ContractSpecificationResponse) ProtoMessage()    {}
func (*ContractSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{18}
}
func (m *ContractSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpecificationResponse.Merge(m, src)
}
func (m *ContractSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *ContractSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpecificationResponse proto.InternalMessageInfo

func (m *ContractSpecificationResponse) GetContractSpecification() *ContractSpecification {
	if m != nil {
		return m.ContractSpecification
	}
	return nil
}

func (m *ContractSpecificationResponse) GetContractSpecificationUuid() string {
	if m != nil {
		return m.ContractSpecificationUuid
	}
	return ""
}

func (m *ContractSpecificationResponse) GetRecordSpecifications() []*RecordSpecification {
	if m != nil {
		return m.RecordSpecifications
	}
	return nil
}

func (m *ContractSpecificationResponse) GetRequest() *ContractSpecificationRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RecordSpecificationsForContractSpecificationRequest is the request type for the
// Query/RecordSpecificationsForContractSpecification RPC method.
type RecordSpecificationsForContractSpecificationRequest struct {
	// specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract specification
	// address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.
	// It can also be a record specification address, e.g.
	// recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
	SpecificationId string `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3" json:"specification_id,omitempty" yaml:"specification_id"`
}

func (m *RecordSpecificationsForContractSpecificationRequest) Reset() {
	*m = RecordSpecificationsForContractSpecificationRequest{}
}
func (m *RecordSpecificationsForContractSpecificationRequest) String() string {
	return proto.CompactTextString(m)
}
func (*RecordSpecificationsForContractSpecificationRequest) ProtoMessage() {}
func (*RecordSpecificationsForContractSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{19}
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationsForContractSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationsForContractSpecificationRequest.Merge(m, src)
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationsForContractSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationsForContractSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationsForContractSpecificationRequest proto.InternalMessageInfo

func (m *RecordSpecificationsForContractSpecificationRequest) GetSpecificationId() string {
	if m != nil {
		return m.SpecificationId
	}
	return ""
}

// RecordSpecificationsForContractSpecificationResponse is the response type for the
// Query/RecordSpecificationsForContractSpecification RPC method.
type RecordSpecificationsForContractSpecificationResponse struct {
	// record_specifications is any number or on-chain record specifications associated with this contract_specification.
	RecordSpecifications []*RecordSpecification `protobuf:"bytes,1,rep,name=record_specifications,json=recordSpecifications,proto3" json:"record_specifications,omitempty" yaml:"record_specifications"`
	// contract_specification_uuid is the uuid of this contract specification.
	ContractSpecificationUuid string `protobuf:"bytes,2,opt,name=contract_specification_uuid,json=contractSpecificationUuid,proto3" json:"contract_specification_uuid,omitempty" yaml:"contract_specification_uuid"`
	// contract_specification_addr is the contract specification address as a bech32 encoded string.
	ContractSpecificationAddr string `protobuf:"bytes,3,opt,name=contract_specification_addr,json=contractSpecificationAddr,proto3" json:"contract_specification_addr,omitempty" yaml:"contract_specification_addr"`
	// request is a copy of the request that generated these results.
	Request *RecordSpecificationsForContractSpecificationRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *RecordSpecificationsForContractSpecificationResponse) Reset() {
	*m = RecordSpecificationsForContractSpecificationResponse{}
}
func (m *RecordSpecificationsForContractSpecificationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*RecordSpecificationsForContractSpecificationResponse) ProtoMessage() {}
func (*RecordSpecificationsForContractSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{20}
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationsForContractSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationsForContractSpecificationResponse.Merge(m, src)
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationsForContractSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationsForContractSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationsForContractSpecificationResponse proto.InternalMessageInfo

func (m *RecordSpecificationsForContractSpecificationResponse) GetRecordSpecifications() []*RecordSpecification {
	if m != nil {
		return m.RecordSpecifications
	}
	return nil
}

func (m *RecordSpecificationsForContractSpecificationResponse) GetContractSpecificationUuid() string {
	if m != nil {
		return m.ContractSpecificationUuid
	}
	return ""
}

func (m *RecordSpecificationsForContractSpecificationResponse) GetContractSpecificationAddr() string {
	if m != nil {
		return m.ContractSpecificationAddr
	}
	return ""
}

func (m *RecordSpecificationsForContractSpecificationResponse) GetRequest() *RecordSpecificationsForContractSpecificationRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RecordSpecificationRequest is the request type for the Query/RecordSpecification RPC method.
type RecordSpecificationRequest struct {
	// specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract specification
	// address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn.
	// It can also be a record specification address, e.g.
	// recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.
	SpecificationId string `protobuf:"bytes,1,opt,name=specification_id,json=specificationId,proto3" json:"specification_id,omitempty" yaml:"specification_id"`
	// name is the name of the record to look up.
	// It is required if the specification_id is a uuid or contract specification address.
	// It is ignored if the specification_id is a record specification address.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RecordSpecificationRequest) Reset()         { *m = RecordSpecificationRequest{} }
func (m *RecordSpecificationRequest) String() string { return proto.CompactTextString(m) }
func (*RecordSpecificationRequest) ProtoMessage()    {}
func (*RecordSpecificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{21}
}
func (m *RecordSpecificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationRequest.Merge(m, src)
}
func (m *RecordSpecificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationRequest proto.InternalMessageInfo

func (m *RecordSpecificationRequest) GetSpecificationId() string {
	if m != nil {
		return m.SpecificationId
	}
	return ""
}

func (m *RecordSpecificationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// RecordSpecificationResponse is the response type for the Query/RecordSpecification RPC method.
type RecordSpecificationResponse struct {
	// record_specification is the on-chain record specification message.
	RecordSpecification *RecordSpecification `protobuf:"bytes,1,opt,name=record_specification,json=recordSpecification,proto3" json:"record_specification,omitempty" yaml:"record_specification"`
	// contract_specification_uuid is the uuid of the contract specification that holds this record specification.
	ContractSpecificationUuid string `protobuf:"bytes,2,opt,name=contract_specification_uuid,json=contractSpecificationUuid,proto3" json:"contract_specification_uuid,omitempty" yaml:"contract_specification_uuid"`
	// contract_specification_addr is the contract specification address as a bech32 encoded string.
	ContractSpecificationAddr string `protobuf:"bytes,3,opt,name=contract_specification_addr,json=contractSpecificationAddr,proto3" json:"contract_specification_addr,omitempty" yaml:"contract_specification_addr"`
	// request is a copy of the request that generated these results.
	Request *RecordSpecificationRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *RecordSpecificationResponse) Reset()         { *m = RecordSpecificationResponse{} }
func (m *RecordSpecificationResponse) String() string { return proto.CompactTextString(m) }
func (*RecordSpecificationResponse) ProtoMessage()    {}
func (*RecordSpecificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{22}
}
func (m *RecordSpecificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSpecificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSpecificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSpecificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSpecificationResponse.Merge(m, src)
}
func (m *RecordSpecificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordSpecificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSpecificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSpecificationResponse proto.InternalMessageInfo

func (m *RecordSpecificationResponse) GetRecordSpecification() *RecordSpecification {
	if m != nil {
		return m.RecordSpecification
	}
	return nil
}

func (m *RecordSpecificationResponse) GetContractSpecificationUuid() string {
	if m != nil {
		return m.ContractSpecificationUuid
	}
	return ""
}

func (m *RecordSpecificationResponse) GetContractSpecificationAddr() string {
	if m != nil {
		return m.ContractSpecificationAddr
	}
	return ""
}

func (m *RecordSpecificationResponse) GetRequest() *RecordSpecificationRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// OSLocatorParamsRequest is the request type for the Query/OSLocatorParams RPC method.
type OSLocatorParamsRequest struct {
}

func (m *OSLocatorParamsRequest) Reset()         { *m = OSLocatorParamsRequest{} }
func (m *OSLocatorParamsRequest) String() string { return proto.CompactTextString(m) }
func (*OSLocatorParamsRequest) ProtoMessage()    {}
func (*OSLocatorParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{23}
}
func (m *OSLocatorParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorParamsRequest.Merge(m, src)
}
func (m *OSLocatorParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorParamsRequest proto.InternalMessageInfo

// OSLocatorParamsResponse is the response type for the Query/OSLocatorParams RPC method.
type OSLocatorParamsResponse struct {
	// params defines the parameters of the module.
	Params OSLocatorParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// request is a copy of the request that generated these results.
	Request *OSLocatorParamsRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *OSLocatorParamsResponse) Reset()         { *m = OSLocatorParamsResponse{} }
func (m *OSLocatorParamsResponse) String() string { return proto.CompactTextString(m) }
func (*OSLocatorParamsResponse) ProtoMessage()    {}
func (*OSLocatorParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{24}
}
func (m *OSLocatorParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorParamsResponse.Merge(m, src)
}
func (m *OSLocatorParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorParamsResponse proto.InternalMessageInfo

func (m *OSLocatorParamsResponse) GetParams() OSLocatorParams {
	if m != nil {
		return m.Params
	}
	return OSLocatorParams{}
}

func (m *OSLocatorParamsResponse) GetRequest() *OSLocatorParamsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// OSLocatorRequest is the request type for the Query/OSLocator RPC method.
type OSLocatorRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *OSLocatorRequest) Reset()         { *m = OSLocatorRequest{} }
func (m *OSLocatorRequest) String() string { return proto.CompactTextString(m) }
func (*OSLocatorRequest) ProtoMessage()    {}
func (*OSLocatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{25}
}
func (m *OSLocatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorRequest.Merge(m, src)
}
func (m *OSLocatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorRequest proto.InternalMessageInfo

func (m *OSLocatorRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// OSLocatorResponse is the response type for the Query/OSLocator RPC method.
type OSLocatorResponse struct {
	Locator *ObjectStoreLocator `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator,omitempty"`
	// request is a copy of the request that generated these results.
	Request *OSLocatorRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *OSLocatorResponse) Reset()         { *m = OSLocatorResponse{} }
func (m *OSLocatorResponse) String() string { return proto.CompactTextString(m) }
func (*OSLocatorResponse) ProtoMessage()    {}
func (*OSLocatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{26}
}
func (m *OSLocatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorResponse.Merge(m, src)
}
func (m *OSLocatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorResponse proto.InternalMessageInfo

func (m *OSLocatorResponse) GetLocator() *ObjectStoreLocator {
	if m != nil {
		return m.Locator
	}
	return nil
}

func (m *OSLocatorResponse) GetRequest() *OSLocatorRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// OSLocatorsByURIRequest is the request type for the Query/OSLocatorsByURI RPC method.
type OSLocatorsByURIRequest struct {
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OSLocatorsByURIRequest) Reset()         { *m = OSLocatorsByURIRequest{} }
func (m *OSLocatorsByURIRequest) String() string { return proto.CompactTextString(m) }
func (*OSLocatorsByURIRequest) ProtoMessage()    {}
func (*OSLocatorsByURIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{27}
}
func (m *OSLocatorsByURIRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorsByURIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorsByURIRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorsByURIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorsByURIRequest.Merge(m, src)
}
func (m *OSLocatorsByURIRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorsByURIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorsByURIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorsByURIRequest proto.InternalMessageInfo

func (m *OSLocatorsByURIRequest) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *OSLocatorsByURIRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OSLocatorsByURIResponse is the response type for the Query/OSLocatorsByURI RPC method.
type OSLocatorsByURIResponse struct {
	Locators []ObjectStoreLocator `protobuf:"bytes,1,rep,name=locators,proto3" json:"locators"`
	// request is a copy of the request that generated these results.
	Request *OSLocatorsByURIRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OSLocatorsByURIResponse) Reset()         { *m = OSLocatorsByURIResponse{} }
func (m *OSLocatorsByURIResponse) String() string { return proto.CompactTextString(m) }
func (*OSLocatorsByURIResponse) ProtoMessage()    {}
func (*OSLocatorsByURIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{28}
}
func (m *OSLocatorsByURIResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorsByURIResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorsByURIResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorsByURIResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorsByURIResponse.Merge(m, src)
}
func (m *OSLocatorsByURIResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorsByURIResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorsByURIResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorsByURIResponse proto.InternalMessageInfo

func (m *OSLocatorsByURIResponse) GetLocators() []ObjectStoreLocator {
	if m != nil {
		return m.Locators
	}
	return nil
}

func (m *OSLocatorsByURIResponse) GetRequest() *OSLocatorsByURIRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *OSLocatorsByURIResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OSLocatorsByScopeRequest is the request type for the Query/OSLocatorsByScope RPC method.
type OSLocatorsByScopeRequest struct {
	ScopeId string `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" yaml:"scope_id"`
}

func (m *OSLocatorsByScopeRequest) Reset()         { *m = OSLocatorsByScopeRequest{} }
func (m *OSLocatorsByScopeRequest) String() string { return proto.CompactTextString(m) }
func (*OSLocatorsByScopeRequest) ProtoMessage()    {}
func (*OSLocatorsByScopeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{29}
}
func (m *OSLocatorsByScopeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorsByScopeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorsByScopeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorsByScopeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorsByScopeRequest.Merge(m, src)
}
func (m *OSLocatorsByScopeRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorsByScopeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorsByScopeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorsByScopeRequest proto.InternalMessageInfo

func (m *OSLocatorsByScopeRequest) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

// OSLocatorsByScopeResponse is the response type for the Query/OSLocatorsByScope RPC method.
type OSLocatorsByScopeResponse struct {
	Locators []ObjectStoreLocator `protobuf:"bytes,1,rep,name=locators,proto3" json:"locators"`
	// request is a copy of the request that generated these results.
	Request *OSLocatorsByScopeRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *OSLocatorsByScopeResponse) Reset()         { *m = OSLocatorsByScopeResponse{} }
func (m *OSLocatorsByScopeResponse) String() string { return proto.CompactTextString(m) }
func (*OSLocatorsByScopeResponse) ProtoMessage()    {}
func (*OSLocatorsByScopeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{30}
}
func (m *OSLocatorsByScopeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSLocatorsByScopeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSLocatorsByScopeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSLocatorsByScopeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSLocatorsByScopeResponse.Merge(m, src)
}
func (m *OSLocatorsByScopeResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSLocatorsByScopeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSLocatorsByScopeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSLocatorsByScopeResponse proto.InternalMessageInfo

func (m *OSLocatorsByScopeResponse) GetLocators() []ObjectStoreLocator {
	if m != nil {
		return m.Locators
	}
	return nil
}

func (m *OSLocatorsByScopeResponse) GetRequest() *OSLocatorsByScopeRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// OSAllLocatorsRequest is the request type for the Query/OSAllLocators RPC method.
type OSAllLocatorsRequest struct {
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OSAllLocatorsRequest) Reset()         { *m = OSAllLocatorsRequest{} }
func (m *OSAllLocatorsRequest) String() string { return proto.CompactTextString(m) }
func (*OSAllLocatorsRequest) ProtoMessage()    {}
func (*OSAllLocatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{31}
}
func (m *OSAllLocatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSAllLocatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSAllLocatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSAllLocatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSAllLocatorsRequest.Merge(m, src)
}
func (m *OSAllLocatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *OSAllLocatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OSAllLocatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OSAllLocatorsRequest proto.InternalMessageInfo

func (m *OSAllLocatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OSAllLocatorsResponse is the response type for the Query/OSAllLocators RPC method.
type OSAllLocatorsResponse struct {
	Locators []ObjectStoreLocator `protobuf:"bytes,1,rep,name=locators,proto3" json:"locators"`
	// request is a copy of the request that generated these results.
	Request *OSAllLocatorsRequest `protobuf:"bytes,98,opt,name=request,proto3" json:"request,omitempty"`
	// pagination provides the pagination information of this response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *OSAllLocatorsResponse) Reset()         { *m = OSAllLocatorsResponse{} }
func (m *OSAllLocatorsResponse) String() string { return proto.CompactTextString(m) }
func (*OSAllLocatorsResponse) ProtoMessage()    {}
func (*OSAllLocatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a68790bc0b96eeb9, []int{32}
}
func (m *OSAllLocatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSAllLocatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSAllLocatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSAllLocatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSAllLocatorsResponse.Merge(m, src)
}
func (m *OSAllLocatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *OSAllLocatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSAllLocatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSAllLocatorsResponse proto.InternalMessageInfo

func (m *OSAllLocatorsResponse) GetLocators() []ObjectStoreLocator {
	if m != nil {
		return m.Locators
	}
	return nil
}

func (m *OSAllLocatorsResponse) GetRequest() *OSAllLocatorsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *OSAllLocatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "provenance.metadata.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "provenance.metadata.v1.QueryParamsResponse")
	proto.RegisterType((*ScopeRequest)(nil), "provenance.metadata.v1.ScopeRequest")
	proto.RegisterType((*ScopeResponse)(nil), "provenance.metadata.v1.ScopeResponse")
	proto.RegisterType((*ScopeWrapper)(nil), "provenance.metadata.v1.ScopeWrapper")
	proto.RegisterType((*SessionsRequest)(nil), "provenance.metadata.v1.SessionsRequest")
	proto.RegisterType((*SessionsResponse)(nil), "provenance.metadata.v1.SessionsResponse")
	proto.RegisterType((*SessionWrapper)(nil), "provenance.metadata.v1.SessionWrapper")
	proto.RegisterType((*RecordsRequest)(nil), "provenance.metadata.v1.RecordsRequest")
	proto.RegisterType((*RecordsResponse)(nil), "provenance.metadata.v1.RecordsResponse")
	proto.RegisterType((*RecordWrapper)(nil), "provenance.metadata.v1.RecordWrapper")
	proto.RegisterType((*OwnershipRequest)(nil), "provenance.metadata.v1.OwnershipRequest")
	proto.RegisterType((*OwnershipResponse)(nil), "provenance.metadata.v1.OwnershipResponse")
	proto.RegisterType((*ValueOwnershipRequest)(nil), "provenance.metadata.v1.ValueOwnershipRequest")
	proto.RegisterType((*ValueOwnershipResponse)(nil), "provenance.metadata.v1.ValueOwnershipResponse")
	proto.RegisterType((*ScopeSpecificationRequest)(nil), "provenance.metadata.v1.ScopeSpecificationRequest")
	proto.RegisterType((*ScopeSpecificationResponse)(nil), "provenance.metadata.v1.ScopeSpecificationResponse")
	proto.RegisterType((*ContractSpecificationRequest)(nil), "provenance.metadata.v1.ContractSpecificationRequest")
	proto.RegisterType((*ContractSpecificationResponse)(nil), "provenance.metadata.v1.ContractSpecificationResponse")
	proto.RegisterType((*RecordSpecificationsForContractSpecificationRequest)(nil), "provenance.metadata.v1.RecordSpecificationsForContractSpecificationRequest")
	proto.RegisterType((*RecordSpecificationsForContractSpecificationResponse)(nil), "provenance.metadata.v1.RecordSpecificationsForContractSpecificationResponse")
	proto.RegisterType((*RecordSpecificationRequest)(nil), "provenance.metadata.v1.RecordSpecificationRequest")
	proto.RegisterType((*RecordSpecificationResponse)(nil), "provenance.metadata.v1.RecordSpecificationResponse")
	proto.RegisterType((*OSLocatorParamsRequest)(nil), "provenance.metadata.v1.OSLocatorParamsRequest")
	proto.RegisterType((*OSLocatorParamsResponse)(nil), "provenance.metadata.v1.OSLocatorParamsResponse")
	proto.RegisterType((*OSLocatorRequest)(nil), "provenance.metadata.v1.OSLocatorRequest")
	proto.RegisterType((*OSLocatorResponse)(nil), "provenance.metadata.v1.OSLocatorResponse")
	proto.RegisterType((*OSLocatorsByURIRequest)(nil), "provenance.metadata.v1.OSLocatorsByURIRequest")
	proto.RegisterType((*OSLocatorsByURIResponse)(nil), "provenance.metadata.v1.OSLocatorsByURIResponse")
	proto.RegisterType((*OSLocatorsByScopeRequest)(nil), "provenance.metadata.v1.OSLocatorsByScopeRequest")
	proto.RegisterType((*OSLocatorsByScopeResponse)(nil), "provenance.metadata.v1.OSLocatorsByScopeResponse")
	proto.RegisterType((*OSAllLocatorsRequest)(nil), "provenance.metadata.v1.OSAllLocatorsRequest")
	proto.RegisterType((*OSAllLocatorsResponse)(nil), "provenance.metadata.v1.OSAllLocatorsResponse")
}

func init() {
	proto.RegisterFile("provenance/metadata/v1/query.proto", fileDescriptor_a68790bc0b96eeb9)
}

var fileDescriptor_a68790bc0b96eeb9 = []byte{
	// 2197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xdb, 0x6f, 0x1c, 0x67,
	0x15, 0xcf, 0xec, 0xfa, 0x96, 0xe3, 0x24, 0x76, 0x8e, 0x2f, 0x59, 0x4f, 0x92, 0x1d, 0x33, 0x6a,
	0x9c, 0x4d, 0xe2, 0xec, 0xd4, 0x97, 0x26, 0x6d, 0x94, 0x12, 0xb2, 0x69, 0x1c, 0x5c, 0x1b, 0x92,
	0x8e, 0xd5, 0x22, 0x59, 0x82, 0x68, 0xbc, 0x3b, 0x75, 0x07, 0xd6, 0x3b, 0xdb, 0x99, 0x59, 0x53,
	0x6b, 0x65, 0x21, 0x55, 0x48, 0x08, 0xb5, 0x42, 0x20, 0x04, 0x02, 0x24, 0x84, 0x84, 0xe0, 0x81,
	0xf2, 0x50, 0x81, 0xe0, 0xa1, 0x12, 0x0f, 0xbc, 0x20, 0x55, 0x48, 0x40, 0x24, 0x5e, 0xe0, 0x65,
	0x85, 0x92, 0xfe, 0x01, 0x68, 0x1f, 0xfa, 0x00, 0x2f, 0x68, 0xbe, 0xcb, 0xee, 0xcc, 0xec, 0xcc,
	0xee, 0xcc, 0xda, 0x4e, 0x24, 0xde, 0x76, 0xe6, 0x3b, 0xd7, 0xdf, 0x77, 0xce, 0xf9, 0xce, 0xf9,
	0x66, 0x41, 0xae, 0x5a, 0xe6, 0xae, 0x5e, 0xd1, 0x2a, 0x45, 0x5d, 0xd9, 0xd1, 0x1d, 0xad, 0xa4,
	0x39, 0x9a, 0xb2, 0xbb, 0xa0, 0xbc, 0x5d, 0xd3, 0xad, 0xbd, 0x7c, 0xd5, 0x32, 0x1d, 0x13, 0xa7,
	0xdb, 0x34, 0x79, 0x4e, 0x93, 0xdf, 0x5d, 0x10, 0x27, 0xb7, 0xcd, 0x6d, 0x93, 0x90, 0x28, 0xee,
	0x2f, 0x4a, 0x2d, 0x5e, 0x2e, 0x9a, 0xf6, 0x8e, 0x69, 0x2b, 0x5b, 0x9a, 0xad, 0x53, 0x31, 0xca,
	0xee, 0xc2, 0x96, 0xee, 0x68, 0x0b, 0x4a, 0x55, 0xdb, 0x36, 0x2a, 0x9a, 0x63, 0x98, 0x15, 0x46,
	0x7b, 0x6e, 0xdb, 0x34, 0xb7, 0xcb, 0xba, 0xa2, 0x55, 0x0d, 0x45, 0xab, 0x54, 0x4c, 0x87, 0x2c,
	0xda, 0x6c, 0xf5, 0x42, 0x84, 0x6d, 0x2d, 0x1b, 0x28, 0x59, 0x94, 0x0b, 0x76, 0xd1, 0xac, 0xea,
	0xdc, 0xa8, 0x28, 0x9a, 0xaa, 0x5e, 0x34, 0xde, 0x34, 0x8a, 0x5e, 0xa3, 0x72, 0x11, 0xb4, 0xe6,
	0xd6, 0x57, 0xf5, 0xa2, 0x63, 0x3b, 0xa6, 0xc5, 0xa4, 0xca, 0x93, 0x80, 0xaf, 0xb9, 0x0e, 0x3e,
	0xd0, 0x2c, 0x6d, 0xc7, 0x56, 0xf5, 0xb7, 0x6b, 0xba, 0xed, 0xc8, 0x3f, 0x16, 0x60, 0xc2, 0xf7,
	0xda, 0xae, 0x9a, 0x15, 0x5b, 0xc7, 0x9b, 0x30, 0x54, 0x25, 0x6f, 0x32, 0xc2, 0xac, 0x90, 0x1b,
	0x5d, 0xcc, 0xe6, 0xc3, 0x71, 0xcd, 0x53, 0xbe, 0xc2, 0xc0, 0xc7, 0x0d, 0xe9, 0x98, 0xca, 0x78,
	0xf0, 0x15, 0x18, 0xb6, 0xa8, 0x82, 0xcc, 0x16, 0x61, 0xbf, 0x1c, 0xc5, 0xde, 0x69, 0x92, 0xca,
	0x59, 0xe5, 0x3f, 0xa6, 0xe0, 0xc4, 0x86, 0x8b, 0x0b, 0x5b, 0xc1, 0x3c, 0x8c, 0x10, 0x9c, 0x1e,
	0x1a, 0x25, 0x62, 0xd6, 0xf1, 0xc2, 0x44, 0xb3, 0x21, 0x8d, 0xed, 0x69, 0x3b, 0xe5, 0x1b, 0x32,
	0x5f, 0x91, 0xd5, 0x61, 0xf2, 0x73, 0xb5, 0x84, 0x37, 0xe0, 0x84, 0xad, 0xdb, 0xb6, 0x61, 0x56,
	0x1e, 0x6a, 0xa5, 0x92, 0x95, 0x49, 0x11, 0x9e, 0x33, 0xcd, 0x86, 0x34, 0xc1, 0x78, 0x3c, 0xab,
	0xb2, 0x3a, 0xca, 0x1e, 0x6f, 0x97, 0x4a, 0x16, 0x5e, 0x87, 0x51, 0x4b, 0x2f, 0x9a, 0x56, 0x89,
	0xb2, 0xa6, 0x09, 0xeb, 0x74, 0xb3, 0x21, 0x21, 0x65, 0xf5, 0x2c, 0xca, 0x2a, 0xd0, 0x27, 0xc2,
	0xb8, 0x02, 0xe3, 0x46, 0xa5, 0x58, 0xae, 0x95, 0xf4, 0x87, 0x4c, 0x9e, 0x9d, 0x81, 0x59, 0x21,
	0x37, 0x52, 0x38, 0xdb, 0x6c, 0x48, 0x67, 0x28, 0x77, 0x90, 0x42, 0x56, 0xc7, 0xd8, 0xab, 0x0d,
	0xf6, 0x06, 0xef, 0x00, 0x7f, 0xf5, 0x90, 0x4a, 0xb7, 0x33, 0xa3, 0x44, 0x8c, 0xd8, 0x6c, 0x48,
	0xd3, 0x7e, 0x31, 0x8c, 0x40, 0x56, 0x4f, 0xb1, 0x37, 0x2a, 0x7b, 0xf1, 0x97, 0x14, 0x9c, 0x64,
	0x10, 0xb2, 0x8d, 0xbd, 0x01, 0x83, 0x04, 0x1e, 0xb6, 0xaf, 0xcf, 0x45, 0x6d, 0x0c, 0xe1, 0xfa,
	0x92, 0xa5, 0x55, 0xab, 0xba, 0xa5, 0x52, 0x16, 0xd4, 0x60, 0xa4, 0xe5, 0x52, 0x6a, 0x36, 0x9d,
	0x1b, 0x5d, 0x9c, 0x8b, 0x64, 0xa7, 0x74, 0x4c, 0x40, 0xe1, 0x7c, 0xb3, 0x21, 0xcd, 0xf8, 0x30,
	0xb7, 0xe7, 0xcd, 0x1d, 0xc3, 0xd1, 0x77, 0xaa, 0xce, 0x9e, 0xac, 0xb6, 0xc4, 0xe2, 0x97, 0xdd,
	0xc8, 0xa1, 0xde, 0xa6, 0x89, 0x86, 0x0b, 0x51, 0x1a, 0xa8, 0x8b, 0x5c, 0xc1, 0xb9, 0x66, 0x43,
	0xca, 0x78, 0x77, 0xc6, 0x27, 0x9f, 0xcb, 0xc4, 0xcf, 0x06, 0x03, 0xb3, 0xbb, 0xff, 0x1d, 0x21,
	0xf9, 0xa1, 0xc0, 0x42, 0x92, 0xe9, 0xc5, 0x25, 0x3f, 0x9c, 0xe7, 0xbb, 0x8b, 0x63, 0x38, 0x2e,
	0x03, 0xd0, 0x68, 0xf5, 0x44, 0xe5, 0x54, 0xb3, 0x21, 0x9d, 0xf6, 0x46, 0x32, 0x8d, 0xac, 0xe3,
	0xe4, 0x81, 0x04, 0x56, 0x8b, 0xab, 0x56, 0x33, 0x4a, 0x2c, 0x20, 0x3b, 0xb8, 0xdc, 0x35, 0xce,
	0xf5, 0xba, 0xfb, 0xfb, 0xbf, 0x02, 0x8c, 0xf1, 0x98, 0xea, 0x37, 0x8f, 0x5c, 0xcd, 0x2c, 0x53,
	0x8c, 0x52, 0x88, 0xbd, 0xad, 0x35, 0x57, 0x33, 0x7d, 0x58, 0x2d, 0xe1, 0xcb, 0x70, 0xb2, 0x15,
	0xe6, 0x04, 0x22, 0x9a, 0x05, 0x99, 0x66, 0x43, 0x9a, 0x0c, 0x64, 0x81, 0xbb, 0x2c, 0xab, 0x27,
	0x78, 0x0a, 0x10, 0x90, 0x0e, 0x25, 0xfe, 0x1f, 0xa5, 0x60, 0xbc, 0xed, 0x3d, 0x4b, 0x81, 0x37,
	0xfa, 0x48, 0x01, 0xaf, 0x56, 0xc2, 0xec, 0x0d, 0x2f, 0xb6, 0xad, 0x85, 0x7e, 0xd3, 0xe3, 0xe9,
	0xc5, 0xff, 0xed, 0x60, 0xfc, 0x5f, 0xec, 0x61, 0x61, 0x67, 0x55, 0xfe, 0x30, 0x05, 0xa7, 0xfc,
	0xe6, 0xe3, 0x4b, 0x30, 0xcc, 0x1c, 0x60, 0x90, 0x4a, 0x3d, 0xa4, 0xaa, 0x9c, 0xbe, 0xcf, 0x54,
	0x08, 0x16, 0xf6, 0x74, 0x82, 0xc2, 0xee, 0x4f, 0xa3, 0x81, 0x78, 0x69, 0xe4, 0xd5, 0x48, 0xf8,
	0x06, 0xa3, 0x34, 0x52, 0x4e, 0xae, 0x91, 0xa4, 0xe0, 0x9f, 0x53, 0x70, 0x8a, 0x05, 0x24, 0xcf,
	0xc0, 0xc0, 0xe9, 0x22, 0xc4, 0x3e, 0x5d, 0xbc, 0xa9, 0x9b, 0x4a, 0x9c, 0xba, 0xe9, 0x98, 0xa9,
	0x8b, 0x30, 0x50, 0xd1, 0x76, 0x74, 0x8a, 0x8e, 0x4a, 0x7e, 0x1f, 0x34, 0x9d, 0xc3, 0x8e, 0xc5,
	0xd1, 0xe4, 0xc7, 0xa2, 0xfc, 0xb7, 0x14, 0x8c, 0xb5, 0xc0, 0x3c, 0xe2, 0x84, 0x7e, 0x0a, 0xe7,
	0xdd, 0xad, 0xfe, 0xf2, 0xbd, 0x9d, 0xd1, 0x9f, 0x0b, 0x66, 0xf4, 0x5c, 0x77, 0x01, 0x9d, 0x09,
	0xfd, 0x49, 0x0a, 0x4e, 0xfa, 0x84, 0xe3, 0x35, 0x18, 0xa2, 0xe2, 0x7b, 0x35, 0x7f, 0x94, 0x4d,
	0x65, 0xd4, 0xcf, 0x20, 0x99, 0x03, 0x79, 0x34, 0x10, 0x3b, 0x8f, 0xfc, 0x55, 0x60, 0xb0, 0xcf,
	0x2a, 0x30, 0x94, 0xa0, 0x0a, 0x38, 0x30, 0x7e, 0xff, 0xeb, 0x15, 0xdd, 0xb2, 0xdf, 0x32, 0xaa,
	0xbc, 0x0c, 0x64, 0x60, 0xd8, 0x35, 0x4d, 0xb7, 0x69, 0x9b, 0x7d, 0x5c, 0xe5, 0x8f, 0xb8, 0x02,
	0xd0, 0x1e, 0x40, 0x32, 0x45, 0xb6, 0xb3, 0x74, 0x5a, 0xc9, 0xbb, 0xd3, 0x4a, 0x9e, 0x0e, 0x3d,
	0x6c, 0x5a, 0xc9, 0x3f, 0xd0, 0xb6, 0x5b, 0xdd, 0x8a, 0x87, 0x53, 0xfe, 0xa7, 0x00, 0xa7, 0x3d,
	0x6a, 0x59, 0xc2, 0x5c, 0x87, 0xd1, 0xb6, 0x87, 0xae, 0xee, 0xb4, 0x1f, 0x36, 0xcf, 0xa2, 0xac,
	0x42, 0xcb, 0x7f, 0x1b, 0x0b, 0xc1, 0x68, 0xcb, 0x45, 0x85, 0x46, 0xd0, 0xd7, 0x56, 0xbc, 0xe1,
	0xbd, 0x10, 0xd7, 0x2e, 0xf6, 0x74, 0x8d, 0x5a, 0xee, 0xf3, 0x6d, 0x0f, 0xa6, 0xde, 0xd0, 0xca,
	0x35, 0xfd, 0x19, 0xc0, 0xfa, 0x44, 0x80, 0xe9, 0xa0, 0xee, 0x83, 0x62, 0x7b, 0x2f, 0x88, 0xed,
	0xd5, 0x28, 0x6c, 0x43, 0xbd, 0x3e, 0x02, 0x80, 0x8b, 0x30, 0x43, 0x4a, 0xe6, 0x86, 0x77, 0xf0,
	0xe4, 0x20, 0xaf, 0xc0, 0xb8, 0x6f, 0x20, 0x6d, 0x37, 0x93, 0x9e, 0x82, 0x1e, 0xa4, 0x90, 0xd5,
	0x31, 0xdf, 0xab, 0xd5, 0x92, 0xfc, 0xbb, 0x14, 0x88, 0x61, 0x5a, 0x18, 0x9c, 0x75, 0x98, 0xa0,
	0x88, 0xf9, 0xf8, 0x58, 0x61, 0xba, 0xdc, 0xb5, 0xd2, 0xfb, 0x04, 0x16, 0xb2, 0xcd, 0x86, 0x24,
	0x7a, 0xb7, 0xc0, 0x27, 0x50, 0x56, 0xd1, 0xee, 0xe0, 0xc1, 0x75, 0x40, 0xbf, 0x07, 0x24, 0xeb,
	0x69, 0x61, 0xf3, 0x96, 0xf8, 0x0e, 0x1a, 0x59, 0x3d, 0xed, 0x7b, 0x49, 0xaa, 0xc7, 0x5a, 0x70,
	0x83, 0x17, 0xe2, 0x9b, 0xdf, 0x51, 0xb5, 0x3f, 0x12, 0xe0, 0xdc, 0x1d, 0xb3, 0xe2, 0x58, 0x5a,
	0xd1, 0x39, 0xca, 0xfd, 0xc1, 0xd7, 0x60, 0xd2, 0xdf, 0x66, 0x13, 0xe0, 0xf8, 0x4c, 0x2b, 0x35,
	0x1b, 0xd2, 0xd9, 0xb0, 0x66, 0x9c, 0x52, 0xc9, 0x2a, 0xfa, 0x3a, 0xf2, 0x0d, 0xf2, 0xf2, 0xdf,
	0x69, 0x38, 0x1f, 0x61, 0x3b, 0xdb, 0xf5, 0x6f, 0x09, 0x30, 0x5d, 0x64, 0x14, 0xa1, 0x3b, 0x1f,
	0x99, 0x1b, 0xa1, 0x72, 0x0b, 0x9f, 0x69, 0x36, 0xa4, 0xf3, 0xd4, 0xcc, 0x70, 0xb1, 0xb2, 0x3a,
	0x55, 0x0c, 0xe3, 0xc4, 0x37, 0xe1, 0x6c, 0x38, 0x87, 0x37, 0x16, 0xe6, 0x9a, 0x0d, 0x49, 0xee,
	0x26, 0x9e, 0x05, 0xc5, 0x4c, 0xa8, 0x0e, 0x12, 0x1c, 0xef, 0x0b, 0x30, 0xe5, 0x41, 0xae, 0xb5,
	0xc8, 0xfb, 0x82, 0x2b, 0xdd, 0xcf, 0x60, 0xbf, 0xbb, 0x97, 0x9b, 0x0d, 0x69, 0xce, 0x77, 0x02,
	0xfa, 0x65, 0x7a, 0x7b, 0x91, 0x49, 0xab, 0x53, 0x80, 0x8d, 0x5f, 0x0c, 0xc6, 0xea, 0x72, 0x22,
	0xc0, 0x3b, 0xc2, 0x75, 0x1f, 0x96, 0x42, 0x0c, 0xb5, 0x57, 0x4c, 0xeb, 0x69, 0x04, 0xb1, 0xdc,
	0x4c, 0xc3, 0x72, 0x32, 0xfd, 0x2c, 0x10, 0xdf, 0x8d, 0xdc, 0x16, 0x21, 0xf9, 0xb6, 0xcc, 0x36,
	0x1b, 0xd2, 0xb9, 0x2e, 0xdb, 0x12, 0xb5, 0x19, 0x4f, 0x2b, 0x06, 0xa3, 0xf5, 0x78, 0x1a, 0xb3,
	0xde, 0x7a, 0x68, 0xb7, 0x15, 0xae, 0x87, 0x34, 0x5f, 0x7a, 0x30, 0xb8, 0xd6, 0x12, 0xa0, 0xd8,
	0x2b, 0x66, 0xda, 0x31, 0xf7, 0x0e, 0x88, 0x21, 0xfc, 0x87, 0x5d, 0x1f, 0xf9, 0xac, 0x94, 0x6a,
	0xcf, 0x4a, 0xf2, 0x1f, 0xd2, 0x70, 0x36, 0x54, 0x35, 0x8b, 0xaa, 0x6f, 0xc0, 0x64, 0x58, 0x00,
	0xb0, 0xda, 0x96, 0x28, 0xa6, 0x3c, 0x05, 0x38, 0x4c, 0xa4, 0xac, 0x4e, 0x84, 0x84, 0xd4, 0xff,
	0x5d, 0x44, 0xad, 0x07, 0x23, 0x6a, 0x31, 0x01, 0x86, 0x1d, 0x81, 0x93, 0x81, 0xe9, 0xfb, 0x1b,
	0xeb, 0x66, 0x51, 0x73, 0x4c, 0xcb, 0x7f, 0x5d, 0xfe, 0x81, 0x00, 0x67, 0x3a, 0x96, 0xd8, 0xa6,
	0xde, 0x0d, 0x5c, 0x99, 0x47, 0x5e, 0xad, 0x04, 0x04, 0x04, 0xee, 0xce, 0x3f, 0x1f, 0x74, 0x25,
	0x1f, 0x53, 0x4e, 0x87, 0x1b, 0x39, 0x18, 0x6f, 0x91, 0xf0, 0xa8, 0x9f, 0x84, 0x41, 0xd3, 0x6d,
	0x1c, 0x59, 0x63, 0x4c, 0x1f, 0xe4, 0x9f, 0xba, 0x53, 0x42, 0x9b, 0x94, 0x39, 0xf4, 0x0a, 0x0c,
	0x97, 0xe9, 0xab, 0x5e, 0xed, 0xd6, 0x7d, 0xf2, 0xb5, 0x61, 0xc3, 0x31, 0x2d, 0x9d, 0x0b, 0xe1,
	0xac, 0x49, 0x46, 0x86, 0x80, 0xb1, 0x6d, 0x4f, 0x2c, 0xcf, 0x86, 0xd8, 0x85, 0xbd, 0xd7, 0xd5,
	0x55, 0xee, 0xcf, 0x38, 0xa4, 0x6b, 0x96, 0xc1, 0xbc, 0x71, 0x7f, 0x1e, 0x5a, 0x8b, 0xff, 0x1f,
	0xef, 0x56, 0x73, 0xa5, 0x0c, 0x99, 0x75, 0x18, 0x61, 0xee, 0xf1, 0x73, 0x20, 0x01, 0x34, 0x6c,
	0xbf, 0x5b, 0x12, 0xfa, 0xd9, 0x71, 0x1f, 0x08, 0x47, 0xd0, 0xf9, 0xbf, 0x0a, 0x19, 0xaf, 0xae,
	0x83, 0x7c, 0x85, 0x91, 0x7f, 0x2f, 0xc0, 0x4c, 0x88, 0xb0, 0x23, 0x81, 0xf2, 0xd5, 0x20, 0x94,
	0xcf, 0xc7, 0x81, 0x32, 0xfc, 0xae, 0xff, 0x2b, 0x30, 0x79, 0x7f, 0xe3, 0x76, 0xb9, 0xcc, 0xe9,
	0xda, 0x07, 0xc7, 0xe1, 0x04, 0xd8, 0xa7, 0x02, 0x4c, 0x05, 0x14, 0x1c, 0x09, 0x26, 0x2b, 0x41,
	0x4c, 0xe6, 0xa3, 0x31, 0xe9, 0x74, 0xf7, 0xf0, 0x83, 0x6b, 0xf1, 0xaf, 0x33, 0x30, 0x48, 0xbe,
	0xfb, 0xe1, 0xb7, 0x05, 0x18, 0xa2, 0xc5, 0x0b, 0x13, 0x7c, 0x21, 0x14, 0xaf, 0xc4, 0xa2, 0xa5,
	0x9a, 0xe5, 0xb9, 0x77, 0xff, 0xfe, 0xc9, 0xf7, 0x53, 0xb3, 0x98, 0x55, 0x22, 0x3e, 0x95, 0xb2,
	0xba, 0xfb, 0xa9, 0x00, 0x83, 0xf4, 0xaa, 0x32, 0xd6, 0x37, 0x21, 0xf1, 0x42, 0x0f, 0x2a, 0xa6,
	0xfe, 0x67, 0x02, 0xd1, 0xff, 0x23, 0x01, 0x73, 0x4a, 0xb7, 0x6f, 0xbf, 0x4a, 0x9d, 0xa7, 0xce,
	0xfe, 0xe6, 0x35, 0x5c, 0x8e, 0xa4, 0xa5, 0x37, 0x4a, 0x4a, 0xdd, 0x7b, 0x29, 0xb6, 0x4f, 0x45,
	0x6c, 0x2e, 0xe3, 0x62, 0x14, 0x1f, 0x6d, 0x02, 0x94, 0xba, 0xe7, 0x42, 0x8c, 0x71, 0xe1, 0x7b,
	0x29, 0x18, 0x69, 0x7d, 0x75, 0x8c, 0xfb, 0x3d, 0x40, 0xcc, 0xf5, 0x26, 0x64, 0x08, 0xfc, 0x9a,
	0x22, 0xf0, 0x0b, 0x01, 0xe7, 0x63, 0x7b, 0xe5, 0xa2, 0xb0, 0x84, 0x0b, 0x71, 0x11, 0xe3, 0x02,
	0xec, 0xcd, 0x5b, 0xf8, 0x72, 0x52, 0x26, 0x9f, 0x56, 0xfc, 0xce, 0x00, 0x0c, 0xb3, 0x9b, 0x52,
	0x8c, 0x79, 0x95, 0x2a, 0x5e, 0xec, 0x49, 0xc7, 0xa0, 0xf8, 0x4d, 0x9a, 0x40, 0xf1, 0x41, 0x3a,
	0x1a, 0x8a, 0xb0, 0x8d, 0xda, 0x5c, 0xc4, 0xe7, 0x63, 0x7b, 0xc5, 0x2e, 0x86, 0x37, 0x5f, 0xc4,
	0x6b, 0x09, 0x79, 0x94, 0xba, 0xdb, 0xbc, 0xee, 0x6f, 0xde, 0xc3, 0xbb, 0x07, 0xc2, 0xb0, 0x65,
	0xc2, 0x17, 0x70, 0xed, 0x30, 0x04, 0x71, 0xbb, 0x92, 0xa4, 0x85, 0xd7, 0x8c, 0x9b, 0x78, 0xa3,
	0x0f, 0x3e, 0xa6, 0x15, 0x7f, 0x20, 0xc0, 0xf1, 0xd6, 0x5d, 0x1b, 0xc6, 0xbe, 0xef, 0x14, 0x2f,
	0xc5, 0xa0, 0x64, 0x61, 0xb1, 0x44, 0xa2, 0xe2, 0x2a, 0x5e, 0x89, 0x32, 0xd3, 0xe4, 0x2c, 0x4a,
	0x9d, 0xdd, 0x64, 0xee, 0xe3, 0xaf, 0x04, 0x38, 0xe5, 0xbf, 0x08, 0xc4, 0x64, 0x17, 0x86, 0x62,
	0x3e, 0x2e, 0x39, 0x33, 0xf3, 0x45, 0x62, 0x66, 0x97, 0x58, 0xdc, 0x75, 0xf9, 0xc2, 0x6c, 0xfd,
	0x48, 0x00, 0xec, 0xbc, 0xd3, 0xc2, 0xe4, 0xf7, 0x5f, 0xe2, 0x62, 0x12, 0x16, 0x66, 0xf7, 0x4d,
	0x62, 0x77, 0xb7, 0xe8, 0x71, 0x79, 0xdd, 0x89, 0x43, 0xa9, 0x07, 0x07, 0xbe, 0x7d, 0xfc, 0x93,
	0x00, 0x53, 0xa1, 0xf3, 0x26, 0xf6, 0x75, 0x25, 0x22, 0xbe, 0x90, 0x90, 0x8b, 0x39, 0x71, 0x8b,
	0x38, 0xf1, 0x12, 0x5e, 0x8f, 0x72, 0x82, 0x0f, 0x47, 0x51, 0x7e, 0xfc, 0x30, 0x05, 0xf3, 0x49,
	0xc6, 0x69, 0x3c, 0xcc, 0xa1, 0x5c, 0x5c, 0x3f, 0x1c, 0x61, 0x0c, 0x8c, 0x35, 0x02, 0xc6, 0x5d,
	0xbc, 0xd3, 0x27, 0x18, 0xbc, 0x34, 0x54, 0xf5, 0xa2, 0x8d, 0xef, 0xa7, 0x60, 0x22, 0xc4, 0x0a,
	0xec, 0x63, 0x84, 0x14, 0x97, 0x12, 0xf1, 0x30, 0x6f, 0xde, 0xa3, 0x07, 0xe4, 0x37, 0x05, 0x7c,
	0xa1, 0xfb, 0xa9, 0x10, 0xe1, 0xcd, 0xe6, 0x1a, 0xae, 0x1e, 0x1c, 0x08, 0x5e, 0xef, 0x7e, 0x2e,
	0xc0, 0x58, 0x60, 0xb2, 0xc4, 0x84, 0x23, 0xa8, 0xa8, 0xc4, 0xa6, 0x67, 0x10, 0xe4, 0x09, 0x02,
	0x39, 0x9c, 0x8b, 0xf2, 0x83, 0x75, 0xb3, 0xbc, 0x59, 0xfb, 0x9e, 0x5b, 0x94, 0xb9, 0x2c, 0x8c,
	0x3d, 0x51, 0x76, 0x29, 0xca, 0xc1, 0xe9, 0x57, 0x56, 0x88, 0x49, 0x97, 0xf0, 0x62, 0x2f, 0x93,
	0xea, 0xa4, 0xe2, 0xed, 0xe3, 0x2f, 0xbd, 0xc0, 0xd1, 0x01, 0x0d, 0x13, 0x4e, 0x72, 0x31, 0x80,
	0xf3, 0x4f, 0xa2, 0xf2, 0x02, 0xb1, 0xf2, 0x0a, 0x5e, 0xea, 0x65, 0x65, 0xcd, 0x32, 0x94, 0x7a,
	0xcd, 0x32, 0xf6, 0xf1, 0xb7, 0xde, 0x61, 0x9f, 0x4f, 0x3f, 0x98, 0x78, 0x50, 0x12, 0x17, 0x12,
	0x70, 0xc4, 0x3d, 0x41, 0xb8, 0xb5, 0xc1, 0xf6, 0x00, 0x7f, 0x22, 0xc0, 0x49, 0xdf, 0x78, 0x82,
	0x89, 0xa6, 0x18, 0xf1, 0x6a, 0x4c, 0x6a, 0x66, 0xe8, 0x3c, 0x31, 0x74, 0x0e, 0x9f, 0xeb, 0x61,
	0xa8, 0xad, 0x68, 0xe5, 0x72, 0xe1, 0x6b, 0x1f, 0x3f, 0xce, 0x0a, 0x8f, 0x1e, 0x67, 0x85, 0x7f,
	0x3d, 0xce, 0x0a, 0xdf, 0x7d, 0x92, 0x3d, 0xf6, 0xe8, 0x49, 0xf6, 0xd8, 0x3f, 0x9e, 0x64, 0x8f,
	0xc1, 0x8c, 0x61, 0x46, 0x28, 0x7e, 0x20, 0x6c, 0x2e, 0x6f, 0x1b, 0xce, 0x5b, 0xb5, 0xad, 0x7c,
	0xd1, 0xdc, 0xf1, 0xa8, 0xb9, 0x6a, 0x98, 0x5e, 0xa5, 0xef, 0xb4, 0xd5, 0x3a, 0x7b, 0x55, 0xdd,
	0xde, 0x1a, 0x22, 0x7f, 0xe7, 0x5c, 0xfa, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0x5b, 0x65,
	0x98, 0x0d, 0x2b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of x/metadata module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Scope searches for a scope.
	//
	// The scope id, if provided, must either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,
	// e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if provided, must be a bech32 session address,
	// e.g. session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The record_addr, if provided, must be a
	// bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. Case doesn't
	// matter.
	//
	// Providing a session addr or record addr does not limit the sessions and records returned.
	// Those parameters are only used to find the scope.
	//
	// * If a scope id is provided, the other input is ignored and that scope is returned.
	// * Otherwise, if a session addr is provided, the record addr is ignored and the scope containing that session is
	// returned.
	// * Lastly, if a record addr is provided, the scope containing that record is returned.
	//
	// By default, sessions and records are not included.
	// Set include_sessions and/or include_records to true to include sessions and/or records.
	Scope(ctx context.Context, in *ScopeRequest, opts ...grpc.CallOption) (*ScopeResponse, error)
	// Sessions searches for sessions.
	//
	// The scope id can either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
	// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can either be a uuid or session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. Case doesn't matter.
	//
	// * If only a session id is provided, and it is an address, then the scope id will be ignored and the session id used
	// to find a single session.
	// * If only a session id is provided, and it is a uuid, a bad request is returned.
	// * If only a scope id is provided, all sessions for that scope will be returned.
	// * If both a scope id and session id is provided, and the session id is a uuid, then the session in the provided
	// scope, with the provided session uuid is returned.
	// * If neither a scope id, nor a session id are provided, a bad request is returned.
	//
	// By default, the scope and records are not included.
	// Set include_scope and/or include_records to true to include the scope and/or records.
	Sessions(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*SessionsResponse, error)
	// Records searches for records.
	//
	// The record_addr, if provided, must be a bech32 record address, e.g.
	// record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The scope id can either be scope uuid, e.g.
	// 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,
	// the session_id can either be a uuid or session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The name is the name of the record you're
	// interested in. Case doesn't matter.
	//
	// * If a record_addr is provided, the rest of the fields are ignored and that record is returned.
	// * If only a scope_id is provided, all records in that scope are returned.
	// * If only a session_id is provided, it must be a bech32 session address. All records in that session are returned.
	// * If a name is provided, either a scope_id must be provided or a session_id must be provided as a bech32 session
	// address. The record with the provided name in the provided context is returned.
	//
	// By default, the scope and sessions are not included.
	// Set include_scope and/or include_sessions to true to include the scope and/or sessions.
	Records(ctx context.Context, in *RecordsRequest, opts ...grpc.CallOption) (*RecordsResponse, error)
	// Ownership returns the scope identifiers that list the given address as either a data or value owner.
	Ownership(ctx context.Context, in *OwnershipRequest, opts ...grpc.CallOption) (*OwnershipResponse, error)
	// ValueOwnership returns the scope identifiers that list the given address as the value owner.
	ValueOwnership(ctx context.Context, in *ValueOwnershipRequest, opts ...grpc.CallOption) (*ValueOwnershipResponse, error)
	// ScopeSpecification returns a scope specification for the given specification id.
	//
	// The specification_id can either be a uuid, e.g. dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope
	// specification address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
	ScopeSpecification(ctx context.Context, in *ScopeSpecificationRequest, opts ...grpc.CallOption) (*ScopeSpecificationResponse, error)
	// ContractSpecification returns a contract specification for the given specification id.
	//
	// The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
	// specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
	// address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
	// address, then the contract specification that contains that record specification is looked up.
	//
	// By default, the record specifications for this contract specification are not included.
	// Set include_record_specs to true to include them in the result.
	ContractSpecification(ctx context.Context, in *ContractSpecificationRequest, opts ...grpc.CallOption) (*ContractSpecificationResponse, error)
	// RecordSpecificationsForContractSpecification returns the record specifications for the given input.
	//
	// The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
	// specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
	// address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
	// address, then the contract specification that contains that record specification is used.
	RecordSpecificationsForContractSpecification(ctx context.Context, in *RecordSpecificationsForContractSpecificationRequest, opts ...grpc.CallOption) (*RecordSpecificationsForContractSpecificationResponse, error)
	// RecordSpecification returns a record specification for the given input.
	RecordSpecification(ctx context.Context, in *RecordSpecificationRequest, opts ...grpc.CallOption) (*RecordSpecificationResponse, error)
	// OSLocatorParams returns all parameters for the object store locator sub module.
	OSLocatorParams(ctx context.Context, in *OSLocatorParamsRequest, opts ...grpc.CallOption) (*OSLocatorParamsResponse, error)
	// OSLocator returns an ObjectStoreLocator by its owner's address.
	OSLocator(ctx context.Context, in *OSLocatorRequest, opts ...grpc.CallOption) (*OSLocatorResponse, error)
	// OSLocatorsByURI returns all ObjectStoreLocator entries for a locator uri.
	OSLocatorsByURI(ctx context.Context, in *OSLocatorsByURIRequest, opts ...grpc.CallOption) (*OSLocatorsByURIResponse, error)
	// OSLocatorsByScope returns all ObjectStoreLocator entries for a for all signer's present in the specified scope.
	OSLocatorsByScope(ctx context.Context, in *OSLocatorsByScopeRequest, opts ...grpc.CallOption) (*OSLocatorsByScopeResponse, error)
	// OSAllLocators returns all ObjectStoreLocator entries.
	OSAllLocators(ctx context.Context, in *OSAllLocatorsRequest, opts ...grpc.CallOption) (*OSAllLocatorsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Scope(ctx context.Context, in *ScopeRequest, opts ...grpc.CallOption) (*ScopeResponse, error) {
	out := new(ScopeResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Scope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Sessions(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*SessionsResponse, error) {
	out := new(SessionsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Sessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Records(ctx context.Context, in *RecordsRequest, opts ...grpc.CallOption) (*RecordsResponse, error) {
	out := new(RecordsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Records", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ownership(ctx context.Context, in *OwnershipRequest, opts ...grpc.CallOption) (*OwnershipResponse, error) {
	out := new(OwnershipResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/Ownership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValueOwnership(ctx context.Context, in *ValueOwnershipRequest, opts ...grpc.CallOption) (*ValueOwnershipResponse, error) {
	out := new(ValueOwnershipResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ValueOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScopeSpecification(ctx context.Context, in *ScopeSpecificationRequest, opts ...grpc.CallOption) (*ScopeSpecificationResponse, error) {
	out := new(ScopeSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ScopeSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractSpecification(ctx context.Context, in *ContractSpecificationRequest, opts ...grpc.CallOption) (*ContractSpecificationResponse, error) {
	out := new(ContractSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/ContractSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecordSpecificationsForContractSpecification(ctx context.Context, in *RecordSpecificationsForContractSpecificationRequest, opts ...grpc.CallOption) (*RecordSpecificationsForContractSpecificationResponse, error) {
	out := new(RecordSpecificationsForContractSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/RecordSpecificationsForContractSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecordSpecification(ctx context.Context, in *RecordSpecificationRequest, opts ...grpc.CallOption) (*RecordSpecificationResponse, error) {
	out := new(RecordSpecificationResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/RecordSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSLocatorParams(ctx context.Context, in *OSLocatorParamsRequest, opts ...grpc.CallOption) (*OSLocatorParamsResponse, error) {
	out := new(OSLocatorParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSLocatorParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSLocator(ctx context.Context, in *OSLocatorRequest, opts ...grpc.CallOption) (*OSLocatorResponse, error) {
	out := new(OSLocatorResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSLocator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSLocatorsByURI(ctx context.Context, in *OSLocatorsByURIRequest, opts ...grpc.CallOption) (*OSLocatorsByURIResponse, error) {
	out := new(OSLocatorsByURIResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSLocatorsByURI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSLocatorsByScope(ctx context.Context, in *OSLocatorsByScopeRequest, opts ...grpc.CallOption) (*OSLocatorsByScopeResponse, error) {
	out := new(OSLocatorsByScopeResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSLocatorsByScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OSAllLocators(ctx context.Context, in *OSAllLocatorsRequest, opts ...grpc.CallOption) (*OSAllLocatorsResponse, error) {
	out := new(OSAllLocatorsResponse)
	err := c.cc.Invoke(ctx, "/provenance.metadata.v1.Query/OSAllLocators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of x/metadata module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Scope searches for a scope.
	//
	// The scope id, if provided, must either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,
	// e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if provided, must be a bech32 session address,
	// e.g. session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The record_addr, if provided, must be a
	// bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. Case doesn't
	// matter.
	//
	// Providing a session addr or record addr does not limit the sessions and records returned.
	// Those parameters are only used to find the scope.
	//
	// * If a scope id is provided, the other input is ignored and that scope is returned.
	// * Otherwise, if a session addr is provided, the record addr is ignored and the scope containing that session is
	// returned.
	// * Lastly, if a record addr is provided, the scope containing that record is returned.
	//
	// By default, sessions and records are not included.
	// Set include_sessions and/or include_records to true to include sessions and/or records.
	Scope(context.Context, *ScopeRequest) (*ScopeResponse, error)
	// Sessions searches for sessions.
	//
	// The scope id can either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
	// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can either be a uuid or session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. Case doesn't matter.
	//
	// * If only a session id is provided, and it is an address, then the scope id will be ignored and the session id used
	// to find a single session.
	// * If only a session id is provided, and it is a uuid, a bad request is returned.
	// * If only a scope id is provided, all sessions for that scope will be returned.
	// * If both a scope id and session id is provided, and the session id is a uuid, then the session in the provided
	// scope, with the provided session uuid is returned.
	// * If neither a scope id, nor a session id are provided, a bad request is returned.
	//
	// By default, the scope and records are not included.
	// Set include_scope and/or include_records to true to include the scope and/or records.
	Sessions(context.Context, *SessionsRequest) (*SessionsResponse, error)
	// Records searches for records.
	//
	// The record_addr, if provided, must be a bech32 record address, e.g.
	// record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The scope id can either be scope uuid, e.g.
	// 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,
	// the session_id can either be a uuid or session address, e.g.
	// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The name is the name of the record you're
	// interested in. Case doesn't matter.
	//
	// * If a record_addr is provided, the rest of the fields are ignored and that record is returned.
	// * If only a scope_id is provided, all records in that scope are returned.
	// * If only a session_id is provided, it must be a bech32 session address. All records in that session are returned.
	// * If a name is provided, either a scope_id must be provided or a session_id must be provided as a bech32 session
	// address. The record with the provided name in the provided context is returned.
	//
	// By default, the scope and sessions are not included.
	// Set include_scope and/or include_sessions to true to include the scope and/or sessions.
	Records(context.Context, *RecordsRequest) (*RecordsResponse, error)
	// Ownership returns the scope identifiers that list the given address as either a data or value owner.
	Ownership(context.Context, *OwnershipRequest) (*OwnershipResponse, error)
	// ValueOwnership returns the scope identifiers that list the given address as the value owner.
	ValueOwnership(context.Context, *ValueOwnershipRequest) (*ValueOwnershipResponse, error)
	// ScopeSpecification returns a scope specification for the given specification id.
	//
	// The specification_id can either be a uuid, e.g. dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope
	// specification address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
	ScopeSpecification(context.Context, *ScopeSpecificationRequest) (*ScopeSpecificationResponse, error)
	// ContractSpecification returns a contract specification for the given specification id.
	//
	// The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
	// specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
	// address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
	// address, then the contract specification that contains that record specification is looked up.
	//
	// By default, the record specifications for this contract specification are not included.
	// Set include_record_specs to true to include them in the result.
	ContractSpecification(context.Context, *ContractSpecificationRequest) (*ContractSpecificationResponse, error)
	// RecordSpecificationsForContractSpecification returns the record specifications for the given input.
	//
	// The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
	// specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
	// address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
	// address, then the contract specification that contains that record specification is used.
	RecordSpecificationsForContractSpecification(context.Context, *RecordSpecificationsForContractSpecificationRequest) (*RecordSpecificationsForContractSpecificationResponse, error)
	// RecordSpecification returns a record specification for the given input.
	RecordSpecification(context.Context, *RecordSpecificationRequest) (*RecordSpecificationResponse, error)
	// OSLocatorParams returns all parameters for the object store locator sub module.
	OSLocatorParams(context.Context, *OSLocatorParamsRequest) (*OSLocatorParamsResponse, error)
	// OSLocator returns an ObjectStoreLocator by its owner's address.
	OSLocator(context.Context, *OSLocatorRequest) (*OSLocatorResponse, error)
	// OSLocatorsByURI returns all ObjectStoreLocator entries for a locator uri.
	OSLocatorsByURI(context.Context, *OSLocatorsByURIRequest) (*OSLocatorsByURIResponse, error)
	// OSLocatorsByScope returns all ObjectStoreLocator entries for a for all signer's present in the specified scope.
	OSLocatorsByScope(context.Context, *OSLocatorsByScopeRequest) (*OSLocatorsByScopeResponse, error)
	// OSAllLocators returns all ObjectStoreLocator entries.
	OSAllLocators(context.Context, *OSAllLocatorsRequest) (*OSAllLocatorsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Scope(ctx context.Context, req *ScopeRequest) (*ScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scope not implemented")
}
func (*UnimplementedQueryServer) Sessions(ctx context.Context, req *SessionsRequest) (*SessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sessions not implemented")
}
func (*UnimplementedQueryServer) Records(ctx context.Context, req *RecordsRequest) (*RecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Records not implemented")
}
func (*UnimplementedQueryServer) Ownership(ctx context.Context, req *OwnershipRequest) (*OwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ownership not implemented")
}
func (*UnimplementedQueryServer) ValueOwnership(ctx context.Context, req *ValueOwnershipRequest) (*ValueOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValueOwnership not implemented")
}
func (*UnimplementedQueryServer) ScopeSpecification(ctx context.Context, req *ScopeSpecificationRequest) (*ScopeSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScopeSpecification not implemented")
}
func (*UnimplementedQueryServer) ContractSpecification(ctx context.Context, req *ContractSpecificationRequest) (*ContractSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractSpecification not implemented")
}
func (*UnimplementedQueryServer) RecordSpecificationsForContractSpecification(ctx context.Context, req *RecordSpecificationsForContractSpecificationRequest) (*RecordSpecificationsForContractSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordSpecificationsForContractSpecification not implemented")
}
func (*UnimplementedQueryServer) RecordSpecification(ctx context.Context, req *RecordSpecificationRequest) (*RecordSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordSpecification not implemented")
}
func (*UnimplementedQueryServer) OSLocatorParams(ctx context.Context, req *OSLocatorParamsRequest) (*OSLocatorParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSLocatorParams not implemented")
}
func (*UnimplementedQueryServer) OSLocator(ctx context.Context, req *OSLocatorRequest) (*OSLocatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSLocator not implemented")
}
func (*UnimplementedQueryServer) OSLocatorsByURI(ctx context.Context, req *OSLocatorsByURIRequest) (*OSLocatorsByURIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSLocatorsByURI not implemented")
}
func (*UnimplementedQueryServer) OSLocatorsByScope(ctx context.Context, req *OSLocatorsByScopeRequest) (*OSLocatorsByScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSLocatorsByScope not implemented")
}
func (*UnimplementedQueryServer) OSAllLocators(ctx context.Context, req *OSAllLocatorsRequest) (*OSAllLocatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSAllLocators not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Scope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Scope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Scope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Scope(ctx, req.(*ScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Sessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Sessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Sessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Sessions(ctx, req.(*SessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Records_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Records(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Records",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Records(ctx, req.(*RecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ownership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ownership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/Ownership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ownership(ctx, req.(*OwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValueOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValueOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValueOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ValueOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValueOwnership(ctx, req.(*ValueOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScopeSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopeSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScopeSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ScopeSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScopeSpecification(ctx, req.(*ScopeSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/ContractSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractSpecification(ctx, req.(*ContractSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecordSpecificationsForContractSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordSpecificationsForContractSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordSpecificationsForContractSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/RecordSpecificationsForContractSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordSpecificationsForContractSpecification(ctx, req.(*RecordSpecificationsForContractSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecordSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/RecordSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordSpecification(ctx, req.(*RecordSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSLocatorParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSLocatorParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSLocatorParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSLocatorParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSLocatorParams(ctx, req.(*OSLocatorParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSLocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSLocatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSLocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSLocator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSLocator(ctx, req.(*OSLocatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSLocatorsByURI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSLocatorsByURIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSLocatorsByURI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSLocatorsByURI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSLocatorsByURI(ctx, req.(*OSLocatorsByURIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSLocatorsByScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSLocatorsByScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSLocatorsByScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSLocatorsByScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSLocatorsByScope(ctx, req.(*OSLocatorsByScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OSAllLocators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSAllLocatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OSAllLocators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.metadata.v1.Query/OSAllLocators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OSAllLocators(ctx, req.(*OSAllLocatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.metadata.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Scope",
			Handler:    _Query_Scope_Handler,
		},
		{
			MethodName: "Sessions",
			Handler:    _Query_Sessions_Handler,
		},
		{
			MethodName: "Records",
			Handler:    _Query_Records_Handler,
		},
		{
			MethodName: "Ownership",
			Handler:    _Query_Ownership_Handler,
		},
		{
			MethodName: "ValueOwnership",
			Handler:    _Query_ValueOwnership_Handler,
		},
		{
			MethodName: "ScopeSpecification",
			Handler:    _Query_ScopeSpecification_Handler,
		},
		{
			MethodName: "ContractSpecification",
			Handler:    _Query_ContractSpecification_Handler,
		},
		{
			MethodName: "RecordSpecificationsForContractSpecification",
			Handler:    _Query_RecordSpecificationsForContractSpecification_Handler,
		},
		{
			MethodName: "RecordSpecification",
			Handler:    _Query_RecordSpecification_Handler,
		},
		{
			MethodName: "OSLocatorParams",
			Handler:    _Query_OSLocatorParams_Handler,
		},
		{
			MethodName: "OSLocator",
			Handler:    _Query_OSLocator_Handler,
		},
		{
			MethodName: "OSLocatorsByURI",
			Handler:    _Query_OSLocatorsByURI_Handler,
		},
		{
			MethodName: "OSLocatorsByScope",
			Handler:    _Query_OSLocatorsByScope_Handler,
		},
		{
			MethodName: "OSAllLocators",
			Handler:    _Query_OSAllLocators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/metadata/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ScopeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRecords {
		i--
		if m.IncludeRecords {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IncludeSessions {
		i--
		if m.IncludeSessions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.RecordAddr) > 0 {
		i -= len(m.RecordAddr)
		copy(dAtA[i:], m.RecordAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecordAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionAddr) > 0 {
		i -= len(m.SessionAddr)
		copy(dAtA[i:], m.SessionAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sessions) > 0 {
		for iNdEx := len(m.Sessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopeWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeUuid) > 0 {
		i -= len(m.ScopeUuid)
		copy(dAtA[i:], m.ScopeUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRecords {
		i--
		if m.IncludeRecords {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IncludeScope {
		i--
		if m.IncludeScope {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sessions) > 0 {
		for iNdEx := len(m.Sessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionUuid) > 0 {
		i -= len(m.SessionUuid)
		copy(dAtA[i:], m.SessionUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionUuid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ScopeUuid) > 0 {
		i -= len(m.ScopeUuid)
		copy(dAtA[i:], m.ScopeUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SessionAddr) > 0 {
		i -= len(m.SessionAddr)
		copy(dAtA[i:], m.SessionAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Session != nil {
		{
			size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeSessions {
		i--
		if m.IncludeSessions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IncludeScope {
		i--
		if m.IncludeScope {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordAddr) > 0 {
		i -= len(m.RecordAddr)
		copy(dAtA[i:], m.RecordAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecordAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sessions) > 0 {
		for iNdEx := len(m.Sessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Scope != nil {
		{
			size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionUuid) > 0 {
		i -= len(m.SessionUuid)
		copy(dAtA[i:], m.SessionUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionUuid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ScopeUuid) > 0 {
		i -= len(m.ScopeUuid)
		copy(dAtA[i:], m.ScopeUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RecordAddr) > 0 {
		i -= len(m.RecordAddr)
		copy(dAtA[i:], m.RecordAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecordAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SessionAddr) > 0 {
		i -= len(m.SessionAddr)
		copy(dAtA[i:], m.SessionAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScopeAddr) > 0 {
		i -= len(m.ScopeAddr)
		copy(dAtA[i:], m.ScopeAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OwnershipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnershipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnershipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.ScopeUuids) > 0 {
		for iNdEx := len(m.ScopeUuids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ScopeUuids[iNdEx])
			copy(dAtA[i:], m.ScopeUuids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValueOwnershipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueOwnershipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueOwnershipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValueOwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueOwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueOwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.ScopeUuids) > 0 {
		for iNdEx := len(m.ScopeUuids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ScopeUuids[iNdEx])
			copy(dAtA[i:], m.ScopeUuids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeUuids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ScopeSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecificationId) > 0 {
		i -= len(m.SpecificationId)
		copy(dAtA[i:], m.SpecificationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecificationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScopeSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.SpecificationUuid) > 0 {
		i -= len(m.SpecificationUuid)
		copy(dAtA[i:], m.SpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecificationUuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.ScopeSpecification != nil {
		{
			size, err := m.ScopeSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRecordSpecs {
		i--
		if m.IncludeRecordSpecs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.SpecificationId) > 0 {
		i -= len(m.SpecificationId)
		copy(dAtA[i:], m.SpecificationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecificationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.RecordSpecifications) > 0 {
		for iNdEx := len(m.RecordSpecifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordSpecifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ContractSpecificationUuid) > 0 {
		i -= len(m.ContractSpecificationUuid)
		copy(dAtA[i:], m.ContractSpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractSpecificationUuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.ContractSpecification != nil {
		{
			size, err := m.ContractSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationsForContractSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationsForContractSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationsForContractSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecificationId) > 0 {
		i -= len(m.SpecificationId)
		copy(dAtA[i:], m.SpecificationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecificationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationsForContractSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationsForContractSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationsForContractSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.ContractSpecificationAddr) > 0 {
		i -= len(m.ContractSpecificationAddr)
		copy(dAtA[i:], m.ContractSpecificationAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractSpecificationAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractSpecificationUuid) > 0 {
		i -= len(m.ContractSpecificationUuid)
		copy(dAtA[i:], m.ContractSpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractSpecificationUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecordSpecifications) > 0 {
		for iNdEx := len(m.RecordSpecifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordSpecifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpecificationId) > 0 {
		i -= len(m.SpecificationId)
		copy(dAtA[i:], m.SpecificationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecificationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordSpecificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSpecificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSpecificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.ContractSpecificationAddr) > 0 {
		i -= len(m.ContractSpecificationAddr)
		copy(dAtA[i:], m.ContractSpecificationAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractSpecificationAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractSpecificationUuid) > 0 {
		i -= len(m.ContractSpecificationUuid)
		copy(dAtA[i:], m.ContractSpecificationUuid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractSpecificationUuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.RecordSpecification != nil {
		{
			size, err := m.RecordSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OSLocatorParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OSLocatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if m.Locator != nil {
		{
			size, err := m.Locator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorsByURIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorsByURIRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorsByURIRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorsByURIResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorsByURIResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorsByURIResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Locators) > 0 {
		for iNdEx := len(m.Locators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorsByScopeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorsByScopeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorsByScopeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OSLocatorsByScopeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSLocatorsByScopeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSLocatorsByScopeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Locators) > 0 {
		for iNdEx := len(m.Locators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OSAllLocatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSAllLocatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSAllLocatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *OSAllLocatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSAllLocatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSAllLocatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.Locators) > 0 {
		for iNdEx := len(m.Locators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SessionAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecordAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeSessions {
		n += 2
	}
	if m.IncludeRecords {
		n += 2
	}
	return n
}

func (m *ScopeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopeWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ScopeUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SessionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeScope {
		n += 2
	}
	if m.IncludeRecords {
		n += 2
	}
	return n
}

func (m *SessionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SessionWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SessionAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ScopeUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SessionUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeScope {
		n += 2
	}
	if m.IncludeSessions {
		n += 2
	}
	return n
}

func (m *RecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scope != nil {
		l = m.Scope.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ScopeAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SessionAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecordAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ScopeUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SessionUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OwnershipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScopeUuids) > 0 {
		for _, s := range m.ScopeUuids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ValueOwnershipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ValueOwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScopeUuids) > 0 {
		for _, s := range m.ScopeUuids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopeSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ScopeSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScopeSpecification != nil {
		l = m.ScopeSpecification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ContractSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludeRecordSpecs {
		n += 2
	}
	return n
}

func (m *ContractSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractSpecification != nil {
		l = m.ContractSpecification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractSpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.RecordSpecifications) > 0 {
		for _, e := range m.RecordSpecifications {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationsForContractSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationsForContractSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecordSpecifications) > 0 {
		for _, e := range m.RecordSpecifications {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.ContractSpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecordSpecificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordSpecification != nil {
		l = m.RecordSpecification.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractSpecificationUuid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractSpecificationAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OSLocatorParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Locator != nil {
		l = m.Locator.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorsByURIRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorsByURIResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locators) > 0 {
		for _, e := range m.Locators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorsByScopeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSLocatorsByScopeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locators) > 0 {
		for _, e := range m.Locators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSAllLocatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OSAllLocatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locators) > 0 {
		for _, e := range m.Locators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &QueryParamsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSessions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeSessions = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRecords", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRecords = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &ScopeWrapper{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &SessionWrapper{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &RecordWrapper{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ScopeRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &Scope{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeScope", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeScope = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRecords", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRecords = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &ScopeWrapper{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &SessionWrapper{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &RecordWrapper{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &SessionsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeScope", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeScope = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSessions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeSessions = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scope == nil {
				m.Scope = &ScopeWrapper{}
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &SessionWrapper{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &RecordWrapper{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RecordsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnershipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnershipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnershipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuids = append(m.ScopeUuids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &OwnershipRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueOwnershipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueOwnershipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueOwnershipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueOwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueOwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueOwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeUuids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeUuids = append(m.ScopeUuids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ValueOwnershipRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeSpecification == nil {
				m.ScopeSpecification = &ScopeSpecification{}
			}
			if err := m.ScopeSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ScopeSpecificationRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRecordSpecs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRecordSpecs = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractSpecification == nil {
				m.ContractSpecification = &ContractSpecification{}
			}
			if err := m.ContractSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecifications = append(m.RecordSpecifications, &RecordSpecification{})
			if err := m.RecordSpecifications[len(m.RecordSpecifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ContractSpecificationRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationsForContractSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationsForContractSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationsForContractSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationsForContractSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationsForContractSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationsForContractSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSpecifications = append(m.RecordSpecifications, &RecordSpecification{})
			if err := m.RecordSpecifications[len(m.RecordSpecifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RecordSpecificationsForContractSpecificationRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSpecificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSpecificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSpecificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordSpecification == nil {
				m.RecordSpecification = &RecordSpecification{}
			}
			if err := m.RecordSpecification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSpecificationAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSpecificationAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RecordSpecificationRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &OSLocatorParamsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locator == nil {
				m.Locator = &ObjectStoreLocator{}
			}
			if err := m.Locator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &OSLocatorRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorsByURIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorsByURIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorsByURIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorsByURIResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorsByURIResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorsByURIResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locators = append(m.Locators, ObjectStoreLocator{})
			if err := m.Locators[len(m.Locators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &OSLocatorsByURIRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorsByScopeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorsByScopeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorsByScopeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSLocatorsByScopeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSLocatorsByScopeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSLocatorsByScopeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locators = append(m.Locators, ObjectStoreLocator{})
			if err := m.Locators[len(m.Locators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &OSLocatorsByScopeRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSAllLocatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSAllLocatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSAllLocatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSAllLocatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSAllLocatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSAllLocatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locators = append(m.Locators, ObjectStoreLocator{})
			if err := m.Locators[len(m.Locators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &OSAllLocatorsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
