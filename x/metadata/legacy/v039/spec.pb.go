// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/metadata/v0/spec.proto

package v039

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DefinitionSpecType int32

const (
	DefinitionSpecType_DEFINITION_SPEC_TYPE_UNKNOWN   DefinitionSpecType = 0
	DefinitionSpecType_DEFINITION_SPEC_TYPE_PROPOSED  DefinitionSpecType = 1
	DefinitionSpecType_DEFINITION_SPEC_TYPE_FACT      DefinitionSpecType = 2
	DefinitionSpecType_DEFINITION_SPEC_TYPE_FACT_LIST DefinitionSpecType = 3
)

var DefinitionSpecType_name = map[int32]string{
	0: "DEFINITION_SPEC_TYPE_UNKNOWN",
	1: "DEFINITION_SPEC_TYPE_PROPOSED",
	2: "DEFINITION_SPEC_TYPE_FACT",
	3: "DEFINITION_SPEC_TYPE_FACT_LIST",
}

var DefinitionSpecType_value = map[string]int32{
	"DEFINITION_SPEC_TYPE_UNKNOWN":   0,
	"DEFINITION_SPEC_TYPE_PROPOSED":  1,
	"DEFINITION_SPEC_TYPE_FACT":      2,
	"DEFINITION_SPEC_TYPE_FACT_LIST": 3,
}

func (x DefinitionSpecType) String() string {
	return proto.EnumName(DefinitionSpecType_name, int32(x))
}

func (DefinitionSpecType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_60d9243ecc628e4f, []int{0}
}

type DefinitionSpec struct {
	Name             string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ResourceLocation *Location          `protobuf:"bytes,2,opt,name=resource_location,json=resourceLocation,proto3" json:"resource_location,omitempty"`
	Signature        *Signature         `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Type             DefinitionSpecType `protobuf:"varint,4,opt,name=type,proto3,enum=spec.DefinitionSpecType" json:"type,omitempty"`
}

func (m *DefinitionSpec) Reset()         { *m = DefinitionSpec{} }
func (m *DefinitionSpec) String() string { return proto.CompactTextString(m) }
func (*DefinitionSpec) ProtoMessage()    {}
func (*DefinitionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_60d9243ecc628e4f, []int{0}
}
func (m *DefinitionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefinitionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefinitionSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefinitionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefinitionSpec.Merge(m, src)
}
func (m *DefinitionSpec) XXX_Size() int {
	return m.Size()
}
func (m *DefinitionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DefinitionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DefinitionSpec proto.InternalMessageInfo

func (m *DefinitionSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DefinitionSpec) GetResourceLocation() *Location {
	if m != nil {
		return m.ResourceLocation
	}
	return nil
}

func (m *DefinitionSpec) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *DefinitionSpec) GetType() DefinitionSpecType {
	if m != nil {
		return m.Type
	}
	return DefinitionSpecType_DEFINITION_SPEC_TYPE_UNKNOWN
}

type ContractSpec struct {
	Definition         *DefinitionSpec      `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
	InputSpecs         []*DefinitionSpec    `protobuf:"bytes,2,rep,name=input_specs,json=inputSpecs,proto3" json:"input_specs,omitempty"`
	PartiesInvolved    []PartyType          `protobuf:"varint,3,rep,packed,name=parties_involved,json=partiesInvolved,proto3,enum=types.PartyType" json:"parties_involved,omitempty"`
	ConditionSpecs     []*ConditionSpec     `protobuf:"bytes,4,rep,name=condition_specs,json=conditionSpecs,proto3" json:"condition_specs,omitempty"`
	ConsiderationSpecs []*ConsiderationSpec `protobuf:"bytes,5,rep,name=consideration_specs,json=considerationSpecs,proto3" json:"consideration_specs,omitempty"`
}

func (m *ContractSpec) Reset()         { *m = ContractSpec{} }
func (m *ContractSpec) String() string { return proto.CompactTextString(m) }
func (*ContractSpec) ProtoMessage()    {}
func (*ContractSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_60d9243ecc628e4f, []int{1}
}
func (m *ContractSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractSpec.Merge(m, src)
}
func (m *ContractSpec) XXX_Size() int {
	return m.Size()
}
func (m *ContractSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ContractSpec proto.InternalMessageInfo

func (m *ContractSpec) GetDefinition() *DefinitionSpec {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (m *ContractSpec) GetInputSpecs() []*DefinitionSpec {
	if m != nil {
		return m.InputSpecs
	}
	return nil
}

func (m *ContractSpec) GetPartiesInvolved() []PartyType {
	if m != nil {
		return m.PartiesInvolved
	}
	return nil
}

func (m *ContractSpec) GetConditionSpecs() []*ConditionSpec {
	if m != nil {
		return m.ConditionSpecs
	}
	return nil
}

func (m *ContractSpec) GetConsiderationSpecs() []*ConsiderationSpec {
	if m != nil {
		return m.ConsiderationSpecs
	}
	return nil
}

type ConditionSpec struct {
	FuncName   string            `protobuf:"bytes,1,opt,name=func_name,json=funcName,proto3" json:"func_name,omitempty"`
	InputSpecs []*DefinitionSpec `protobuf:"bytes,2,rep,name=input_specs,json=inputSpecs,proto3" json:"input_specs,omitempty"`
	OutputSpec *OutputSpec       `protobuf:"bytes,3,opt,name=output_spec,json=outputSpec,proto3" json:"output_spec,omitempty"`
}

func (m *ConditionSpec) Reset()         { *m = ConditionSpec{} }
func (m *ConditionSpec) String() string { return proto.CompactTextString(m) }
func (*ConditionSpec) ProtoMessage()    {}
func (*ConditionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_60d9243ecc628e4f, []int{2}
}
func (m *ConditionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConditionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConditionSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConditionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionSpec.Merge(m, src)
}
func (m *ConditionSpec) XXX_Size() int {
	return m.Size()
}
func (m *ConditionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionSpec proto.InternalMessageInfo

func (m *ConditionSpec) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

func (m *ConditionSpec) GetInputSpecs() []*DefinitionSpec {
	if m != nil {
		return m.InputSpecs
	}
	return nil
}

func (m *ConditionSpec) GetOutputSpec() *OutputSpec {
	if m != nil {
		return m.OutputSpec
	}
	return nil
}

type ConsiderationSpec struct {
	FuncName string `protobuf:"bytes,1,opt,name=func_name,json=funcName,proto3" json:"func_name,omitempty"`
	// Invoking party
	ResponsibleParty PartyType         `protobuf:"varint,2,opt,name=responsible_party,json=responsibleParty,proto3,enum=types.PartyType" json:"responsible_party,omitempty"`
	InputSpecs       []*DefinitionSpec `protobuf:"bytes,3,rep,name=input_specs,json=inputSpecs,proto3" json:"input_specs,omitempty"`
	OutputSpec       *OutputSpec       `protobuf:"bytes,4,opt,name=output_spec,json=outputSpec,proto3" json:"output_spec,omitempty"`
}

func (m *ConsiderationSpec) Reset()         { *m = ConsiderationSpec{} }
func (m *ConsiderationSpec) String() string { return proto.CompactTextString(m) }
func (*ConsiderationSpec) ProtoMessage()    {}
func (*ConsiderationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_60d9243ecc628e4f, []int{3}
}
func (m *ConsiderationSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsiderationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsiderationSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsiderationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsiderationSpec.Merge(m, src)
}
func (m *ConsiderationSpec) XXX_Size() int {
	return m.Size()
}
func (m *ConsiderationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsiderationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ConsiderationSpec proto.InternalMessageInfo

func (m *ConsiderationSpec) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

func (m *ConsiderationSpec) GetResponsibleParty() PartyType {
	if m != nil {
		return m.ResponsibleParty
	}
	return PartyType_PARTY_TYPE_UNKNOWN
}

func (m *ConsiderationSpec) GetInputSpecs() []*DefinitionSpec {
	if m != nil {
		return m.InputSpecs
	}
	return nil
}

func (m *ConsiderationSpec) GetOutputSpec() *OutputSpec {
	if m != nil {
		return m.OutputSpec
	}
	return nil
}

type OutputSpec struct {
	Spec *DefinitionSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *OutputSpec) Reset()         { *m = OutputSpec{} }
func (m *OutputSpec) String() string { return proto.CompactTextString(m) }
func (*OutputSpec) ProtoMessage()    {}
func (*OutputSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_60d9243ecc628e4f, []int{4}
}
func (m *OutputSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutputSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutputSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutputSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputSpec.Merge(m, src)
}
func (m *OutputSpec) XXX_Size() int {
	return m.Size()
}
func (m *OutputSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputSpec.DiscardUnknown(m)
}

var xxx_messageInfo_OutputSpec proto.InternalMessageInfo

func (m *OutputSpec) GetSpec() *DefinitionSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func init() {
	proto.RegisterEnum("spec.DefinitionSpecType", DefinitionSpecType_name, DefinitionSpecType_value)
	proto.RegisterType((*DefinitionSpec)(nil), "spec.DefinitionSpec")
	proto.RegisterType((*ContractSpec)(nil), "spec.ContractSpec")
	proto.RegisterType((*ConditionSpec)(nil), "spec.ConditionSpec")
	proto.RegisterType((*ConsiderationSpec)(nil), "spec.ConsiderationSpec")
	proto.RegisterType((*OutputSpec)(nil), "spec.OutputSpec")
}

func init() { proto.RegisterFile("provenance/metadata/v0/spec.proto", fileDescriptor_60d9243ecc628e4f) }

var fileDescriptor_60d9243ecc628e4f = []byte{
	// 600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0xb3, 0x49, 0xbe, 0x4f, 0x74, 0x02, 0xa9, 0xbb, 0x45, 0xc2, 0x05, 0x6a, 0xa5, 0x39,
	0x45, 0x08, 0xec, 0xd2, 0x02, 0x12, 0x50, 0x0e, 0x90, 0xa6, 0x22, 0xa2, 0x72, 0x2c, 0x27, 0x08,
	0xc1, 0xc5, 0xda, 0x6e, 0xb6, 0xc5, 0x52, 0xba, 0x6b, 0xec, 0xb5, 0x45, 0xde, 0x82, 0x13, 0x27,
	0x1e, 0xa6, 0x47, 0x8e, 0x3d, 0xc2, 0x0d, 0xb5, 0x2f, 0x82, 0xbc, 0x89, 0x63, 0xb7, 0x4d, 0x2b,
	0xd4, 0xdb, 0x78, 0xe6, 0x37, 0x33, 0xfb, 0x5f, 0xcf, 0x0e, 0xac, 0x05, 0xa1, 0x48, 0x18, 0x27,
	0x9c, 0x32, 0xeb, 0x90, 0x49, 0x32, 0x24, 0x92, 0x58, 0xc9, 0xba, 0x15, 0x05, 0x8c, 0x9a, 0x41,
	0x28, 0xa4, 0xc0, 0xd5, 0xd4, 0xbe, 0xdb, 0xbc, 0x04, 0x94, 0xe3, 0x80, 0x45, 0x13, 0xb2, 0x79,
	0x84, 0xa0, 0xbe, 0xcd, 0xf6, 0x7d, 0xee, 0x4b, 0x5f, 0xf0, 0x7e, 0xc0, 0x28, 0xc6, 0x50, 0xe5,
	0xe4, 0x90, 0xe9, 0xa8, 0x81, 0x5a, 0x0b, 0xae, 0xb2, 0xf1, 0x16, 0x2c, 0x85, 0x2c, 0x12, 0x71,
	0x48, 0x99, 0x37, 0x12, 0x94, 0xa4, 0xb0, 0x5e, 0x6e, 0xa0, 0x56, 0x6d, 0x63, 0xd1, 0x9c, 0xd4,
	0xdb, 0x9d, 0xba, 0x5d, 0x2d, 0x23, 0x33, 0x0f, 0x36, 0x61, 0x21, 0xf2, 0x0f, 0x38, 0x91, 0x71,
	0xc8, 0xf4, 0x8a, 0xca, 0xd2, 0xa6, 0x59, 0xfd, 0xcc, 0xef, 0xe6, 0x08, 0x7e, 0x08, 0xd5, 0x34,
	0xaa, 0x57, 0x1b, 0xa8, 0x55, 0xdf, 0xd0, 0x4d, 0xa5, 0xec, 0xec, 0x29, 0x07, 0xe3, 0x80, 0xb9,
	0x8a, 0x6a, 0x1e, 0x95, 0xe1, 0x66, 0x5b, 0x70, 0x19, 0x12, 0x2a, 0x95, 0x80, 0x27, 0x00, 0xc3,
	0x19, 0xac, 0x64, 0xd4, 0x36, 0x6e, 0xcf, 0x2b, 0xe2, 0x16, 0x38, 0xfc, 0x14, 0x6a, 0x3e, 0x0f,
	0x62, 0xe9, 0xa5, 0x60, 0xa4, 0x97, 0x1b, 0x95, 0xcb, 0xd3, 0x14, 0x98, 0x9a, 0x11, 0x7e, 0x09,
	0x5a, 0x40, 0x42, 0xe9, 0xb3, 0xc8, 0xf3, 0x79, 0x22, 0x46, 0x09, 0x1b, 0xea, 0x95, 0x46, 0xa5,
	0x55, 0x9f, 0x49, 0x74, 0x48, 0x28, 0xc7, 0xea, 0xbc, 0x8b, 0x53, 0xb2, 0x3b, 0x05, 0xf1, 0x16,
	0x2c, 0x52, 0xc1, 0x87, 0xaa, 0xf2, 0xb4, 0x6f, 0x55, 0xf5, 0x5d, 0x9e, 0xf4, 0x6d, 0x67, 0x41,
	0xd5, 0xb6, 0x4e, 0x8b, 0x9f, 0x11, 0x7e, 0x0b, 0xcb, 0x54, 0xf0, 0xc8, 0x1f, 0xb2, 0x90, 0x14,
	0x2a, 0xfc, 0xa7, 0x2a, 0xdc, 0x99, 0x55, 0xc8, 0x01, 0x55, 0x05, 0xd3, 0xf3, 0xae, 0xa8, 0xf9,
	0x1d, 0xc1, 0xad, 0x33, 0xbd, 0xf0, 0x3d, 0x58, 0xd8, 0x8f, 0x39, 0xf5, 0x0a, 0x93, 0x70, 0x23,
	0x75, 0xd8, 0xe9, 0x34, 0x5c, 0xf3, 0xaa, 0x1e, 0x43, 0x4d, 0xc4, 0x32, 0xcb, 0x9b, 0x0d, 0x82,
	0x4a, 0xeb, 0xa9, 0xc0, 0x24, 0x45, 0xcc, 0xec, 0xe6, 0x6f, 0x04, 0x4b, 0x17, 0x24, 0x5c, 0x7d,
	0xb8, 0x57, 0x6a, 0x54, 0x83, 0x34, 0x69, 0x6f, 0xc4, 0xbc, 0xf4, 0xca, 0xc7, 0x6a, 0x54, 0xe7,
	0xfd, 0x11, 0xad, 0x80, 0x2a, 0xef, 0x79, 0x6d, 0x95, 0xeb, 0x69, 0xab, 0xfe, 0x83, 0xb6, 0x67,
	0x00, 0x79, 0x04, 0xb7, 0x40, 0x3d, 0xda, 0x2b, 0xc7, 0x55, 0x11, 0x0f, 0x7e, 0x20, 0xc0, 0x17,
	0x1f, 0x03, 0x6e, 0xc0, 0xfd, 0xed, 0xce, 0x4e, 0xd7, 0xee, 0x0e, 0xba, 0x3d, 0xdb, 0xeb, 0x3b,
	0x9d, 0xb6, 0x37, 0xf8, 0xe8, 0x74, 0xbc, 0xf7, 0xf6, 0x3b, 0xbb, 0xf7, 0xc1, 0xd6, 0x4a, 0x78,
	0x0d, 0x56, 0xe7, 0x12, 0x8e, 0xdb, 0x73, 0x7a, 0xfd, 0xce, 0xb6, 0x86, 0xf0, 0x2a, 0xac, 0xcc,
	0x45, 0x76, 0x5e, 0xb7, 0x07, 0x5a, 0x19, 0x37, 0xc1, 0xb8, 0x34, 0xec, 0xed, 0x76, 0xfb, 0x03,
	0xad, 0xf2, 0xe6, 0xcb, 0xcf, 0x13, 0x03, 0x1d, 0x9f, 0x18, 0xe8, 0xcf, 0x89, 0x81, 0xbe, 0x9d,
	0x1a, 0xa5, 0xe3, 0x53, 0xa3, 0xf4, 0xeb, 0xd4, 0x28, 0xc1, 0x8a, 0x2f, 0xcc, 0x7c, 0x25, 0x99,
	0xd9, 0x4a, 0x32, 0x93, 0x75, 0x07, 0x7d, 0x7a, 0x71, 0xe0, 0xcb, 0xcf, 0xf1, 0x9e, 0x49, 0xc5,
	0xa1, 0x95, 0x43, 0x8f, 0x7c, 0x51, 0xf8, 0xb2, 0xbe, 0xe6, 0x7b, 0x6c, 0xc4, 0x0e, 0x08, 0x1d,
	0x5b, 0xc9, 0xfa, 0xe6, 0xf3, 0xbd, 0xff, 0xd5, 0x2e, 0xdb, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0xd7, 0x26, 0x3c, 0x66, 0x1a, 0x05, 0x00, 0x00,
}

func (m *DefinitionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefinitionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefinitionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ResourceLocation != nil {
		{
			size, err := m.ResourceLocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsiderationSpecs) > 0 {
		for iNdEx := len(m.ConsiderationSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConsiderationSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ConditionSpecs) > 0 {
		for iNdEx := len(m.ConditionSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConditionSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PartiesInvolved) > 0 {
		dAtA4 := make([]byte, len(m.PartiesInvolved)*10)
		var j3 int
		for _, num := range m.PartiesInvolved {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSpec(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InputSpecs) > 0 {
		for iNdEx := len(m.InputSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InputSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Definition != nil {
		{
			size, err := m.Definition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConditionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConditionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConditionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutputSpec != nil {
		{
			size, err := m.OutputSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InputSpecs) > 0 {
		for iNdEx := len(m.InputSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InputSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FuncName) > 0 {
		i -= len(m.FuncName)
		copy(dAtA[i:], m.FuncName)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.FuncName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsiderationSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsiderationSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsiderationSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutputSpec != nil {
		{
			size, err := m.OutputSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.InputSpecs) > 0 {
		for iNdEx := len(m.InputSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InputSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ResponsibleParty != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.ResponsibleParty))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FuncName) > 0 {
		i -= len(m.FuncName)
		copy(dAtA[i:], m.FuncName)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.FuncName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutputSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutputSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutputSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpec(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DefinitionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.ResourceLocation != nil {
		l = m.ResourceLocation.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSpec(uint64(m.Type))
	}
	return n
}

func (m *ContractSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Definition != nil {
		l = m.Definition.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if len(m.InputSpecs) > 0 {
		for _, e := range m.InputSpecs {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if len(m.PartiesInvolved) > 0 {
		l = 0
		for _, e := range m.PartiesInvolved {
			l += sovSpec(uint64(e))
		}
		n += 1 + sovSpec(uint64(l)) + l
	}
	if len(m.ConditionSpecs) > 0 {
		for _, e := range m.ConditionSpecs {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if len(m.ConsiderationSpecs) > 0 {
		for _, e := range m.ConsiderationSpecs {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	return n
}

func (m *ConditionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FuncName)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if len(m.InputSpecs) > 0 {
		for _, e := range m.InputSpecs {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if m.OutputSpec != nil {
		l = m.OutputSpec.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *ConsiderationSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FuncName)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.ResponsibleParty != 0 {
		n += 1 + sovSpec(uint64(m.ResponsibleParty))
	}
	if len(m.InputSpecs) > 0 {
		for _, e := range m.InputSpecs {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if m.OutputSpec != nil {
		l = m.OutputSpec.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *OutputSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func sovSpec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpec(x uint64) (n int) {
	return sovSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DefinitionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefinitionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefinitionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceLocation == nil {
				m.ResourceLocation = &Location{}
			}
			if err := m.ResourceLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &Signature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DefinitionSpecType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Definition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Definition == nil {
				m.Definition = &DefinitionSpec{}
			}
			if err := m.Definition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputSpecs = append(m.InputSpecs, &DefinitionSpec{})
			if err := m.InputSpecs[len(m.InputSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v PartyType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PartyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PartiesInvolved = append(m.PartiesInvolved, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSpec
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSpec
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.PartiesInvolved) == 0 {
					m.PartiesInvolved = make([]PartyType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PartyType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PartyType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PartiesInvolved = append(m.PartiesInvolved, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PartiesInvolved", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConditionSpecs = append(m.ConditionSpecs, &ConditionSpec{})
			if err := m.ConditionSpecs[len(m.ConditionSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsiderationSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsiderationSpecs = append(m.ConsiderationSpecs, &ConsiderationSpec{})
			if err := m.ConsiderationSpecs[len(m.ConsiderationSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConditionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConditionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConditionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuncName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputSpecs = append(m.InputSpecs, &DefinitionSpec{})
			if err := m.InputSpecs[len(m.InputSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputSpec == nil {
				m.OutputSpec = &OutputSpec{}
			}
			if err := m.OutputSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsiderationSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsiderationSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsiderationSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuncName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsibleParty", wireType)
			}
			m.ResponsibleParty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponsibleParty |= PartyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputSpecs = append(m.InputSpecs, &DefinitionSpec{})
			if err := m.InputSpecs[len(m.InputSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputSpec == nil {
				m.OutputSpec = &OutputSpec{}
			}
			if err := m.OutputSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutputSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutputSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutputSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &DefinitionSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpec = fmt.Errorf("proto: unexpected end of group")
)
