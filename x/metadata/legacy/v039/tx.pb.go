// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/metadata/v0/tx.proto

package v039

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgMemorializeContractRequest is a request from a P8e execution environment to record results of a contract
type MsgMemorializeContractRequest struct {
	// The scope of the object being modified on blockchain.
	ScopeId string `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`
	// The uuid of the contract execution.
	GroupId string `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// Unique identifier for determining contract/group execution instance
	ExecutionId string `protobuf:"bytes,3,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// The executed contract.
	Contract Contract `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract"`
	// The contract signatures
	Signatures SignatureSet `protobuf:"bytes,5,opt,name=signatures,proto3" json:"signatures"`
	// ID of the scope snapshot reference for executing
	ScopeRefID string `protobuf:"bytes,6,opt,name=ScopeRefID,proto3" json:"ScopeRefID,omitempty"`
	// The address of the notary (ie the broadcaster of this message).
	Notary string `protobuf:"bytes,7,opt,name=notary,proto3" json:"notary,omitempty"`
}

func (m *MsgMemorializeContractRequest) Reset()         { *m = MsgMemorializeContractRequest{} }
func (m *MsgMemorializeContractRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMemorializeContractRequest) ProtoMessage()    {}
func (*MsgMemorializeContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67a0f042cc97a288, []int{0}
}
func (m *MsgMemorializeContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMemorializeContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMemorializeContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMemorializeContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMemorializeContractRequest.Merge(m, src)
}
func (m *MsgMemorializeContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMemorializeContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMemorializeContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMemorializeContractRequest proto.InternalMessageInfo

func (m *MsgMemorializeContractRequest) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *MsgMemorializeContractRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *MsgMemorializeContractRequest) GetExecutionId() string {
	if m != nil {
		return m.ExecutionId
	}
	return ""
}

func (m *MsgMemorializeContractRequest) GetContract() Contract {
	if m != nil {
		return m.Contract
	}
	return Contract{}
}

func (m *MsgMemorializeContractRequest) GetSignatures() SignatureSet {
	if m != nil {
		return m.Signatures
	}
	return SignatureSet{}
}

func (m *MsgMemorializeContractRequest) GetScopeRefID() string {
	if m != nil {
		return m.ScopeRefID
	}
	return ""
}

func (m *MsgMemorializeContractRequest) GetNotary() string {
	if m != nil {
		return m.Notary
	}
	return ""
}

// MemorializeContractResponse from a contract execution memorialization request
type MemorializeContractResponse struct {
}

func (m *MemorializeContractResponse) Reset()         { *m = MemorializeContractResponse{} }
func (m *MemorializeContractResponse) String() string { return proto.CompactTextString(m) }
func (*MemorializeContractResponse) ProtoMessage()    {}
func (*MemorializeContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67a0f042cc97a288, []int{1}
}
func (m *MemorializeContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemorializeContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemorializeContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemorializeContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemorializeContractResponse.Merge(m, src)
}
func (m *MemorializeContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MemorializeContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MemorializeContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MemorializeContractResponse proto.InternalMessageInfo

// MsgChangeOwnershipRequest records the result of a change ownership p8e contract execution
type MsgChangeOwnershipRequest struct {
	// The scope of the object being modified on blockchain.
	ScopeId string `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`
	// The uuid of the contract execution.
	GroupId string `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// Unique identifier for determining contract/group execution instance
	ExecutionId string `protobuf:"bytes,3,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// The recitals to use for the scope parties
	Recitals Recitals `protobuf:"bytes,4,opt,name=recitals,proto3" json:"recitals"`
	// The executed contract.
	Contract Contract `protobuf:"bytes,5,opt,name=contract,proto3" json:"contract"`
	// The contract signatures
	Signatures SignatureSet `protobuf:"bytes,6,opt,name=signatures,proto3" json:"signatures"`
	// The address of the notary (ie the broadcaster of this message).
	Notary string `protobuf:"bytes,7,opt,name=notary,proto3" json:"notary,omitempty"`
}

func (m *MsgChangeOwnershipRequest) Reset()         { *m = MsgChangeOwnershipRequest{} }
func (m *MsgChangeOwnershipRequest) String() string { return proto.CompactTextString(m) }
func (*MsgChangeOwnershipRequest) ProtoMessage()    {}
func (*MsgChangeOwnershipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67a0f042cc97a288, []int{2}
}
func (m *MsgChangeOwnershipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeOwnershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeOwnershipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeOwnershipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeOwnershipRequest.Merge(m, src)
}
func (m *MsgChangeOwnershipRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeOwnershipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeOwnershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeOwnershipRequest proto.InternalMessageInfo

func (m *MsgChangeOwnershipRequest) GetScopeId() string {
	if m != nil {
		return m.ScopeId
	}
	return ""
}

func (m *MsgChangeOwnershipRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *MsgChangeOwnershipRequest) GetExecutionId() string {
	if m != nil {
		return m.ExecutionId
	}
	return ""
}

func (m *MsgChangeOwnershipRequest) GetRecitals() Recitals {
	if m != nil {
		return m.Recitals
	}
	return Recitals{}
}

func (m *MsgChangeOwnershipRequest) GetContract() Contract {
	if m != nil {
		return m.Contract
	}
	return Contract{}
}

func (m *MsgChangeOwnershipRequest) GetSignatures() SignatureSet {
	if m != nil {
		return m.Signatures
	}
	return SignatureSet{}
}

func (m *MsgChangeOwnershipRequest) GetNotary() string {
	if m != nil {
		return m.Notary
	}
	return ""
}

// ChangeOwnershipResponse from a contract execution ownership change request
type ChangeOwnershipResponse struct {
}

func (m *ChangeOwnershipResponse) Reset()         { *m = ChangeOwnershipResponse{} }
func (m *ChangeOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*ChangeOwnershipResponse) ProtoMessage()    {}
func (*ChangeOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67a0f042cc97a288, []int{3}
}
func (m *ChangeOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeOwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeOwnershipResponse.Merge(m, src)
}
func (m *ChangeOwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChangeOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeOwnershipResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgMemorializeContractRequest)(nil), "tx.MsgMemorializeContractRequest")
	proto.RegisterType((*MemorializeContractResponse)(nil), "tx.MemorializeContractResponse")
	proto.RegisterType((*MsgChangeOwnershipRequest)(nil), "tx.MsgChangeOwnershipRequest")
	proto.RegisterType((*ChangeOwnershipResponse)(nil), "tx.ChangeOwnershipResponse")
}

func init() { proto.RegisterFile("provenance/metadata/v0/tx.proto", fileDescriptor_67a0f042cc97a288) }

var fileDescriptor_67a0f042cc97a288 = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x9b, 0x6e, 0xeb, 0x86, 0x87, 0x84, 0xe4, 0x21, 0x48, 0x3b, 0x35, 0xdd, 0x2a, 0x21,
	0xed, 0x42, 0x52, 0x6d, 0x5c, 0xc6, 0x71, 0xe3, 0xd2, 0x43, 0x04, 0x4a, 0x4f, 0x70, 0x41, 0x5e,
	0xf2, 0xe1, 0x5a, 0x6a, 0xed, 0xcc, 0x76, 0x42, 0xca, 0x53, 0xf0, 0x0a, 0x3c, 0x01, 0x07, 0x5e,
	0x62, 0xc7, 0x1d, 0x39, 0x21, 0xd4, 0xbe, 0x08, 0x8a, 0x93, 0x74, 0x85, 0x36, 0x48, 0x70, 0xd8,
	0x2d, 0x9f, 0xff, 0xff, 0xcf, 0xfe, 0xfc, 0x73, 0xfe, 0xa8, 0x17, 0x4b, 0x91, 0x02, 0x27, 0x3c,
	0x04, 0x6f, 0x0a, 0x9a, 0x44, 0x44, 0x13, 0x2f, 0x1d, 0x78, 0x3a, 0x73, 0x63, 0x29, 0xb4, 0xc0,
	0x4d, 0x9d, 0x75, 0x1e, 0x53, 0x41, 0x85, 0x29, 0xbd, 0xfc, 0xab, 0x50, 0x3a, 0xcf, 0x6a, 0x5a,
	0x43, 0xc1, 0xb5, 0x24, 0xa1, 0x2e, 0x6d, 0xfd, 0xba, 0x13, 0x66, 0x31, 0xa8, 0xc2, 0xd3, 0xff,
	0xd2, 0x44, 0x5d, 0x5f, 0x51, 0x1f, 0xa6, 0x42, 0x32, 0x32, 0x61, 0x9f, 0xe0, 0xb2, 0xdc, 0x24,
	0x80, 0xeb, 0x04, 0x94, 0xc6, 0x6d, 0xb4, 0xa7, 0x42, 0x11, 0xc3, 0x7b, 0x16, 0xd9, 0xd6, 0x91,
	0x75, 0xf2, 0x20, 0xd8, 0x35, 0xf5, 0x30, 0xca, 0x25, 0x2a, 0x45, 0x12, 0xe7, 0x52, 0xb3, 0x90,
	0x4c, 0x3d, 0x8c, 0xf0, 0x31, 0x7a, 0x08, 0x19, 0x84, 0x89, 0x66, 0x82, 0xe7, 0xf2, 0x96, 0x91,
	0xf7, 0x97, 0x6b, 0xc3, 0x08, 0xbf, 0x40, 0x7b, 0xd5, 0xc0, 0xf6, 0xf6, 0x91, 0x75, 0xb2, 0x7f,
	0x8a, 0xdd, 0xe5, 0x0d, 0xaa, 0x29, 0x2e, 0xb6, 0x6f, 0x7e, 0xf4, 0x1a, 0xc1, 0xd2, 0x89, 0xcf,
	0x11, 0x52, 0x8c, 0x72, 0xa2, 0x13, 0x09, 0xca, 0xde, 0x31, 0x7d, 0x07, 0x6e, 0x71, 0xa5, 0x51,
	0x25, 0x8c, 0xa0, 0x6a, 0x5c, 0x31, 0x63, 0x07, 0xa1, 0x51, 0x3e, 0x79, 0x00, 0x1f, 0x86, 0xaf,
	0xec, 0x96, 0x99, 0x68, 0x65, 0x05, 0x3f, 0x41, 0x2d, 0x2e, 0x34, 0x91, 0x33, 0x7b, 0xd7, 0x68,
	0x65, 0xd5, 0xef, 0xa2, 0xc3, 0x8d, 0x7c, 0x54, 0x2c, 0xb8, 0x82, 0xfe, 0xb7, 0x26, 0x6a, 0xfb,
	0x8a, 0x5e, 0x8e, 0x09, 0xa7, 0xf0, 0xfa, 0x23, 0x07, 0xa9, 0xc6, 0x2c, 0xbe, 0x0f, 0x7c, 0x12,
	0x42, 0xa6, 0xc9, 0x44, 0xad, 0xe3, 0x0b, 0x4a, 0xa5, 0xc2, 0x57, 0x39, 0x7f, 0x83, 0xbe, 0xf3,
	0x9f, 0xd0, 0x5b, 0xff, 0x02, 0xbd, 0x0e, 0x6a, 0x1b, 0x3d, 0x5d, 0x23, 0x56, 0x00, 0x3d, 0xfd,
	0x6a, 0xa1, 0x2d, 0x5f, 0x51, 0xfc, 0x16, 0x1d, 0x6c, 0xe0, 0x8e, 0x8f, 0x5d, 0x9d, 0xb9, 0x7f,
	0xfd, 0x67, 0x3b, 0x3d, 0x63, 0xa9, 0x7f, 0x33, 0xec, 0xa3, 0x47, 0x7f, 0x9c, 0x8e, 0xbb, 0xe5,
	0xb6, 0x9b, 0xdf, 0xb1, 0x73, 0x98, 0xcb, 0x35, 0x13, 0x5f, 0x5c, 0xdf, 0xcc, 0x1d, 0xeb, 0x76,
	0xee, 0x58, 0x3f, 0xe7, 0x8e, 0xf5, 0x79, 0xe1, 0x34, 0x6e, 0x17, 0x4e, 0xe3, 0xfb, 0xc2, 0x69,
	0xa0, 0x36, 0x33, 0xa1, 0x2d, 0x63, 0xe8, 0x56, 0x31, 0x74, 0xd3, 0xc1, 0x1b, 0xeb, 0xdd, 0x4b,
	0xca, 0xf4, 0x38, 0xb9, 0x72, 0x43, 0x31, 0xf5, 0xee, 0x4c, 0xcf, 0x99, 0x58, 0xa9, 0xbc, 0xec,
	0x2e, 0xbb, 0x13, 0xa0, 0x24, 0x9c, 0x79, 0xe9, 0xe0, 0xec, 0xfc, 0xaa, 0x65, 0xf2, 0x7b, 0xf6,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0xce, 0xcd, 0x81, 0xdf, 0x47, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// MemorializeContract records the results of a P8e contract execution as a record group and set of records in a scope
	MemorializeContract(ctx context.Context, in *MsgMemorializeContractRequest, opts ...grpc.CallOption) (*MemorializeContractResponse, error)
	// ChangeOwnership allows P8e contracts to record a new set of owners on a scope
	ChangeOwnership(ctx context.Context, in *MsgChangeOwnershipRequest, opts ...grpc.CallOption) (*ChangeOwnershipResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) MemorializeContract(ctx context.Context, in *MsgMemorializeContractRequest, opts ...grpc.CallOption) (*MemorializeContractResponse, error) {
	out := new(MemorializeContractResponse)
	err := c.cc.Invoke(ctx, "/tx.Msg/MemorializeContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeOwnership(ctx context.Context, in *MsgChangeOwnershipRequest, opts ...grpc.CallOption) (*ChangeOwnershipResponse, error) {
	out := new(ChangeOwnershipResponse)
	err := c.cc.Invoke(ctx, "/tx.Msg/ChangeOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// MemorializeContract records the results of a P8e contract execution as a record group and set of records in a scope
	MemorializeContract(context.Context, *MsgMemorializeContractRequest) (*MemorializeContractResponse, error)
	// ChangeOwnership allows P8e contracts to record a new set of owners on a scope
	ChangeOwnership(context.Context, *MsgChangeOwnershipRequest) (*ChangeOwnershipResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) MemorializeContract(ctx context.Context, req *MsgMemorializeContractRequest) (*MemorializeContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemorializeContract not implemented")
}
func (*UnimplementedMsgServer) ChangeOwnership(ctx context.Context, req *MsgChangeOwnershipRequest) (*ChangeOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOwnership not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_MemorializeContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMemorializeContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MemorializeContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tx.Msg/MemorializeContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MemorializeContract(ctx, req.(*MsgMemorializeContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tx.Msg/ChangeOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeOwnership(ctx, req.(*MsgChangeOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tx.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MemorializeContract",
			Handler:    _Msg_MemorializeContract_Handler,
		},
		{
			MethodName: "ChangeOwnership",
			Handler:    _Msg_ChangeOwnership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/metadata/v0/tx.proto",
}

func (m *MsgMemorializeContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMemorializeContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMemorializeContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Notary) > 0 {
		i -= len(m.Notary)
		copy(dAtA[i:], m.Notary)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Notary)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ScopeRefID) > 0 {
		i -= len(m.ScopeRefID)
		copy(dAtA[i:], m.ScopeRefID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ScopeRefID)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.Signatures.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Contract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ExecutionId) > 0 {
		i -= len(m.ExecutionId)
		copy(dAtA[i:], m.ExecutionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecutionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MemorializeContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemorializeContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemorializeContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeOwnershipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeOwnershipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeOwnershipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Notary) > 0 {
		i -= len(m.Notary)
		copy(dAtA[i:], m.Notary)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Notary)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.Signatures.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Contract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Recitals.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ExecutionId) > 0 {
		i -= len(m.ExecutionId)
		copy(dAtA[i:], m.ExecutionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecutionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScopeId) > 0 {
		i -= len(m.ScopeId)
		copy(dAtA[i:], m.ScopeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ScopeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangeOwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeOwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeOwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMemorializeContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecutionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Contract.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Signatures.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.ScopeRefID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Notary)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MemorializeContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeOwnershipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScopeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecutionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Recitals.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Contract.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Signatures.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Notary)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *ChangeOwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMemorializeContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMemorializeContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMemorializeContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Signatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeRefID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeRefID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemorializeContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemorializeContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemorializeContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeOwnershipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeOwnershipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeOwnershipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recitals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Recitals.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Signatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeOwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeOwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeOwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
