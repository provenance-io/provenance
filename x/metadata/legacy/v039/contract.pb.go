// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/metadata/v0/contract.proto

package v039

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExecutionResultType int32

const (
	ExecutionResultType_RESULT_TYPE_UNKNOWN ExecutionResultType = 0
	ExecutionResultType_RESULT_TYPE_PASS    ExecutionResultType = 1
	// Couldn't process the condition/consideration due to missing facts being generated by other considerations.
	ExecutionResultType_RESULT_TYPE_SKIP ExecutionResultType = 2
	ExecutionResultType_RESULT_TYPE_FAIL ExecutionResultType = 3
)

var ExecutionResultType_name = map[int32]string{
	0: "RESULT_TYPE_UNKNOWN",
	1: "RESULT_TYPE_PASS",
	2: "RESULT_TYPE_SKIP",
	3: "RESULT_TYPE_FAIL",
}

var ExecutionResultType_value = map[string]int32{
	"RESULT_TYPE_UNKNOWN": 0,
	"RESULT_TYPE_PASS":    1,
	"RESULT_TYPE_SKIP":    2,
	"RESULT_TYPE_FAIL":    3,
}

func (x ExecutionResultType) String() string {
	return proto.EnumName(ExecutionResultType_name, int32(x))
}

func (ExecutionResultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_429189f5158833e0, []int{0}
}

type Recital struct {
	SignerRole PartyType                       `protobuf:"varint,1,opt,name=signer_role,json=signerRole,proto3,enum=types.PartyType" json:"signer_role,omitempty"`
	Signer     *SigningAndEncryptionPublicKeys `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	Address    []byte                          `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Recital) Reset()         { *m = Recital{} }
func (m *Recital) String() string { return proto.CompactTextString(m) }
func (*Recital) ProtoMessage()    {}
func (*Recital) Descriptor() ([]byte, []int) {
	return fileDescriptor_429189f5158833e0, []int{0}
}
func (m *Recital) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recital) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recital.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recital) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recital.Merge(m, src)
}
func (m *Recital) XXX_Size() int {
	return m.Size()
}
func (m *Recital) XXX_DiscardUnknown() {
	xxx_messageInfo_Recital.DiscardUnknown(m)
}

var xxx_messageInfo_Recital proto.InternalMessageInfo

func (m *Recital) GetSignerRole() PartyType {
	if m != nil {
		return m.SignerRole
	}
	return PartyType_PARTY_TYPE_UNKNOWN
}

func (m *Recital) GetSigner() *SigningAndEncryptionPublicKeys {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *Recital) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type Recitals struct {
	Parties []*Recital `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (m *Recitals) Reset()         { *m = Recitals{} }
func (m *Recitals) String() string { return proto.CompactTextString(m) }
func (*Recitals) ProtoMessage()    {}
func (*Recitals) Descriptor() ([]byte, []int) {
	return fileDescriptor_429189f5158833e0, []int{1}
}
func (m *Recitals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recitals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recitals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recitals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recitals.Merge(m, src)
}
func (m *Recitals) XXX_Size() int {
	return m.Size()
}
func (m *Recitals) XXX_DiscardUnknown() {
	xxx_messageInfo_Recitals.DiscardUnknown(m)
}

var xxx_messageInfo_Recitals proto.InternalMessageInfo

func (m *Recitals) GetParties() []*Recital {
	if m != nil {
		return m.Parties
	}
	return nil
}

type Contract struct {
	Definition *DefinitionSpec `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
	// Points to the proto for the contractSpec
	Spec *Fact `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Invoker of this contract
	Invoker *SigningAndEncryptionPublicKeys `protobuf:"bytes,3,opt,name=invoker,proto3" json:"invoker,omitempty"`
	// Constructor arguments.
	// These are always the output of a previously recorded consideration.
	Inputs         []*Fact          `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Conditions     []*Condition     `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Considerations []*Consideration `protobuf:"bytes,6,rep,name=considerations,proto3" json:"considerations,omitempty"`
	Recitals       []*Recital       `protobuf:"bytes,7,rep,name=recitals,proto3" json:"recitals,omitempty"`
	TimesExecuted  int32            `protobuf:"varint,8,opt,name=times_executed,json=timesExecuted,proto3" json:"times_executed,omitempty"`
	// This is only set once when the contract is initially executed
	StartTime time.Time `protobuf:"bytes,9,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_429189f5158833e0, []int{2}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return m.Size()
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetDefinition() *DefinitionSpec {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (m *Contract) GetSpec() *Fact {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Contract) GetInvoker() *SigningAndEncryptionPublicKeys {
	if m != nil {
		return m.Invoker
	}
	return nil
}

func (m *Contract) GetInputs() []*Fact {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Contract) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Contract) GetConsiderations() []*Consideration {
	if m != nil {
		return m.Considerations
	}
	return nil
}

func (m *Contract) GetRecitals() []*Recital {
	if m != nil {
		return m.Recitals
	}
	return nil
}

func (m *Contract) GetTimesExecuted() int32 {
	if m != nil {
		return m.TimesExecuted
	}
	return 0
}

func (m *Contract) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

type Condition struct {
	ConditionName string           `protobuf:"bytes,1,opt,name=condition_name,json=conditionName,proto3" json:"condition_name,omitempty"`
	Result        *ExecutionResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *Condition) Reset()         { *m = Condition{} }
func (m *Condition) String() string { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()    {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_429189f5158833e0, []int{3}
}
func (m *Condition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Condition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(m, src)
}
func (m *Condition) XXX_Size() int {
	return m.Size()
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *Condition) GetConditionName() string {
	if m != nil {
		return m.ConditionName
	}
	return ""
}

func (m *Condition) GetResult() *ExecutionResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type Consideration struct {
	ConsiderationName string `protobuf:"bytes,1,opt,name=consideration_name,json=considerationName,proto3" json:"consideration_name,omitempty"`
	// Data pushed to a consideration that will ultimately match the output_spec of the consideration
	Inputs []*ProposedFact  `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Result *ExecutionResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *Consideration) Reset()         { *m = Consideration{} }
func (m *Consideration) String() string { return proto.CompactTextString(m) }
func (*Consideration) ProtoMessage()    {}
func (*Consideration) Descriptor() ([]byte, []int) {
	return fileDescriptor_429189f5158833e0, []int{4}
}
func (m *Consideration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Consideration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Consideration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Consideration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consideration.Merge(m, src)
}
func (m *Consideration) XXX_Size() int {
	return m.Size()
}
func (m *Consideration) XXX_DiscardUnknown() {
	xxx_messageInfo_Consideration.DiscardUnknown(m)
}

var xxx_messageInfo_Consideration proto.InternalMessageInfo

func (m *Consideration) GetConsiderationName() string {
	if m != nil {
		return m.ConsiderationName
	}
	return ""
}

func (m *Consideration) GetInputs() []*ProposedFact {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Consideration) GetResult() *ExecutionResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// Input to a consideration defined at runtime, and emitted as a proposed fact for inclusion on the blockchain.
type ProposedFact struct {
	Name      string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hash      string               `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Classname string               `protobuf:"bytes,3,opt,name=classname,proto3" json:"classname,omitempty"`
	Ancestor  *ProvenanceReference `protobuf:"bytes,4,opt,name=ancestor,proto3" json:"ancestor,omitempty"`
}

func (m *ProposedFact) Reset()         { *m = ProposedFact{} }
func (m *ProposedFact) String() string { return proto.CompactTextString(m) }
func (*ProposedFact) ProtoMessage()    {}
func (*ProposedFact) Descriptor() ([]byte, []int) {
	return fileDescriptor_429189f5158833e0, []int{5}
}
func (m *ProposedFact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposedFact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposedFact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposedFact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposedFact.Merge(m, src)
}
func (m *ProposedFact) XXX_Size() int {
	return m.Size()
}
func (m *ProposedFact) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposedFact.DiscardUnknown(m)
}

var xxx_messageInfo_ProposedFact proto.InternalMessageInfo

func (m *ProposedFact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProposedFact) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ProposedFact) GetClassname() string {
	if m != nil {
		return m.Classname
	}
	return ""
}

func (m *ProposedFact) GetAncestor() *ProvenanceReference {
	if m != nil {
		return m.Ancestor
	}
	return nil
}

type ExecutionResult struct {
	Output       *ProposedFact       `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Result       ExecutionResultType `protobuf:"varint,2,opt,name=result,proto3,enum=contract.ExecutionResultType" json:"result,omitempty"`
	RecordedAt   time.Time           `protobuf:"bytes,3,opt,name=recorded_at,json=recordedAt,proto3,stdtime" json:"recorded_at" yaml:"recorded_at"`
	ErrorMessage string              `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *ExecutionResult) Reset()         { *m = ExecutionResult{} }
func (m *ExecutionResult) String() string { return proto.CompactTextString(m) }
func (*ExecutionResult) ProtoMessage()    {}
func (*ExecutionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_429189f5158833e0, []int{6}
}
func (m *ExecutionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionResult.Merge(m, src)
}
func (m *ExecutionResult) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionResult.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionResult proto.InternalMessageInfo

func (m *ExecutionResult) GetOutput() *ProposedFact {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *ExecutionResult) GetResult() ExecutionResultType {
	if m != nil {
		return m.Result
	}
	return ExecutionResultType_RESULT_TYPE_UNKNOWN
}

func (m *ExecutionResult) GetRecordedAt() time.Time {
	if m != nil {
		return m.RecordedAt
	}
	return time.Time{}
}

func (m *ExecutionResult) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterEnum("contract.ExecutionResultType", ExecutionResultType_name, ExecutionResultType_value)
	proto.RegisterType((*Recital)(nil), "contract.Recital")
	proto.RegisterType((*Recitals)(nil), "contract.Recitals")
	proto.RegisterType((*Contract)(nil), "contract.Contract")
	proto.RegisterType((*Condition)(nil), "contract.Condition")
	proto.RegisterType((*Consideration)(nil), "contract.Consideration")
	proto.RegisterType((*ProposedFact)(nil), "contract.ProposedFact")
	proto.RegisterType((*ExecutionResult)(nil), "contract.ExecutionResult")
}

func init() {
	proto.RegisterFile("provenance/metadata/v0/contract.proto", fileDescriptor_429189f5158833e0)
}

var fileDescriptor_429189f5158833e0 = []byte{
	// 862 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4d, 0x6f, 0xdb, 0x46,
	0x10, 0x15, 0x23, 0x47, 0x1f, 0x23, 0xdb, 0x95, 0xd7, 0x46, 0xc3, 0x18, 0x8d, 0xa4, 0x2a, 0x30,
	0x20, 0xb4, 0x30, 0xe5, 0xc8, 0xfd, 0x40, 0x03, 0x14, 0x81, 0x93, 0x3a, 0x40, 0xe0, 0xd4, 0x15,
	0x56, 0x0e, 0xfa, 0x75, 0x10, 0xd6, 0xe4, 0x98, 0x26, 0x4a, 0x71, 0xd9, 0xdd, 0x95, 0x10, 0xfd,
	0x87, 0x1e, 0x72, 0xe9, 0x0f, 0xe8, 0xbf, 0xc9, 0x31, 0xc7, 0x9e, 0xd2, 0xc2, 0x3e, 0xf7, 0xd2,
	0x63, 0x4f, 0x05, 0x97, 0x4b, 0x52, 0x32, 0xaa, 0x22, 0xb7, 0xdd, 0x37, 0x6f, 0xb8, 0x6f, 0xde,
	0x0c, 0x77, 0x61, 0x2f, 0x16, 0x7c, 0x86, 0x11, 0x8b, 0x5c, 0xec, 0x4f, 0x50, 0x31, 0x8f, 0x29,
	0xd6, 0x9f, 0x1d, 0xf4, 0x5d, 0x1e, 0x29, 0xc1, 0x5c, 0xe5, 0xc4, 0x82, 0x2b, 0x4e, 0x6a, 0xd9,
	0x7e, 0x77, 0xc7, 0xe7, 0x3e, 0xd7, 0x60, 0x3f, 0x59, 0xa5, 0xf1, 0xdd, 0x0f, 0x57, 0x7c, 0x46,
	0xc6, 0xe8, 0x1a, 0x4a, 0x77, 0x05, 0x45, 0xcd, 0x63, 0x94, 0x86, 0xd3, 0xf6, 0x39, 0xf7, 0x43,
	0xec, 0xeb, 0xdd, 0xf9, 0xf4, 0xa2, 0xaf, 0x82, 0x09, 0x4a, 0xc5, 0x26, 0x71, 0x4a, 0xe8, 0xfe,
	0x6a, 0x41, 0x95, 0xa2, 0x1b, 0x28, 0x16, 0x92, 0x07, 0xd0, 0x90, 0x81, 0x1f, 0xa1, 0x18, 0x0b,
	0x1e, 0xa2, 0x6d, 0x75, 0xac, 0xde, 0xe6, 0xa0, 0xe9, 0xa4, 0xdf, 0x1b, 0x32, 0xa1, 0xe6, 0x67,
	0xf3, 0x18, 0x29, 0xa4, 0x24, 0xca, 0x43, 0x24, 0x5f, 0x42, 0x25, 0xdd, 0xd9, 0xb7, 0x3a, 0x56,
	0xaf, 0x31, 0xd8, 0x33, 0xec, 0x51, 0xe0, 0x47, 0x41, 0xe4, 0x1f, 0x45, 0xde, 0x71, 0xe4, 0x8a,
	0x79, 0xac, 0x02, 0x1e, 0x0d, 0xa7, 0xe7, 0x61, 0xe0, 0x9e, 0xe0, 0x5c, 0x52, 0x93, 0x44, 0x6c,
	0xa8, 0x32, 0xcf, 0x13, 0x28, 0xa5, 0x5d, 0xee, 0x58, 0xbd, 0x75, 0x9a, 0x6d, 0xbb, 0x9f, 0x43,
	0xcd, 0xc8, 0x92, 0xe4, 0x63, 0xa8, 0xc6, 0x4c, 0xa8, 0x00, 0xa5, 0x6d, 0x75, 0xca, 0xbd, 0xc6,
	0x60, 0xcb, 0xc9, 0xdd, 0x34, 0x24, 0x9a, 0x31, 0xba, 0x7f, 0x95, 0xa1, 0xf6, 0xc4, 0x44, 0xc9,
	0x27, 0x00, 0x1e, 0x5e, 0x04, 0x51, 0x90, 0x9c, 0xaf, 0x0b, 0x6a, 0x0c, 0x76, 0x1c, 0xed, 0xe1,
	0x57, 0x39, 0x3e, 0x8a, 0xd1, 0xa5, 0x0b, 0x3c, 0xd2, 0x86, 0xb5, 0x84, 0x62, 0x4a, 0x6a, 0x98,
	0x92, 0x9e, 0x32, 0x57, 0x51, 0x1d, 0x20, 0x8f, 0xa0, 0x1a, 0x44, 0x33, 0xfe, 0x13, 0x0a, 0x2d,
	0xfb, 0x9d, 0xcb, 0xce, 0xb2, 0xc8, 0x7d, 0xa8, 0x04, 0x51, 0x3c, 0x55, 0xd2, 0x5e, 0xd3, 0x05,
	0x2d, 0x9d, 0x61, 0x42, 0xe4, 0x10, 0xc0, 0xe5, 0x91, 0xa7, 0x35, 0x49, 0xfb, 0xb6, 0x26, 0x6e,
	0x17, 0x95, 0x3f, 0xc9, 0x62, 0x74, 0x81, 0x46, 0x1e, 0xc1, 0xa6, 0xcb, 0x23, 0x19, 0x78, 0x28,
	0x58, 0x9a, 0x58, 0xd1, 0x89, 0x77, 0x96, 0x12, 0x8b, 0x38, 0xbd, 0x41, 0x27, 0xfb, 0x50, 0x13,
	0xc6, 0x78, 0xbb, 0xba, 0xca, 0xed, 0x9c, 0x42, 0xf6, 0x60, 0x53, 0x8f, 0xd4, 0x18, 0x5f, 0xa2,
	0x3b, 0x55, 0xe8, 0xd9, 0xb5, 0x8e, 0xd5, 0xbb, 0x4d, 0x37, 0x34, 0x7a, 0x6c, 0x40, 0xf2, 0x1d,
	0x80, 0x54, 0x4c, 0xa8, 0x71, 0x02, 0xdb, 0x75, 0x6d, 0xda, 0xae, 0x93, 0x0e, 0xa7, 0x93, 0x0d,
	0xa7, 0x73, 0x96, 0x0d, 0xe7, 0xe3, 0x7b, 0xaf, 0xdf, 0xb6, 0x4b, 0x7f, 0xbf, 0x6d, 0x6f, 0xcd,
	0xd9, 0x24, 0x7c, 0xd8, 0x2d, 0x72, 0xbb, 0xaf, 0xfe, 0x68, 0x5b, 0xb4, 0xae, 0x81, 0x84, 0xde,
	0x45, 0xa8, 0xe7, 0x4e, 0x24, 0x6a, 0x72, 0x2f, 0xc6, 0x11, 0x9b, 0xa4, 0x43, 0x5c, 0xa7, 0x1b,
	0x39, 0x7a, 0xca, 0x26, 0x48, 0x1e, 0x40, 0x45, 0xa0, 0x9c, 0x86, 0xca, 0xb4, 0xf8, 0x6e, 0x51,
	0x61, 0xaa, 0x38, 0x31, 0x46, 0x13, 0xa8, 0x21, 0x76, 0x7f, 0xb3, 0x60, 0x63, 0xc9, 0x38, 0xb2,
	0x0f, 0x64, 0xc9, 0xba, 0xc5, 0xf3, 0xb6, 0x96, 0x22, 0xfa, 0x4c, 0x27, 0x6f, 0xf9, 0x2d, 0xed,
	0xea, 0xfb, 0xc5, 0x99, 0x43, 0xc1, 0x63, 0x2e, 0xd1, 0x5b, 0xea, 0x7e, 0xa1, 0xb1, 0xfc, 0xae,
	0x1a, 0x7f, 0xb1, 0x60, 0x7d, 0xf1, 0x5b, 0x84, 0xc0, 0xda, 0x82, 0x28, 0xbd, 0x4e, 0xb0, 0x4b,
	0x26, 0x2f, 0x75, 0xe5, 0x75, 0xaa, 0xd7, 0xe4, 0x03, 0xa8, 0xbb, 0x21, 0x93, 0x52, 0x93, 0xcb,
	0x3a, 0x50, 0x00, 0xe4, 0x33, 0xa8, 0x25, 0x77, 0x8c, 0x54, 0x5c, 0xd8, 0x6b, 0xa6, 0x73, 0xe6,
	0x4e, 0xc8, 0x2f, 0x20, 0x8a, 0x17, 0x28, 0x30, 0x59, 0xe4, 0xdc, 0xee, 0x3f, 0x16, 0xbc, 0x77,
	0x43, 0x6a, 0xe2, 0x02, 0x9f, 0xaa, 0x78, 0xaa, 0xcc, 0xcf, 0xb8, 0xd2, 0x85, 0x94, 0x45, 0x3e,
	0x5d, 0xea, 0xd4, 0xe6, 0xe0, 0xde, 0x4a, 0x17, 0xf4, 0xd5, 0x64, 0xc8, 0xe4, 0x47, 0x68, 0x08,
	0x74, 0xb9, 0xf0, 0xd0, 0x1b, 0xb3, 0xcc, 0xc1, 0xff, 0x9b, 0xb7, 0x96, 0x99, 0x37, 0x92, 0xce,
	0xdb, 0x42, 0x72, 0x3a, 0x70, 0x90, 0x21, 0x47, 0x8a, 0xdc, 0x87, 0x0d, 0x14, 0x82, 0x8b, 0xf1,
	0x04, 0xa5, 0x64, 0x3e, 0x6a, 0x53, 0xea, 0x74, 0x5d, 0x83, 0x5f, 0xa7, 0xd8, 0x47, 0x31, 0x6c,
	0xff, 0x87, 0x40, 0x72, 0x07, 0xb6, 0xe9, 0xf1, 0xe8, 0xc5, 0xf3, 0xb3, 0xf1, 0xd9, 0xf7, 0xc3,
	0xe3, 0xf1, 0x8b, 0xd3, 0x93, 0xd3, 0x6f, 0xbe, 0x3d, 0x6d, 0x96, 0xc8, 0x0e, 0x34, 0x17, 0x03,
	0xc3, 0xa3, 0xd1, 0xa8, 0x69, 0xdd, 0x44, 0x47, 0x27, 0xcf, 0x86, 0xcd, 0x5b, 0x37, 0xd1, 0xa7,
	0x47, 0xcf, 0x9e, 0x37, 0xcb, 0x8f, 0x7f, 0x7e, 0x7d, 0xd5, 0xb2, 0xde, 0x5c, 0xb5, 0xac, 0x3f,
	0xaf, 0x5a, 0xd6, 0xab, 0xeb, 0x56, 0xe9, 0xcd, 0x75, 0xab, 0xf4, 0xfb, 0x75, 0xab, 0x04, 0x77,
	0x03, 0xfd, 0xaa, 0x98, 0x56, 0x39, 0xd9, 0x5b, 0xe1, 0xcc, 0x0e, 0x86, 0xd6, 0x0f, 0x0f, 0xfd,
	0x40, 0x5d, 0x4e, 0xcf, 0x1d, 0x97, 0x4f, 0xfa, 0x05, 0x69, 0x3f, 0xe0, 0x0b, 0xbb, 0xfe, 0xcb,
	0xe2, 0x81, 0x09, 0xd1, 0x67, 0xee, 0xbc, 0x3f, 0x3b, 0x38, 0xfc, 0xe2, 0xbc, 0xa2, 0x9d, 0x3c,
	0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x1e, 0x14, 0xce, 0xf4, 0x06, 0x00, 0x00,
}

func (m *Recital) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recital) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recital) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Signer != nil {
		{
			size, err := m.Signer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SignerRole != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.SignerRole))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Recitals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recitals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recitals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parties) > 0 {
		for iNdEx := len(m.Parties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContract(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintContract(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x4a
	if m.TimesExecuted != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.TimesExecuted))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Recitals) > 0 {
		for iNdEx := len(m.Recitals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recitals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContract(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Considerations) > 0 {
		for iNdEx := len(m.Considerations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Considerations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContract(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContract(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContract(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Invoker != nil {
		{
			size, err := m.Invoker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Definition != nil {
		{
			size, err := m.Definition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Condition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Condition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Condition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConditionName) > 0 {
		i -= len(m.ConditionName)
		copy(dAtA[i:], m.ConditionName)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ConditionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Consideration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Consideration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Consideration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContract(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ConsiderationName) > 0 {
		i -= len(m.ConsiderationName)
		copy(dAtA[i:], m.ConsiderationName)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ConsiderationName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposedFact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposedFact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposedFact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ancestor != nil {
		{
			size, err := m.Ancestor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Classname) > 0 {
		i -= len(m.Classname)
		copy(dAtA[i:], m.Classname)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Classname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x22
	}
	n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.RecordedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.RecordedAt):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintContract(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x1a
	if m.Result != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x10
	}
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Recital) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignerRole != 0 {
		n += 1 + sovContract(uint64(m.SignerRole))
	}
	if m.Signer != nil {
		l = m.Signer.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func (m *Recitals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Parties) > 0 {
		for _, e := range m.Parties {
			l = e.Size()
			n += 1 + l + sovContract(uint64(l))
		}
	}
	return n
}

func (m *Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Definition != nil {
		l = m.Definition.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	if m.Invoker != nil {
		l = m.Invoker.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovContract(uint64(l))
		}
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovContract(uint64(l))
		}
	}
	if len(m.Considerations) > 0 {
		for _, e := range m.Considerations {
			l = e.Size()
			n += 1 + l + sovContract(uint64(l))
		}
	}
	if len(m.Recitals) > 0 {
		for _, e := range m.Recitals {
			l = e.Size()
			n += 1 + l + sovContract(uint64(l))
		}
	}
	if m.TimesExecuted != 0 {
		n += 1 + sovContract(uint64(m.TimesExecuted))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovContract(uint64(l))
	return n
}

func (m *Condition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConditionName)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func (m *Consideration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsiderationName)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovContract(uint64(l))
		}
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func (m *ProposedFact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Classname)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.Ancestor != nil {
		l = m.Ancestor.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func (m *ExecutionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovContract(uint64(m.Result))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.RecordedAt)
	n += 1 + l + sovContract(uint64(l))
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func sovContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContract(x uint64) (n int) {
	return sovContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Recital) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recital: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recital: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerRole", wireType)
			}
			m.SignerRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignerRole |= PartyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signer == nil {
				m.Signer = &SigningAndEncryptionPublicKeys{}
			}
			if err := m.Signer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recitals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recitals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recitals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parties = append(m.Parties, &Recital{})
			if err := m.Parties[len(m.Parties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Definition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Definition == nil {
				m.Definition = &DefinitionSpec{}
			}
			if err := m.Definition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &Fact{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Invoker == nil {
				m.Invoker = &SigningAndEncryptionPublicKeys{}
			}
			if err := m.Invoker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &Fact{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Considerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Considerations = append(m.Considerations, &Consideration{})
			if err := m.Considerations[len(m.Considerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recitals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recitals = append(m.Recitals, &Recital{})
			if err := m.Recitals[len(m.Recitals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimesExecuted", wireType)
			}
			m.TimesExecuted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimesExecuted |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Condition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Condition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Condition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConditionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &ExecutionResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Consideration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Consideration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Consideration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsiderationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsiderationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &ProposedFact{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &ExecutionResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposedFact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposedFact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposedFact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ancestor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ancestor == nil {
				m.Ancestor = &ProvenanceReference{}
			}
			if err := m.Ancestor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &ProposedFact{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= ExecutionResultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.RecordedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContract = fmt.Errorf("proto: unexpected end of group")
)
