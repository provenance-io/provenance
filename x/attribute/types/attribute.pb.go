// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/attribute/v1/attribute.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AttributeType defines the type of the data stored in the attribute value
type AttributeType int32

const (
	// ATTRIBUTE_TYPE_UNSPECIFIED defines an unknown/invalid type
	AttributeType_Unspecified AttributeType = 0
	// ATTRIBUTE_TYPE_UUID defines an attribute value that contains a string value representation of a V4 uuid
	AttributeType_UUID AttributeType = 1
	// ATTRIBUTE_TYPE_JSON defines an attribute value that contains a byte string containing json data
	AttributeType_JSON AttributeType = 2
	// ATTRIBUTE_TYPE_STRING defines an attribute value that contains a generic string value
	AttributeType_String AttributeType = 3
	// ATTRIBUTE_TYPE_URI defines an attribute value that contains a URI
	AttributeType_Uri AttributeType = 4
	// ATTRIBUTE_TYPE_INT defines an attribute value that contains an integer (cast as int64)
	AttributeType_Int AttributeType = 5
	// ATTRIBUTE_TYPE_FLOAT defines an attribute value that contains a float
	AttributeType_Float AttributeType = 6
	// ATTRIBUTE_TYPE_PROTO defines an attribute value that contains a serialized proto value in bytes
	AttributeType_Proto AttributeType = 7
	// ATTRIBUTE_TYPE_BYTES defines an attribute value that contains an untyped array of bytes
	AttributeType_Bytes AttributeType = 8
)

var AttributeType_name = map[int32]string{
	0: "ATTRIBUTE_TYPE_UNSPECIFIED",
	1: "ATTRIBUTE_TYPE_UUID",
	2: "ATTRIBUTE_TYPE_JSON",
	3: "ATTRIBUTE_TYPE_STRING",
	4: "ATTRIBUTE_TYPE_URI",
	5: "ATTRIBUTE_TYPE_INT",
	6: "ATTRIBUTE_TYPE_FLOAT",
	7: "ATTRIBUTE_TYPE_PROTO",
	8: "ATTRIBUTE_TYPE_BYTES",
}

var AttributeType_value = map[string]int32{
	"ATTRIBUTE_TYPE_UNSPECIFIED": 0,
	"ATTRIBUTE_TYPE_UUID":        1,
	"ATTRIBUTE_TYPE_JSON":        2,
	"ATTRIBUTE_TYPE_STRING":      3,
	"ATTRIBUTE_TYPE_URI":         4,
	"ATTRIBUTE_TYPE_INT":         5,
	"ATTRIBUTE_TYPE_FLOAT":       6,
	"ATTRIBUTE_TYPE_PROTO":       7,
	"ATTRIBUTE_TYPE_BYTES":       8,
}

func (x AttributeType) String() string {
	return proto.EnumName(AttributeType_name, int32(x))
}

func (AttributeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_14fe7eb43c711f5e, []int{0}
}

// Params defines the set of params for the attribute module.
type Params struct {
	// maximum length of data to allow in an attribute value
	MaxValueLength uint32 `protobuf:"varint,1,opt,name=max_value_length,json=maxValueLength,proto3" json:"max_value_length,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_14fe7eb43c711f5e, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxValueLength() uint32 {
	if m != nil {
		return m.MaxValueLength
	}
	return 0
}

// Attribute holds a typed key/value structure for data associated with an account
type Attribute struct {
	// The attribute name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The attribute value.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// The attribute value type.
	AttributeType AttributeType `protobuf:"varint,3,opt,name=attribute_type,json=attributeType,proto3,enum=provenance.attribute.v1.AttributeType" json:"attribute_type,omitempty"`
	// The address the attribute is bound to
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Attribute) Reset()      { *m = Attribute{} }
func (*Attribute) ProtoMessage() {}
func (*Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_14fe7eb43c711f5e, []int{1}
}
func (m *Attribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute.Merge(m, src)
}
func (m *Attribute) XXX_Size() int {
	return m.Size()
}
func (m *Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute proto.InternalMessageInfo

func (m *Attribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Attribute) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Attribute) GetAttributeType() AttributeType {
	if m != nil {
		return m.AttributeType
	}
	return AttributeType_Unspecified
}

func (m *Attribute) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// EventAttributeAdd event emitted when attribute is added
type EventAttributeAdd struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value   string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Account string `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Owner   string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *EventAttributeAdd) Reset()         { *m = EventAttributeAdd{} }
func (m *EventAttributeAdd) String() string { return proto.CompactTextString(m) }
func (*EventAttributeAdd) ProtoMessage()    {}
func (*EventAttributeAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_14fe7eb43c711f5e, []int{2}
}
func (m *EventAttributeAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAttributeAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAttributeAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAttributeAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAttributeAdd.Merge(m, src)
}
func (m *EventAttributeAdd) XXX_Size() int {
	return m.Size()
}
func (m *EventAttributeAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAttributeAdd.DiscardUnknown(m)
}

var xxx_messageInfo_EventAttributeAdd proto.InternalMessageInfo

func (m *EventAttributeAdd) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventAttributeAdd) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *EventAttributeAdd) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EventAttributeAdd) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *EventAttributeAdd) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// EventAttributeUpdate event emitted when attribute is updated
type EventAttributeUpdate struct {
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OriginalValue string `protobuf:"bytes,2,opt,name=original_value,json=originalValue,proto3" json:"original_value,omitempty"`
	OriginalType  string `protobuf:"bytes,3,opt,name=original_type,json=originalType,proto3" json:"original_type,omitempty"`
	UpdateValue   string `protobuf:"bytes,4,opt,name=update_value,json=updateValue,proto3" json:"update_value,omitempty"`
	UpdateType    string `protobuf:"bytes,5,opt,name=update_type,json=updateType,proto3" json:"update_type,omitempty"`
	Account       string `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`
	Owner         string `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *EventAttributeUpdate) Reset()         { *m = EventAttributeUpdate{} }
func (m *EventAttributeUpdate) String() string { return proto.CompactTextString(m) }
func (*EventAttributeUpdate) ProtoMessage()    {}
func (*EventAttributeUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_14fe7eb43c711f5e, []int{3}
}
func (m *EventAttributeUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAttributeUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAttributeUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAttributeUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAttributeUpdate.Merge(m, src)
}
func (m *EventAttributeUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventAttributeUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAttributeUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventAttributeUpdate proto.InternalMessageInfo

func (m *EventAttributeUpdate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventAttributeUpdate) GetOriginalValue() string {
	if m != nil {
		return m.OriginalValue
	}
	return ""
}

func (m *EventAttributeUpdate) GetOriginalType() string {
	if m != nil {
		return m.OriginalType
	}
	return ""
}

func (m *EventAttributeUpdate) GetUpdateValue() string {
	if m != nil {
		return m.UpdateValue
	}
	return ""
}

func (m *EventAttributeUpdate) GetUpdateType() string {
	if m != nil {
		return m.UpdateType
	}
	return ""
}

func (m *EventAttributeUpdate) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *EventAttributeUpdate) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// EventAttributeDelete event emitted when attribute is deleted
type EventAttributeDelete struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Owner   string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *EventAttributeDelete) Reset()         { *m = EventAttributeDelete{} }
func (m *EventAttributeDelete) String() string { return proto.CompactTextString(m) }
func (*EventAttributeDelete) ProtoMessage()    {}
func (*EventAttributeDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_14fe7eb43c711f5e, []int{4}
}
func (m *EventAttributeDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAttributeDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAttributeDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAttributeDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAttributeDelete.Merge(m, src)
}
func (m *EventAttributeDelete) XXX_Size() int {
	return m.Size()
}
func (m *EventAttributeDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAttributeDelete.DiscardUnknown(m)
}

var xxx_messageInfo_EventAttributeDelete proto.InternalMessageInfo

func (m *EventAttributeDelete) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventAttributeDelete) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *EventAttributeDelete) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// EventAttributeDistinctDelete event emitted when attribute is deleted with matching value
type EventAttributeDistinctDelete struct {
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	AttributeType string `protobuf:"bytes,3,opt,name=attribute_type,json=attributeType,proto3" json:"attribute_type,omitempty"`
	Account       string `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Owner         string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *EventAttributeDistinctDelete) Reset()         { *m = EventAttributeDistinctDelete{} }
func (m *EventAttributeDistinctDelete) String() string { return proto.CompactTextString(m) }
func (*EventAttributeDistinctDelete) ProtoMessage()    {}
func (*EventAttributeDistinctDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_14fe7eb43c711f5e, []int{5}
}
func (m *EventAttributeDistinctDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAttributeDistinctDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAttributeDistinctDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAttributeDistinctDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAttributeDistinctDelete.Merge(m, src)
}
func (m *EventAttributeDistinctDelete) XXX_Size() int {
	return m.Size()
}
func (m *EventAttributeDistinctDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAttributeDistinctDelete.DiscardUnknown(m)
}

var xxx_messageInfo_EventAttributeDistinctDelete proto.InternalMessageInfo

func (m *EventAttributeDistinctDelete) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventAttributeDistinctDelete) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *EventAttributeDistinctDelete) GetAttributeType() string {
	if m != nil {
		return m.AttributeType
	}
	return ""
}

func (m *EventAttributeDistinctDelete) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *EventAttributeDistinctDelete) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterEnum("provenance.attribute.v1.AttributeType", AttributeType_name, AttributeType_value)
	proto.RegisterType((*Params)(nil), "provenance.attribute.v1.Params")
	proto.RegisterType((*Attribute)(nil), "provenance.attribute.v1.Attribute")
	proto.RegisterType((*EventAttributeAdd)(nil), "provenance.attribute.v1.EventAttributeAdd")
	proto.RegisterType((*EventAttributeUpdate)(nil), "provenance.attribute.v1.EventAttributeUpdate")
	proto.RegisterType((*EventAttributeDelete)(nil), "provenance.attribute.v1.EventAttributeDelete")
	proto.RegisterType((*EventAttributeDistinctDelete)(nil), "provenance.attribute.v1.EventAttributeDistinctDelete")
}

func init() {
	proto.RegisterFile("provenance/attribute/v1/attribute.proto", fileDescriptor_14fe7eb43c711f5e)
}

var fileDescriptor_14fe7eb43c711f5e = []byte{
	// 646 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x6f, 0x12, 0x41,
	0x14, 0x66, 0xf8, 0x59, 0x5e, 0x0b, 0xae, 0x23, 0x46, 0xb2, 0x31, 0x74, 0xdb, 0xa6, 0x4a, 0x4c,
	0x84, 0x54, 0x63, 0x62, 0xbc, 0x81, 0xa5, 0x66, 0x4d, 0x05, 0xb2, 0x2c, 0x26, 0xed, 0x65, 0x33,
	0x85, 0x91, 0x6e, 0x02, 0x3b, 0x64, 0x77, 0xc0, 0xf6, 0xe8, 0x95, 0x93, 0x47, 0x2f, 0x44, 0x0f,
	0xfe, 0x31, 0x1e, 0x7b, 0xf4, 0x64, 0x4c, 0x7b, 0xf3, 0xaf, 0x30, 0xcc, 0x14, 0xd8, 0xae, 0xac,
	0xc6, 0xdb, 0xfb, 0xde, 0x7e, 0xfb, 0x7d, 0xdf, 0x9b, 0x99, 0x3c, 0x78, 0x38, 0x74, 0xd9, 0x98,
	0x3a, 0xc4, 0xe9, 0xd0, 0x32, 0xe1, 0xdc, 0xb5, 0x4f, 0x46, 0x9c, 0x96, 0xc7, 0x7b, 0x4b, 0x50,
	0x1a, 0xba, 0x8c, 0x33, 0x7c, 0x6f, 0x49, 0x2c, 0x2d, 0xbf, 0x8d, 0xf7, 0xd4, 0x5c, 0x8f, 0xf5,
	0x98, 0xe0, 0x94, 0x67, 0x95, 0xa4, 0x6f, 0x3f, 0x87, 0x64, 0x93, 0xb8, 0x64, 0xe0, 0xe1, 0x22,
	0x28, 0x03, 0x72, 0x66, 0x8d, 0x49, 0x7f, 0x44, 0xad, 0x3e, 0x75, 0x7a, 0xfc, 0x34, 0x8f, 0x34,
	0x54, 0xcc, 0x18, 0xd9, 0x01, 0x39, 0x7b, 0x3b, 0x6b, 0x1f, 0x8a, 0xee, 0x8b, 0xf8, 0xa7, 0x2f,
	0x9b, 0x91, 0xed, 0xaf, 0x08, 0xd2, 0x95, 0xb9, 0x01, 0xc6, 0x10, 0x77, 0xc8, 0x80, 0x8a, 0x3f,
	0xd2, 0x86, 0xa8, 0x71, 0x0e, 0x12, 0x42, 0x2d, 0x1f, 0xd5, 0x50, 0x71, 0xc3, 0x90, 0x00, 0xbf,
	0x81, 0xec, 0x22, 0x97, 0xc5, 0xcf, 0x87, 0x34, 0x1f, 0xd3, 0x50, 0x31, 0xfb, 0xe4, 0x41, 0x29,
	0x24, 0x79, 0x69, 0xe1, 0x62, 0x9e, 0x0f, 0xa9, 0x91, 0x21, 0x7e, 0x88, 0xf3, 0x90, 0x22, 0xdd,
	0xae, 0x4b, 0x3d, 0x2f, 0x1f, 0x17, 0xde, 0x73, 0x78, 0x1d, 0xf3, 0x03, 0x82, 0xdb, 0xb5, 0x31,
	0x75, 0xf8, 0x42, 0xa5, 0xd2, 0xed, 0xfe, 0x3b, 0x6e, 0x7a, 0x1e, 0x17, 0x43, 0x7c, 0x11, 0x32,
	0x6d, 0x88, 0x5a, 0x78, 0x76, 0x3a, 0x6c, 0xe4, 0xf0, 0x85, 0xa7, 0x84, 0x33, 0x0d, 0xf6, 0xde,
	0xa1, 0x6e, 0x3e, 0x21, 0x35, 0x04, 0xd8, 0xfe, 0x85, 0x20, 0x77, 0x33, 0x43, 0x7b, 0xd8, 0x25,
	0x21, 0xa7, 0xb6, 0x0b, 0x59, 0xe6, 0xda, 0x3d, 0xdb, 0x21, 0x7d, 0xcb, 0x9f, 0x27, 0x33, 0xef,
	0x8a, 0xab, 0xc0, 0x3b, 0xb0, 0x68, 0x58, 0xbe, 0x80, 0x1b, 0xf3, 0xa6, 0x38, 0x9c, 0x2d, 0xd8,
	0x18, 0x09, 0xa7, 0x6b, 0x25, 0x99, 0x76, 0x5d, 0xf6, 0xa4, 0xce, 0x26, 0x5c, 0x43, 0xa9, 0x22,
	0x73, 0x83, 0x6c, 0x99, 0x81, 0x61, 0x93, 0x21, 0xc3, 0xa6, 0xfc, 0xc3, 0x1e, 0x07, 0x67, 0xdd,
	0xa7, 0x7d, 0x1a, 0x32, 0xab, 0x4f, 0x3b, 0x1a, 0xa2, 0x1d, 0xf3, 0x6b, 0x7f, 0x46, 0x70, 0x3f,
	0x20, 0x6e, 0x7b, 0xdc, 0x76, 0x3a, 0xfc, 0x2f, 0x26, 0xab, 0xef, 0x75, 0x77, 0xe5, 0x33, 0x4c,
	0xaf, 0x7a, 0x5e, 0xff, 0x71, 0xd5, 0x8f, 0x7e, 0x44, 0x21, 0x73, 0xe3, 0xbd, 0xe2, 0x32, 0xa8,
	0x15, 0xd3, 0x34, 0xf4, 0x6a, 0xdb, 0xac, 0x59, 0xe6, 0x51, 0xb3, 0x66, 0xb5, 0xeb, 0xad, 0x66,
	0xed, 0xa5, 0x7e, 0xa0, 0xd7, 0xf6, 0x95, 0x88, 0x7a, 0x6b, 0x32, 0xd5, 0xd6, 0xdb, 0x8e, 0x37,
	0xa4, 0x1d, 0xfb, 0x9d, 0x4d, 0xbb, 0x78, 0x0b, 0xee, 0x04, 0x7f, 0x68, 0xeb, 0xfb, 0x0a, 0x52,
	0xd7, 0x26, 0x53, 0x2d, 0x3e, 0xab, 0x57, 0x50, 0x5e, 0xb7, 0x1a, 0x75, 0x25, 0x2a, 0x29, 0xb3,
	0x1a, 0xef, 0xc2, 0xdd, 0x00, 0xa5, 0x65, 0x1a, 0x7a, 0xfd, 0x95, 0x12, 0x53, 0x61, 0x32, 0xd5,
	0x92, 0x2d, 0xee, 0xda, 0x4e, 0x0f, 0x6f, 0x02, 0x0e, 0x9a, 0x19, 0xba, 0x12, 0x57, 0x53, 0x93,
	0xa9, 0x16, 0x6b, 0xbb, 0xf6, 0x0a, 0x82, 0x5e, 0x37, 0x95, 0x84, 0x24, 0xe8, 0x0e, 0xc7, 0x3b,
	0x90, 0x0b, 0x10, 0x0e, 0x0e, 0x1b, 0x15, 0x53, 0x49, 0xaa, 0xe9, 0xc9, 0x54, 0x4b, 0x1c, 0xf4,
	0x19, 0x59, 0x45, 0x6a, 0x1a, 0x0d, 0xb3, 0xa1, 0xa4, 0x24, 0xa9, 0x29, 0x56, 0xd7, 0x9f, 0xa4,
	0xea, 0x91, 0x59, 0x6b, 0x29, 0x6b, 0x92, 0x54, 0x3d, 0xe7, 0xd4, 0xab, 0x0e, 0xbe, 0x5d, 0x16,
	0xd0, 0xc5, 0x65, 0x01, 0xfd, 0xbc, 0x2c, 0xa0, 0x8f, 0x57, 0x85, 0xc8, 0xc5, 0x55, 0x21, 0xf2,
	0xfd, 0xaa, 0x10, 0x01, 0xd5, 0x66, 0x61, 0x2b, 0xa4, 0x89, 0x8e, 0x9f, 0xf5, 0x6c, 0x7e, 0x3a,
	0x3a, 0x29, 0x75, 0xd8, 0xa0, 0xbc, 0x64, 0x3d, 0xb6, 0x99, 0x0f, 0x95, 0xcf, 0x7c, 0xbb, 0x75,
	0xf6, 0x26, 0xbc, 0x93, 0xa4, 0x58, 0x93, 0x4f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x6c,
	0x88, 0xaf, 0x80, 0x05, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxValueLength != 0 {
		i = encodeVarintAttribute(dAtA, i, uint64(m.MaxValueLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Attribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.AttributeType != 0 {
		i = encodeVarintAttribute(dAtA, i, uint64(m.AttributeType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAttributeAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttributeAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAttributeAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAttributeUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttributeUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAttributeUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UpdateType) > 0 {
		i -= len(m.UpdateType)
		copy(dAtA[i:], m.UpdateType)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.UpdateType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UpdateValue) > 0 {
		i -= len(m.UpdateValue)
		copy(dAtA[i:], m.UpdateValue)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.UpdateValue)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OriginalType) > 0 {
		i -= len(m.OriginalType)
		copy(dAtA[i:], m.OriginalType)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.OriginalType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginalValue) > 0 {
		i -= len(m.OriginalValue)
		copy(dAtA[i:], m.OriginalValue)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.OriginalValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAttributeDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttributeDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAttributeDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAttributeDistinctDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttributeDistinctDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAttributeDistinctDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AttributeType) > 0 {
		i -= len(m.AttributeType)
		copy(dAtA[i:], m.AttributeType)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.AttributeType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAttribute(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttribute(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttribute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxValueLength != 0 {
		n += 1 + sovAttribute(uint64(m.MaxValueLength))
	}
	return n
}

func (m *Attribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	if m.AttributeType != 0 {
		n += 1 + sovAttribute(uint64(m.AttributeType))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	return n
}

func (m *EventAttributeAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	return n
}

func (m *EventAttributeUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.OriginalValue)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.OriginalType)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.UpdateValue)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.UpdateType)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	return n
}

func (m *EventAttributeDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	return n
}

func (m *EventAttributeDistinctDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.AttributeType)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAttribute(uint64(l))
	}
	return n
}

func sovAttribute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttribute(x uint64) (n int) {
	return sovAttribute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttribute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValueLength", wireType)
			}
			m.MaxValueLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValueLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAttribute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttribute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttribute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeType", wireType)
			}
			m.AttributeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributeType |= AttributeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttribute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttribute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAttributeAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttribute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttributeAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttributeAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttribute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttribute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAttributeUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttribute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttributeUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttributeUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttribute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttribute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAttributeDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttribute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttributeDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttributeDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttribute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttribute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAttributeDistinctDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttribute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttributeDistinctDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttributeDistinctDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttribute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttribute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttribute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttribute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttribute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttribute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttribute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttribute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttribute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttribute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttribute = fmt.Errorf("proto: unexpected end of group")
)
