// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/exchange/v1/commitments.proto

package exchange

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Commitment contains information on committed funds.
type Commitment struct {
	// account is the bech32 address string with the committed funds.
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// market_id is the numeric identifier of the market the funds are committed to.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// amount is the funds that have been committed by the account to the market.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *Commitment) Reset()         { *m = Commitment{} }
func (m *Commitment) String() string { return proto.CompactTextString(m) }
func (*Commitment) ProtoMessage()    {}
func (*Commitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_5607ea444303a1f8, []int{0}
}
func (m *Commitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Commitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Commitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commitment.Merge(m, src)
}
func (m *Commitment) XXX_Size() int {
	return m.Size()
}
func (m *Commitment) XXX_DiscardUnknown() {
	xxx_messageInfo_Commitment.DiscardUnknown(m)
}

var xxx_messageInfo_Commitment proto.InternalMessageInfo

func (m *Commitment) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Commitment) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *Commitment) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// AccountAmount associates an account with a coins amount.
type AccountAmount struct {
	// account is the bech32 address string of the account associated with the amount.
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// amount is the funds associated with the address.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *AccountAmount) Reset()      { *m = AccountAmount{} }
func (*AccountAmount) ProtoMessage() {}
func (*AccountAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_5607ea444303a1f8, []int{1}
}
func (m *AccountAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountAmount.Merge(m, src)
}
func (m *AccountAmount) XXX_Size() int {
	return m.Size()
}
func (m *AccountAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountAmount.DiscardUnknown(m)
}

var xxx_messageInfo_AccountAmount proto.InternalMessageInfo

func (m *AccountAmount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AccountAmount) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// MarketAmount associates a market with a coins amount.
type MarketAmount struct {
	// market_id is the numeric identifier the amount has been committed to.
	MarketId uint32 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// amount is the funds associated with the address.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MarketAmount) Reset()      { *m = MarketAmount{} }
func (*MarketAmount) ProtoMessage() {}
func (*MarketAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_5607ea444303a1f8, []int{2}
}
func (m *MarketAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketAmount.Merge(m, src)
}
func (m *MarketAmount) XXX_Size() int {
	return m.Size()
}
func (m *MarketAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketAmount.DiscardUnknown(m)
}

var xxx_messageInfo_MarketAmount proto.InternalMessageInfo

func (m *MarketAmount) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MarketAmount) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// NetAssetPrice is an association of assets and price used to record the value of things.
// It is related to the NetAssetValue message from the x/marker module, and is therefore often referred to as "a NAV".
type NetAssetPrice struct {
	// assets is the volume and denom that has been bought or sold.
	Assets types.Coin `protobuf:"bytes,1,opt,name=assets,proto3" json:"assets"`
	// price is what was paid for the assets.
	Price types.Coin `protobuf:"bytes,2,opt,name=price,proto3" json:"price"`
}

func (m *NetAssetPrice) Reset()      { *m = NetAssetPrice{} }
func (*NetAssetPrice) ProtoMessage() {}
func (*NetAssetPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_5607ea444303a1f8, []int{3}
}
func (m *NetAssetPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetAssetPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetAssetPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetAssetPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetAssetPrice.Merge(m, src)
}
func (m *NetAssetPrice) XXX_Size() int {
	return m.Size()
}
func (m *NetAssetPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_NetAssetPrice.DiscardUnknown(m)
}

var xxx_messageInfo_NetAssetPrice proto.InternalMessageInfo

func (m *NetAssetPrice) GetAssets() types.Coin {
	if m != nil {
		return m.Assets
	}
	return types.Coin{}
}

func (m *NetAssetPrice) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*Commitment)(nil), "provenance.exchange.v1.Commitment")
	proto.RegisterType((*AccountAmount)(nil), "provenance.exchange.v1.AccountAmount")
	proto.RegisterType((*MarketAmount)(nil), "provenance.exchange.v1.MarketAmount")
	proto.RegisterType((*NetAssetPrice)(nil), "provenance.exchange.v1.NetAssetPrice")
}

func init() {
	proto.RegisterFile("provenance/exchange/v1/commitments.proto", fileDescriptor_5607ea444303a1f8)
}

var fileDescriptor_5607ea444303a1f8 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xb1, 0xae, 0xd3, 0x30,
	0x14, 0x86, 0xe3, 0x7b, 0x2f, 0x85, 0x6b, 0xe8, 0x12, 0x55, 0x28, 0x2d, 0x52, 0x5a, 0x75, 0xca,
	0x52, 0x87, 0x16, 0x21, 0x24, 0xb6, 0xb4, 0x13, 0x03, 0xa8, 0x0a, 0x1b, 0x4b, 0xe5, 0x38, 0x56,
	0x6a, 0x55, 0xb1, 0xa3, 0xd8, 0xad, 0xca, 0x03, 0xb0, 0x33, 0x21, 0x46, 0x46, 0xc4, 0xc0, 0xc4,
	0x43, 0x74, 0xac, 0x98, 0x98, 0x00, 0xb5, 0x2f, 0x82, 0x62, 0xbb, 0x4d, 0x41, 0x80, 0xee, 0xd2,
	0x29, 0x39, 0xc7, 0xff, 0xef, 0xff, 0xb3, 0x75, 0x0c, 0x83, 0xa2, 0x14, 0x2b, 0xca, 0x31, 0x27,
	0x34, 0xa4, 0x6b, 0x32, 0xc7, 0x3c, 0xa3, 0xe1, 0x6a, 0x18, 0x12, 0x91, 0xe7, 0x4c, 0xe5, 0x94,
	0x2b, 0x89, 0x8a, 0x52, 0x28, 0xe1, 0xde, 0xaf, 0x95, 0xe8, 0xa0, 0x44, 0xab, 0x61, 0xc7, 0x27,
	0x42, 0xe6, 0x42, 0x86, 0x09, 0x96, 0x95, 0x33, 0xa1, 0x0a, 0x57, 0x76, 0xc6, 0x8d, 0xaf, 0xd3,
	0x36, 0xeb, 0x33, 0x5d, 0x85, 0xa6, 0xb0, 0x4b, 0xad, 0x4c, 0x64, 0xc2, 0xf4, 0xab, 0x3f, 0xd3,
	0xed, 0x7f, 0x04, 0x10, 0x4e, 0x8e, 0xf1, 0xae, 0x07, 0x6f, 0x63, 0x42, 0xc4, 0x92, 0x2b, 0x0f,
	0xf4, 0x40, 0x70, 0x1d, 0x1f, 0x4a, 0xf7, 0x01, 0xbc, 0xce, 0x71, 0xb9, 0xa0, 0x6a, 0xc6, 0x52,
	0xef, 0xa2, 0x07, 0x82, 0x66, 0x7c, 0xc7, 0x34, 0x9e, 0xa5, 0x2e, 0x81, 0x0d, 0x9c, 0x6b, 0xd7,
	0x65, 0xef, 0x32, 0xb8, 0x3b, 0x6a, 0x23, 0x1b, 0x5d, 0x71, 0x22, 0xcb, 0x89, 0x26, 0x82, 0xf1,
	0xf1, 0xc3, 0xcd, 0xf7, 0xae, 0xf3, 0xe9, 0x47, 0x37, 0xc8, 0x98, 0x9a, 0x2f, 0x13, 0x44, 0x44,
	0x6e, 0x39, 0xed, 0x67, 0x20, 0xd3, 0x45, 0xa8, 0x5e, 0x17, 0x54, 0x6a, 0x83, 0x8c, 0xed, 0xd6,
	0xfd, 0xcf, 0x00, 0x36, 0x23, 0x43, 0x13, 0xe9, 0x8e, 0x3b, 0xfa, 0x83, 0x76, 0xec, 0x7d, 0xfd,
	0x32, 0x68, 0xd9, 0xe8, 0x28, 0x4d, 0x4b, 0x2a, 0xe5, 0x4b, 0x55, 0x32, 0x9e, 0xd5, 0xe7, 0xa8,
	0x51, 0x2f, 0xce, 0x86, 0xfa, 0xf4, 0xea, 0xfd, 0x87, 0xae, 0xd3, 0x7f, 0x07, 0xe0, 0xbd, 0xe7,
	0xfa, 0x8a, 0x2c, 0xef, 0x6f, 0x77, 0x08, 0xfe, 0x79, 0x87, 0x67, 0x07, 0x7b, 0x03, 0x60, 0xf3,
	0x05, 0x55, 0x91, 0x94, 0x54, 0x4d, 0x4b, 0x46, 0xa8, 0xfb, 0x04, 0x36, 0x70, 0x55, 0x49, 0x8d,
	0xf5, 0xdf, 0xf0, 0xab, 0x2a, 0x3c, 0xb6, 0x72, 0xf7, 0x31, 0xbc, 0x55, 0x54, 0x3b, 0xe8, 0x91,
	0xb8, 0x81, 0xcf, 0xa8, 0x0d, 0xc7, 0x98, 0x6e, 0x76, 0x3e, 0xd8, 0xee, 0x7c, 0xf0, 0x73, 0xe7,
	0x83, 0xb7, 0x7b, 0xdf, 0xd9, 0xee, 0x7d, 0xe7, 0xdb, 0xde, 0x77, 0x60, 0x9b, 0xe9, 0x01, 0xfd,
	0xcb, 0x13, 0x98, 0x82, 0x57, 0xe8, 0xe4, 0xd8, 0xb5, 0x68, 0xc0, 0xc4, 0x49, 0x15, 0xae, 0x8f,
	0x2f, 0x2c, 0x69, 0xe8, 0x51, 0x7f, 0xf4, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x25, 0x00, 0x86, 0xf8,
	0x7f, 0x03, 0x00, 0x00,
}

func (m *Commitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Commitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommitments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MarketId != 0 {
		i = encodeVarintCommitments(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintCommitments(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommitments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintCommitments(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommitments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MarketId != 0 {
		i = encodeVarintCommitments(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NetAssetPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetAssetPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetAssetPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCommitments(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Assets.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCommitments(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintCommitments(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommitments(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Commitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCommitments(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovCommitments(uint64(m.MarketId))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovCommitments(uint64(l))
		}
	}
	return n
}

func (m *AccountAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCommitments(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovCommitments(uint64(l))
		}
	}
	return n
}

func (m *MarketAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovCommitments(uint64(m.MarketId))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovCommitments(uint64(l))
		}
	}
	return n
}

func (m *NetAssetPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Assets.Size()
	n += 1 + l + sovCommitments(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovCommitments(uint64(l))
	return n
}

func sovCommitments(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommitments(x uint64) (n int) {
	return sovCommitments(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Commitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommitments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommitments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommitments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetAssetPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetAssetPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetAssetPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Assets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommitments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommitments(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommitments
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommitments
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommitments
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommitments
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommitments        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommitments          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommitments = fmt.Errorf("proto: unexpected end of group")
)
