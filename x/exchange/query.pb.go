// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/exchange/v1/query.proto

package exchange

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryOrderFeeCalcRequest is a request message for the OrderFeeCalc query.
// Exactly one of ask_order or bid_order must be provided.
type QueryOrderFeeCalcRequest struct {
	// ask_order is the ask order to calculate the fees for.
	AskOrder *AskOrder `protobuf:"bytes,2,opt,name=ask_order,json=askOrder,proto3" json:"ask_order,omitempty"`
	// bid_order is the bid order to calculate the fees for.
	BidOrder *BidOrder `protobuf:"bytes,3,opt,name=bid_order,json=bidOrder,proto3" json:"bid_order,omitempty"`
}

func (m *QueryOrderFeeCalcRequest) Reset()         { *m = QueryOrderFeeCalcRequest{} }
func (m *QueryOrderFeeCalcRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrderFeeCalcRequest) ProtoMessage()    {}
func (*QueryOrderFeeCalcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{0}
}
func (m *QueryOrderFeeCalcRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderFeeCalcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderFeeCalcRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderFeeCalcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderFeeCalcRequest.Merge(m, src)
}
func (m *QueryOrderFeeCalcRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderFeeCalcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderFeeCalcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderFeeCalcRequest proto.InternalMessageInfo

func (m *QueryOrderFeeCalcRequest) GetAskOrder() *AskOrder {
	if m != nil {
		return m.AskOrder
	}
	return nil
}

func (m *QueryOrderFeeCalcRequest) GetBidOrder() *BidOrder {
	if m != nil {
		return m.BidOrder
	}
	return nil
}

// QueryOrderFeeCalcResponse is a response message for the OrderFeeCalc query.
type QueryOrderFeeCalcResponse struct {
	// creation_fee_options are the order creation flat fee options available for creating the provided order.
	// If it's empty, no order creation fee is required.
	// When creating the order, you should include exactly one of these.
	CreationFeeOptions []types.Coin `protobuf:"bytes,1,rep,name=creation_fee_options,json=creationFeeOptions,proto3" json:"creation_fee_options"`
	// settlement_flat_fee_options are the settlement flat fee options available for the provided order.
	// If it's empty, no settlement flat fee is required.
	// When creating an order, you should include exactly one of these in the settlement fees field.
	SettlementFlatFeeOptions []types.Coin `protobuf:"bytes,2,rep,name=settlement_flat_fee_options,json=settlementFlatFeeOptions,proto3" json:"settlement_flat_fee_options"`
	// settlement_ratio_fee_options are the settlement ratio fee options available for the provided order.
	// If it's empty, no settlement ratio fee is required.
	//
	// If the provided order was a bid order, you should include exactly one of these in the settlement fees field.
	// If the flat and ratio options you've chose have the same denom, a single entry should be included with their sum.
	//
	// If the provided order was an ask order, these are purely informational and represent how much will be removed
	// from your price if it settles at that price. If it settles for more, the actual amount will probably be larger.
	SettlementRatioFeeOptions []types.Coin `protobuf:"bytes,3,rep,name=settlement_ratio_fee_options,json=settlementRatioFeeOptions,proto3" json:"settlement_ratio_fee_options"`
}

func (m *QueryOrderFeeCalcResponse) Reset()         { *m = QueryOrderFeeCalcResponse{} }
func (m *QueryOrderFeeCalcResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderFeeCalcResponse) ProtoMessage()    {}
func (*QueryOrderFeeCalcResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{1}
}
func (m *QueryOrderFeeCalcResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderFeeCalcResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderFeeCalcResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderFeeCalcResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderFeeCalcResponse.Merge(m, src)
}
func (m *QueryOrderFeeCalcResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderFeeCalcResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderFeeCalcResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderFeeCalcResponse proto.InternalMessageInfo

func (m *QueryOrderFeeCalcResponse) GetCreationFeeOptions() []types.Coin {
	if m != nil {
		return m.CreationFeeOptions
	}
	return nil
}

func (m *QueryOrderFeeCalcResponse) GetSettlementFlatFeeOptions() []types.Coin {
	if m != nil {
		return m.SettlementFlatFeeOptions
	}
	return nil
}

func (m *QueryOrderFeeCalcResponse) GetSettlementRatioFeeOptions() []types.Coin {
	if m != nil {
		return m.SettlementRatioFeeOptions
	}
	return nil
}

// QueryGetOrderRequest is a request message for the GetOrder query.
type QueryGetOrderRequest struct {
	// order_id is the id of the order to look up.
	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *QueryGetOrderRequest) Reset()         { *m = QueryGetOrderRequest{} }
func (m *QueryGetOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderRequest) ProtoMessage()    {}
func (*QueryGetOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{2}
}
func (m *QueryGetOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderRequest.Merge(m, src)
}
func (m *QueryGetOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderRequest proto.InternalMessageInfo

func (m *QueryGetOrderRequest) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

// QueryGetOrderResponse is a response message for the GetOrder query.
type QueryGetOrderResponse struct {
	// order is the requested order.
	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *QueryGetOrderResponse) Reset()         { *m = QueryGetOrderResponse{} }
func (m *QueryGetOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderResponse) ProtoMessage()    {}
func (*QueryGetOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{3}
}
func (m *QueryGetOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderResponse.Merge(m, src)
}
func (m *QueryGetOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderResponse proto.InternalMessageInfo

func (m *QueryGetOrderResponse) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

// QueryGetOrderByExternalIDRequest is a request message for the GetOrderByExternalID query.
type QueryGetOrderByExternalIDRequest struct {
	// market_id is the id of the market that's expected to have the order.
	MarketId uint32 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// external_id the external id to look up.
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (m *QueryGetOrderByExternalIDRequest) Reset()         { *m = QueryGetOrderByExternalIDRequest{} }
func (m *QueryGetOrderByExternalIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderByExternalIDRequest) ProtoMessage()    {}
func (*QueryGetOrderByExternalIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{4}
}
func (m *QueryGetOrderByExternalIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderByExternalIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderByExternalIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderByExternalIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderByExternalIDRequest.Merge(m, src)
}
func (m *QueryGetOrderByExternalIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderByExternalIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderByExternalIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderByExternalIDRequest proto.InternalMessageInfo

func (m *QueryGetOrderByExternalIDRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *QueryGetOrderByExternalIDRequest) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

// QueryGetOrderByExternalIDResponse is a response message for the GetOrderByExternalID query.
type QueryGetOrderByExternalIDResponse struct {
	// order is the requested order.
	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *QueryGetOrderByExternalIDResponse) Reset()         { *m = QueryGetOrderByExternalIDResponse{} }
func (m *QueryGetOrderByExternalIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderByExternalIDResponse) ProtoMessage()    {}
func (*QueryGetOrderByExternalIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{5}
}
func (m *QueryGetOrderByExternalIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderByExternalIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderByExternalIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderByExternalIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderByExternalIDResponse.Merge(m, src)
}
func (m *QueryGetOrderByExternalIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderByExternalIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderByExternalIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderByExternalIDResponse proto.InternalMessageInfo

func (m *QueryGetOrderByExternalIDResponse) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

// QueryGetMarketOrdersRequest is a request message for the GetMarketOrders query.
type QueryGetMarketOrdersRequest struct {
	// market_id is the id of the market to get all the orders for.
	MarketId uint32 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// order_type is optional and can limit orders to only "ask" or "bid" orders.
	OrderType string `protobuf:"bytes,2,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	// after_order_id is a minimum (exclusive) order id. All results will be strictly greater than this.
	AfterOrderId uint64 `protobuf:"varint,3,opt,name=after_order_id,json=afterOrderId,proto3" json:"after_order_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetMarketOrdersRequest) Reset()         { *m = QueryGetMarketOrdersRequest{} }
func (m *QueryGetMarketOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMarketOrdersRequest) ProtoMessage()    {}
func (*QueryGetMarketOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{6}
}
func (m *QueryGetMarketOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMarketOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMarketOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMarketOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMarketOrdersRequest.Merge(m, src)
}
func (m *QueryGetMarketOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMarketOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMarketOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMarketOrdersRequest proto.InternalMessageInfo

func (m *QueryGetMarketOrdersRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *QueryGetMarketOrdersRequest) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *QueryGetMarketOrdersRequest) GetAfterOrderId() uint64 {
	if m != nil {
		return m.AfterOrderId
	}
	return 0
}

func (m *QueryGetMarketOrdersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetMarketOrdersResponse is a response message for the GetMarketOrders query.
type QueryGetMarketOrdersResponse struct {
	// orders are a page of the orders in the provided market.
	Orders []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	// pagination is the resulting pagination parameters.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetMarketOrdersResponse) Reset()         { *m = QueryGetMarketOrdersResponse{} }
func (m *QueryGetMarketOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMarketOrdersResponse) ProtoMessage()    {}
func (*QueryGetMarketOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{7}
}
func (m *QueryGetMarketOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMarketOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMarketOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMarketOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMarketOrdersResponse.Merge(m, src)
}
func (m *QueryGetMarketOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMarketOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMarketOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMarketOrdersResponse proto.InternalMessageInfo

func (m *QueryGetMarketOrdersResponse) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *QueryGetMarketOrdersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetOwnerOrdersRequest is a request message for the GetOwnerOrders query.
type QueryGetOwnerOrdersRequest struct {
	// owner is the bech32 address string of the owner to get the orders for.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// order_type is optional and can limit orders to only "ask" or "bid" orders.
	OrderType string `protobuf:"bytes,2,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	// after_order_id is a minimum (exclusive) order id. All results will be strictly greater than this.
	AfterOrderId uint64 `protobuf:"varint,3,opt,name=after_order_id,json=afterOrderId,proto3" json:"after_order_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetOwnerOrdersRequest) Reset()         { *m = QueryGetOwnerOrdersRequest{} }
func (m *QueryGetOwnerOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOwnerOrdersRequest) ProtoMessage()    {}
func (*QueryGetOwnerOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{8}
}
func (m *QueryGetOwnerOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOwnerOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOwnerOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOwnerOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOwnerOrdersRequest.Merge(m, src)
}
func (m *QueryGetOwnerOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOwnerOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOwnerOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOwnerOrdersRequest proto.InternalMessageInfo

func (m *QueryGetOwnerOrdersRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryGetOwnerOrdersRequest) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *QueryGetOwnerOrdersRequest) GetAfterOrderId() uint64 {
	if m != nil {
		return m.AfterOrderId
	}
	return 0
}

func (m *QueryGetOwnerOrdersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetOwnerOrdersResponse is a response message for the GetOwnerOrders query.
type QueryGetOwnerOrdersResponse struct {
	// orders are a page of the orders for the provided address.
	Orders []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	// pagination is the resulting pagination parameters.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetOwnerOrdersResponse) Reset()         { *m = QueryGetOwnerOrdersResponse{} }
func (m *QueryGetOwnerOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOwnerOrdersResponse) ProtoMessage()    {}
func (*QueryGetOwnerOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{9}
}
func (m *QueryGetOwnerOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOwnerOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOwnerOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOwnerOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOwnerOrdersResponse.Merge(m, src)
}
func (m *QueryGetOwnerOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOwnerOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOwnerOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOwnerOrdersResponse proto.InternalMessageInfo

func (m *QueryGetOwnerOrdersResponse) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *QueryGetOwnerOrdersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetAssetOrdersRequest is a request message for the GetAssetOrders query.
type QueryGetAssetOrdersRequest struct {
	// asset is the denom of assets to get orders for.
	Asset string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// order_type is optional and can limit orders to only "ask" or "bid" orders.
	OrderType string `protobuf:"bytes,2,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	// after_order_id is a minimum (exclusive) order id. All results will be strictly greater than this.
	AfterOrderId uint64 `protobuf:"varint,3,opt,name=after_order_id,json=afterOrderId,proto3" json:"after_order_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAssetOrdersRequest) Reset()         { *m = QueryGetAssetOrdersRequest{} }
func (m *QueryGetAssetOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAssetOrdersRequest) ProtoMessage()    {}
func (*QueryGetAssetOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{10}
}
func (m *QueryGetAssetOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAssetOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAssetOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAssetOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAssetOrdersRequest.Merge(m, src)
}
func (m *QueryGetAssetOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAssetOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAssetOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAssetOrdersRequest proto.InternalMessageInfo

func (m *QueryGetAssetOrdersRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QueryGetAssetOrdersRequest) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *QueryGetAssetOrdersRequest) GetAfterOrderId() uint64 {
	if m != nil {
		return m.AfterOrderId
	}
	return 0
}

func (m *QueryGetAssetOrdersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetAssetOrdersResponse is a response message for the GetAssetOrders query.
type QueryGetAssetOrdersResponse struct {
	// orders are a page of the orders for the provided asset.
	Orders []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	// pagination is the resulting pagination parameters.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAssetOrdersResponse) Reset()         { *m = QueryGetAssetOrdersResponse{} }
func (m *QueryGetAssetOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAssetOrdersResponse) ProtoMessage()    {}
func (*QueryGetAssetOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{11}
}
func (m *QueryGetAssetOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAssetOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAssetOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAssetOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAssetOrdersResponse.Merge(m, src)
}
func (m *QueryGetAssetOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAssetOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAssetOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAssetOrdersResponse proto.InternalMessageInfo

func (m *QueryGetAssetOrdersResponse) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *QueryGetAssetOrdersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetAllOrdersRequest is a request message for the GetAllOrders query.
type QueryGetAllOrdersRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllOrdersRequest) Reset()         { *m = QueryGetAllOrdersRequest{} }
func (m *QueryGetAllOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllOrdersRequest) ProtoMessage()    {}
func (*QueryGetAllOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{12}
}
func (m *QueryGetAllOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllOrdersRequest.Merge(m, src)
}
func (m *QueryGetAllOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllOrdersRequest proto.InternalMessageInfo

func (m *QueryGetAllOrdersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetAllOrdersResponse is a response message for the GetAllOrders query.
type QueryGetAllOrdersResponse struct {
	// orders are a page of the all orders.
	Orders []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	// pagination is the resulting pagination parameters.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllOrdersResponse) Reset()         { *m = QueryGetAllOrdersResponse{} }
func (m *QueryGetAllOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllOrdersResponse) ProtoMessage()    {}
func (*QueryGetAllOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{13}
}
func (m *QueryGetAllOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllOrdersResponse.Merge(m, src)
}
func (m *QueryGetAllOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllOrdersResponse proto.InternalMessageInfo

func (m *QueryGetAllOrdersResponse) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *QueryGetAllOrdersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetMarketRequest is a request message for the GetMarket query.
type QueryGetMarketRequest struct {
	// market_id is the id of the market to look up.
	MarketId uint32 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryGetMarketRequest) Reset()         { *m = QueryGetMarketRequest{} }
func (m *QueryGetMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMarketRequest) ProtoMessage()    {}
func (*QueryGetMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{14}
}
func (m *QueryGetMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMarketRequest.Merge(m, src)
}
func (m *QueryGetMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMarketRequest proto.InternalMessageInfo

func (m *QueryGetMarketRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

// QueryGetMarketResponse is a response message for the GetMarket query.
type QueryGetMarketResponse struct {
	// address is the bech32 address string of this market's account.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// market is all information and details of the market.
	Market *Market `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
}

func (m *QueryGetMarketResponse) Reset()         { *m = QueryGetMarketResponse{} }
func (m *QueryGetMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMarketResponse) ProtoMessage()    {}
func (*QueryGetMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{15}
}
func (m *QueryGetMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMarketResponse.Merge(m, src)
}
func (m *QueryGetMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMarketResponse proto.InternalMessageInfo

func (m *QueryGetMarketResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryGetMarketResponse) GetMarket() *Market {
	if m != nil {
		return m.Market
	}
	return nil
}

// QueryGetAllMarketsRequest is a request message for the GetAllMarkets query.
type QueryGetAllMarketsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllMarketsRequest) Reset()         { *m = QueryGetAllMarketsRequest{} }
func (m *QueryGetAllMarketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllMarketsRequest) ProtoMessage()    {}
func (*QueryGetAllMarketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{16}
}
func (m *QueryGetAllMarketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllMarketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllMarketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllMarketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllMarketsRequest.Merge(m, src)
}
func (m *QueryGetAllMarketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllMarketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllMarketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllMarketsRequest proto.InternalMessageInfo

func (m *QueryGetAllMarketsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetAllMarketsResponse is a response message for the GetAllMarkets query.
type QueryGetAllMarketsResponse struct {
	// markets are a page of the briefs for all markets.
	Markets []*MarketBrief `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
	// pagination is the resulting pagination parameters.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllMarketsResponse) Reset()         { *m = QueryGetAllMarketsResponse{} }
func (m *QueryGetAllMarketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllMarketsResponse) ProtoMessage()    {}
func (*QueryGetAllMarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{17}
}
func (m *QueryGetAllMarketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllMarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllMarketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllMarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllMarketsResponse.Merge(m, src)
}
func (m *QueryGetAllMarketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllMarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllMarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllMarketsResponse proto.InternalMessageInfo

func (m *QueryGetAllMarketsResponse) GetMarkets() []*MarketBrief {
	if m != nil {
		return m.Markets
	}
	return nil
}

func (m *QueryGetAllMarketsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest is a request message for the Params query.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{18}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is a response message for the Params query.
type QueryParamsResponse struct {
	// params are the exchange module parameter values.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{19}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

// QueryValidateCreateMarketRequest is a request message for the ValidateCreateMarket query.
type QueryValidateCreateMarketRequest struct {
	// create_market_request is the request to run validation on.
	CreateMarketRequest *MsgGovCreateMarketRequest `protobuf:"bytes,1,opt,name=create_market_request,json=createMarketRequest,proto3" json:"create_market_request,omitempty"`
}

func (m *QueryValidateCreateMarketRequest) Reset()         { *m = QueryValidateCreateMarketRequest{} }
func (m *QueryValidateCreateMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidateCreateMarketRequest) ProtoMessage()    {}
func (*QueryValidateCreateMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{20}
}
func (m *QueryValidateCreateMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateCreateMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateCreateMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateCreateMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateCreateMarketRequest.Merge(m, src)
}
func (m *QueryValidateCreateMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateCreateMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateCreateMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateCreateMarketRequest proto.InternalMessageInfo

func (m *QueryValidateCreateMarketRequest) GetCreateMarketRequest() *MsgGovCreateMarketRequest {
	if m != nil {
		return m.CreateMarketRequest
	}
	return nil
}

// QueryValidateCreateMarketResponse is a response message for the ValidateCreateMarket query.
type QueryValidateCreateMarketResponse struct {
	// error is any problems or inconsistencies in the provided gov prop msg.
	// This goes above and beyond the validation done when actually processing the governance proposal.
	// If an error is returned, and gov_prop_will_pass is true, it means the error is more of an
	// inconsistency that might cause certain aspects of the market to behave unexpectedly.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// gov_prop_will_pass will be true if the the provided msg will be successfully processed at the end of it's voting
	// period (assuming it passes).
	GovPropWillPass bool `protobuf:"varint,2,opt,name=gov_prop_will_pass,json=govPropWillPass,proto3" json:"gov_prop_will_pass,omitempty"`
}

func (m *QueryValidateCreateMarketResponse) Reset()         { *m = QueryValidateCreateMarketResponse{} }
func (m *QueryValidateCreateMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidateCreateMarketResponse) ProtoMessage()    {}
func (*QueryValidateCreateMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{21}
}
func (m *QueryValidateCreateMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateCreateMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateCreateMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateCreateMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateCreateMarketResponse.Merge(m, src)
}
func (m *QueryValidateCreateMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateCreateMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateCreateMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateCreateMarketResponse proto.InternalMessageInfo

func (m *QueryValidateCreateMarketResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *QueryValidateCreateMarketResponse) GetGovPropWillPass() bool {
	if m != nil {
		return m.GovPropWillPass
	}
	return false
}

// QueryValidateMarketRequest is a request message for the ValidateMarket query.
type QueryValidateMarketRequest struct {
	// market_id is the id of the market to check.
	MarketId uint32 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryValidateMarketRequest) Reset()         { *m = QueryValidateMarketRequest{} }
func (m *QueryValidateMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidateMarketRequest) ProtoMessage()    {}
func (*QueryValidateMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{22}
}
func (m *QueryValidateMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateMarketRequest.Merge(m, src)
}
func (m *QueryValidateMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateMarketRequest proto.InternalMessageInfo

func (m *QueryValidateMarketRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

// QueryValidateMarketResponse is a response message for the ValidateMarket query.
type QueryValidateMarketResponse struct {
	// error is any problems or inconsistencies in the provided market.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *QueryValidateMarketResponse) Reset()         { *m = QueryValidateMarketResponse{} }
func (m *QueryValidateMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidateMarketResponse) ProtoMessage()    {}
func (*QueryValidateMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{23}
}
func (m *QueryValidateMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateMarketResponse.Merge(m, src)
}
func (m *QueryValidateMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateMarketResponse proto.InternalMessageInfo

func (m *QueryValidateMarketResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// QueryValidateManageFeesRequest is a request message for the ValidateManageFees query.
type QueryValidateManageFeesRequest struct {
	// manage_fees_request is the request to run validation on.
	ManageFeesRequest *MsgGovManageFeesRequest `protobuf:"bytes,1,opt,name=manage_fees_request,json=manageFeesRequest,proto3" json:"manage_fees_request,omitempty"`
}

func (m *QueryValidateManageFeesRequest) Reset()         { *m = QueryValidateManageFeesRequest{} }
func (m *QueryValidateManageFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidateManageFeesRequest) ProtoMessage()    {}
func (*QueryValidateManageFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{24}
}
func (m *QueryValidateManageFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateManageFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateManageFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateManageFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateManageFeesRequest.Merge(m, src)
}
func (m *QueryValidateManageFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateManageFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateManageFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateManageFeesRequest proto.InternalMessageInfo

func (m *QueryValidateManageFeesRequest) GetManageFeesRequest() *MsgGovManageFeesRequest {
	if m != nil {
		return m.ManageFeesRequest
	}
	return nil
}

// QueryValidateManageFeesResponse is a response message for the ValidateManageFees query.
type QueryValidateManageFeesResponse struct {
	// error is any problems or inconsistencies in the provided gov prop msg.
	// This goes above and beyond the validation done when actually processing the governance proposal.
	// If an error is returned, and gov_prop_will_pass is true, it means the error is more of an
	// inconsistency that might cause certain aspects of the market to behave unexpectedly.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// gov_prop_will_pass will be true if the the provided msg will be successfully processed at the end of it's voting
	// period (assuming it passes).
	GovPropWillPass bool `protobuf:"varint,2,opt,name=gov_prop_will_pass,json=govPropWillPass,proto3" json:"gov_prop_will_pass,omitempty"`
}

func (m *QueryValidateManageFeesResponse) Reset()         { *m = QueryValidateManageFeesResponse{} }
func (m *QueryValidateManageFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidateManageFeesResponse) ProtoMessage()    {}
func (*QueryValidateManageFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{25}
}
func (m *QueryValidateManageFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateManageFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateManageFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateManageFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateManageFeesResponse.Merge(m, src)
}
func (m *QueryValidateManageFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateManageFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateManageFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateManageFeesResponse proto.InternalMessageInfo

func (m *QueryValidateManageFeesResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *QueryValidateManageFeesResponse) GetGovPropWillPass() bool {
	if m != nil {
		return m.GovPropWillPass
	}
	return false
}

func init() {
	proto.RegisterType((*QueryOrderFeeCalcRequest)(nil), "provenance.exchange.v1.QueryOrderFeeCalcRequest")
	proto.RegisterType((*QueryOrderFeeCalcResponse)(nil), "provenance.exchange.v1.QueryOrderFeeCalcResponse")
	proto.RegisterType((*QueryGetOrderRequest)(nil), "provenance.exchange.v1.QueryGetOrderRequest")
	proto.RegisterType((*QueryGetOrderResponse)(nil), "provenance.exchange.v1.QueryGetOrderResponse")
	proto.RegisterType((*QueryGetOrderByExternalIDRequest)(nil), "provenance.exchange.v1.QueryGetOrderByExternalIDRequest")
	proto.RegisterType((*QueryGetOrderByExternalIDResponse)(nil), "provenance.exchange.v1.QueryGetOrderByExternalIDResponse")
	proto.RegisterType((*QueryGetMarketOrdersRequest)(nil), "provenance.exchange.v1.QueryGetMarketOrdersRequest")
	proto.RegisterType((*QueryGetMarketOrdersResponse)(nil), "provenance.exchange.v1.QueryGetMarketOrdersResponse")
	proto.RegisterType((*QueryGetOwnerOrdersRequest)(nil), "provenance.exchange.v1.QueryGetOwnerOrdersRequest")
	proto.RegisterType((*QueryGetOwnerOrdersResponse)(nil), "provenance.exchange.v1.QueryGetOwnerOrdersResponse")
	proto.RegisterType((*QueryGetAssetOrdersRequest)(nil), "provenance.exchange.v1.QueryGetAssetOrdersRequest")
	proto.RegisterType((*QueryGetAssetOrdersResponse)(nil), "provenance.exchange.v1.QueryGetAssetOrdersResponse")
	proto.RegisterType((*QueryGetAllOrdersRequest)(nil), "provenance.exchange.v1.QueryGetAllOrdersRequest")
	proto.RegisterType((*QueryGetAllOrdersResponse)(nil), "provenance.exchange.v1.QueryGetAllOrdersResponse")
	proto.RegisterType((*QueryGetMarketRequest)(nil), "provenance.exchange.v1.QueryGetMarketRequest")
	proto.RegisterType((*QueryGetMarketResponse)(nil), "provenance.exchange.v1.QueryGetMarketResponse")
	proto.RegisterType((*QueryGetAllMarketsRequest)(nil), "provenance.exchange.v1.QueryGetAllMarketsRequest")
	proto.RegisterType((*QueryGetAllMarketsResponse)(nil), "provenance.exchange.v1.QueryGetAllMarketsResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "provenance.exchange.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "provenance.exchange.v1.QueryParamsResponse")
	proto.RegisterType((*QueryValidateCreateMarketRequest)(nil), "provenance.exchange.v1.QueryValidateCreateMarketRequest")
	proto.RegisterType((*QueryValidateCreateMarketResponse)(nil), "provenance.exchange.v1.QueryValidateCreateMarketResponse")
	proto.RegisterType((*QueryValidateMarketRequest)(nil), "provenance.exchange.v1.QueryValidateMarketRequest")
	proto.RegisterType((*QueryValidateMarketResponse)(nil), "provenance.exchange.v1.QueryValidateMarketResponse")
	proto.RegisterType((*QueryValidateManageFeesRequest)(nil), "provenance.exchange.v1.QueryValidateManageFeesRequest")
	proto.RegisterType((*QueryValidateManageFeesResponse)(nil), "provenance.exchange.v1.QueryValidateManageFeesResponse")
}

func init() {
	proto.RegisterFile("provenance/exchange/v1/query.proto", fileDescriptor_00949b75b1c10bfe)
}

var fileDescriptor_00949b75b1c10bfe = []byte{
	// 1470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xbd, 0x6f, 0x14, 0x47,
	0x1b, 0xf7, 0xd8, 0xd8, 0xd8, 0x0f, 0x5f, 0x7a, 0xc7, 0x07, 0x3a, 0x1f, 0x70, 0x36, 0x0b, 0x02,
	0xcb, 0xe0, 0x5d, 0xee, 0x0e, 0xfc, 0xbe, 0x14, 0xbc, 0x09, 0x26, 0x31, 0xb2, 0x14, 0x84, 0xd9,
	0x44, 0x49, 0xe4, 0x22, 0xc7, 0xdc, 0xdd, 0x78, 0x59, 0xb1, 0xb7, 0x73, 0xec, 0x2e, 0x87, 0x2d,
	0xcb, 0x45, 0x3e, 0x1a, 0x52, 0x45, 0x4a, 0x0a, 0x22, 0x14, 0xd2, 0xa4, 0x4f, 0x8a, 0x74, 0x29,
	0x52, 0xa4, 0x08, 0x25, 0x4a, 0x9a, 0xa4, 0x89, 0x22, 0x48, 0x99, 0xfc, 0x0f, 0xd1, 0xce, 0xcc,
	0x9e, 0x77, 0xcf, 0xfb, 0x75, 0x89, 0x0b, 0x57, 0xbe, 0x9d, 0x7d, 0x3e, 0x7e, 0xcf, 0xef, 0x99,
	0x79, 0xf6, 0x37, 0x06, 0xa5, 0xe3, 0xb0, 0x2e, 0xb5, 0x89, 0xdd, 0xa4, 0x1a, 0x5d, 0x6f, 0xde,
	0x25, 0xb6, 0x41, 0xb5, 0x6e, 0x45, 0xbb, 0xff, 0x80, 0x3a, 0x1b, 0x6a, 0xc7, 0x61, 0x1e, 0xc3,
	0xc7, 0xb6, 0x6d, 0xd4, 0xc0, 0x46, 0xed, 0x56, 0x4a, 0x53, 0x4d, 0xe6, 0xb6, 0x99, 0x5b, 0xe7,
	0x56, 0x9a, 0x78, 0x10, 0x2e, 0xa5, 0x39, 0xf1, 0xa4, 0x35, 0x88, 0x4b, 0x45, 0x2c, 0xad, 0x5b,
	0x69, 0x50, 0x8f, 0x54, 0xb4, 0x0e, 0x31, 0x4c, 0x9b, 0x78, 0x26, 0xb3, 0xa5, 0x6d, 0x39, 0x6c,
	0x1b, 0x58, 0x35, 0x99, 0x19, 0xbc, 0x3f, 0x61, 0x30, 0x66, 0x58, 0x54, 0x23, 0x1d, 0x53, 0x23,
	0xb6, 0xcd, 0x3c, 0xee, 0x1c, 0x64, 0x2a, 0x18, 0xcc, 0x60, 0x02, 0x81, 0xff, 0x4b, 0xae, 0x9e,
	0x4e, 0x28, 0xab, 0x4d, 0x9c, 0x7b, 0xd4, 0xcb, 0x30, 0x62, 0x4e, 0x8b, 0x3a, 0x6e, 0x86, 0x51,
	0x87, 0x38, 0xa4, 0x1d, 0x18, 0x4d, 0x27, 0x18, 0x79, 0xeb, 0xc2, 0x40, 0x79, 0x8c, 0xa0, 0x78,
	0xdb, 0xa7, 0xe1, 0x96, 0x1f, 0x7b, 0x89, 0xd2, 0xeb, 0xc4, 0x6a, 0xea, 0xf4, 0xfe, 0x03, 0xea,
	0x7a, 0xf8, 0x2a, 0x4c, 0x10, 0xf7, 0x5e, 0x9d, 0xa7, 0x2d, 0x0e, 0xcf, 0xa0, 0xd9, 0x03, 0xd5,
	0x19, 0x35, 0x9e, 0x73, 0xf5, 0x9a, 0x7b, 0x8f, 0x87, 0xd0, 0xc7, 0x89, 0xfc, 0xe5, 0xbb, 0x37,
	0xcc, 0x96, 0x74, 0x1f, 0x49, 0x77, 0x5f, 0x34, 0x5b, 0xd2, 0xbd, 0x21, 0x7f, 0x29, 0xdf, 0x0c,
	0xc3, 0x54, 0x0c, 0x34, 0xb7, 0xc3, 0x6c, 0x97, 0xe2, 0xdb, 0x50, 0x68, 0x3a, 0x94, 0x33, 0x5e,
	0x5f, 0xa3, 0xb4, 0xce, 0x3a, 0x9c, 0xfc, 0x22, 0x9a, 0x19, 0x99, 0x3d, 0x50, 0x9d, 0x52, 0x65,
	0xd7, 0xfd, 0xde, 0xa9, 0xb2, 0x77, 0xea, 0x75, 0x66, 0xda, 0x8b, 0xfb, 0x9e, 0xfd, 0x36, 0x3d,
	0xa4, 0xe3, 0xc0, 0x79, 0x89, 0xd2, 0x5b, 0xc2, 0x15, 0xbf, 0x07, 0xc7, 0x5d, 0xea, 0x79, 0x16,
	0x6d, 0x53, 0xdb, 0xab, 0xaf, 0x59, 0xc4, 0x8b, 0x44, 0x1e, 0xce, 0x17, 0xb9, 0xb8, 0x1d, 0x63,
	0xc9, 0x22, 0x5e, 0x28, 0xfe, 0x1d, 0x38, 0x11, 0x8a, 0xef, 0xf8, 0xe9, 0x23, 0x09, 0x46, 0xf2,
	0x25, 0x98, 0xda, 0x0e, 0xa2, 0xfb, 0x31, 0xb6, 0x33, 0x28, 0x15, 0x28, 0x70, 0xc6, 0x6e, 0x50,
	0x4f, 0xb0, 0x29, 0x1b, 0x39, 0x05, 0xe3, 0xbc, 0x0b, 0x75, 0xb3, 0x55, 0x44, 0x33, 0x68, 0x76,
	0x9f, 0xbe, 0x9f, 0x3f, 0x2f, 0xb7, 0x94, 0x37, 0xe0, 0x68, 0x9f, 0x8b, 0x24, 0xb8, 0x06, 0xa3,
	0xa2, 0x73, 0x88, 0x77, 0xee, 0x64, 0x52, 0xe7, 0x84, 0x97, 0xb0, 0x55, 0xee, 0xc0, 0x4c, 0x24,
	0xda, 0xe2, 0xc6, 0xeb, 0xeb, 0x1e, 0x75, 0x6c, 0x62, 0x2d, 0xbf, 0x16, 0x80, 0x39, 0x0e, 0x13,
	0x62, 0xb7, 0x07, 0x68, 0x0e, 0xe9, 0xe3, 0x62, 0x61, 0xb9, 0x85, 0xa7, 0xe1, 0x00, 0x95, 0x1e,
	0xfe, 0x6b, 0x7f, 0xd3, 0x4d, 0xe8, 0x10, 0x2c, 0x2d, 0xb7, 0x94, 0x77, 0xe1, 0x54, 0x4a, 0x86,
	0x7f, 0x83, 0xfd, 0x47, 0x04, 0xc7, 0x83, 0xd0, 0x37, 0x39, 0x1e, 0xfe, 0xda, 0xcd, 0x85, 0xfb,
	0x24, 0x80, 0x60, 0xd8, 0xdb, 0xe8, 0x50, 0x09, 0x7b, 0x82, 0xaf, 0xbc, 0xb5, 0xd1, 0xa1, 0xf8,
	0x0c, 0x1c, 0x26, 0x6b, 0x1e, 0x75, 0xea, 0xbd, 0x36, 0x8c, 0xf0, 0x36, 0x1c, 0xe4, 0xab, 0xb7,
	0x44, 0x2f, 0xf0, 0x12, 0xc0, 0xf6, 0x10, 0x2a, 0x36, 0x39, 0xf6, 0xb3, 0x91, 0xed, 0x20, 0xa6,
	0x5f, 0xb0, 0x29, 0x56, 0x88, 0x41, 0x25, 0x3a, 0x3d, 0xe4, 0xa9, 0x3c, 0x45, 0x70, 0x22, 0xbe,
	0x12, 0xc9, 0xcf, 0x65, 0x18, 0x13, 0xb3, 0x44, 0x1e, 0x97, 0x0c, 0x82, 0xa4, 0x31, 0xbe, 0x11,
	0x83, 0xef, 0x5c, 0x26, 0x3e, 0x91, 0x33, 0x02, 0xf0, 0x57, 0x04, 0xa5, 0x5e, 0x17, 0x1f, 0xda,
	0x92, 0x81, 0x1e, 0xd3, 0x2a, 0x8c, 0x32, 0x7f, 0x95, 0xb3, 0x3c, 0xb1, 0x58, 0xfc, 0xe9, 0xdb,
	0xf9, 0x82, 0xcc, 0x72, 0xad, 0xd5, 0x72, 0xa8, 0xeb, 0xbe, 0xe9, 0x39, 0xa6, 0x6d, 0xe8, 0xc2,
	0x6c, 0x6f, 0x91, 0xff, 0x45, 0x68, 0x1b, 0x45, 0x6a, 0xdb, 0x23, 0xdc, 0x7f, 0x1f, 0xe2, 0xfe,
	0x9a, 0xeb, 0xf6, 0xef, 0xf2, 0x02, 0x8c, 0x12, 0x7f, 0x55, 0x70, 0xaf, 0x8b, 0x87, 0xbd, 0xcb,
	0x70, 0xa4, 0x82, 0x3d, 0xc2, 0x70, 0x43, 0x7e, 0x52, 0x7d, 0x78, 0x96, 0x15, 0xa5, 0x77, 0xb7,
	0x38, 0x78, 0x82, 0xe4, 0xc7, 0x31, 0x9a, 0x64, 0x8f, 0x30, 0x70, 0x69, 0xfb, 0xa3, 0x22, 0xe6,
	0x4f, 0x9e, 0x19, 0xaa, 0x7c, 0x84, 0xe0, 0x58, 0xbf, 0x9b, 0x2c, 0xa8, 0x0a, 0xfb, 0x89, 0x38,
	0xf9, 0x99, 0x33, 0x21, 0x30, 0xc4, 0x0b, 0x30, 0x26, 0x42, 0x4b, 0xe9, 0x52, 0x4e, 0x22, 0x41,
	0xe6, 0x92, 0xd6, 0x4a, 0x33, 0xc2, 0xac, 0x78, 0xb9, 0xeb, 0xfd, 0xfb, 0x2a, 0x7c, 0x0a, 0x43,
	0x59, 0x64, 0xbd, 0x57, 0x61, 0xbf, 0x40, 0x13, 0x74, 0xf0, 0x74, 0x3a, 0xf8, 0x45, 0xc7, 0xa4,
	0x6b, 0x7a, 0xe0, 0xb3, 0x7b, 0x8d, 0x2c, 0x00, 0xe6, 0x28, 0x57, 0xb8, 0xa8, 0x94, 0x85, 0x28,
	0x37, 0x61, 0x32, 0xb2, 0x2a, 0x41, 0x2f, 0xc0, 0x98, 0x10, 0x9f, 0xf2, 0xb3, 0x9b, 0x48, 0xb8,
	0xf4, 0x93, 0xd6, 0xca, 0x23, 0x24, 0x55, 0xc3, 0xdb, 0xc4, 0x32, 0x5b, 0xc4, 0xa3, 0xd7, 0x7d,
	0x6d, 0x46, 0xa3, 0x3b, 0x87, 0xc2, 0x51, 0x2e, 0xd9, 0x68, 0x5d, 0x6e, 0x20, 0x47, 0xbc, 0x90,
	0xb9, 0x2a, 0x89, 0xfc, 0xb8, 0xc6, 0x0d, 0xd6, 0x8d, 0x89, 0xa8, 0x4f, 0x36, 0x77, 0x2e, 0x2a,
	0x6b, 0x52, 0x5e, 0xc4, 0x43, 0x91, 0x85, 0x16, 0x60, 0x94, 0x3a, 0x0e, 0x73, 0x82, 0x19, 0xc9,
	0x1f, 0xf0, 0x79, 0xc0, 0x06, 0xeb, 0xfa, 0x97, 0x8e, 0x4e, 0xfd, 0xa1, 0x69, 0x59, 0xf5, 0x0e,
	0x71, 0x5d, 0xbe, 0xf7, 0xc6, 0xf5, 0x23, 0x06, 0xeb, 0xae, 0x38, 0xac, 0xf3, 0x8e, 0x69, 0x59,
	0x2b, 0xc4, 0x75, 0x95, 0x2b, 0xb2, 0xfd, 0x41, 0x9e, 0x01, 0x8e, 0x49, 0x4d, 0x4e, 0xbf, 0x7e,
	0xd7, 0x34, 0x70, 0xca, 0xfb, 0x08, 0xca, 0x7d, 0x5e, 0x36, 0x31, 0xe8, 0x12, 0xa5, 0xbd, 0xad,
	0x5d, 0x87, 0xc9, 0x36, 0x5f, 0xf4, 0x45, 0xa9, 0xdb, 0xc7, 0xaf, 0x96, 0xce, 0xef, 0x8e, 0x68,
	0xfa, 0x7f, 0xda, 0xfd, 0x4b, 0x4a, 0x0b, 0xa6, 0x13, 0x21, 0xec, 0x1a, 0xb3, 0xd5, 0xcf, 0x26,
	0x61, 0x94, 0xa7, 0xc1, 0x5f, 0x22, 0x38, 0x18, 0xbe, 0x3b, 0xe0, 0x8b, 0x49, 0x45, 0x24, 0xdd,
	0x80, 0x4a, 0x95, 0x01, 0x3c, 0x44, 0x09, 0xca, 0xdc, 0x07, 0x3f, 0xff, 0xf1, 0xe9, 0xf0, 0x19,
	0xac, 0x68, 0x09, 0x77, 0x2f, 0x9f, 0x5d, 0x71, 0x95, 0xc3, 0x9f, 0x23, 0x18, 0x0f, 0x84, 0x2c,
	0xbe, 0x90, 0x9a, 0xab, 0x4f, 0xd2, 0x97, 0xe6, 0x73, 0x5a, 0x4b, 0x54, 0x17, 0x39, 0xaa, 0x39,
	0x3c, 0xab, 0xa5, 0xdd, 0x2d, 0xb5, 0xcd, 0xe0, 0x03, 0xbe, 0x85, 0x1f, 0x0f, 0x43, 0x21, 0x4e,
	0x64, 0xe3, 0xff, 0xe5, 0xca, 0x1c, 0xa3, 0xfc, 0x4b, 0x57, 0xfe, 0x81, 0xa7, 0xc4, 0xff, 0x31,
	0xe2, 0x05, 0x7c, 0x88, 0x56, 0x5f, 0xc5, 0xff, 0xd7, 0x52, 0x2f, 0xd1, 0xda, 0x66, 0xef, 0xec,
	0x6c, 0x05, 0x65, 0x85, 0xee, 0x14, 0x5b, 0xf8, 0x95, 0x54, 0x0e, 0xdc, 0xb8, 0x30, 0xd1, 0x00,
	0x7f, 0x22, 0x38, 0xd2, 0x27, 0xad, 0x71, 0x2d, 0xab, 0xb6, 0x98, 0x2b, 0x45, 0xe9, 0xd2, 0x60,
	0x4e, 0x92, 0x0b, 0x9b, 0x53, 0x71, 0x77, 0xb5, 0x86, 0x2b, 0x83, 0x32, 0xe1, 0x26, 0xbb, 0x24,
	0x16, 0x8f, 0xbf, 0x46, 0x70, 0x38, 0x2a, 0x66, 0x71, 0x35, 0xb3, 0x93, 0x3b, 0x54, 0x7d, 0xa9,
	0x36, 0x90, 0x8f, 0xac, 0xf5, 0x12, 0xaf, 0x55, 0xc5, 0x17, 0x32, 0x60, 0xf3, 0x8b, 0x80, 0xb6,
	0xc9, 0xff, 0xf4, 0x10, 0x87, 0xc4, 0x61, 0x36, 0xe2, 0x9d, 0x5a, 0x38, 0x1b, 0x71, 0x8c, 0xfa,
	0xcc, 0x8d, 0x98, 0x0b, 0x6b, 0x6d, 0x93, 0xff, 0xd9, 0xc2, 0x4f, 0x10, 0x1c, 0x0c, 0x4b, 0xb9,
	0x8c, 0x59, 0x15, 0x23, 0x2d, 0x33, 0x66, 0x55, 0x9c, 0x4e, 0x54, 0xce, 0x72, 0xac, 0x33, 0xb8,
	0x9c, 0x8e, 0x15, 0x3f, 0x45, 0x30, 0xd1, 0xdb, 0x8d, 0x78, 0x3e, 0xdf, 0xae, 0x0d, 0x70, 0xa9,
	0x79, 0xcd, 0x25, 0xa8, 0x2a, 0x07, 0x75, 0x01, 0xcf, 0xe5, 0xdf, 0xdc, 0xfe, 0xa8, 0x3f, 0x14,
	0x51, 0x52, 0x38, 0x0f, 0x1b, 0x51, 0x6d, 0x57, 0xaa, 0x0e, 0xe2, 0x22, 0xc1, 0x9e, 0xe3, 0x60,
	0x4f, 0xe1, 0xe9, 0x74, 0xb0, 0x2e, 0x7e, 0x84, 0x60, 0x4c, 0xe8, 0x1e, 0x3c, 0x97, 0x9a, 0x27,
	0x22, 0xb5, 0x4a, 0xe7, 0x73, 0xd9, 0xe6, 0x6d, 0xa7, 0x10, 0x5c, 0xf8, 0x07, 0x04, 0x85, 0x38,
	0x81, 0x93, 0x31, 0xda, 0x53, 0xe4, 0x59, 0xc6, 0x68, 0x4f, 0x53, 0x53, 0xca, 0x02, 0x47, 0x7d,
	0x11, 0xab, 0x49, 0xa8, 0xbb, 0xd2, 0x5b, 0x8b, 0x08, 0x40, 0xfc, 0x17, 0x82, 0xc3, 0x51, 0x0d,
	0x94, 0x71, 0xc8, 0x63, 0xb5, 0x56, 0xc6, 0x21, 0x8f, 0x17, 0x59, 0x8a, 0xc3, 0x31, 0x5b, 0xab,
	0x97, 0x71, 0x6d, 0x80, 0x11, 0x1c, 0x14, 0x92, 0xec, 0xd4, 0x2b, 0x35, 0x66, 0x8f, 0x7f, 0x87,
	0x00, 0xef, 0x94, 0x4e, 0x78, 0x21, 0x27, 0xfe, 0x3e, 0x35, 0x56, 0xfa, 0xef, 0xc0, 0x7e, 0x79,
	0x07, 0x5c, 0xa8, 0x88, 0x9e, 0x9c, 0x5c, 0xa4, 0xcf, 0x5e, 0x94, 0xd1, 0xf3, 0x17, 0x65, 0xf4,
	0xfb, 0x8b, 0x32, 0xfa, 0xe4, 0x65, 0x79, 0xe8, 0xf9, 0xcb, 0xf2, 0xd0, 0x2f, 0x2f, 0xcb, 0x43,
	0x30, 0x65, 0xb2, 0x04, 0x28, 0x2b, 0x68, 0x55, 0x35, 0x4c, 0xef, 0xee, 0x83, 0x86, 0xda, 0x64,
	0xed, 0x50, 0xba, 0x79, 0x93, 0x85, 0x93, 0xaf, 0xf7, 0xd2, 0x37, 0xc6, 0xf8, 0xbf, 0xb5, 0x6b,
	0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x87, 0x82, 0xbd, 0x3f, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// OrderFeeCalc calculates the fees that will be associated with the provided order.
	OrderFeeCalc(ctx context.Context, in *QueryOrderFeeCalcRequest, opts ...grpc.CallOption) (*QueryOrderFeeCalcResponse, error)
	// GetOrder looks up an order by id.
	GetOrder(ctx context.Context, in *QueryGetOrderRequest, opts ...grpc.CallOption) (*QueryGetOrderResponse, error)
	// GetOrderByExternalID looks up an order by market id and external id.
	GetOrderByExternalID(ctx context.Context, in *QueryGetOrderByExternalIDRequest, opts ...grpc.CallOption) (*QueryGetOrderByExternalIDResponse, error)
	// GetMarketOrders looks up the orders in a market.
	GetMarketOrders(ctx context.Context, in *QueryGetMarketOrdersRequest, opts ...grpc.CallOption) (*QueryGetMarketOrdersResponse, error)
	// GetOwnerOrders looks up the orders from the provided owner address.
	GetOwnerOrders(ctx context.Context, in *QueryGetOwnerOrdersRequest, opts ...grpc.CallOption) (*QueryGetOwnerOrdersResponse, error)
	// GetAssetOrders looks up the orders for a specific asset denom.
	GetAssetOrders(ctx context.Context, in *QueryGetAssetOrdersRequest, opts ...grpc.CallOption) (*QueryGetAssetOrdersResponse, error)
	// GetAllOrders gets all orders in the exchange module.
	GetAllOrders(ctx context.Context, in *QueryGetAllOrdersRequest, opts ...grpc.CallOption) (*QueryGetAllOrdersResponse, error)
	// GetMarket returns all the information and details about a market.
	GetMarket(ctx context.Context, in *QueryGetMarketRequest, opts ...grpc.CallOption) (*QueryGetMarketResponse, error)
	// GetAllMarkets returns brief information about each market.
	GetAllMarkets(ctx context.Context, in *QueryGetAllMarketsRequest, opts ...grpc.CallOption) (*QueryGetAllMarketsResponse, error)
	// Params returns the exchange module parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ValidateCreateMarket checks the provided MsgGovCreateMarketResponse and returns any errors it might have.
	ValidateCreateMarket(ctx context.Context, in *QueryValidateCreateMarketRequest, opts ...grpc.CallOption) (*QueryValidateCreateMarketResponse, error)
	// ValidateMarket checks for any problems with a market's setup.
	ValidateMarket(ctx context.Context, in *QueryValidateMarketRequest, opts ...grpc.CallOption) (*QueryValidateMarketResponse, error)
	// ValidateManageFees checks the provided MsgGovManageFeesRequest and returns any errors that it might have.
	ValidateManageFees(ctx context.Context, in *QueryValidateManageFeesRequest, opts ...grpc.CallOption) (*QueryValidateManageFeesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) OrderFeeCalc(ctx context.Context, in *QueryOrderFeeCalcRequest, opts ...grpc.CallOption) (*QueryOrderFeeCalcResponse, error) {
	out := new(QueryOrderFeeCalcResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/OrderFeeCalc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOrder(ctx context.Context, in *QueryGetOrderRequest, opts ...grpc.CallOption) (*QueryGetOrderResponse, error) {
	out := new(QueryGetOrderResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOrderByExternalID(ctx context.Context, in *QueryGetOrderByExternalIDRequest, opts ...grpc.CallOption) (*QueryGetOrderByExternalIDResponse, error) {
	out := new(QueryGetOrderByExternalIDResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/GetOrderByExternalID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMarketOrders(ctx context.Context, in *QueryGetMarketOrdersRequest, opts ...grpc.CallOption) (*QueryGetMarketOrdersResponse, error) {
	out := new(QueryGetMarketOrdersResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/GetMarketOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOwnerOrders(ctx context.Context, in *QueryGetOwnerOrdersRequest, opts ...grpc.CallOption) (*QueryGetOwnerOrdersResponse, error) {
	out := new(QueryGetOwnerOrdersResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/GetOwnerOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAssetOrders(ctx context.Context, in *QueryGetAssetOrdersRequest, opts ...grpc.CallOption) (*QueryGetAssetOrdersResponse, error) {
	out := new(QueryGetAssetOrdersResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/GetAssetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllOrders(ctx context.Context, in *QueryGetAllOrdersRequest, opts ...grpc.CallOption) (*QueryGetAllOrdersResponse, error) {
	out := new(QueryGetAllOrdersResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/GetAllOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMarket(ctx context.Context, in *QueryGetMarketRequest, opts ...grpc.CallOption) (*QueryGetMarketResponse, error) {
	out := new(QueryGetMarketResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/GetMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllMarkets(ctx context.Context, in *QueryGetAllMarketsRequest, opts ...grpc.CallOption) (*QueryGetAllMarketsResponse, error) {
	out := new(QueryGetAllMarketsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/GetAllMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidateCreateMarket(ctx context.Context, in *QueryValidateCreateMarketRequest, opts ...grpc.CallOption) (*QueryValidateCreateMarketResponse, error) {
	out := new(QueryValidateCreateMarketResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/ValidateCreateMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidateMarket(ctx context.Context, in *QueryValidateMarketRequest, opts ...grpc.CallOption) (*QueryValidateMarketResponse, error) {
	out := new(QueryValidateMarketResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/ValidateMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidateManageFees(ctx context.Context, in *QueryValidateManageFeesRequest, opts ...grpc.CallOption) (*QueryValidateManageFeesResponse, error) {
	out := new(QueryValidateManageFeesResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/ValidateManageFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// OrderFeeCalc calculates the fees that will be associated with the provided order.
	OrderFeeCalc(context.Context, *QueryOrderFeeCalcRequest) (*QueryOrderFeeCalcResponse, error)
	// GetOrder looks up an order by id.
	GetOrder(context.Context, *QueryGetOrderRequest) (*QueryGetOrderResponse, error)
	// GetOrderByExternalID looks up an order by market id and external id.
	GetOrderByExternalID(context.Context, *QueryGetOrderByExternalIDRequest) (*QueryGetOrderByExternalIDResponse, error)
	// GetMarketOrders looks up the orders in a market.
	GetMarketOrders(context.Context, *QueryGetMarketOrdersRequest) (*QueryGetMarketOrdersResponse, error)
	// GetOwnerOrders looks up the orders from the provided owner address.
	GetOwnerOrders(context.Context, *QueryGetOwnerOrdersRequest) (*QueryGetOwnerOrdersResponse, error)
	// GetAssetOrders looks up the orders for a specific asset denom.
	GetAssetOrders(context.Context, *QueryGetAssetOrdersRequest) (*QueryGetAssetOrdersResponse, error)
	// GetAllOrders gets all orders in the exchange module.
	GetAllOrders(context.Context, *QueryGetAllOrdersRequest) (*QueryGetAllOrdersResponse, error)
	// GetMarket returns all the information and details about a market.
	GetMarket(context.Context, *QueryGetMarketRequest) (*QueryGetMarketResponse, error)
	// GetAllMarkets returns brief information about each market.
	GetAllMarkets(context.Context, *QueryGetAllMarketsRequest) (*QueryGetAllMarketsResponse, error)
	// Params returns the exchange module parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ValidateCreateMarket checks the provided MsgGovCreateMarketResponse and returns any errors it might have.
	ValidateCreateMarket(context.Context, *QueryValidateCreateMarketRequest) (*QueryValidateCreateMarketResponse, error)
	// ValidateMarket checks for any problems with a market's setup.
	ValidateMarket(context.Context, *QueryValidateMarketRequest) (*QueryValidateMarketResponse, error)
	// ValidateManageFees checks the provided MsgGovManageFeesRequest and returns any errors that it might have.
	ValidateManageFees(context.Context, *QueryValidateManageFeesRequest) (*QueryValidateManageFeesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) OrderFeeCalc(ctx context.Context, req *QueryOrderFeeCalcRequest) (*QueryOrderFeeCalcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderFeeCalc not implemented")
}
func (*UnimplementedQueryServer) GetOrder(ctx context.Context, req *QueryGetOrderRequest) (*QueryGetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (*UnimplementedQueryServer) GetOrderByExternalID(ctx context.Context, req *QueryGetOrderByExternalIDRequest) (*QueryGetOrderByExternalIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByExternalID not implemented")
}
func (*UnimplementedQueryServer) GetMarketOrders(ctx context.Context, req *QueryGetMarketOrdersRequest) (*QueryGetMarketOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketOrders not implemented")
}
func (*UnimplementedQueryServer) GetOwnerOrders(ctx context.Context, req *QueryGetOwnerOrdersRequest) (*QueryGetOwnerOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnerOrders not implemented")
}
func (*UnimplementedQueryServer) GetAssetOrders(ctx context.Context, req *QueryGetAssetOrdersRequest) (*QueryGetAssetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetOrders not implemented")
}
func (*UnimplementedQueryServer) GetAllOrders(ctx context.Context, req *QueryGetAllOrdersRequest) (*QueryGetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrders not implemented")
}
func (*UnimplementedQueryServer) GetMarket(ctx context.Context, req *QueryGetMarketRequest) (*QueryGetMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarket not implemented")
}
func (*UnimplementedQueryServer) GetAllMarkets(ctx context.Context, req *QueryGetAllMarketsRequest) (*QueryGetAllMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMarkets not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ValidateCreateMarket(ctx context.Context, req *QueryValidateCreateMarketRequest) (*QueryValidateCreateMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCreateMarket not implemented")
}
func (*UnimplementedQueryServer) ValidateMarket(ctx context.Context, req *QueryValidateMarketRequest) (*QueryValidateMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateMarket not implemented")
}
func (*UnimplementedQueryServer) ValidateManageFees(ctx context.Context, req *QueryValidateManageFeesRequest) (*QueryValidateManageFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateManageFees not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_OrderFeeCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderFeeCalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderFeeCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/OrderFeeCalc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderFeeCalc(ctx, req.(*QueryOrderFeeCalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOrder(ctx, req.(*QueryGetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOrderByExternalID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrderByExternalIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOrderByExternalID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/GetOrderByExternalID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOrderByExternalID(ctx, req.(*QueryGetOrderByExternalIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMarketOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMarketOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMarketOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/GetMarketOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMarketOrders(ctx, req.(*QueryGetMarketOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOwnerOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOwnerOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOwnerOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/GetOwnerOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOwnerOrders(ctx, req.(*QueryGetOwnerOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAssetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAssetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAssetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/GetAssetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAssetOrders(ctx, req.(*QueryGetAssetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/GetAllOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllOrders(ctx, req.(*QueryGetAllOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/GetMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMarket(ctx, req.(*QueryGetMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/GetAllMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllMarkets(ctx, req.(*QueryGetAllMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidateCreateMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidateCreateMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidateCreateMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/ValidateCreateMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidateCreateMarket(ctx, req.(*QueryValidateCreateMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidateMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidateMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidateMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/ValidateMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidateMarket(ctx, req.(*QueryValidateMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidateManageFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidateManageFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidateManageFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/ValidateManageFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidateManageFees(ctx, req.(*QueryValidateManageFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.exchange.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderFeeCalc",
			Handler:    _Query_OrderFeeCalc_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _Query_GetOrder_Handler,
		},
		{
			MethodName: "GetOrderByExternalID",
			Handler:    _Query_GetOrderByExternalID_Handler,
		},
		{
			MethodName: "GetMarketOrders",
			Handler:    _Query_GetMarketOrders_Handler,
		},
		{
			MethodName: "GetOwnerOrders",
			Handler:    _Query_GetOwnerOrders_Handler,
		},
		{
			MethodName: "GetAssetOrders",
			Handler:    _Query_GetAssetOrders_Handler,
		},
		{
			MethodName: "GetAllOrders",
			Handler:    _Query_GetAllOrders_Handler,
		},
		{
			MethodName: "GetMarket",
			Handler:    _Query_GetMarket_Handler,
		},
		{
			MethodName: "GetAllMarkets",
			Handler:    _Query_GetAllMarkets_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ValidateCreateMarket",
			Handler:    _Query_ValidateCreateMarket_Handler,
		},
		{
			MethodName: "ValidateMarket",
			Handler:    _Query_ValidateMarket_Handler,
		},
		{
			MethodName: "ValidateManageFees",
			Handler:    _Query_ValidateManageFees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/exchange/v1/query.proto",
}

func (m *QueryOrderFeeCalcRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderFeeCalcRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderFeeCalcRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidOrder != nil {
		{
			size, err := m.BidOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AskOrder != nil {
		{
			size, err := m.AskOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderFeeCalcResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderFeeCalcResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderFeeCalcResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SettlementRatioFeeOptions) > 0 {
		for iNdEx := len(m.SettlementRatioFeeOptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SettlementRatioFeeOptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SettlementFlatFeeOptions) > 0 {
		for iNdEx := len(m.SettlementFlatFeeOptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SettlementFlatFeeOptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CreationFeeOptions) > 0 {
		for iNdEx := len(m.CreationFeeOptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreationFeeOptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderByExternalIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderByExternalIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderByExternalIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalId) > 0 {
		i -= len(m.ExternalId)
		copy(dAtA[i:], m.ExternalId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExternalId)))
		i--
		dAtA[i] = 0x12
	}
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderByExternalIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderByExternalIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderByExternalIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMarketOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMarketOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMarketOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.AfterOrderId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AfterOrderId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OrderType) > 0 {
		i -= len(m.OrderType)
		copy(dAtA[i:], m.OrderType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderType)))
		i--
		dAtA[i] = 0x12
	}
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMarketOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMarketOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMarketOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOwnerOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOwnerOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOwnerOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.AfterOrderId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AfterOrderId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OrderType) > 0 {
		i -= len(m.OrderType)
		copy(dAtA[i:], m.OrderType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOwnerOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOwnerOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOwnerOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAssetOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAssetOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAssetOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.AfterOrderId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AfterOrderId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OrderType) > 0 {
		i -= len(m.OrderType)
		copy(dAtA[i:], m.OrderType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAssetOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAssetOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAssetOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Market != nil {
		{
			size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllMarketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllMarketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllMarketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllMarketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllMarketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllMarketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidateCreateMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateCreateMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateCreateMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateMarketRequest != nil {
		{
			size, err := m.CreateMarketRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidateCreateMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateCreateMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateCreateMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GovPropWillPass {
		i--
		if m.GovPropWillPass {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidateMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidateMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidateManageFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateManageFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateManageFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ManageFeesRequest != nil {
		{
			size, err := m.ManageFeesRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidateManageFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateManageFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateManageFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GovPropWillPass {
		i--
		if m.GovPropWillPass {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryOrderFeeCalcRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AskOrder != nil {
		l = m.AskOrder.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BidOrder != nil {
		l = m.BidOrder.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrderFeeCalcResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CreationFeeOptions) > 0 {
		for _, e := range m.CreationFeeOptions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SettlementFlatFeeOptions) > 0 {
		for _, e := range m.SettlementFlatFeeOptions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SettlementRatioFeeOptions) > 0 {
		for _, e := range m.SettlementRatioFeeOptions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovQuery(uint64(m.OrderId))
	}
	return n
}

func (m *QueryGetOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrderByExternalIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	l = len(m.ExternalId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrderByExternalIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMarketOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	l = len(m.OrderType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AfterOrderId != 0 {
		n += 1 + sovQuery(uint64(m.AfterOrderId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMarketOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOwnerOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OrderType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AfterOrderId != 0 {
		n += 1 + sovQuery(uint64(m.AfterOrderId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOwnerOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAssetOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OrderType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AfterOrderId != 0 {
		n += 1 + sovQuery(uint64(m.AfterOrderId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAssetOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	return n
}

func (m *QueryGetMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Market != nil {
		l = m.Market.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllMarketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllMarketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidateCreateMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMarketRequest != nil {
		l = m.CreateMarketRequest.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidateCreateMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.GovPropWillPass {
		n += 2
	}
	return n
}

func (m *QueryValidateMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	return n
}

func (m *QueryValidateMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidateManageFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ManageFeesRequest != nil {
		l = m.ManageFeesRequest.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidateManageFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.GovPropWillPass {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryOrderFeeCalcRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderFeeCalcRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderFeeCalcRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AskOrder == nil {
				m.AskOrder = &AskOrder{}
			}
			if err := m.AskOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BidOrder == nil {
				m.BidOrder = &BidOrder{}
			}
			if err := m.BidOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderFeeCalcResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderFeeCalcResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderFeeCalcResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationFeeOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationFeeOptions = append(m.CreationFeeOptions, types.Coin{})
			if err := m.CreationFeeOptions[len(m.CreationFeeOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementFlatFeeOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlementFlatFeeOptions = append(m.SettlementFlatFeeOptions, types.Coin{})
			if err := m.SettlementFlatFeeOptions[len(m.SettlementFlatFeeOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementRatioFeeOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlementRatioFeeOptions = append(m.SettlementRatioFeeOptions, types.Coin{})
			if err := m.SettlementRatioFeeOptions[len(m.SettlementRatioFeeOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderByExternalIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderByExternalIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderByExternalIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderByExternalIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderByExternalIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderByExternalIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMarketOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMarketOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMarketOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterOrderId", wireType)
			}
			m.AfterOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AfterOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMarketOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMarketOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMarketOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &Order{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOwnerOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOwnerOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOwnerOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterOrderId", wireType)
			}
			m.AfterOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AfterOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOwnerOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOwnerOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOwnerOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &Order{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAssetOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAssetOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAssetOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterOrderId", wireType)
			}
			m.AfterOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AfterOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAssetOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAssetOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAssetOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &Order{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &Order{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Market == nil {
				m.Market = &Market{}
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllMarketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllMarketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllMarketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllMarketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllMarketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllMarketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, &MarketBrief{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateCreateMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateCreateMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateCreateMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMarketRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMarketRequest == nil {
				m.CreateMarketRequest = &MsgGovCreateMarketRequest{}
			}
			if err := m.CreateMarketRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateCreateMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateCreateMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateCreateMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovPropWillPass", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GovPropWillPass = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateManageFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateManageFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateManageFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManageFeesRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ManageFeesRequest == nil {
				m.ManageFeesRequest = &MsgGovManageFeesRequest{}
			}
			if err := m.ManageFeesRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateManageFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateManageFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateManageFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovPropWillPass", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GovPropWillPass = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
