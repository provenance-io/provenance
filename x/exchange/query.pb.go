// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/exchange/v1/query.proto

package exchange

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryOrderFeeCalcRequest is a request message for the QueryOrderFeeCalc endpoint.
// Exactly one of ask_order or bid_order must be provided.
type QueryOrderFeeCalcRequest struct {
	// ask_order is the ask order to calculate the fees for.
	AskOrder *AskOrder `protobuf:"bytes,2,opt,name=ask_order,json=askOrder,proto3" json:"ask_order,omitempty"`
	// bid_order is the bid order to calculate the fees for.
	BidOrder *BidOrder `protobuf:"bytes,3,opt,name=bid_order,json=bidOrder,proto3" json:"bid_order,omitempty"`
}

func (m *QueryOrderFeeCalcRequest) Reset()         { *m = QueryOrderFeeCalcRequest{} }
func (m *QueryOrderFeeCalcRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrderFeeCalcRequest) ProtoMessage()    {}
func (*QueryOrderFeeCalcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{0}
}
func (m *QueryOrderFeeCalcRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderFeeCalcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderFeeCalcRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderFeeCalcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderFeeCalcRequest.Merge(m, src)
}
func (m *QueryOrderFeeCalcRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderFeeCalcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderFeeCalcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderFeeCalcRequest proto.InternalMessageInfo

func (m *QueryOrderFeeCalcRequest) GetAskOrder() *AskOrder {
	if m != nil {
		return m.AskOrder
	}
	return nil
}

func (m *QueryOrderFeeCalcRequest) GetBidOrder() *BidOrder {
	if m != nil {
		return m.BidOrder
	}
	return nil
}

// QueryOrderFeeCalcResponse is a response message for the QueryOrderFeeCalc endpoint.
type QueryOrderFeeCalcResponse struct {
	// creation_fee_options are the order creation flat fee options available for creating the provided order.
	// If it's empty, no order creation fee is required.
	// When creating the order, you should include exactly one of these.
	CreationFeeOptions []types.Coin `protobuf:"bytes,1,rep,name=creation_fee_options,json=creationFeeOptions,proto3" json:"creation_fee_options"`
	// settlement_flat_fee_options are the settlement flat fee options available for the provided order.
	// If it's empty, no settlement flat fee is required.
	// When creating an order, you should include exactly one of these in the settlement fees field.
	SettlementFlatFeeOptions []types.Coin `protobuf:"bytes,2,rep,name=settlement_flat_fee_options,json=settlementFlatFeeOptions,proto3" json:"settlement_flat_fee_options"`
	// settlement_ratio_fee_options are the settlement ratio fee options available for the provided order.
	// If it's empty, no settlement ratio fee is required.
	//
	// If the provided order was a bid order, you should include exactly one of these in the settlement fees field.
	// If the flat and ratio options you've chose have the same denom, a single entry should be included with their sum.
	//
	// If the provided order was an ask order, these are purely informational and represent how much will be removed
	// from your price if it settles at that price. If it settles for more, the actual amount will probably be larger.
	SettlementRatioFeeOptions []types.Coin `protobuf:"bytes,3,rep,name=settlement_ratio_fee_options,json=settlementRatioFeeOptions,proto3" json:"settlement_ratio_fee_options"`
}

func (m *QueryOrderFeeCalcResponse) Reset()         { *m = QueryOrderFeeCalcResponse{} }
func (m *QueryOrderFeeCalcResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderFeeCalcResponse) ProtoMessage()    {}
func (*QueryOrderFeeCalcResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{1}
}
func (m *QueryOrderFeeCalcResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderFeeCalcResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderFeeCalcResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderFeeCalcResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderFeeCalcResponse.Merge(m, src)
}
func (m *QueryOrderFeeCalcResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderFeeCalcResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderFeeCalcResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderFeeCalcResponse proto.InternalMessageInfo

func (m *QueryOrderFeeCalcResponse) GetCreationFeeOptions() []types.Coin {
	if m != nil {
		return m.CreationFeeOptions
	}
	return nil
}

func (m *QueryOrderFeeCalcResponse) GetSettlementFlatFeeOptions() []types.Coin {
	if m != nil {
		return m.SettlementFlatFeeOptions
	}
	return nil
}

func (m *QueryOrderFeeCalcResponse) GetSettlementRatioFeeOptions() []types.Coin {
	if m != nil {
		return m.SettlementRatioFeeOptions
	}
	return nil
}

// QueryGetOrderRequest is a request message for the QueryGetOrder endpoint.
type QueryGetOrderRequest struct {
	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *QueryGetOrderRequest) Reset()         { *m = QueryGetOrderRequest{} }
func (m *QueryGetOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderRequest) ProtoMessage()    {}
func (*QueryGetOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{2}
}
func (m *QueryGetOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderRequest.Merge(m, src)
}
func (m *QueryGetOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderRequest proto.InternalMessageInfo

func (m *QueryGetOrderRequest) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

// QueryGetOrderResponse is a response message for the QueryGetOrder endpoint.
type QueryGetOrderResponse struct {
}

func (m *QueryGetOrderResponse) Reset()         { *m = QueryGetOrderResponse{} }
func (m *QueryGetOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderResponse) ProtoMessage()    {}
func (*QueryGetOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{3}
}
func (m *QueryGetOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderResponse.Merge(m, src)
}
func (m *QueryGetOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderResponse proto.InternalMessageInfo

// QueryGetMarketOrdersRequest is a request message for the QueryGetMarketOrders endpoint.
type QueryGetMarketOrdersRequest struct {
	MarketId uint32 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryGetMarketOrdersRequest) Reset()         { *m = QueryGetMarketOrdersRequest{} }
func (m *QueryGetMarketOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMarketOrdersRequest) ProtoMessage()    {}
func (*QueryGetMarketOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{4}
}
func (m *QueryGetMarketOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMarketOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMarketOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMarketOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMarketOrdersRequest.Merge(m, src)
}
func (m *QueryGetMarketOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMarketOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMarketOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMarketOrdersRequest proto.InternalMessageInfo

func (m *QueryGetMarketOrdersRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

// QueryGetMarketOrdersResponse is a response message for the QueryGetMarketOrders endpoint.
type QueryGetMarketOrdersResponse struct {
}

func (m *QueryGetMarketOrdersResponse) Reset()         { *m = QueryGetMarketOrdersResponse{} }
func (m *QueryGetMarketOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMarketOrdersResponse) ProtoMessage()    {}
func (*QueryGetMarketOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{5}
}
func (m *QueryGetMarketOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMarketOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMarketOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMarketOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMarketOrdersResponse.Merge(m, src)
}
func (m *QueryGetMarketOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMarketOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMarketOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMarketOrdersResponse proto.InternalMessageInfo

// QueryGetAddressOrdersRequest is a request message for the QueryGetAddressOrders endpoint.
type QueryGetAddressOrdersRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetAddressOrdersRequest) Reset()         { *m = QueryGetAddressOrdersRequest{} }
func (m *QueryGetAddressOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressOrdersRequest) ProtoMessage()    {}
func (*QueryGetAddressOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{6}
}
func (m *QueryGetAddressOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressOrdersRequest.Merge(m, src)
}
func (m *QueryGetAddressOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressOrdersRequest proto.InternalMessageInfo

func (m *QueryGetAddressOrdersRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryGetAddressOrdersResponse is a response message for the QueryGetAddressOrders endpoint.
type QueryGetAddressOrdersResponse struct {
}

func (m *QueryGetAddressOrdersResponse) Reset()         { *m = QueryGetAddressOrdersResponse{} }
func (m *QueryGetAddressOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressOrdersResponse) ProtoMessage()    {}
func (*QueryGetAddressOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{7}
}
func (m *QueryGetAddressOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressOrdersResponse.Merge(m, src)
}
func (m *QueryGetAddressOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressOrdersResponse proto.InternalMessageInfo

// QueryGetAllOrdersRequest is a request message for the QueryGetAllOrders endpoint.
type QueryGetAllOrdersRequest struct {
}

func (m *QueryGetAllOrdersRequest) Reset()         { *m = QueryGetAllOrdersRequest{} }
func (m *QueryGetAllOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllOrdersRequest) ProtoMessage()    {}
func (*QueryGetAllOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{8}
}
func (m *QueryGetAllOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllOrdersRequest.Merge(m, src)
}
func (m *QueryGetAllOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllOrdersRequest proto.InternalMessageInfo

// QueryGetAllOrdersResponse is a response message for the QueryGetAllOrders endpoint.
type QueryGetAllOrdersResponse struct {
}

func (m *QueryGetAllOrdersResponse) Reset()         { *m = QueryGetAllOrdersResponse{} }
func (m *QueryGetAllOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllOrdersResponse) ProtoMessage()    {}
func (*QueryGetAllOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{9}
}
func (m *QueryGetAllOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllOrdersResponse.Merge(m, src)
}
func (m *QueryGetAllOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllOrdersResponse proto.InternalMessageInfo

// QueryMarketInfoRequest is a request message for the QueryMarketInfo endpoint.
type QueryMarketInfoRequest struct {
	MarketId uint32 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryMarketInfoRequest) Reset()         { *m = QueryMarketInfoRequest{} }
func (m *QueryMarketInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMarketInfoRequest) ProtoMessage()    {}
func (*QueryMarketInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{10}
}
func (m *QueryMarketInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketInfoRequest.Merge(m, src)
}
func (m *QueryMarketInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketInfoRequest proto.InternalMessageInfo

func (m *QueryMarketInfoRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

// QueryMarketInfoResponse is a response message for the QueryMarketInfo endpoint.
type QueryMarketInfoResponse struct {
}

func (m *QueryMarketInfoResponse) Reset()         { *m = QueryMarketInfoResponse{} }
func (m *QueryMarketInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMarketInfoResponse) ProtoMessage()    {}
func (*QueryMarketInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{11}
}
func (m *QueryMarketInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketInfoResponse.Merge(m, src)
}
func (m *QueryMarketInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketInfoResponse proto.InternalMessageInfo

// QueryParamsRequest is a request message for the QueryParams endpoint.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{12}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is a response message for the QueryParams endpoint.
type QueryParamsResponse struct {
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{13}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

// QueryValidateCreateMarketRequest is a request message for the QueryValidateCreateMarket endpoint.
type QueryValidateCreateMarketRequest struct {
}

func (m *QueryValidateCreateMarketRequest) Reset()         { *m = QueryValidateCreateMarketRequest{} }
func (m *QueryValidateCreateMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidateCreateMarketRequest) ProtoMessage()    {}
func (*QueryValidateCreateMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{14}
}
func (m *QueryValidateCreateMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateCreateMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateCreateMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateCreateMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateCreateMarketRequest.Merge(m, src)
}
func (m *QueryValidateCreateMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateCreateMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateCreateMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateCreateMarketRequest proto.InternalMessageInfo

// QueryValidateCreateMarketResponse is a response message for the QueryValidateCreateMarket endpoint.
type QueryValidateCreateMarketResponse struct {
}

func (m *QueryValidateCreateMarketResponse) Reset()         { *m = QueryValidateCreateMarketResponse{} }
func (m *QueryValidateCreateMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidateCreateMarketResponse) ProtoMessage()    {}
func (*QueryValidateCreateMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{15}
}
func (m *QueryValidateCreateMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateCreateMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateCreateMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateCreateMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateCreateMarketResponse.Merge(m, src)
}
func (m *QueryValidateCreateMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateCreateMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateCreateMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateCreateMarketResponse proto.InternalMessageInfo

// QueryValidateManageFeesRequest is a request message for the QueryValidateManageFees endpoint.
type QueryValidateManageFeesRequest struct {
	MarketId uint32 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryValidateManageFeesRequest) Reset()         { *m = QueryValidateManageFeesRequest{} }
func (m *QueryValidateManageFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidateManageFeesRequest) ProtoMessage()    {}
func (*QueryValidateManageFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{16}
}
func (m *QueryValidateManageFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateManageFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateManageFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateManageFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateManageFeesRequest.Merge(m, src)
}
func (m *QueryValidateManageFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateManageFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateManageFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateManageFeesRequest proto.InternalMessageInfo

func (m *QueryValidateManageFeesRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

// QueryValidateManageFeesResponse is a response message for the QueryValidateManageFees endpoint.
type QueryValidateManageFeesResponse struct {
}

func (m *QueryValidateManageFeesResponse) Reset()         { *m = QueryValidateManageFeesResponse{} }
func (m *QueryValidateManageFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidateManageFeesResponse) ProtoMessage()    {}
func (*QueryValidateManageFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{17}
}
func (m *QueryValidateManageFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateManageFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateManageFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateManageFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateManageFeesResponse.Merge(m, src)
}
func (m *QueryValidateManageFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateManageFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateManageFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateManageFeesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryOrderFeeCalcRequest)(nil), "provenance.exchange.v1.QueryOrderFeeCalcRequest")
	proto.RegisterType((*QueryOrderFeeCalcResponse)(nil), "provenance.exchange.v1.QueryOrderFeeCalcResponse")
	proto.RegisterType((*QueryGetOrderRequest)(nil), "provenance.exchange.v1.QueryGetOrderRequest")
	proto.RegisterType((*QueryGetOrderResponse)(nil), "provenance.exchange.v1.QueryGetOrderResponse")
	proto.RegisterType((*QueryGetMarketOrdersRequest)(nil), "provenance.exchange.v1.QueryGetMarketOrdersRequest")
	proto.RegisterType((*QueryGetMarketOrdersResponse)(nil), "provenance.exchange.v1.QueryGetMarketOrdersResponse")
	proto.RegisterType((*QueryGetAddressOrdersRequest)(nil), "provenance.exchange.v1.QueryGetAddressOrdersRequest")
	proto.RegisterType((*QueryGetAddressOrdersResponse)(nil), "provenance.exchange.v1.QueryGetAddressOrdersResponse")
	proto.RegisterType((*QueryGetAllOrdersRequest)(nil), "provenance.exchange.v1.QueryGetAllOrdersRequest")
	proto.RegisterType((*QueryGetAllOrdersResponse)(nil), "provenance.exchange.v1.QueryGetAllOrdersResponse")
	proto.RegisterType((*QueryMarketInfoRequest)(nil), "provenance.exchange.v1.QueryMarketInfoRequest")
	proto.RegisterType((*QueryMarketInfoResponse)(nil), "provenance.exchange.v1.QueryMarketInfoResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "provenance.exchange.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "provenance.exchange.v1.QueryParamsResponse")
	proto.RegisterType((*QueryValidateCreateMarketRequest)(nil), "provenance.exchange.v1.QueryValidateCreateMarketRequest")
	proto.RegisterType((*QueryValidateCreateMarketResponse)(nil), "provenance.exchange.v1.QueryValidateCreateMarketResponse")
	proto.RegisterType((*QueryValidateManageFeesRequest)(nil), "provenance.exchange.v1.QueryValidateManageFeesRequest")
	proto.RegisterType((*QueryValidateManageFeesResponse)(nil), "provenance.exchange.v1.QueryValidateManageFeesResponse")
}

func init() {
	proto.RegisterFile("provenance/exchange/v1/query.proto", fileDescriptor_00949b75b1c10bfe)
}

var fileDescriptor_00949b75b1c10bfe = []byte{
	// 930 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x41, 0x6f, 0xdc, 0x44,
	0x14, 0xce, 0x24, 0x85, 0x26, 0x13, 0x2a, 0xc4, 0xb0, 0x6d, 0x77, 0x9d, 0xe0, 0x6c, 0x5d, 0x84,
	0xa2, 0xd0, 0xd8, 0xd9, 0x0d, 0x2d, 0x14, 0xa9, 0x42, 0x49, 0xa4, 0x54, 0x39, 0x54, 0x6d, 0x8d,
	0xc4, 0x81, 0x03, 0xcb, 0xec, 0xfa, 0xc5, 0xb5, 0xe2, 0xf5, 0x6c, 0x6d, 0x27, 0x2a, 0x8a, 0x72,
	0xe1, 0x07, 0x20, 0x24, 0x2e, 0x9c, 0x10, 0x07, 0xc4, 0x99, 0x03, 0xe2, 0xc4, 0x15, 0x29, 0xc7,
	0x8a, 0x5e, 0x38, 0x21, 0x94, 0xf0, 0x43, 0x90, 0x67, 0x9e, 0xb3, 0xeb, 0xac, 0xed, 0xf5, 0x72,
	0xb3, 0x67, 0xde, 0xf7, 0xbd, 0x6f, 0x9e, 0xdf, 0xfb, 0x3c, 0xd4, 0x18, 0x84, 0xe2, 0x08, 0x02,
	0x1e, 0xf4, 0xc0, 0x82, 0x17, 0xbd, 0x67, 0x3c, 0x70, 0xc1, 0x3a, 0x6a, 0x59, 0xcf, 0x0f, 0x21,
	0xfc, 0xca, 0x1c, 0x84, 0x22, 0x16, 0xec, 0xc6, 0x30, 0xc6, 0x4c, 0x63, 0xcc, 0xa3, 0x96, 0xd6,
	0xe8, 0x89, 0xa8, 0x2f, 0xa2, 0x8e, 0x8c, 0xb2, 0xd4, 0x8b, 0x82, 0x68, 0xba, 0x7a, 0xb3, 0xba,
	0x3c, 0x4a, 0xe8, 0xba, 0x10, 0xf3, 0x96, 0xd5, 0x13, 0x5e, 0x80, 0xfb, 0xcb, 0xae, 0x10, 0xae,
	0x0f, 0x16, 0x1f, 0x78, 0x16, 0x0f, 0x02, 0x11, 0xf3, 0xd8, 0x13, 0x41, 0x8a, 0xae, 0xb9, 0xc2,
	0x15, 0x8a, 0x35, 0x79, 0xc2, 0xd5, 0xdb, 0x05, 0x52, 0x45, 0xe8, 0x40, 0x88, 0x50, 0xe3, 0x7b,
	0x42, 0xeb, 0x4f, 0x13, 0xed, 0x8f, 0x93, 0xd5, 0x5d, 0x80, 0x1d, 0xee, 0xf7, 0x6c, 0x78, 0x7e,
	0x08, 0x51, 0xcc, 0x1e, 0xd0, 0x05, 0x1e, 0x1d, 0x74, 0x24, 0xa0, 0x3e, 0xdb, 0x24, 0xab, 0x8b,
	0xed, 0xa6, 0x99, 0x7f, 0x38, 0x73, 0x2b, 0x3a, 0x90, 0x14, 0xf6, 0x3c, 0xc7, 0xa7, 0x04, 0xde,
	0xf5, 0x1c, 0x84, 0xcf, 0x95, 0xc3, 0xb7, 0x3d, 0x07, 0xe1, 0x5d, 0x7c, 0x32, 0x7e, 0x99, 0xa5,
	0x8d, 0x1c, 0x69, 0xd1, 0x40, 0x04, 0x11, 0xb0, 0xa7, 0xb4, 0xd6, 0x0b, 0x41, 0x96, 0xa1, 0xb3,
	0x0f, 0xd0, 0x11, 0x03, 0x59, 0x91, 0x3a, 0x69, 0xce, 0xad, 0x2e, 0xb6, 0x1b, 0x26, 0x96, 0x37,
	0x29, 0xa8, 0x89, 0x05, 0x35, 0x77, 0x84, 0x17, 0x6c, 0x5f, 0x39, 0xfd, 0x7b, 0x65, 0xc6, 0x66,
	0x29, 0x78, 0x17, 0xe0, 0xb1, 0x82, 0xb2, 0x2f, 0xe8, 0x52, 0x04, 0x71, 0xec, 0x43, 0x1f, 0x82,
	0xb8, 0xb3, 0xef, 0xf3, 0x38, 0xc3, 0x3c, 0x5b, 0x8d, 0xb9, 0x3e, 0xe4, 0xd8, 0xf5, 0x79, 0x3c,
	0xc2, 0xff, 0x25, 0x5d, 0x1e, 0xe1, 0x0f, 0x93, 0xf4, 0x99, 0x04, 0x73, 0xd5, 0x12, 0x34, 0x86,
	0x24, 0x76, 0xc2, 0x31, 0xcc, 0x60, 0xb4, 0x68, 0x4d, 0x56, 0xec, 0x21, 0xc4, 0xaa, 0x9a, 0xf8,
	0x21, 0x1b, 0x74, 0x5e, 0x7e, 0x85, 0x8e, 0xe7, 0xd4, 0x49, 0x93, 0xac, 0x5e, 0xb1, 0xaf, 0xca,
	0xf7, 0x3d, 0xc7, 0xb8, 0x49, 0xaf, 0x5f, 0x82, 0xa8, 0x02, 0x1b, 0x1f, 0xd3, 0xa5, 0x74, 0xe3,
	0x11, 0x0f, 0x0f, 0x70, 0x3b, 0x4a, 0x29, 0x97, 0xe8, 0x42, 0x5f, 0x2e, 0xa7, 0x9c, 0xd7, 0xec,
	0x79, 0xb5, 0xb0, 0xe7, 0x18, 0x3a, 0x5d, 0xce, 0xc7, 0x22, 0xb7, 0x3d, 0xdc, 0xdf, 0x72, 0x9c,
	0x10, 0xa2, 0x28, 0x4b, 0xde, 0xa6, 0x57, 0xb9, 0x5a, 0x97, 0xd4, 0x0b, 0xdb, 0xf5, 0x3f, 0x7f,
	0x5d, 0xaf, 0x61, 0x5d, 0x10, 0xf1, 0x69, 0x1c, 0x7a, 0x81, 0x6b, 0xa7, 0x81, 0xc6, 0x0a, 0x7d,
	0xa7, 0x80, 0x13, 0x93, 0x6a, 0xd8, 0xe9, 0x49, 0x80, 0xef, 0x67, 0x12, 0x1a, 0x4b, 0xd8, 0x6a,
	0xd9, 0x3d, 0x04, 0xde, 0xa5, 0x37, 0xe4, 0xa6, 0x3a, 0xca, 0x5e, 0xb0, 0x2f, 0x2a, 0x15, 0xa1,
	0x41, 0x6f, 0x8e, 0xc1, 0x90, 0xb1, 0x46, 0x99, 0xdc, 0x7a, 0xc2, 0x43, 0xde, 0xbf, 0x10, 0x71,
	0x9d, 0xbe, 0x9d, 0x59, 0xc5, 0x60, 0x83, 0x36, 0xe5, 0xf2, 0x67, 0xdc, 0xf7, 0x1c, 0x1e, 0xc3,
	0x4e, 0xd2, 0xb9, 0xa0, 0x58, 0x53, 0xe8, 0x6d, 0x7a, 0xab, 0x24, 0x06, 0x89, 0x1e, 0x50, 0x3d,
	0x13, 0xf4, 0x88, 0x07, 0xdc, 0x85, 0x5d, 0x80, 0x6a, 0x1f, 0xf5, 0x16, 0x5d, 0x29, 0x84, 0xab,
	0x0c, 0xed, 0x3f, 0xde, 0xa0, 0xaf, 0xc9, 0x18, 0xf6, 0x13, 0xa1, 0x6f, 0x8d, 0x0d, 0x2f, 0xdb,
	0x28, 0x1a, 0xff, 0x22, 0x0b, 0xd2, 0x5a, 0x53, 0x20, 0xf0, 0x98, 0x6b, 0x5f, 0xbf, 0xfa, 0xf7,
	0xbb, 0xd9, 0x77, 0x99, 0x61, 0x15, 0x18, 0xe0, 0x3e, 0x40, 0xa4, 0x5c, 0x90, 0xfd, 0x40, 0xe8,
	0xb5, 0x4c, 0xfb, 0xb3, 0x3b, 0xa5, 0x09, 0x2f, 0x0d, 0x96, 0xb6, 0x5e, 0x31, 0x1a, 0xa5, 0x6d,
	0x48, 0x69, 0x6b, 0x6c, 0xd5, 0x2a, 0xf3, 0x66, 0xeb, 0x38, 0x1d, 0xd6, 0x13, 0xf6, 0x3b, 0x19,
	0x8e, 0xf4, 0xe8, 0x28, 0xb1, 0xcd, 0x49, 0x99, 0x73, 0x86, 0x56, 0xfb, 0x60, 0x3a, 0x10, 0xaa,
	0xbe, 0x2f, 0x55, 0x6f, 0xb2, 0x56, 0x91, 0x6a, 0xd5, 0x22, 0xd6, 0xf1, 0x45, 0xef, 0x9c, 0xe0,
	0x4f, 0x86, 0xfd, 0x46, 0x86, 0xf6, 0x92, 0x99, 0x4a, 0x36, 0x51, 0x4a, 0x9e, 0x31, 0x68, 0x77,
	0xa7, 0x44, 0x4d, 0x55, 0xf7, 0xc8, 0x3a, 0x46, 0x33, 0x39, 0x61, 0x3f, 0xa6, 0xfd, 0x3b, 0xea,
	0x08, 0x13, 0xfa, 0x37, 0xc7, 0x58, 0x26, 0xf4, 0x6f, 0xae, 0xdd, 0xbc, 0x27, 0xc5, 0x36, 0x99,
	0x5e, 0x2e, 0x96, 0xfd, 0x4c, 0xe8, 0x9b, 0x97, 0x0c, 0x86, 0x99, 0xa5, 0xe9, 0xc6, 0x0c, 0x4c,
	0xb3, 0x2a, 0xc7, 0xa3, 0xb8, 0xb6, 0x14, 0x77, 0x87, 0xad, 0x55, 0xef, 0x05, 0xf6, 0x0d, 0xa1,
	0x8b, 0x23, 0xc6, 0xc6, 0xd6, 0x4a, 0x93, 0x66, 0x3c, 0x51, 0x7b, 0xbf, 0x52, 0x6c, 0xd5, 0xca,
	0x0d, 0x94, 0x80, 0x53, 0x82, 0x76, 0x9f, 0x67, 0x97, 0xec, 0xa3, 0xd2, 0x94, 0x25, 0x2e, 0xac,
	0xdd, 0xff, 0x1f, 0x48, 0x94, 0x7e, 0x4f, 0x4a, 0xdf, 0x60, 0x66, 0x91, 0xf4, 0x23, 0x44, 0x5b,
	0xf2, 0xe2, 0x02, 0x1d, 0x55, 0x5f, 0xf6, 0x8a, 0xe0, 0x5f, 0x66, 0xdc, 0x95, 0xd9, 0xbd, 0x4a,
	0x72, 0xc6, 0xfe, 0x02, 0xda, 0x87, 0x53, 0xe3, 0xf0, 0x10, 0x0f, 0xe5, 0x21, 0xb6, 0xd8, 0x27,
	0x53, 0x18, 0xc5, 0xc5, 0xb9, 0xfa, 0x92, 0x2f, 0xb9, 0x10, 0x45, 0xdb, 0x70, 0x7a, 0xa6, 0x93,
	0x97, 0x67, 0x3a, 0xf9, 0xe7, 0x4c, 0x27, 0xdf, 0x9e, 0xeb, 0x33, 0x2f, 0xcf, 0xf5, 0x99, 0xbf,
	0xce, 0xf5, 0x19, 0xda, 0xf0, 0x44, 0x81, 0xba, 0x27, 0xe4, 0x73, 0xd3, 0xf5, 0xe2, 0x67, 0x87,
	0x5d, 0xb3, 0x27, 0xfa, 0x23, 0x0a, 0xd6, 0x3d, 0x31, 0xaa, 0xe7, 0xc5, 0x85, 0xa2, 0xee, 0xeb,
	0xf2, 0x0e, 0xbc, 0xf9, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x18, 0x6f, 0x33, 0xd5, 0x0b,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// QueryOrderFeeCalc calculates the fees that will be associated with the provided order.
	QueryOrderFeeCalc(ctx context.Context, in *QueryOrderFeeCalcRequest, opts ...grpc.CallOption) (*QueryOrderFeeCalcResponse, error)
	// QueryGetOrder looks up an order by id.
	QueryGetOrder(ctx context.Context, in *QueryGetOrderRequest, opts ...grpc.CallOption) (*QueryGetOrderResponse, error)
	// QueryGetMarketOrders looks up the orders in a market.
	QueryGetMarketOrders(ctx context.Context, in *QueryGetMarketOrdersRequest, opts ...grpc.CallOption) (*QueryGetMarketOrdersResponse, error)
	// QueryGetAddressOrders looks up the orders from the provided address.
	QueryGetAddressOrders(ctx context.Context, in *QueryGetAddressOrdersRequest, opts ...grpc.CallOption) (*QueryGetAddressOrdersResponse, error)
	// QueryGetAllOrders gets all orders in the exchange module.
	QueryGetAllOrders(ctx context.Context, in *QueryGetAllOrdersRequest, opts ...grpc.CallOption) (*QueryGetAllOrdersResponse, error)
	// QueryMarketInfo returns the information/details about a market.
	QueryMarketInfo(ctx context.Context, in *QueryMarketInfoRequest, opts ...grpc.CallOption) (*QueryMarketInfoResponse, error)
	// QueryParams returns the exchange module parameters.
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// QueryValidateCreateMarket checks the provided MsgGovCreateMarketResponse and returns any errors it might have.
	QueryValidateCreateMarket(ctx context.Context, in *QueryValidateCreateMarketRequest, opts ...grpc.CallOption) (*QueryValidateCreateMarketResponse, error)
	// QueryValidateManageFees checks the provided MsgGovManageFeesRequest and returns any errors that it might have.
	QueryValidateManageFees(ctx context.Context, in *QueryValidateManageFeesRequest, opts ...grpc.CallOption) (*QueryValidateManageFeesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryOrderFeeCalc(ctx context.Context, in *QueryOrderFeeCalcRequest, opts ...grpc.CallOption) (*QueryOrderFeeCalcResponse, error) {
	out := new(QueryOrderFeeCalcResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryOrderFeeCalc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetOrder(ctx context.Context, in *QueryGetOrderRequest, opts ...grpc.CallOption) (*QueryGetOrderResponse, error) {
	out := new(QueryGetOrderResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryGetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetMarketOrders(ctx context.Context, in *QueryGetMarketOrdersRequest, opts ...grpc.CallOption) (*QueryGetMarketOrdersResponse, error) {
	out := new(QueryGetMarketOrdersResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryGetMarketOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetAddressOrders(ctx context.Context, in *QueryGetAddressOrdersRequest, opts ...grpc.CallOption) (*QueryGetAddressOrdersResponse, error) {
	out := new(QueryGetAddressOrdersResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryGetAddressOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetAllOrders(ctx context.Context, in *QueryGetAllOrdersRequest, opts ...grpc.CallOption) (*QueryGetAllOrdersResponse, error) {
	out := new(QueryGetAllOrdersResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryGetAllOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryMarketInfo(ctx context.Context, in *QueryMarketInfoRequest, opts ...grpc.CallOption) (*QueryMarketInfoResponse, error) {
	out := new(QueryMarketInfoResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryMarketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryValidateCreateMarket(ctx context.Context, in *QueryValidateCreateMarketRequest, opts ...grpc.CallOption) (*QueryValidateCreateMarketResponse, error) {
	out := new(QueryValidateCreateMarketResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryValidateCreateMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryValidateManageFees(ctx context.Context, in *QueryValidateManageFeesRequest, opts ...grpc.CallOption) (*QueryValidateManageFeesResponse, error) {
	out := new(QueryValidateManageFeesResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryValidateManageFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// QueryOrderFeeCalc calculates the fees that will be associated with the provided order.
	QueryOrderFeeCalc(context.Context, *QueryOrderFeeCalcRequest) (*QueryOrderFeeCalcResponse, error)
	// QueryGetOrder looks up an order by id.
	QueryGetOrder(context.Context, *QueryGetOrderRequest) (*QueryGetOrderResponse, error)
	// QueryGetMarketOrders looks up the orders in a market.
	QueryGetMarketOrders(context.Context, *QueryGetMarketOrdersRequest) (*QueryGetMarketOrdersResponse, error)
	// QueryGetAddressOrders looks up the orders from the provided address.
	QueryGetAddressOrders(context.Context, *QueryGetAddressOrdersRequest) (*QueryGetAddressOrdersResponse, error)
	// QueryGetAllOrders gets all orders in the exchange module.
	QueryGetAllOrders(context.Context, *QueryGetAllOrdersRequest) (*QueryGetAllOrdersResponse, error)
	// QueryMarketInfo returns the information/details about a market.
	QueryMarketInfo(context.Context, *QueryMarketInfoRequest) (*QueryMarketInfoResponse, error)
	// QueryParams returns the exchange module parameters.
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// QueryValidateCreateMarket checks the provided MsgGovCreateMarketResponse and returns any errors it might have.
	QueryValidateCreateMarket(context.Context, *QueryValidateCreateMarketRequest) (*QueryValidateCreateMarketResponse, error)
	// QueryValidateManageFees checks the provided MsgGovManageFeesRequest and returns any errors that it might have.
	QueryValidateManageFees(context.Context, *QueryValidateManageFeesRequest) (*QueryValidateManageFeesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryOrderFeeCalc(ctx context.Context, req *QueryOrderFeeCalcRequest) (*QueryOrderFeeCalcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderFeeCalc not implemented")
}
func (*UnimplementedQueryServer) QueryGetOrder(ctx context.Context, req *QueryGetOrderRequest) (*QueryGetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetOrder not implemented")
}
func (*UnimplementedQueryServer) QueryGetMarketOrders(ctx context.Context, req *QueryGetMarketOrdersRequest) (*QueryGetMarketOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetMarketOrders not implemented")
}
func (*UnimplementedQueryServer) QueryGetAddressOrders(ctx context.Context, req *QueryGetAddressOrdersRequest) (*QueryGetAddressOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetAddressOrders not implemented")
}
func (*UnimplementedQueryServer) QueryGetAllOrders(ctx context.Context, req *QueryGetAllOrdersRequest) (*QueryGetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetAllOrders not implemented")
}
func (*UnimplementedQueryServer) QueryMarketInfo(ctx context.Context, req *QueryMarketInfoRequest) (*QueryMarketInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMarketInfo not implemented")
}
func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServer) QueryValidateCreateMarket(ctx context.Context, req *QueryValidateCreateMarketRequest) (*QueryValidateCreateMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryValidateCreateMarket not implemented")
}
func (*UnimplementedQueryServer) QueryValidateManageFees(ctx context.Context, req *QueryValidateManageFeesRequest) (*QueryValidateManageFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryValidateManageFees not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryOrderFeeCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderFeeCalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOrderFeeCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryOrderFeeCalc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOrderFeeCalc(ctx, req.(*QueryOrderFeeCalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryGetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetOrder(ctx, req.(*QueryGetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetMarketOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMarketOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetMarketOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryGetMarketOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetMarketOrders(ctx, req.(*QueryGetMarketOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetAddressOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAddressOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetAddressOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryGetAddressOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetAddressOrders(ctx, req.(*QueryGetAddressOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryGetAllOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetAllOrders(ctx, req.(*QueryGetAllOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryMarketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryMarketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryMarketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryMarketInfo(ctx, req.(*QueryMarketInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryValidateCreateMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidateCreateMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryValidateCreateMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryValidateCreateMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryValidateCreateMarket(ctx, req.(*QueryValidateCreateMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryValidateManageFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidateManageFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryValidateManageFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryValidateManageFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryValidateManageFees(ctx, req.(*QueryValidateManageFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.exchange.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryOrderFeeCalc",
			Handler:    _Query_QueryOrderFeeCalc_Handler,
		},
		{
			MethodName: "QueryGetOrder",
			Handler:    _Query_QueryGetOrder_Handler,
		},
		{
			MethodName: "QueryGetMarketOrders",
			Handler:    _Query_QueryGetMarketOrders_Handler,
		},
		{
			MethodName: "QueryGetAddressOrders",
			Handler:    _Query_QueryGetAddressOrders_Handler,
		},
		{
			MethodName: "QueryGetAllOrders",
			Handler:    _Query_QueryGetAllOrders_Handler,
		},
		{
			MethodName: "QueryMarketInfo",
			Handler:    _Query_QueryMarketInfo_Handler,
		},
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryValidateCreateMarket",
			Handler:    _Query_QueryValidateCreateMarket_Handler,
		},
		{
			MethodName: "QueryValidateManageFees",
			Handler:    _Query_QueryValidateManageFees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/exchange/v1/query.proto",
}

func (m *QueryOrderFeeCalcRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderFeeCalcRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderFeeCalcRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidOrder != nil {
		{
			size, err := m.BidOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AskOrder != nil {
		{
			size, err := m.AskOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderFeeCalcResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderFeeCalcResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderFeeCalcResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SettlementRatioFeeOptions) > 0 {
		for iNdEx := len(m.SettlementRatioFeeOptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SettlementRatioFeeOptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SettlementFlatFeeOptions) > 0 {
		for iNdEx := len(m.SettlementFlatFeeOptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SettlementFlatFeeOptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CreationFeeOptions) > 0 {
		for iNdEx := len(m.CreationFeeOptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreationFeeOptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetMarketOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMarketOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMarketOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMarketOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMarketOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMarketOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAllOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAllOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMarketInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryValidateCreateMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateCreateMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateCreateMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryValidateCreateMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateCreateMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateCreateMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryValidateManageFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateManageFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateManageFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidateManageFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateManageFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateManageFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryOrderFeeCalcRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AskOrder != nil {
		l = m.AskOrder.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BidOrder != nil {
		l = m.BidOrder.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrderFeeCalcResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CreationFeeOptions) > 0 {
		for _, e := range m.CreationFeeOptions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SettlementFlatFeeOptions) > 0 {
		for _, e := range m.SettlementFlatFeeOptions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SettlementRatioFeeOptions) > 0 {
		for _, e := range m.SettlementRatioFeeOptions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovQuery(uint64(m.OrderId))
	}
	return n
}

func (m *QueryGetOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetMarketOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	return n
}

func (m *QueryGetMarketOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAddressOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAddressOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAllOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAllOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMarketInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	return n
}

func (m *QueryMarketInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryValidateCreateMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryValidateCreateMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryValidateManageFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	return n
}

func (m *QueryValidateManageFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryOrderFeeCalcRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderFeeCalcRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderFeeCalcRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AskOrder == nil {
				m.AskOrder = &AskOrder{}
			}
			if err := m.AskOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BidOrder == nil {
				m.BidOrder = &BidOrder{}
			}
			if err := m.BidOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderFeeCalcResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderFeeCalcResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderFeeCalcResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationFeeOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationFeeOptions = append(m.CreationFeeOptions, types.Coin{})
			if err := m.CreationFeeOptions[len(m.CreationFeeOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementFlatFeeOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlementFlatFeeOptions = append(m.SettlementFlatFeeOptions, types.Coin{})
			if err := m.SettlementFlatFeeOptions[len(m.SettlementFlatFeeOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementRatioFeeOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlementRatioFeeOptions = append(m.SettlementRatioFeeOptions, types.Coin{})
			if err := m.SettlementRatioFeeOptions[len(m.SettlementRatioFeeOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMarketOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMarketOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMarketOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMarketOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMarketOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMarketOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateCreateMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateCreateMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateCreateMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateCreateMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateCreateMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateCreateMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateManageFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateManageFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateManageFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateManageFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateManageFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateManageFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
