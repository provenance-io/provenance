// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/exchange/v1/query.proto

package exchange

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryOrderFeeCalcRequest is a request message for the QueryOrderFeeCalc endpoint.
type QueryOrderFeeCalcRequest struct {
}

func (m *QueryOrderFeeCalcRequest) Reset()         { *m = QueryOrderFeeCalcRequest{} }
func (m *QueryOrderFeeCalcRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrderFeeCalcRequest) ProtoMessage()    {}
func (*QueryOrderFeeCalcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{0}
}
func (m *QueryOrderFeeCalcRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderFeeCalcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderFeeCalcRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderFeeCalcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderFeeCalcRequest.Merge(m, src)
}
func (m *QueryOrderFeeCalcRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderFeeCalcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderFeeCalcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderFeeCalcRequest proto.InternalMessageInfo

// QueryOrderFeeCalcResponse is a response message for the QueryOrderFeeCalc endpoint.
type QueryOrderFeeCalcResponse struct {
}

func (m *QueryOrderFeeCalcResponse) Reset()         { *m = QueryOrderFeeCalcResponse{} }
func (m *QueryOrderFeeCalcResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderFeeCalcResponse) ProtoMessage()    {}
func (*QueryOrderFeeCalcResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{1}
}
func (m *QueryOrderFeeCalcResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderFeeCalcResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderFeeCalcResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderFeeCalcResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderFeeCalcResponse.Merge(m, src)
}
func (m *QueryOrderFeeCalcResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderFeeCalcResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderFeeCalcResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderFeeCalcResponse proto.InternalMessageInfo

// QuerySettlementFeeCalcRequest is a request message for the QuerySettlementFeeCalc endpoint.
type QuerySettlementFeeCalcRequest struct {
}

func (m *QuerySettlementFeeCalcRequest) Reset()         { *m = QuerySettlementFeeCalcRequest{} }
func (m *QuerySettlementFeeCalcRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySettlementFeeCalcRequest) ProtoMessage()    {}
func (*QuerySettlementFeeCalcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{2}
}
func (m *QuerySettlementFeeCalcRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySettlementFeeCalcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySettlementFeeCalcRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySettlementFeeCalcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySettlementFeeCalcRequest.Merge(m, src)
}
func (m *QuerySettlementFeeCalcRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySettlementFeeCalcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySettlementFeeCalcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySettlementFeeCalcRequest proto.InternalMessageInfo

// QuerySettlementFeeCalcResponse is a response message for the QuerySettlementFeeCalc endpoint.
type QuerySettlementFeeCalcResponse struct {
}

func (m *QuerySettlementFeeCalcResponse) Reset()         { *m = QuerySettlementFeeCalcResponse{} }
func (m *QuerySettlementFeeCalcResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySettlementFeeCalcResponse) ProtoMessage()    {}
func (*QuerySettlementFeeCalcResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{3}
}
func (m *QuerySettlementFeeCalcResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySettlementFeeCalcResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySettlementFeeCalcResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySettlementFeeCalcResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySettlementFeeCalcResponse.Merge(m, src)
}
func (m *QuerySettlementFeeCalcResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySettlementFeeCalcResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySettlementFeeCalcResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySettlementFeeCalcResponse proto.InternalMessageInfo

// QueryGetOrderRequest is a request message for the QueryGetOrder endpoint.
type QueryGetOrderRequest struct {
	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *QueryGetOrderRequest) Reset()         { *m = QueryGetOrderRequest{} }
func (m *QueryGetOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderRequest) ProtoMessage()    {}
func (*QueryGetOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{4}
}
func (m *QueryGetOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderRequest.Merge(m, src)
}
func (m *QueryGetOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderRequest proto.InternalMessageInfo

func (m *QueryGetOrderRequest) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

// QueryGetOrderResponse is a response message for the QueryGetOrder endpoint.
type QueryGetOrderResponse struct {
}

func (m *QueryGetOrderResponse) Reset()         { *m = QueryGetOrderResponse{} }
func (m *QueryGetOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderResponse) ProtoMessage()    {}
func (*QueryGetOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{5}
}
func (m *QueryGetOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderResponse.Merge(m, src)
}
func (m *QueryGetOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderResponse proto.InternalMessageInfo

// QueryGetMarketOrdersRequest is a request message for the QueryGetMarketOrders endpoint.
type QueryGetMarketOrdersRequest struct {
	MarketId uint32 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryGetMarketOrdersRequest) Reset()         { *m = QueryGetMarketOrdersRequest{} }
func (m *QueryGetMarketOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMarketOrdersRequest) ProtoMessage()    {}
func (*QueryGetMarketOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{6}
}
func (m *QueryGetMarketOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMarketOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMarketOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMarketOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMarketOrdersRequest.Merge(m, src)
}
func (m *QueryGetMarketOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMarketOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMarketOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMarketOrdersRequest proto.InternalMessageInfo

func (m *QueryGetMarketOrdersRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

// QueryGetMarketOrdersResponse is a response message for the QueryGetMarketOrders endpoint.
type QueryGetMarketOrdersResponse struct {
}

func (m *QueryGetMarketOrdersResponse) Reset()         { *m = QueryGetMarketOrdersResponse{} }
func (m *QueryGetMarketOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMarketOrdersResponse) ProtoMessage()    {}
func (*QueryGetMarketOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{7}
}
func (m *QueryGetMarketOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMarketOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMarketOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMarketOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMarketOrdersResponse.Merge(m, src)
}
func (m *QueryGetMarketOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMarketOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMarketOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMarketOrdersResponse proto.InternalMessageInfo

// QueryGetAddressOrdersRequest is a request message for the QueryGetAddressOrders endpoint.
type QueryGetAddressOrdersRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetAddressOrdersRequest) Reset()         { *m = QueryGetAddressOrdersRequest{} }
func (m *QueryGetAddressOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressOrdersRequest) ProtoMessage()    {}
func (*QueryGetAddressOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{8}
}
func (m *QueryGetAddressOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressOrdersRequest.Merge(m, src)
}
func (m *QueryGetAddressOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressOrdersRequest proto.InternalMessageInfo

func (m *QueryGetAddressOrdersRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryGetAddressOrdersResponse is a response message for the QueryGetAddressOrders endpoint.
type QueryGetAddressOrdersResponse struct {
}

func (m *QueryGetAddressOrdersResponse) Reset()         { *m = QueryGetAddressOrdersResponse{} }
func (m *QueryGetAddressOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressOrdersResponse) ProtoMessage()    {}
func (*QueryGetAddressOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{9}
}
func (m *QueryGetAddressOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressOrdersResponse.Merge(m, src)
}
func (m *QueryGetAddressOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressOrdersResponse proto.InternalMessageInfo

// QueryGetAllOrdersRequest is a request message for the QueryGetAllOrders endpoint.
type QueryGetAllOrdersRequest struct {
}

func (m *QueryGetAllOrdersRequest) Reset()         { *m = QueryGetAllOrdersRequest{} }
func (m *QueryGetAllOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllOrdersRequest) ProtoMessage()    {}
func (*QueryGetAllOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{10}
}
func (m *QueryGetAllOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllOrdersRequest.Merge(m, src)
}
func (m *QueryGetAllOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllOrdersRequest proto.InternalMessageInfo

// QueryGetAllOrdersResponse is a response message for the QueryGetAllOrders endpoint.
type QueryGetAllOrdersResponse struct {
}

func (m *QueryGetAllOrdersResponse) Reset()         { *m = QueryGetAllOrdersResponse{} }
func (m *QueryGetAllOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllOrdersResponse) ProtoMessage()    {}
func (*QueryGetAllOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{11}
}
func (m *QueryGetAllOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllOrdersResponse.Merge(m, src)
}
func (m *QueryGetAllOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllOrdersResponse proto.InternalMessageInfo

// QueryMarketInfoRequest is a request message for the QueryMarketInfo endpoint.
type QueryMarketInfoRequest struct {
}

func (m *QueryMarketInfoRequest) Reset()         { *m = QueryMarketInfoRequest{} }
func (m *QueryMarketInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMarketInfoRequest) ProtoMessage()    {}
func (*QueryMarketInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{12}
}
func (m *QueryMarketInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketInfoRequest.Merge(m, src)
}
func (m *QueryMarketInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketInfoRequest proto.InternalMessageInfo

// QueryMarketInfoResponse is a response message for the QueryMarketInfo endpoint.
type QueryMarketInfoResponse struct {
}

func (m *QueryMarketInfoResponse) Reset()         { *m = QueryMarketInfoResponse{} }
func (m *QueryMarketInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMarketInfoResponse) ProtoMessage()    {}
func (*QueryMarketInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{13}
}
func (m *QueryMarketInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketInfoResponse.Merge(m, src)
}
func (m *QueryMarketInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketInfoResponse proto.InternalMessageInfo

// QueryParamsRequest is a request message for the QueryParams endpoint.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{14}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is a response message for the QueryParams endpoint.
type QueryParamsResponse struct {
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{15}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

// QueryIsValidMarketRequest is a request message for the QueryIsValidMarket endpoint.
type QueryIsValidMarketRequest struct {
}

func (m *QueryIsValidMarketRequest) Reset()         { *m = QueryIsValidMarketRequest{} }
func (m *QueryIsValidMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsValidMarketRequest) ProtoMessage()    {}
func (*QueryIsValidMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{16}
}
func (m *QueryIsValidMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsValidMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsValidMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsValidMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsValidMarketRequest.Merge(m, src)
}
func (m *QueryIsValidMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsValidMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsValidMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsValidMarketRequest proto.InternalMessageInfo

// QueryIsValidMarketResponse is a response message for the QueryIsValidMarket endpoint.
type QueryIsValidMarketResponse struct {
}

func (m *QueryIsValidMarketResponse) Reset()         { *m = QueryIsValidMarketResponse{} }
func (m *QueryIsValidMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsValidMarketResponse) ProtoMessage()    {}
func (*QueryIsValidMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00949b75b1c10bfe, []int{17}
}
func (m *QueryIsValidMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsValidMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsValidMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsValidMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsValidMarketResponse.Merge(m, src)
}
func (m *QueryIsValidMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsValidMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsValidMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsValidMarketResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryOrderFeeCalcRequest)(nil), "provenance.exchange.v1.QueryOrderFeeCalcRequest")
	proto.RegisterType((*QueryOrderFeeCalcResponse)(nil), "provenance.exchange.v1.QueryOrderFeeCalcResponse")
	proto.RegisterType((*QuerySettlementFeeCalcRequest)(nil), "provenance.exchange.v1.QuerySettlementFeeCalcRequest")
	proto.RegisterType((*QuerySettlementFeeCalcResponse)(nil), "provenance.exchange.v1.QuerySettlementFeeCalcResponse")
	proto.RegisterType((*QueryGetOrderRequest)(nil), "provenance.exchange.v1.QueryGetOrderRequest")
	proto.RegisterType((*QueryGetOrderResponse)(nil), "provenance.exchange.v1.QueryGetOrderResponse")
	proto.RegisterType((*QueryGetMarketOrdersRequest)(nil), "provenance.exchange.v1.QueryGetMarketOrdersRequest")
	proto.RegisterType((*QueryGetMarketOrdersResponse)(nil), "provenance.exchange.v1.QueryGetMarketOrdersResponse")
	proto.RegisterType((*QueryGetAddressOrdersRequest)(nil), "provenance.exchange.v1.QueryGetAddressOrdersRequest")
	proto.RegisterType((*QueryGetAddressOrdersResponse)(nil), "provenance.exchange.v1.QueryGetAddressOrdersResponse")
	proto.RegisterType((*QueryGetAllOrdersRequest)(nil), "provenance.exchange.v1.QueryGetAllOrdersRequest")
	proto.RegisterType((*QueryGetAllOrdersResponse)(nil), "provenance.exchange.v1.QueryGetAllOrdersResponse")
	proto.RegisterType((*QueryMarketInfoRequest)(nil), "provenance.exchange.v1.QueryMarketInfoRequest")
	proto.RegisterType((*QueryMarketInfoResponse)(nil), "provenance.exchange.v1.QueryMarketInfoResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "provenance.exchange.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "provenance.exchange.v1.QueryParamsResponse")
	proto.RegisterType((*QueryIsValidMarketRequest)(nil), "provenance.exchange.v1.QueryIsValidMarketRequest")
	proto.RegisterType((*QueryIsValidMarketResponse)(nil), "provenance.exchange.v1.QueryIsValidMarketResponse")
}

func init() {
	proto.RegisterFile("provenance/exchange/v1/query.proto", fileDescriptor_00949b75b1c10bfe)
}

var fileDescriptor_00949b75b1c10bfe = []byte{
	// 729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0x66, 0x8c, 0x0a, 0x8c, 0x12, 0xe3, 0x93, 0x1f, 0xed, 0x82, 0x2b, 0x59, 0x0d, 0x22, 0xca,
	0x0e, 0x05, 0x31, 0xd1, 0x9b, 0x98, 0x68, 0x7a, 0x30, 0x60, 0x89, 0x1e, 0xb8, 0x90, 0xa1, 0x3b,
	0x94, 0x8d, 0xdb, 0x9d, 0xb2, 0xb3, 0x34, 0x18, 0xc2, 0xc5, 0x3f, 0xc0, 0x98, 0x78, 0x37, 0x1e,
	0x3c, 0x7a, 0x31, 0x31, 0xc6, 0x83, 0x7f, 0x80, 0xde, 0x88, 0x5e, 0x3c, 0x1a, 0xea, 0x1f, 0x62,
	0x3a, 0x3b, 0xdb, 0x76, 0xdb, 0xdd, 0x6d, 0xf7, 0xb8, 0xf3, 0xbe, 0xef, 0x7d, 0x5f, 0x67, 0xde,
	0xfb, 0x52, 0x6c, 0xd4, 0x3c, 0x5e, 0x67, 0x2e, 0x75, 0xcb, 0x8c, 0xb0, 0xc3, 0xf2, 0x1e, 0x75,
	0x2b, 0x8c, 0xd4, 0x0b, 0x64, 0xff, 0x80, 0x79, 0xaf, 0xcc, 0x9a, 0xc7, 0x7d, 0x0e, 0x93, 0x6d,
	0x8c, 0x19, 0x62, 0xcc, 0x7a, 0x41, 0xcb, 0x97, 0xb9, 0xa8, 0x72, 0xb1, 0x2d, 0x51, 0x24, 0xf8,
	0x08, 0x28, 0xda, 0x4c, 0x85, 0xf3, 0x8a, 0xc3, 0x08, 0xad, 0xd9, 0x84, 0xba, 0x2e, 0xf7, 0xa9,
	0x6f, 0x73, 0x57, 0x55, 0x0d, 0x0d, 0xe7, 0x9e, 0x35, 0xfb, 0xaf, 0x7b, 0x16, 0xf3, 0x1e, 0x33,
	0xf6, 0x88, 0x3a, 0xe5, 0x12, 0xdb, 0x3f, 0x60, 0xc2, 0x37, 0xa6, 0x71, 0x3e, 0xa6, 0x26, 0x6a,
	0xdc, 0x15, 0xcc, 0xb8, 0x86, 0xaf, 0xca, 0xe2, 0x26, 0xf3, 0x7d, 0x87, 0x55, 0x99, 0xeb, 0x77,
	0xb1, 0x67, 0xb1, 0x9e, 0x04, 0x50, 0x2d, 0x0a, 0x78, 0x5c, 0x22, 0x9e, 0x30, 0x5f, 0x4a, 0x28,
	0x26, 0xe4, 0xf1, 0x08, 0x6f, 0x7e, 0x6f, 0xdb, 0x56, 0x0e, 0xcd, 0xa2, 0xf9, 0xb3, 0xa5, 0x61,
	0xf9, 0x5d, 0xb4, 0x8c, 0x29, 0x3c, 0xd1, 0x45, 0x51, 0xbd, 0x1e, 0xe0, 0xe9, 0xb0, 0xf0, 0x94,
	0x7a, 0x2f, 0x55, 0x59, 0x84, 0x2d, 0xa7, 0xf1, 0x68, 0x55, 0x1e, 0x87, 0x3d, 0xc7, 0x4a, 0x23,
	0xc1, 0x41, 0xd1, 0x32, 0x74, 0x3c, 0x13, 0xcf, 0x55, 0xbd, 0x4b, 0xed, 0xfa, 0x43, 0xcb, 0xf2,
	0x98, 0x10, 0xd1, 0xe6, 0xcb, 0x78, 0x98, 0x06, 0xe7, 0xb2, 0xf5, 0xe8, 0x5a, 0xee, 0xd7, 0x97,
	0xc5, 0x71, 0xf5, 0x08, 0x8a, 0xb1, 0xe9, 0x7b, 0xb6, 0x5b, 0x29, 0x85, 0xc0, 0xd6, 0xf5, 0xf5,
	0xf6, 0x54, 0xa2, 0xe1, 0xc3, 0x34, 0x01, 0x8e, 0x13, 0x11, 0x6c, 0x3d, 0x4c, 0xb4, 0xa6, 0x88,
	0x39, 0x3c, 0x29, 0x8b, 0xc1, 0x4f, 0x29, 0xba, 0xbb, 0x3c, 0xa4, 0xe5, 0xf1, 0x54, 0x4f, 0x45,
	0x91, 0xc6, 0x31, 0xc8, 0xd2, 0x06, 0xf5, 0x68, 0xb5, 0xa5, 0x33, 0x81, 0xaf, 0x44, 0x4e, 0x15,
	0x38, 0x94, 0x2f, 0x8a, 0x17, 0xd4, 0xb1, 0xad, 0xa0, 0x5d, 0xc8, 0x99, 0xc1, 0x5a, 0x5c, 0x31,
	0xa0, 0x2e, 0x7f, 0xbe, 0x88, 0xcf, 0xc9, 0x32, 0x7c, 0x44, 0xf8, 0x72, 0xcf, 0x74, 0xc1, 0x92,
	0x19, 0x3f, 0xe0, 0x66, 0xd2, 0x90, 0x6a, 0x85, 0x0c, 0x0c, 0xe5, 0x7f, 0xe1, 0xf5, 0xef, 0x7f,
	0xef, 0xce, 0xdc, 0x00, 0x83, 0x24, 0x6c, 0xdc, 0x2e, 0x63, 0x82, 0xc8, 0x91, 0x83, 0x6f, 0x48,
	0x5d, 0x67, 0xcf, 0x18, 0xc3, 0x6a, 0xaa, 0x72, 0xd2, 0x5e, 0x68, 0xf7, 0xb2, 0xd2, 0x94, 0x6b,
	0x22, 0x5d, 0xdf, 0x82, 0x9b, 0xa9, 0xae, 0x45, 0x8b, 0x0f, 0xef, 0x11, 0x1e, 0x8b, 0x2c, 0x0b,
	0xdc, 0x49, 0x95, 0xee, 0x5a, 0x43, 0x6d, 0x71, 0x40, 0xb4, 0xf2, 0xb7, 0x24, 0xfd, 0x2d, 0xc0,
	0x7c, 0x92, 0x3f, 0x79, 0xa1, 0xe4, 0x28, 0x5c, 0xed, 0x63, 0xf8, 0x8e, 0xda, 0x01, 0xd0, 0xb9,
	0x78, 0xb0, 0xd2, 0x4f, 0x39, 0x66, 0xc5, 0xb5, 0xbb, 0xd9, 0x48, 0xca, 0xf5, 0x7d, 0xe9, 0x7a,
	0x05, 0x0a, 0x49, 0xae, 0x83, 0x94, 0x20, 0x47, 0xad, 0xf8, 0x38, 0x0e, 0x7e, 0x88, 0x80, 0xaf,
	0xa8, 0x1d, 0x46, 0x91, 0x1d, 0x86, 0xbe, 0x56, 0xe2, 0x62, 0x44, 0x5b, 0xcd, 0xc8, 0xca, 0x74,
	0xef, 0x82, 0x1c, 0xa9, 0xe8, 0x39, 0x86, 0x0f, 0xe1, 0xea, 0x75, 0xe6, 0x47, 0x9f, 0xd5, 0x8b,
	0x89, 0xa1, 0x3e, 0xab, 0x17, 0x1b, 0x4e, 0x73, 0xd2, 0xec, 0x2c, 0xe8, 0xe9, 0x66, 0xe1, 0x27,
	0xc2, 0x97, 0xba, 0xb2, 0x0a, 0xcc, 0x54, 0xb9, 0x9e, 0xb8, 0xd3, 0xc8, 0xc0, 0x78, 0x65, 0xee,
	0xb9, 0x34, 0xb7, 0x0e, 0xd7, 0xfb, 0xcc, 0x82, 0xed, 0xee, 0xf2, 0xad, 0x79, 0x98, 0xeb, 0x03,
	0xb3, 0x98, 0x4f, 0x6d, 0x47, 0xc0, 0x1b, 0x84, 0x2f, 0x74, 0xc4, 0x28, 0x2c, 0xa4, 0xfa, 0x8a,
	0x24, 0xb0, 0x76, 0x7b, 0x20, 0xec, 0xa0, 0x97, 0x5b, 0x0b, 0x0c, 0x7c, 0x42, 0x2a, 0xed, 0x23,
	0x19, 0x0d, 0xe9, 0xcf, 0x19, 0x17, 0xf6, 0xda, 0x72, 0x16, 0xca, 0xa0, 0x39, 0xa6, 0xae, 0xaf,
	0xde, 0xe4, 0x52, 0x9f, 0xad, 0xb1, 0x1f, 0xa7, 0x3a, 0x3a, 0x39, 0xd5, 0xd1, 0xdf, 0x53, 0x1d,
	0xbd, 0x6d, 0xe8, 0x43, 0x27, 0x0d, 0x7d, 0xe8, 0x4f, 0x43, 0x1f, 0xc2, 0x79, 0x9b, 0x27, 0x18,
	0xd8, 0x40, 0x5b, 0x66, 0xc5, 0xf6, 0xf7, 0x0e, 0x76, 0xcc, 0x32, 0xaf, 0x76, 0x28, 0x2d, 0xda,
	0xbc, 0x53, 0xf7, 0xb0, 0xa5, 0xbc, 0x73, 0x5e, 0xfe, 0x21, 0x5a, 0xf9, 0x1f, 0x00, 0x00, 0xff,
	0xff, 0xae, 0xe1, 0xd2, 0x33, 0x87, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// QueryOrderFeeCalc calculates the fees that will be associated with the provided order.
	QueryOrderFeeCalc(ctx context.Context, in *QueryOrderFeeCalcRequest, opts ...grpc.CallOption) (*QueryOrderFeeCalcResponse, error)
	// QuerySettlementFeeCalc calculates the fees that will be associated with the provided settlement.
	QuerySettlementFeeCalc(ctx context.Context, in *QuerySettlementFeeCalcRequest, opts ...grpc.CallOption) (*QuerySettlementFeeCalcResponse, error)
	// QueryGetOrder looks up an order by id.
	QueryGetOrder(ctx context.Context, in *QueryGetOrderRequest, opts ...grpc.CallOption) (*QueryGetOrderResponse, error)
	// QueryGetMarketOrders looks up the orders in a market.
	QueryGetMarketOrders(ctx context.Context, in *QueryGetMarketOrdersRequest, opts ...grpc.CallOption) (*QueryGetMarketOrdersResponse, error)
	// QueryGetAddressOrders looks up the orders from the provided address.
	QueryGetAddressOrders(ctx context.Context, in *QueryGetAddressOrdersRequest, opts ...grpc.CallOption) (*QueryGetAddressOrdersResponse, error)
	// QueryGetAllOrders gets all orders in the exchange module.
	QueryGetAllOrders(ctx context.Context, in *QueryGetAllOrdersRequest, opts ...grpc.CallOption) (*QueryGetAllOrdersResponse, error)
	// QueryMarketInfo returns the information/details about a market.
	QueryMarketInfo(ctx context.Context, in *QueryMarketInfoRequest, opts ...grpc.CallOption) (*QueryMarketInfoResponse, error)
	// QueryParams returns the exchange module parameters.
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// QueryIsValidMarket checks the provided market and returns any errors that would be encountered trying to create it.
	QueryIsValidMarket(ctx context.Context, in *QueryIsValidMarketRequest, opts ...grpc.CallOption) (*QueryIsValidMarketResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryOrderFeeCalc(ctx context.Context, in *QueryOrderFeeCalcRequest, opts ...grpc.CallOption) (*QueryOrderFeeCalcResponse, error) {
	out := new(QueryOrderFeeCalcResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryOrderFeeCalc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySettlementFeeCalc(ctx context.Context, in *QuerySettlementFeeCalcRequest, opts ...grpc.CallOption) (*QuerySettlementFeeCalcResponse, error) {
	out := new(QuerySettlementFeeCalcResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QuerySettlementFeeCalc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetOrder(ctx context.Context, in *QueryGetOrderRequest, opts ...grpc.CallOption) (*QueryGetOrderResponse, error) {
	out := new(QueryGetOrderResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryGetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetMarketOrders(ctx context.Context, in *QueryGetMarketOrdersRequest, opts ...grpc.CallOption) (*QueryGetMarketOrdersResponse, error) {
	out := new(QueryGetMarketOrdersResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryGetMarketOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetAddressOrders(ctx context.Context, in *QueryGetAddressOrdersRequest, opts ...grpc.CallOption) (*QueryGetAddressOrdersResponse, error) {
	out := new(QueryGetAddressOrdersResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryGetAddressOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetAllOrders(ctx context.Context, in *QueryGetAllOrdersRequest, opts ...grpc.CallOption) (*QueryGetAllOrdersResponse, error) {
	out := new(QueryGetAllOrdersResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryGetAllOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryMarketInfo(ctx context.Context, in *QueryMarketInfoRequest, opts ...grpc.CallOption) (*QueryMarketInfoResponse, error) {
	out := new(QueryMarketInfoResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryMarketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryIsValidMarket(ctx context.Context, in *QueryIsValidMarketRequest, opts ...grpc.CallOption) (*QueryIsValidMarketResponse, error) {
	out := new(QueryIsValidMarketResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Query/QueryIsValidMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// QueryOrderFeeCalc calculates the fees that will be associated with the provided order.
	QueryOrderFeeCalc(context.Context, *QueryOrderFeeCalcRequest) (*QueryOrderFeeCalcResponse, error)
	// QuerySettlementFeeCalc calculates the fees that will be associated with the provided settlement.
	QuerySettlementFeeCalc(context.Context, *QuerySettlementFeeCalcRequest) (*QuerySettlementFeeCalcResponse, error)
	// QueryGetOrder looks up an order by id.
	QueryGetOrder(context.Context, *QueryGetOrderRequest) (*QueryGetOrderResponse, error)
	// QueryGetMarketOrders looks up the orders in a market.
	QueryGetMarketOrders(context.Context, *QueryGetMarketOrdersRequest) (*QueryGetMarketOrdersResponse, error)
	// QueryGetAddressOrders looks up the orders from the provided address.
	QueryGetAddressOrders(context.Context, *QueryGetAddressOrdersRequest) (*QueryGetAddressOrdersResponse, error)
	// QueryGetAllOrders gets all orders in the exchange module.
	QueryGetAllOrders(context.Context, *QueryGetAllOrdersRequest) (*QueryGetAllOrdersResponse, error)
	// QueryMarketInfo returns the information/details about a market.
	QueryMarketInfo(context.Context, *QueryMarketInfoRequest) (*QueryMarketInfoResponse, error)
	// QueryParams returns the exchange module parameters.
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// QueryIsValidMarket checks the provided market and returns any errors that would be encountered trying to create it.
	QueryIsValidMarket(context.Context, *QueryIsValidMarketRequest) (*QueryIsValidMarketResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryOrderFeeCalc(ctx context.Context, req *QueryOrderFeeCalcRequest) (*QueryOrderFeeCalcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderFeeCalc not implemented")
}
func (*UnimplementedQueryServer) QuerySettlementFeeCalc(ctx context.Context, req *QuerySettlementFeeCalcRequest) (*QuerySettlementFeeCalcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySettlementFeeCalc not implemented")
}
func (*UnimplementedQueryServer) QueryGetOrder(ctx context.Context, req *QueryGetOrderRequest) (*QueryGetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetOrder not implemented")
}
func (*UnimplementedQueryServer) QueryGetMarketOrders(ctx context.Context, req *QueryGetMarketOrdersRequest) (*QueryGetMarketOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetMarketOrders not implemented")
}
func (*UnimplementedQueryServer) QueryGetAddressOrders(ctx context.Context, req *QueryGetAddressOrdersRequest) (*QueryGetAddressOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetAddressOrders not implemented")
}
func (*UnimplementedQueryServer) QueryGetAllOrders(ctx context.Context, req *QueryGetAllOrdersRequest) (*QueryGetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetAllOrders not implemented")
}
func (*UnimplementedQueryServer) QueryMarketInfo(ctx context.Context, req *QueryMarketInfoRequest) (*QueryMarketInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMarketInfo not implemented")
}
func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServer) QueryIsValidMarket(ctx context.Context, req *QueryIsValidMarketRequest) (*QueryIsValidMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIsValidMarket not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryOrderFeeCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderFeeCalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOrderFeeCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryOrderFeeCalc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOrderFeeCalc(ctx, req.(*QueryOrderFeeCalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySettlementFeeCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySettlementFeeCalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySettlementFeeCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QuerySettlementFeeCalc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySettlementFeeCalc(ctx, req.(*QuerySettlementFeeCalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryGetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetOrder(ctx, req.(*QueryGetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetMarketOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMarketOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetMarketOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryGetMarketOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetMarketOrders(ctx, req.(*QueryGetMarketOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetAddressOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAddressOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetAddressOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryGetAddressOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetAddressOrders(ctx, req.(*QueryGetAddressOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryGetAllOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetAllOrders(ctx, req.(*QueryGetAllOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryMarketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryMarketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryMarketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryMarketInfo(ctx, req.(*QueryMarketInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryIsValidMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsValidMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryIsValidMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Query/QueryIsValidMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryIsValidMarket(ctx, req.(*QueryIsValidMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.exchange.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryOrderFeeCalc",
			Handler:    _Query_QueryOrderFeeCalc_Handler,
		},
		{
			MethodName: "QuerySettlementFeeCalc",
			Handler:    _Query_QuerySettlementFeeCalc_Handler,
		},
		{
			MethodName: "QueryGetOrder",
			Handler:    _Query_QueryGetOrder_Handler,
		},
		{
			MethodName: "QueryGetMarketOrders",
			Handler:    _Query_QueryGetMarketOrders_Handler,
		},
		{
			MethodName: "QueryGetAddressOrders",
			Handler:    _Query_QueryGetAddressOrders_Handler,
		},
		{
			MethodName: "QueryGetAllOrders",
			Handler:    _Query_QueryGetAllOrders_Handler,
		},
		{
			MethodName: "QueryMarketInfo",
			Handler:    _Query_QueryMarketInfo_Handler,
		},
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryIsValidMarket",
			Handler:    _Query_QueryIsValidMarket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/exchange/v1/query.proto",
}

func (m *QueryOrderFeeCalcRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderFeeCalcRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderFeeCalcRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOrderFeeCalcResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderFeeCalcResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderFeeCalcResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySettlementFeeCalcRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySettlementFeeCalcRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySettlementFeeCalcRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySettlementFeeCalcResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySettlementFeeCalcResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySettlementFeeCalcResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetMarketOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMarketOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMarketOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMarketOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMarketOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMarketOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAllOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAllOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMarketInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMarketInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryIsValidMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsValidMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsValidMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryIsValidMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsValidMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsValidMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryOrderFeeCalcRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOrderFeeCalcResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySettlementFeeCalcRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySettlementFeeCalcResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovQuery(uint64(m.OrderId))
	}
	return n
}

func (m *QueryGetOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetMarketOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	return n
}

func (m *QueryGetMarketOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAddressOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAddressOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAllOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAllOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMarketInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMarketInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryIsValidMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryIsValidMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryOrderFeeCalcRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderFeeCalcRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderFeeCalcRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderFeeCalcResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderFeeCalcResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderFeeCalcResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySettlementFeeCalcRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySettlementFeeCalcRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySettlementFeeCalcRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySettlementFeeCalcResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySettlementFeeCalcResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySettlementFeeCalcResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMarketOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMarketOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMarketOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMarketOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMarketOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMarketOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsValidMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsValidMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsValidMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsValidMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsValidMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsValidMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
